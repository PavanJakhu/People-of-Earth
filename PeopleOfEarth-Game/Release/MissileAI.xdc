<?xml version="1.0"?><doc>
<members>
<member name="M:_memccpy(System.Void*,System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxsimpletypes.h" line="200">
@} 
files to always include 
</member>
<member name="T:physx.PxEMPTY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\px.h" line="50">
enum for empty constructor tag
</member>
<member name="T:physx.PxAllocatorCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxallocatorcallback.h" line="27">
\brief Abstract base class for an application defined memory allocator that can be used by the Px library.

\note The SDK state should not be modified from within any allocation/free function.

<b>Threading:</b> All methods of this class should be thread safe as it can be called from the user thread 
or the physics processing thread(s).

</member>
<member name="M:physx.PxAllocatorCallback.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxallocatorcallback.h" line="40">
\brief destructor

</member>
<member name="M:physx.PxAllocatorCallback.allocate(System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxallocatorcallback.h" line="45">
	\brief Allocates size bytes of memory, which must be 16-byte aligned.

	This method should never return NULL.  If you run out of memory, then
	you should terminate the app or take some other appropriate action.

	<b>Threading:</b> This function should be thread safe as it can be called in the context of the user thread 
	and physics processing thread(s).

	\param size			Number of bytes to allocate.
	\param typeName		Name of the datatype that is being allocated
	\param filename		The source file which allocated the memory
	\param line			The source line which allocated the memory
	\return				The allocated block of memory.

</member>
<member name="M:physx.PxAllocatorCallback.deallocate(System.Void*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxallocatorcallback.h" line="62">
	\brief Frees memory previously allocated by allocate().

	<b>Threading:</b> This function should be thread safe as it can be called in the context of the user thread 
	and physics processing thread(s).

	\param ptr Memory to free.

</member>
<member name="T:_exception" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbitanddata.h" line="52">
@} 
\addtogroup foundation
@{

\addtogroup foundation
  @{

\addtogroup foundation
@{

\addtogroup foundation
@{

\addtogroup foundation
@{

</member>
<member name="T:physx.PxZERO" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="42">
enum for zero constructor tag for vectors and matrices 
</member>
<member name="T:physx.PxIDENTITY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="45">
enum for identity constructor flag for quaternions, transforms, and matrices 
</member>
<member name="M:physx.PxAbs(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="85">
\brief abs returns the absolute value of its argument. 

</member>
<member name="M:physx.PxAbs(System.Double)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="92">
\brief abs returns the absolute value of its argument. 

</member>
<member name="M:physx.PxAbs(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="97">
\brief abs returns the absolute value of its argument. 

</member>
<member name="M:physx.PxTan(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="134">
\brief Tangent of an angle.
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxTan(System.Double)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="140">
\brief Tangent of an angle.
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAsin(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="146">
\brief Arcsine.
Returns angle between -PI/2 and PI/2 in radians
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAsin(System.Double)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="153">
\brief Arcsine.
Returns angle between -PI/2 and PI/2 in radians
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAcos(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="160">
\brief Arccosine.
Returns angle between 0 and PI in radians
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAcos(System.Double)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="167">
\brief Arccosine.
Returns angle between 0 and PI in radians
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAtan(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="174">
\brief ArcTangent.
Returns angle between -PI/2 and PI/2 in radians
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAtan(System.Double)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="181">
\brief ArcTangent.
Returns angle between -PI/2 and PI/2 in radians
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAtan2(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="188">
\brief Arctangent of (x/y) with correct sign.
Returns angle between -PI and PI in radians
<b>Unit:</b> Radians

</member>
<member name="M:physx.PxAtan2(System.Double,System.Double)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmath.h" line="195">
\brief Arctangent of (x/y) with correct sign.
Returns angle between -PI and PI in radians
<b>Unit:</b> Radians

</member>
<member name="T:physx.PxVec3" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="29">
\brief 3 Element vector class.

This is a 3-dimensional vector class with public data members.

</member>
<member name="M:physx.PxVec3.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="38">
\brief default constructor leaves data uninitialized.

</member>
<member name="M:physx.PxVec3.#ctor(physx.PxZERO)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="43">
\brief zero constructor.

</member>
<member name="M:physx.PxVec3.#ctor(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="52">
	\brief Assigns scalar parameter to all elements.

	Useful to initialize to zero or one.

	\param[in] a Value to assign to elements.

</member>
<member name="M:physx.PxVec3.#ctor(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="61">
	\brief Initializes from 3 scalar parameters.

	\param[in] nx Value to initialize X component.
	\param[in] ny Value to initialize Y component.
	\param[in] nz Value to initialize Z component.

</member>
<member name="M:physx.PxVec3.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="70">
\brief Copy ctor.

</member>
<member name="M:physx.PxVec3.op_Assign(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="77">
\brief Assignment operator

</member>
<member name="M:physx.PxVec3.op_Subscript(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="82">
\brief element access

</member>
<member name="M:physx.PxVec3.op_Subscript(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="92">
\brief element access

</member>
<member name="M:physx.PxVec3.op_Subscript(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="102">
\brief element access

</member>
<member name="M:physx.PxVec3.op_Subscript(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="112">
\brief element access

</member>
<member name="M:physx.PxVec3.op_Equality(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="121">
\brief returns true if the two vectors are exactly equal.

</member>
<member name="M:physx.PxVec3.op_Inequality(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="126">
\brief returns true if the two vectors are not exactly equal.

</member>
<member name="M:physx.PxVec3.isZero" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="131">
\brief tests for exact zero vector

</member>
<member name="M:physx.PxVec3.isFinite" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="136">
\brief returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)

</member>
<member name="M:physx.PxVec3.isNormalized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="144">
\brief is normalized - used by API parameter validation

</member>
<member name="M:physx.PxVec3.magnitudeSquared" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="153">
	\brief returns the squared magnitude

	Avoids calling PxSqrt()!

</member>
<member name="M:physx.PxVec3.magnitude" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="160">
\brief returns the magnitude

</member>
<member name="M:physx.PxVec3.op_UnaryNegation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="165">
\brief negation

</member>
<member name="M:physx.PxVec3.op_Addition(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="173">
\brief vector addition

</member>
<member name="M:physx.PxVec3.op_Subtraction(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="178">
\brief vector difference

</member>
<member name="M:physx.PxVec3.op_Multiply(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="183">
\brief scalar post-multiplication

</member>
<member name="M:physx.PxVec3.op_Division(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="188">
\brief scalar division

</member>
<member name="M:physx.PxVec3.op_AdditionAssignment(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="197">
\brief vector addition

</member>
<member name="M:physx.PxVec3.op_SubtractionAssignment(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="208">
\brief vector difference

</member>
<member name="M:physx.PxVec3.op_MultiplicationAssignment(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="219">
\brief scalar multiplication

</member>
<member name="M:physx.PxVec3.op_DivisionAssignment(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="229">
\brief scalar division

</member>
<member name="M:physx.PxVec3.dot(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="241">
\brief returns the scalar product of this and other.

</member>
<member name="M:physx.PxVec3.cross(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="249">
\brief cross product

</member>
<member name="M:physx.PxVec3.getNormalized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="259">
return a unit vector 
</member>
<member name="M:physx.PxVec3.normalize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="267">
\brief normalizes the vector in place

</member>
<member name="M:physx.PxVec3.normalizeSafe" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="278">
\brief normalizes the vector in place. Does nothing if vector magnitude is under PX_NORMALIZATION_EPSILON.
Returns vector magnitude if &gt;= PX_NORMALIZATION_EPSILON and 0.0f otherwise.

</member>
<member name="M:physx.PxVec3.normalizeFast" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="291">
\brief normalizes the vector in place. Asserts if vector magnitude is under PX_NORMALIZATION_EPSILON.
returns vector magnitude.

</member>
<member name="M:physx.PxVec3.multiply(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="303">
\brief a[i] * b[i], for all i.

</member>
<member name="M:physx.PxVec3.minimum(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="311">
\brief element-wise minimum

</member>
<member name="M:physx.PxVec3.minElement" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="319">
\brief returns MIN(x, y, z);

</member>
<member name="M:physx.PxVec3.maximum(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="327">
\brief element-wise maximum

</member>
<member name="M:physx.PxVec3.maxElement" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="335">
\brief returns MAX(x, y, z);

</member>
<member name="M:physx.PxVec3.abs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec3.h" line="343">
\brief returns absolute values of components;

</member>
<member name="T:physx.PxQuat" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="28">
\brief This is a quaternion class. For more information on quaternion mathematics
consult a mathematics source on complex numbers.


</member>
<member name="M:physx.PxQuat.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="37">
\brief Default constructor, does not do any initialization.

</member>
<member name="M:physx.PxQuat.#ctor(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="50">
\brief Constructor from a scalar: sets the real part w to the scalar value, and the imaginary parts (x,y,z) to zero

</member>
<member name="M:physx.PxQuat.#ctor(System.Single,System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="58">
\brief Constructor.  Take note of the order of the elements!

</member>
<member name="M:physx.PxQuat.#ctor(System.Single,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="63">
	\brief Creates from angle-axis representation.

	Axis must be normalized!

	Angle is in radians!

	<b>Unit:</b> Radians

</member>
<member name="M:physx.PxQuat.#ctor(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="83">
\brief Copy ctor.

</member>
<member name="M:physx.PxQuat.#ctor(physx.PxMat33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="88">
	\brief Creates from orientation matrix.

	\param[in] m Rotation matrix to extract quaternion from.

</member>
<member name="M:physx.PxQuat.isFinite" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="95">
\brief returns true if all elements are finite (not NAN or INF, etc.)

</member>
<member name="M:physx.PxQuat.isUnit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="107">
\brief returns true if finite and magnitude is close to unit

</member>
<member name="M:physx.PxQuat.isSane" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="118">
\brief returns true if finite and magnitude is reasonably close to unit to allow for some accumulation of error vs isValid

</member>
<member name="M:physx.PxQuat.op_Equality(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="128">
\brief returns true if the two quaternions are exactly equal

</member>
<member name="M:physx.PxQuat.toRadiansAndUnitAxis(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="134">
\brief converts this quaternion to angle-axis representation

</member>
<member name="M:physx.PxQuat.getAngle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="156">
	\brief Gets the angle between this quat and the identity quaternion.

	<b>Unit:</b> Radians

</member>
<member name="M:physx.PxQuat.getAngle(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="167">
	\brief Gets the angle between this quat and the argument

	<b>Unit:</b> Radians

</member>
<member name="M:physx.PxQuat.magnitudeSquared" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="178">
\brief This is the squared 4D vector length, should be 1 for unit quaternions.

</member>
<member name="M:physx.PxQuat.dot(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="186">
\brief returns the scalar product of this and other.

</member>
<member name="M:physx.PxQuat.normalize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="207">
\brief maps to the closest unit quaternion.

</member>
<member name="M:physx.PxQuat.getBasisVector0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="243">
brief computes rotation of x-axis 
</member>
<member name="M:physx.PxQuat.getBasisVector1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="253">
brief computes rotation of y-axis 
</member>
<member name="M:physx.PxQuat.getBasisVector2" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="264">
brief computes rotation of z-axis 
</member>
<member name="M:physx.PxQuat.rotate(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="274">
rotates passed vec by this (assumed unitary)

</member>
<member name="M:physx.PxQuat.rotateInv(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="292">
inverse rotates passed vec by this (assumed unitary)

</member>
<member name="M:physx.PxQuat.op_Assign(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="310">
\brief Assignment operator

</member>
<member name="M:physx.PxQuat.op_Multiply(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="356">
quaternion multiplication 
</member>
<member name="M:physx.PxQuat.op_Addition(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="365">
quaternion addition 
</member>
<member name="M:physx.PxQuat.op_UnaryNegation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="371">
quaternion subtraction 
</member>
<member name="M:physx.PxQuat.createIdentity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="390">
\deprecated use PxQuat(PxIdentity) 
</member>
<member name="F:physx.PxQuat.x" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxquat.h" line="393">
the quaternion elements 
</member>
<member name="T:physx.PxPlane" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="29">
\brief Representation of a plane.

 Plane equation used: n.dot(v) + d = 0

</member>
<member name="M:physx.PxPlane.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="37">
\brief Constructor

</member>
<member name="M:physx.PxPlane.#ctor(System.Single,System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="44">
\brief Constructor from a normal and a distance

</member>
<member name="M:physx.PxPlane.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="53">
\brief Constructor from a normal and a distance

</member>
<member name="M:physx.PxPlane.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="63">
\brief Constructor from a point on the plane and a normal

</member>
<member name="M:physx.PxPlane.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="72">
\brief Constructor from three points

</member>
<member name="M:physx.PxPlane.op_Equality(physx.PxPlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="81">
\brief returns true if the two planes are exactly equal

</member>
<member name="M:physx.PxPlane.project(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="96">
\brief projects p into the plane

</member>
<member name="M:physx.PxPlane.pointInPlane" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="104">
\brief find an arbitrary point in the plane

</member>
<member name="M:physx.PxPlane.normalize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxplane.h" line="112">
\brief equivalent plane with unit normal

</member>
<member name="M:physx.PxTransform.op_Equality(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="78">
\brief returns true if the two transforms are exactly equal

</member>
<member name="M:physx.PxTransform.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="138">
\brief returns true if finite and q is a unit quaternion

</member>
<member name="M:physx.PxTransform.isSane" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="147">
\brief returns true if finite and quat magnitude is reasonably close to unit to allow for some accumulation of error vs isValid

</member>
<member name="M:physx.PxTransform.isFinite" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="157">
\brief returns true if all elems are finite (not NAN or INF, etc.)

</member>
<member name="M:physx.PxTransform.createIdentity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="174">
\deprecated
\brief deprecated - use PxTransform(PxIdentity)

</member>
<member name="M:physx.PxTransform.transform(physx.PxPlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="184">
\brief transform plane

</member>
<member name="M:physx.PxTransform.inverseTransform(physx.PxPlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="194">
\brief inverse-transform plane

</member>
<member name="M:physx.PxTransform.getNormalized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxtransform.h" line="205">
\brief return a normalized transform (i.e. one in which the quaternion has unit magnitude)

</member>
<member name="M:physx.PxMat33.op_Equality(physx.PxMat33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmat33.h" line="177">
\brief returns true if the two matrices are exactly equal

</member>
<!-- Discarding badly formed XML document comment for member 'T:physx.PxBounds3'. -->
<member name="M:physx.PxBounds3.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="45">
\brief Default constructor, not performing any initialization for performance reason.
\remark Use empty() function below to construct empty bounds.

</member>
<member name="M:physx.PxBounds3.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="51">
\brief Construct from two bounding points

</member>
<member name="M:physx.PxBounds3.empty" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="56">
\brief Return empty bounds. 

</member>
<member name="M:physx.PxBounds3.boundsOfPoints(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="61">
\brief returns the AABB containing v0 and v1.
\param v0 first point included in the AABB.
\param v1 second point included in the AABB.

</member>
<member name="M:physx.PxBounds3.centerExtents(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="68">
\brief returns the AABB from center and extents vectors.
\param center Center vector
\param extent Extents vector

</member>
<member name="M:physx.PxBounds3.basisExtent(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMat33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="75">
\brief Construct from center, extent, and (not necessarily orthogonal) basis

</member>
<member name="M:physx.PxBounds3.poseExtent(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="80">
\brief Construct from pose and extent

</member>
<member name="M:physx.PxBounds3.transformSafe(physx.PxMat33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="85">
	\brief gets the transformed bounds of the passed AABB (resulting in a bigger AABB).

	This version is safe to call for empty bounds.

	\param[in] matrix Transform to apply, can contain scaling as well
	\param[in] bounds The bounds to transform.

</member>
<member name="M:physx.PxBounds3.transformFast(physx.PxMat33!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="95">
	\brief gets the transformed bounds of the passed AABB (resulting in a bigger AABB).

	Calling this method for empty bounds leads to undefined behavior. Use #transformSafe() instead.

	\param[in] matrix Transform to apply, can contain scaling as well
	\param[in] bounds The bounds to transform.

</member>
<member name="M:physx.PxBounds3.transformSafe(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="105">
	\brief gets the transformed bounds of the passed AABB (resulting in a bigger AABB).

	This version is safe to call for empty bounds.

	\param[in] transform Transform to apply, can contain scaling as well
	\param[in] bounds The bounds to transform.

</member>
<member name="M:physx.PxBounds3.transformFast(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="115">
	\brief gets the transformed bounds of the passed AABB (resulting in a bigger AABB).

	Calling this method for empty bounds leads to undefined behavior. Use #transformSafe() instead.

	\param[in] transform Transform to apply, can contain scaling as well
	\param[in] bounds The bounds to transform.

</member>
<member name="M:physx.PxBounds3.setEmpty" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="125">
\brief Sets empty to true

</member>
<member name="M:physx.PxBounds3.setMaximal" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="130">
\brief Sets the bounds to maximum size [-PX_MAX_BOUNDS_EXTENTS, PX_MAX_BOUNDS_EXTENTS].

</member>
<member name="M:physx.PxBounds3.include(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="135">
\brief expands the volume to include v
\param v Point to expand to.

</member>
<member name="M:physx.PxBounds3.include(physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="141">
\brief expands the volume to include b.
\param b Bounds to perform union with.

</member>
<member name="M:physx.PxBounds3.intersects(physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="149">
\brief indicates whether the intersection of this and b is empty or not.
\param b Bounds to test for intersection.

</member>
<member name="M:physx.PxBounds3.intersects1D(physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="155">
\brief computes the 1D-intersection between two AABBs, on a given axis.
\param	a		the other AABB
\param	axis	the axis (0, 1, 2)

</member>
<member name="M:physx.PxBounds3.contains(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="162">
\brief indicates if these bounds contain v.
\param v Point to test against bounds.

</member>
<member name="M:physx.PxBounds3.isInside(physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="168">
\brief	checks a box is inside another box.
\param	box		the other AABB

</member>
<member name="M:physx.PxBounds3.getCenter" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="174">
\brief returns the center of this axis aligned box.

</member>
<member name="M:physx.PxBounds3.getCenter(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="179">
\brief get component of the box's center along a given axis

</member>
<member name="M:physx.PxBounds3.getExtents(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="184">
\brief get component of the box's extents along a given axis

</member>
<member name="M:physx.PxBounds3.getDimensions" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="189">
\brief returns the dimensions (width/height/depth) of this axis aligned box.

</member>
<member name="M:physx.PxBounds3.getExtents" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="194">
\brief returns the extents, which are half of the width/height/depth.

</member>
<member name="M:physx.PxBounds3.scaleSafe(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="199">
	\brief scales the AABB.

	This version is safe to call for empty bounds.

	\param scale Factor to scale AABB by.

</member>
<member name="M:physx.PxBounds3.scaleFast(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="208">
	\brief scales the AABB.

	Calling this method for empty bounds leads to undefined behavior. Use #scaleSafe() instead.

	\param scale Factor to scale AABB by.

</member>
<member name="M:physx.PxBounds3.fattenSafe(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="217">
	fattens the AABB in all 3 dimensions by the given distance.

	This version is safe to call for empty bounds.

</member>
<member name="M:physx.PxBounds3.fattenFast(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="224">
	fattens the AABB in all 3 dimensions by the given distance. 

	Calling this method for empty bounds leads to undefined behavior. Use #fattenSafe() instead.

</member>
<member name="M:physx.PxBounds3.isFinite" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="231">
checks that the AABB values are not NaN

</member>
<member name="M:physx.PxBounds3.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbounds3.h" line="236">
checks that the AABB values describe a valid configuration.

</member>
<member name="T:physx.PxAllocationListener" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbroadcastingallocator.h" line="27">
\brief Abstract listener class that listens to allocation and deallocation events from the
	foundation memory system.
	
<b>Threading:</b> All methods of this class should be thread safe as it can be called from the user thread 
or the physics processing thread(s).

</member>
<member name="M:physx.PxAllocationListener.onAllocation(System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Void*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbroadcastingallocator.h" line="40">
\brief callback when memory is allocated. 
\param size Size of the allocation in bytes.
\param typeName Type this data is being allocated for.
\param filename File the allocation came from.
\param line the allocation came from.
\param allocatedMemory memory that will be returned from the allocation.

</member>
<member name="M:physx.PxAllocationListener.onDeallocation(System.Void*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbroadcastingallocator.h" line="50">
\brief callback when memory is deallocated.
\param allocatedMemory memory just before allocation.

</member>
<member name="T:physx.PxBroadcastingAllocator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbroadcastingallocator.h" line="57">
	\brief Abstract base class for an application defined memory allocator that allows an external listener
	to audit the memory allocations.

	<b>Threading:</b> Register/deregister are *not* threadsafe!!!
	You need to be sure multiple threads are using this allocator when you are adding
	new listeners.

</member>
<member name="M:physx.PxBroadcastingAllocator.registerAllocationListener(physx.PxAllocationListener*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbroadcastingallocator.h" line="71">
\brief Register an allocation listener.  This object will be notified whenever an
allocation happens.  

<b>Threading:</b>Not threadsafe if you are allocating and deallocating in another
thread using this allocator.

</member>
<member name="M:physx.PxBroadcastingAllocator.deregisterAllocationListener(physx.PxAllocationListener*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxbroadcastingallocator.h" line="79">
\brief Deregister an allocation listener.  This object will no longer receive
notifications upon allocation.

<b>Threading:</b>Not threadsafe if you are allocating and deallocating in another
thread using this allocator.

</member>
<member name="T:physx.PxErrorCode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxerrors.h" line="27">
\brief Error codes

These error codes are passed to #PxErrorCallback

@see PxErrorCallback

</member>
<member name="F:eINTERNAL_ERROR" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxerrors.h" line="56">
\brief The library failed for some reason.
		Possibly you have passed invalid values like NaNs, which are not checked for.

</member>
<member name="T:physx.PxErrorCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxerrorcallback.h" line="27">
\brief User defined interface class.  Used by the library to emit debug information.

\note The SDK state should not be modified from within any error reporting functions.

<b>Threading:</b> The SDK sequences its calls to the output stream using a mutex, so the class need not
be implemented in a thread-safe manner if the SDK is the only client.

</member>
<member name="M:physx.PxErrorCallback.reportError(physx.PxErrorCode.Enum,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxerrorcallback.h" line="41">
\brief Reports an error code.
\param code Error code, see #PxErrorCode
\param message Message to display.
\param file File error occured in.
\param line Line number error occured on.

</member>
<member name="T:physx.PxFoundation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="33">
\brief Foundation SDK singleton class.

You need to have an instance of this class to instance the higher level SDKs.

</member>
<member name="M:physx.PxFoundation.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="41">
	\brief Destroys the instance it is called on.

	The operation will fail, if there are still modules referencing the foundation object. Release all dependent modules prior
	to calling this method.

	@see PxCreateFoundation()

</member>
<member name="M:physx.PxFoundation.getErrorCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="51">
retrieves error callback

</member>
<member name="M:physx.PxFoundation.setErrorLevel(physx.PxErrorCode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="56">
Sets mask of errors to report.

</member>
<member name="M:physx.PxFoundation.getErrorLevel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="61">
Retrieves mask of errors to be reported.

</member>
<member name="M:physx.PxFoundation.getAllocator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="66">
retrieves the current allocator.

</member>
<member name="M:physx.PxFoundation.getAllocatorCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="71">
Retrieves the allocator this object was created with.

</member>
<member name="M:physx.PxFoundation.getReportAllocationNames" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="76">
Retrieves if allocation names are being passed to allocator callback.

</member>
<member name="M:physx.PxFoundation.setReportAllocationNames(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="81">
Set if allocation names are being passed to allocator callback.
\details Enabled by default in debug and checked build, disabled by default in profile and release build.

</member>
<member name="M:PxCreateFoundation(System.UInt32,physx.PxAllocatorCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxErrorCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="96">
\brief Creates an instance of the foundation class

The foundation class is needed to initialize higher level SDKs. There may be only one instance per process.
Calling this method after an instance has been created already will result in an error message and NULL will be returned.

\param version Version number we are expecting (should be PX_PHYSICS_VERSION)
\param allocator User supplied interface for allocating memory(see #PxAllocatorCallback)
\param errorCallback User supplied interface for reporting errors and displaying messages(see #PxErrorCallback)
\return Foundation instance on success, NULL if operation failed

@see PxFoundation

</member>
<member name="M:PxGetFoundation" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxfoundation.h" line="113">
\brief Retrieves the Foundation SDK after it has been created.

\note The behavior of this method is undefined if the foundation instance has not been created already.

@see PxCreateFoundation()

</member>
<member name="T:physx.PxInputStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="28">
\brief Input stream class for I/O.

The user needs to supply a PxInputStream implementation to a number of methods to allow the SDK to read data. 

</member>
<member name="M:physx.PxInputStream.read(System.Void*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="40">
	\brief read from the stream. The number of bytes read may be less than the number requested.

	\param[in] dest the destination address to which the data will be read
	\param[in] count the number of bytes requested

	\return the number of bytes read from the stream.

</member>
<member name="T:physx.PxInputData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="55">
\brief Input data class for I/O which provides random read access.

The user needs to supply a PxInputData implementation to a number of methods to allow the SDK to read data. 

</member>
<member name="M:physx.PxInputData.getLength" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="65">
	\brief return the length of the input data

	\return size in bytes of the input data

</member>
<member name="M:physx.PxInputData.seek(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="74">
\brief seek to the given offset from the start of the data. 

\param[in] offset the offset to seek to. 	If greater than the length of the data, this call is equivalent to seek(length);

</member>
<member name="M:physx.PxInputData.tell" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="82">
\brief return the current offset from the start of the data

\return the offset to seek to.

</member>
<member name="T:physx.PxOutputStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="93">
\brief Output stream class for I/O.

The user needs to supply a PxOutputStream implementation to a number of methods to allow the SDK to write data. 

</member>
<member name="M:physx.PxOutputStream.write(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxio.h" line="102">
	\brief write to the stream. The number of bytes written may be less than the number sent.

	\param[in] src the destination address from which the data will be written
	\param[in] count the number of bytes to be written

	\return the number of bytes written to the stream by this call.

</member>
<member name="M:physx.PxVec4.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="38">
\brief default constructor leaves data uninitialized.

</member>
<member name="M:physx.PxVec4.#ctor(physx.PxZERO)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="43">
\brief zero constructor.

</member>
<member name="M:physx.PxVec4.#ctor(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="51">
	\brief Assigns scalar parameter to all elements.

	Useful to initialize to zero or one.

	\param[in] a Value to assign to elements.

</member>
<member name="M:physx.PxVec4.#ctor(System.Single,System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="60">
	\brief Initializes from 3 scalar parameters.

	\param[in] nx Value to initialize X component.
	\param[in] ny Value to initialize Y component.
	\param[in] nz Value to initialize Z component.
	\param[in] nw Value to initialize W component.

</member>
<member name="M:physx.PxVec4.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="71">
	\brief Initializes from 3 scalar parameters.

	\param[in] v Value to initialize the X, Y, and Z components.
	\param[in] nw Value to initialize W component.

</member>
<member name="M:physx.PxVec4.#ctor(System.Single!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="80">
	\brief Initializes from an array of scalar parameters.

	\param[in] v Value to initialize with.

</member>
<member name="M:physx.PxVec4.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="87">
\brief Copy ctor.

</member>
<member name="M:physx.PxVec4.op_Assign(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="94">
\brief Assignment operator

</member>
<member name="M:physx.PxVec4.op_Subscript(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="99">
\brief element access

</member>
<member name="M:physx.PxVec4.op_Subscript(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="109">
\brief element access

</member>
<member name="M:physx.PxVec4.op_Subscript(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="119">
\brief element access

</member>
<member name="M:physx.PxVec4.op_Subscript(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="129">
\brief element access

</member>
<member name="M:physx.PxVec4.op_Equality(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="139">
\brief returns true if the two vectors are exactly equal.

</member>
<member name="M:physx.PxVec4.op_Inequality(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="144">
\brief returns true if the two vectors are not exactly equal.

</member>
<member name="M:physx.PxVec4.isZero" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="149">
\brief tests for exact zero vector

</member>
<member name="M:physx.PxVec4.isFinite" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="154">
\brief returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)

</member>
<member name="M:physx.PxVec4.isNormalized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="162">
\brief is normalized - used by API parameter validation

</member>
<member name="M:physx.PxVec4.magnitudeSquared" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="172">
	\brief returns the squared magnitude

	Avoids calling PxSqrt()!

</member>
<member name="M:physx.PxVec4.magnitude" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="179">
\brief returns the magnitude

</member>
<member name="M:physx.PxVec4.op_UnaryNegation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="184">
\brief negation

</member>
<member name="M:physx.PxVec4.op_Addition(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="192">
\brief vector addition

</member>
<member name="M:physx.PxVec4.op_Subtraction(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="197">
\brief vector difference

</member>
<member name="M:physx.PxVec4.op_Multiply(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="202">
\brief scalar post-multiplication

</member>
<member name="M:physx.PxVec4.op_Division(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="208">
\brief scalar division

</member>
<member name="M:physx.PxVec4.op_AdditionAssignment(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="217">
\brief vector addition

</member>
<member name="M:physx.PxVec4.op_SubtractionAssignment(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="229">
\brief vector difference

</member>
<member name="M:physx.PxVec4.op_MultiplicationAssignment(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="241">
\brief scalar multiplication

</member>
<member name="M:physx.PxVec4.op_DivisionAssignment(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="252">
\brief scalar division

</member>
<member name="M:physx.PxVec4.dot(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="265">
\brief returns the scalar product of this and other.

</member>
<member name="M:physx.PxVec4.getNormalized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="273">
return a unit vector 
</member>
<member name="M:physx.PxVec4.normalize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="282">
\brief normalizes the vector in place

</member>
<member name="M:physx.PxVec4.multiply(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="293">
\brief a[i] * b[i], for all i.

</member>
<member name="M:physx.PxVec4.minimum(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="301">
\brief element-wise minimum

</member>
<member name="M:physx.PxVec4.maximum(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="309">
\brief element-wise maximum

</member>
<member name="M:physx.PxVec4.setZero" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec4.h" line="322">
\brief set vector elements to zero

</member>
<member name="M:physx.PxMat44.op_Equality(physx.PxMat44!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmat44.h" line="137">
\brief returns true if the two matrices are exactly equal

</member>
<member name="T:_iobuf" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxstrideiterator.h" line="380">
@} 
</member>
<member name="T:physx.PxVec2" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="29">
\brief 2 Element vector class.

This is a 2-dimensional vector class with public data members.

</member>
<member name="M:physx.PxVec2.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="38">
\brief default constructor leaves data uninitialized.

</member>
<member name="M:physx.PxVec2.#ctor(physx.PxZERO)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="44">
\brief zero constructor.

</member>
<member name="M:physx.PxVec2.#ctor(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="52">
	\brief Assigns scalar parameter to all elements.

	Useful to initialize to zero or one.

	\param[in] a Value to assign to elements.

</member>
<member name="M:physx.PxVec2.#ctor(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="61">
	\brief Initializes from 2 scalar parameters.

	\param[in] nx Value to initialize X component.
	\param[in] ny Value to initialize Y component.

</member>
<member name="M:physx.PxVec2.#ctor(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="69">
\brief Copy ctor.

</member>
<member name="M:physx.PxVec2.op_Assign(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="76">
\brief Assignment operator

</member>
<member name="M:physx.PxVec2.op_Subscript(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="81">
\brief element access

</member>
<member name="M:physx.PxVec2.op_Subscript(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="91">
\brief element access

</member>
<member name="M:physx.PxVec2.op_Equality(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="101">
\brief returns true if the two vectors are exactly equal.

</member>
<member name="M:physx.PxVec2.op_Inequality(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="106">
\brief returns true if the two vectors are not exactly equal.

</member>
<member name="M:physx.PxVec2.isZero" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="111">
\brief tests for exact zero vector

</member>
<member name="M:physx.PxVec2.isFinite" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="116">
\brief returns true if all 2 elems of the vector are finite (not NAN or INF, etc.)

</member>
<member name="M:physx.PxVec2.isNormalized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="124">
\brief is normalized - used by API parameter validation

</member>
<member name="M:physx.PxVec2.magnitudeSquared" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="133">
	\brief returns the squared magnitude

	Avoids calling PxSqrt()!

</member>
<member name="M:physx.PxVec2.magnitude" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="140">
\brief returns the magnitude

</member>
<member name="M:physx.PxVec2.op_UnaryNegation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="145">
\brief negation

</member>
<member name="M:physx.PxVec2.op_Addition(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="153">
\brief vector addition

</member>
<member name="M:physx.PxVec2.op_Subtraction(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="158">
\brief vector difference

</member>
<member name="M:physx.PxVec2.op_Multiply(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="163">
\brief scalar post-multiplication

</member>
<member name="M:physx.PxVec2.op_Division(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="168">
\brief scalar division

</member>
<member name="M:physx.PxVec2.op_AdditionAssignment(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="177">
\brief vector addition

</member>
<member name="M:physx.PxVec2.op_SubtractionAssignment(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="187">
\brief vector difference

</member>
<member name="M:physx.PxVec2.op_MultiplicationAssignment(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="197">
\brief scalar multiplication

</member>
<member name="M:physx.PxVec2.op_DivisionAssignment(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="206">
\brief scalar division

</member>
<member name="M:physx.PxVec2.dot(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="217">
\brief returns the scalar product of this and other.

</member>
<member name="M:physx.PxVec2.getNormalized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="225">
return a unit vector 
</member>
<member name="M:physx.PxVec2.normalize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="233">
\brief normalizes the vector in place

</member>
<member name="M:physx.PxVec2.multiply(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="244">
\brief a[i] * b[i], for all i.

</member>
<member name="M:physx.PxVec2.minimum(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="252">
\brief element-wise minimum

</member>
<member name="M:physx.PxVec2.minElement" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="260">
\brief returns MIN(x, y);

</member>
<member name="M:physx.PxVec2.maximum(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="268">
\brief element-wise maximum

</member>
<member name="M:physx.PxVec2.maxElement" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxvec2.h" line="276">
\brief returns MAX(x, y);

</member>
<member name="F:physx.PxStridedData.stride" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcoreutilitytypes.h" line="30">
	\brief The offset in bytes between consecutive samples in the data.

	<b>Default:</b> 0

</member>
<member name="M:physx.PxShortestRotation(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxmathutils.h" line="30">
\brief finds the shortest rotation between two vectors.

\param[in] from the vector to start from
\param[in] target the vector to rotate to
\return a rotation about an axis normal to the two vectors which takes one to the other via the shortest path

</member>
<member name="T:physx.PxDebugColor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxrenderbuffer.h" line="31">
\brief Default color values used for debug rendering.

</member>
<member name="T:physx.PxDebugPoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxrenderbuffer.h" line="53">
\brief Used to store a single point and colour for debug rendering.

</member>
<member name="T:physx.PxDebugLine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxrenderbuffer.h" line="65">
\brief Used to store a single line and colour for debug rendering.

</member>
<member name="T:physx.PxDebugTriangle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxrenderbuffer.h" line="79">
\brief Used to store a single triangle and colour for debug rendering.

</member>
<member name="T:physx.PxDebugText" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxrenderbuffer.h" line="95">
\brief Used to store a text for debug rendering. Doesn't own 'string' array.

</member>
<member name="T:physx.PxRenderBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxrenderbuffer.h" line="111">
\brief Interface for points, lines, triangles, and text buffer.

</member>
<member name="T:physx.PxConcreteType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxtypeinfo.h" line="27">
\brief an enumeration of concrete classes inheriting from PxBase

Enumeration space is reserved for future PhysX core types, PhysXExtensions, 
PhysXVehicle and Custom application types.

@see PxBase, PxTypeInfo

</member>
<member name="T:physx.PxProcessPxBaseCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="62">
\brief Callback class used to process PxBase objects.

@see PxSerializer::requires

</member>
<member name="T:physx.PxSerializationContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="75">
\brief Binary serialization context class.

This class is used to register reference values and write object
and object extra data during serialization.
It is mainly used by the serialization framework. Except for custom 
serializable types, users should not have to worry about it.

@see PxDeserializationContext 

</member>
<member name="M:physx.PxSerializationContext.registerReference(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="89">
    \brief Registers a reference value corresponding to a PxBase object.

	This method is assumed to be called in the implementation of PxSerializer::registerReferences for serialized
	references that need to be resolved on deserialization.

	A reference needs to be associated with exactly one PxBase object in either the collection or the 
	external references collection.

	Different kinds of references are supported and need to be specified. In the most common case
	(PX_SERIAL_REF_KIND_PXBASE) the PxBase object matches the reference value (which is the pointer
	to the PxBase object). Integer references maybe registered as well (used for internal material 
	indices with PX_SERIAL_REF_KIND_MATERIAL_IDX). Other kinds could be added with the restriction that
	for pointer types the kind value needs to be marked with the PX_SERIAL_REF_KIND_PTR_TYPE_BIT.

	\param[in]  base		PxBase object associated with the reference
    \param[in]  kind		What kind of reference this is (PX_SERIAL_REF_KIND_PXBASE, PX_SERIAL_REF_KIND_MATERIAL_IDX or custom kind)
    \param[in]  reference	Value of reference

	@see PxDeserializationContext::resolveReference, PX_SERIAL_REF_KIND_PXBASE, PX_SERIAL_REF_KIND_MATERIAL_IDX, PxSerializer::registerReferences

</member>
<member name="M:physx.PxSerializationContext.getCollection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="112">
\brief Returns the collection that is being serialized.

</member>
<member name="M:physx.PxSerializationContext.writeData(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="117">
	\brief Serializes object data and object extra data.
	
	This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData.

	@see PxSerializer::exportData, PxSerializer::exportExtraData, PxSerializer::createObject, PxDeserializationContext::readExtraData

</member>
<member name="M:physx.PxSerializationContext.alignData(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="126">
	\brief Aligns the serialized data.
	
	This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData.

	@see PxSerializer::exportData, PxSerializer::exportExtraData, PxDeserializationContext::alignExtraData

</member>
<member name="M:physx.PxSerializationContext.writeName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="135">
	\brief Helper function to write a name to the extraData if serialization is configured to save names.

	This function is assumed to be called within the implementation of PxSerializer::exportExtraData.

	@see PxSerialization::serializeCollectionToBinary, PxDeserializationContext::readName

</member>
<member name="T:physx.PxDeserializationContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="151">
\brief Binary deserialization context class.

This class is used to resolve references and access extra data during deserialization.
It is mainly used by the serialization framework. Except for custom 
serializable types, users should not have to worry about it.

@see PxSerializationContext 

</member>
<member name="M:physx.PxDeserializationContext.resolveReference(System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="164">
    \brief Retrieves a pointer to a deserialized PxBase object given a corresponding deserialized reference value

	This method is assumed to be called in the implementation of PxSerializer::createObject in order
	to update reference values on deserialization.
	
	To update a PxBase reference the corresponding deserialized pointer value needs to be provided in order to retrieve 
	the location of the corresponding deserialized PxBase object. (PxDeserializationContext::translatePxBase simplifies 
	this common case).

	For other kinds of references the reverence values need to be updated by deduction given the corresponding PxBase instance. 

    \param[in] kind			What kind of reference this is (PX_SERIAL_REF_KIND_PXBASE, PX_SERIAL_REF_KIND_MATERIAL_IDX or custom kind)
    \param[in] reference	Deserialized reference value
    \return					PxBase object associated with the reference value

	@see PxSerializationContext::registerReference, PX_SERIAL_REF_KIND_PXBASE, PX_SERIAL_REF_KIND_MATERIAL_IDX, translatePxBase

</member>
<member name="M:physx.PxDeserializationContext.readName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="192">
	\brief Helper function to read a name from the extra data during deserialization.

	This function is assumed to be called within the implementation of PxSerializer::createObject.

	@see PxSerializationContext::writeName

</member>
<member name="M:physx.PxDeserializationContext.alignExtraData(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="236">
	\brief Function to align the extra data stream to a power of 2 alignment

	This function is assumed to be called within the implementation of PxSerializer::createObject.

	@see PxSerializationContext::alignData, PxSerializer::createObject

</member>
<member name="M:physx.PxDeserializationContext.getPhysXVersion" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="251">
\brief Function to return the PX_PHYSX_VERSION value with which the data was originally serialized

</member>
<member name="D:physx.PxBinaryMetaDataCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="265">
\brief Callback type for exporting binary meta data for a serializable type.
@see PxSerializationRegistry::registerBinaryMetaDataCallback

\param stream	Stream to store binary meta data. 

</member>
<member name="T:physx.PxSerializationRegistry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="273">
\brief Class serving as a registry for XML (RepX) and binary serializable types.

In order to serialize and deserialize objects the application needs
to maintain an instance of this class. It can be created with
PxSerialization::createSerializationRegistry() and released with
PxSerializationRegistry::release().

@see PxSerialization::createSerializationRegistry

</member>
<member name="M:physx.PxSerializationRegistry.registerSerializer(System.UInt16,physx.PxSerializer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="288">
@name Binary Serialization Functionality

	\brief Register a serializer for a concrete type 

	\param	type PxConcreteType corresponding to the serializer
	\param	serializer The PxSerializer to be registered

	@see PxConcreteType, PxSerializer, PxSerializationRegistry::unregisterSerializer

</member>
<member name="M:physx.PxSerializationRegistry.unregisterSerializer(System.UInt16)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="302">
	\brief Unregister a serializer for a concrete type, and retrieves the corresponding serializer object.

	\param	type PxConcreteType for which the serializer should be unregistered
	\return	Unregistered serializer corresponding to type, NULL for types for which no serializer has been registered.

	@see PxConcreteType, PxSerializationRegistry::registerSerializer, PxSerializationRegistry::release

</member>
<member name="M:physx.PxSerializationRegistry.registerBinaryMetaDataCallback(=FUNC:System.Void(physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="312">
	\brief Register binary meta data callback

	The callback is executed when calling PxSerialization::dumpBinaryMetaData.

	\param	callback PxBinaryMetaDataCallback to be registered.

	@see PxBinaryMetaDataCallback, PxSerialization::dumpBinaryMetaData

</member>
<member name="M:physx.PxSerializationRegistry.getSerializer(System.UInt16)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="323">
	\brief Returns PxSerializer corresponding to type

	\param	type PxConcreteType of the serializer requested.
	\return	Registered PxSerializer object corresponding to type

	@see PxConcreteType

</member>
<member name="M:physx.PxSerializationRegistry.registerRepXSerializer(System.UInt16,physx.PxRepXSerializer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="336">
@name RepX (XML) Serialization Functionality

	\brief Register a RepX serializer for a concrete type

	\param	type PxConcreteType corresponding to the RepX serializer
	\param	serializer The PxRepXSerializer to be registered
	
	@see PxConcreteType, PxRepXSerializer

</member>
<member name="M:physx.PxSerializationRegistry.unregisterRepXSerializer(System.UInt16)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="350">
	\brief Unregister a RepX serializer for a concrete type, and retrieves the corresponding serializer object.

	\param	type PxConcreteType for which the RepX serializer should be unregistered
	\return	Unregistered PxRepxSerializer corresponding to type, NULL for types for which no RepX serializer has been registered.
	
	@see PxConcreteType, PxSerializationRegistry::registerRepXSerializer, PxSerializationRegistry::release

</member>
<member name="M:physx.PxSerializationRegistry.getRepXSerializer(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="360">
	\brief Returns RepX serializer given the corresponding type name

	\param	typeName Name of the type
	\return	Registered PxRepXSerializer object corresponding to type name

	@see PxRepXSerializer, PxTypeInfo, PX_DEFINE_TYPEINFO

</member>
<member name="M:physx.PxSerializationRegistry.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserialframework.h" line="373">
	\brief Releases PxSerializationRegistry instance.

	This unregisters all PhysX and PhysXExtension serializers. Make sure to unregister all custom type
	serializers before releasing the PxSerializationRegistry.

	@see PxSerializationRegistry::unregisterSerializer, PxSerializationRegistry::unregisterRepXSerializer

</member>
<member name="T:physx.PxCollection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="30">
\brief Collection class for serialization.

A collection is a set of PxBase objects. PxBase objects can be added to the collection
regardless of other objects they depend on. Objects may be named using PxSerialObjectId values in order 
to resolve dependencies between objects of different collections.

Serialization and deserialization only work through collections.

A scene is typically serialized using the following steps:

 -# create a serialization registry
 -# create a collection for scene objects
 -# complete the scene objects (adds all dependent objects, e.g. meshes)
 -# serialize collection
 -# release collection
 -# release serialization registry

For example the code may look like this:

\code
	PxPhysics* physics; // The physics
	PxScene* scene;		// The physics scene
	SerialStream s;		// The user-defined stream doing the actual write to disk
	
	PxSerializationRegistry* registry = PxSerialization::createSerializationRegistry(*physics);	// step 1)
	PxCollection* collection = PxSerialization::createCollection(*scene);						// step 2)
	PxSerialization::complete(*collection, *registry);											// step 3)
	PxSerialization::serializeCollectionToBinary(s, *collection, *registry);					// step 4)
	collection-&gt;release();																		// step 5)
	registry-&gt;release();																		// step 6)
\endcode

A scene is typically deserialized using the following steps:

 -# load a serialized collection into memory
 -# create a serialization registry
 -# create a collection by passing the serialized memory block
 -# add collected objects to scene
 -# release collection
 -# release serialization registry

For example the code may look like this:

\code
	PxPhysics* physics; // The physics
	PxScene* scene;		// The physics scene
	void* memory128;	// a 128-byte aligned buffer previously loaded from disk by the user	- step 1)
	
	PxSerializationRegistry* registry = PxSerialization::createSerializationRegistry(*physics);		// step 2)
	PxCollection* collection = PxSerialization::createCollectionFromBinary(memory128, *registry);	// step 3)
	scene-&gt;addCollection(*collection);																// step 4)
	collection-&gt;release();																			// step 5)
	registry-&gt;release();																			// step 6)
\endcode

@see PxBase, PxCreateCollection()

</member>
<member name="M:physx.PxCollection.add(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="92">
	\brief Adds a PxBase object to the collection.

	Adds a PxBase object to the collection. Optionally a PxSerialObjectId can be provided
	in order to resolve dependencies between collections. A PxSerialObjectId value of PX_SERIAL_OBJECT_ID_INVALID 
	means the object remains without id. Objects can be added regardless of other objects they require. If the object
	is already in the collection, the ID will be set if it was PX_SERIAL_OBJECT_ID_INVALID previously, otherwise the
	operation fails.


	\param[in] object Object to be added to the collection
	\param[in] id Optional PxSerialObjectId id

</member>
<member name="M:physx.PxCollection.remove(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="107">
	\brief Removes a PxBase member object from the collection.

	Object needs to be contained by the collection.

	\param[in] object PxBase object to be removed

</member>
<member name="M:physx.PxCollection.addRequired(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="116">
	\deprecated
	\brief Adds a PxBase object to the collection if its not already part of the collection.

	Does the same as #PxCollection::add with id = PX_SERIAL_OBJECT_ID_INVALID except it additionally checks if the serializable 
	is already part of the collection, in which case no serializable is added.

	\param[in] object object to be added to the collection	

</member>
<member name="M:physx.PxCollection.contains(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="127">
	\brief Returns whether the collection contains a certain PxBase object.

	\param[in] object PxBase object
	\return Whether object is contained.

</member>
<member name="M:physx.PxCollection.addId(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="135">
	\brief Adds an id to a member PxBase object.

	If the object is already associated with an id within the collection, the id is replaced.
	May only be called for objects that are members of the collection. The id needs to be unique 
	within the collection.
	
	\param[in] object Member PxBase object
	\param[in] id PxSerialObjectId id to be given to the object

</member>
<member name="M:physx.PxCollection.removeId(System.UInt64)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="147">
	\brief Removes id from a contained PxBase object.

	May only be called for ids that are associated with an object in the collection.
	
	\param[in] id PxSerialObjectId value

</member>
<member name="M:physx.PxCollection.add(physx.PxCollection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="156">
	\brief Adds all PxBase objects and their ids of collection to this collection.

	PxBase objects already in this collection are ignored. Object ids need to be conflict 
	free, i.e. the same object may not have two different ids within the two collections.
	
	\param[in] collection Collection to be added

</member>
<member name="M:physx.PxCollection.remove(physx.PxCollection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="166">
	\brief Removes all PxBase objects of collection from this collection.

	PxBase objects not present in this collection are ignored. Ids of objects 
	which are removed are also removed.

	\param[in] collection Collection to be removed

</member>
<member name="M:physx.PxCollection.getNbObjects" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="176">
\brief Gets number of PxBase objects in this collection.

\return Number of objects in this collection

</member>
<member name="M:physx.PxCollection.getObject(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="183">
	\brief Gets the PxBase object of this collection given its index.

	\param[in] index PxBase index in [0, getNbObjects())
	\return PxBase object at index index

</member>
<member name="M:physx.PxCollection.getObjects(physx.PxBase**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="191">
	\brief Copies member PxBase pointers to a user specified buffer.

	\param[out] userBuffer Array of PxBase pointers
	\param[in] bufferSize Capacity of userBuffer
	\param[in] startIndex Offset into list of member PxBase objects
	\return number of members PxBase objects that have been written to the userBuffer 

</member>
<member name="M:physx.PxCollection.find(System.UInt64)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="201">
	\brief Looks for a PxBase object given a PxSerialObjectId value.

	If there is no PxBase object in the collection with the given id, NULL is returned.

	\param[in] id PxSerialObjectId value to look for
	\return PxBase object with the given id value or NULL

</member>
<member name="M:physx.PxCollection.getNbIds" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="211">
\brief Gets number of PxSerialObjectId names in this collection.

\return Number of PxSerialObjectId names in this collection

</member>
<member name="M:physx.PxCollection.getIds(System.UInt64*,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="218">
	\brief Copies member PxSerialObjectId values to a user specified buffer.

	\param[out] userBuffer Array of PxSerialObjectId values
	\param[in] bufferSize Capacity of userBuffer
	\param[in] startIndex Offset into list of member PxSerialObjectId values
	\return number of members PxSerialObjectId values that have been written to the userBuffer 

</member>
<member name="M:physx.PxCollection.getId(physx.PxBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="228">
	\brief Gets the PxSerialObjectId name of a PxBase object within the collection.

	The PxBase object needs to be a member of the collection.

	\param[in] object PxBase object to get id for
	\return PxSerialObjectId name of the object or PX_SERIAL_OBJECT_ID_INVALID if the object is unnamed

</member>
<member name="M:physx.PxCollection.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="238">
	\brief Deletes a collection object.

	This function only deletes the collection object, i.e. the container class. It doesn't delete objects
	that are part of the collection.

	@see PxCreateCollection() 

</member>
<member name="M:PxCreateCollection" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxcollection.h" line="258">
\brief Creates a collection object.

Objects can only be serialized or deserialized through a collection.
For serialization, users must add objects to the collection and serialize the collection as a whole.
For deserialization, the system gives back a collection of deserialized objects to users.

\return The new collection object.

@see PxCollection, PxCollection::release()

</member>
<member name="T:physx.PxBaseFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="31">
\brief Flags for PxBase.

</member>
<member name="T:physx.PxBase" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="46">
\brief Base class for objects that can be members of a PxCollection.

All PxBase sub-classes can be serialized.

@see PxCollection 

</member>
<member name="M:physx.PxBase.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="62">
\brief Releases the PxBase instance, please check documentation of release in derived class.

</member>
<member name="M:physx.PxBase.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="67">
\brief Returns string name of dynamic type.
\return	Class name of most derived type of this object.

</member>
<member name="M:physx.PxBase.getConcreteType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="93">
	\brief	Returns concrete type of object.
	\return	PxConcreteType::Enum of serialized object

	@see PxConcreteType

</member>
<member name="M:physx.PxBase.setBaseFlag(physx.PxBaseFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="101">
	\brief Set PxBaseFlag	

	\param[in] flag The flag to be set
	\param[in] value The flags new value

</member>
<member name="M:physx.PxBase.setBaseFlags(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="109">
	\brief Set PxBaseFlags	

	\param[in] inFlags The flags to be set

	@see PxBaseFlags

</member>
<member name="M:physx.PxBase.getBaseFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="118">
	\brief Returns PxBaseFlags 

	\return	PxBaseFlags

	@see PxBaseFlags

</member>
<member name="M:physx.PxBase.isReleasable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="127">
	\brief Whether the object is subordinate.
	
	A class is subordinate, if it can only be instantiated in the context of another class.

	\return	Whether the class is subordinate
	
	@see PxSerialization::isSerializable

</member>
<member name="M:physx.PxBase.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="139">
\brief Constructor setting concrete type and base flags.

</member>
<member name="M:physx.PxBase.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="145">
\brief Deserialization constructor setting base flags.

</member>
<member name="M:physx.PxBase.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="150">
\brief Destructor.

</member>
<member name="M:physx.PxBase.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxbase.h" line="155">
\brief Returns whether a given type name matches with the type of this instance

</member>
<member name="T:physx.PxTolerancesScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxtolerancesscale.h" line="30">
\brief Class to define the scale at which simulation runs. Most simulation tolerances are
calculated in terms of the values here. 

\note if you change the simulation scale, you will probablly also wish to change the scene's
default value of gravity, and stable simulation will probably require changes to the scene's 
bounceThreshold also.

</member>
<member name="F:physx.PxTolerancesScale.length" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxtolerancesscale.h" line="43">
brief
	The approximate size of objects in the simulation. 
	
	For simulating roughly human-sized in metric units, 1 is a good choice.
	If simulation is done in centimetres, use 100 instead. This is used to
	estimate certain length-related tolerances.


</member>
<member name="F:physx.PxTolerancesScale.mass" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxtolerancesscale.h" line="55">
brief
	The approximate mass of a length * length * length block.
	If using metric scale for character sized objects and measuring mass in
	kilogrammes, 1000 is a good choice.	

</member>
<member name="F:physx.PxTolerancesScale.speed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxtolerancesscale.h" line="62">
brief
	The typical magnitude of velocities of objects in simulation. This is used to estimate 
	whether a contact should be treated as bouncing or resting based on its impact velocity,
	and a kinetic energy threshold below which the simulation may put objects to sleep.

	For normal physical environments, a good choice is the approximate speed of an object falling
	under gravity for one second.

</member>
<member name="M:physx.PxTolerancesScale.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxtolerancesscale.h" line="73">
\brief constructor sets to default 

</member>
<member name="M:physx.PxTolerancesScale.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxtolerancesscale.h" line="78">
\brief Returns true if the descriptor is valid.
\return true if the current settings are valid (returns always true).

</member>
<member name="T:physx.PxStringTable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxstringtable.h" line="27">
\brief a table to manage strings.  Strings allocated through this object are expected to be owned by this object.

</member>
<member name="M:physx.PxStringTable.allocateStr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxstringtable.h" line="35">
	\brief Allocate a new string.

	\param[in] inSrc Source string, null terminated or null.
	
	\return *Always* a valid null terminated string.  "" is returned if "" or null is passed in.

</member>
<member name="M:physx.PxStringTable.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxstringtable.h" line="44">
Release the string table and all the strings associated with it.

</member>
<member name="T:physx.PxSerializer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="29">
 \brief Serialization interface class.

 PxSerializer is used to extend serializable PxBase classes with serialization functionality. The 
 interface is structured such that per-class adapter instances can be used as opposed to per-object 
 adapter instances, avoiding per object allocations. Hence the methods take a reference to PxBase as a parameter.

 The PxSerializer interface needs to be implemented for binary or RepX serialization to work on custom 
 types. If only RepX serialization is needed, some methods can be left empty, as they are only needed 
 for binary serialization.

 A default implementation is available as a template adapter (PxSerializerDefaultAdapter).

 @see PxSerializerDefaultAdapter, PX_NEW_SERIALIZER_ADAPTER, PxSerializationRegistry::registerSerializer

</member>
<member name="M:physx.PxSerializer.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="50">
@name Basics needed for Binary- and RepX-Serialization

	\brief Returns string name of dynamic type.

	\return	Class name of most derived type of this object.

</member>
<member name="M:physx.PxSerializer.requires(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxProcessPxBaseCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="61">
	\brief Adds required objects to the collection.
	
	This method does not add the required objects recursively, e.g. objects required by required objects.

	@see PxCollection, PxSerialization::complete

</member>
<member name="M:physx.PxSerializer.isSubordinate" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="70">
	\brief Whether the object is subordinate.
	
	A class is subordinate, if it can only be instantiated in the context of another class.

	\return	Whether the class is subordinate
	
	@see PxSerialization::isSerializable

</member>
<member name="M:physx.PxSerializer.exportExtraData(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationContext*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="86">
@name Functionality needed for Binary Serialization only

\brief Exports object's extra data to stream.

</member>
<member name="M:physx.PxSerializer.exportData(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationContext*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="95">
\brief Exports object's data to stream.

</member>
<member name="M:physx.PxSerializer.registerReferences(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationContext*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="100">
\brief Register references that the object maintains to other objects.

</member>
<member name="M:physx.PxSerializer.getClassSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="105">
	\brief Returns size needed to create the class instance.

	\return	sizeof class instance.

</member>
<member name="M:physx.PxSerializer.createObject(System.Byte**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxDeserializationContext*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxserializer.h" line="112">
	\brief Create object at a given address, resolve references and import extra data.

	\param address Location at which object is created. Address is increased by the size of the created object.
	\param context Context for reading external data and resolving references.
	\return	Created PxBase pointer (needs to be identical to address before increment).

</member>
<member name="T:physx.PxMetaDataFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxmetadataflags.h" line="24">
	\brief Flags used to configure binary meta data entries, typically set through PX_DEF_BIN_METADATA defines.

	@see PxMetaDataEntry

</member>
<member name="T:physx.PxMetaDataEntry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxmetadata.h" line="29">
	\brief Struct to store meta data definitions.

	Note: The individual fields have different meaning depending on the meta data entry configuration.

</member>
<member name="T:physx.PxPhysicsInsertionCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxphysicsinsertioncallback.h" line="28">

	\brief PxPhysicsInsertionCallback does provide interface from PxCooking to be able to insert
	TriangleMesh or HeightfieldMesh directly into PxPhysics without the need of storing
	the cooking results into stream. 

	This advised only if real-time cooking is required, using "offline" cooking and
	streams is highly advised.

	Only default PxPhysicsInsertionCallback implementation must be used. The PxPhysics
	default callback can be obtained using the PxPhysics::getPhysicsInsertionCallback().

	@see PxCooking PxPhysics

</member>
<member name="M:physx.PxPhysicsInsertionCallback.insertObject(physx.PxBase*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\common\pxphysicsinsertioncallback.h" line="47">
		\brief Inserts object (TriangleMesh or HeightfieldMesh) into PxPhysics.		

		\param obj Object to insert.

</member>
<member name="T:physx.PxProfileEventId" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventid.h" line="18">
A event id structure.  Optionally includes information about
if the event was enabled at compile time.

</member>
<member name="T:physx.PxProfileNameProvider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventnames.h" line="40">
Provides a mapping from event ID -&gt; name.

</member>
<member name="T:physx.PxProfileEventBufferClient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventbufferclient.h" line="19">
Client handles the data when an event buffer flushes.  This data
can be parsed (PxProfileEventHandler.h) as a binary set of events.

</member>
<member name="M:physx.PxProfileEventBufferClient.handleBufferFlush(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventbufferclient.h" line="28">
Callback when the event buffer is full.  This data is serialized profile events
and can be read back using:
PxProfileEventHandler::parseEventBuffer (PxProfileEventHandler.h).

</member>
<member name="T:physx.PxProfileEventBufferClientManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventbufferclientmanager.h" line="17">
Managers keep collections of clients.  

</member>
<member name="T:physx.profile.Event" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileevents.h" line="502">
Generic event container that combines and even header with the generic event data type.
Provides unsafe and typesafe access to the event data.

</member>
<member name="M:physx.PxProfileEventHandler.durationToNanoseconds(System.UInt64)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventhandler.h" line="32">
			\brief Translates event duration in timestamp (cycles) into nanoseconds.
			
			\param[in] duration Timestamp duration of the event.

			\return event duration in nanoseconds. 

</member>
<member name="T:physx.PxProfileEventMutex" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventmutex.h" line="19">
Mutex interface that hides implementation around lock and unlock.
The event system locks the mutex for every interaction.

</member>
<member name="T:physx.PxProfileEventFlusher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventsender.h" line="20">
Tagging interface to indicate an object that is capable of flushing a profile
event stream at a certain point.

</member>
<member name="T:physx.PxProfileEventSender" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventsender.h" line="32">
Sends the full events where the caller must provide the context and thread id.

</member>
<member name="M:physx.PxProfileEventSender.eventValue(System.UInt16,System.UInt64,System.Int64)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventsender.h" line="52">
Set an specific events value.  This is different than the profiling value
for the event; it is a value recorded and kept around without a timestamp associated
with it.  This value is displayed when the event itself is processed.

</member>
<member name="M:physx.PxProfileEventSender.CUDAProfileBuffer(System.Single,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventsender.h" line="75">
	Send a CUDA profile buffer.  We assume the submit time is almost exactly the end time of the batch.
	We then work backwards, using the batchRuntimeInMilliseconds in order to get the original time
	of the batch.  The buffer format is described in GPUProfile.h.

	\param batchRuntimeInMilliseconds The batch runtime in milliseconds, see cuEventElapsedTime.
	\param cudaData An opaque pointer to the buffer of cuda data.
	\param bufLenInBytes length of the cuda data buffer in bytes
	\param bufferVersion Version of the format of the cuda data.

</member>
<member name="T:physx.PxProfileEventSenderProvider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventsender.h" line="88">
Tagging interface to indicate an object that may or may not return
an object capable of adding profile events to a buffer.

</member>
<member name="M:physx.PxProfileEventSenderProvider.getProfileEventSender" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventsender.h" line="97">
			This method can *always* return NULL.
			Thus need to always check that what you are getting is what
			you think it is.

			\return Perhaps a profile event sender.

</member>
<member name="T:physx.PxProfileEventSystem" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofileeventsystem.h" line="24">
Wraps the different interfaces into one object.

</member>
<member name="T:physx.PxProfileZone" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezone.h" line="24">
	The profiling system was setup in the expectation that there would be several
	systems that each had its own island of profile information.  PhysX, client code,
	and APEX would be the first examples of these.  Each one of these islands is represented
	by a profile zone.

	A profile zone combines a name, a place where all the events coming from its interface
	can flushed, and a mapping from event number to full event name.
	
	It also provides a top level filtering service where profile events
	can be filtered by event id.  

	The profile zone implements a system where if there is no one
	listening to events it doesn't provide a mechanism to send them.  In this way
	the event system is short circuited when there aren't any clients.

	All functions on this interface should be considered threadsafe.

</member>
<member name="M:physx.PxProfileZone.getEventIdsForNames(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezone.h" line="61">
			\brief Reserve a contiguous set of profile event ids for a set of names.
			
			This function does not do any meaningful error checking other than to ensure
			that if it does generate new ids they are contiguous.  If the first name is already
			registered, that is the ID that will be returned regardless of what other
			names are registered.  Thus either use this function alone (without the above
			function) or don't use it.  
			If you register "one","two","three" and the function returns an id of 4, then
			"one" is mapped to 4, "two" is mapped to 5, and "three" is mapped to 6.

			\param inNames set of names to register.
			\param inLen Length of the name list.

			\return The first id associated with the first name.  The rest of the names
			will be associated with monotonically incrementing PxU16 values from the first
			id.  

</member>
<member name="M:physx.PxProfileZone.setUserCustomProfiler(physx.PxUserCustomProfiler*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezone.h" line="81">
\brief Specifies an optional user custom profiler interface for this profile zone.
\param up Specifies the PxUserCustomProfiler interface for this zone.  A NULL disables event notification.

</member>
<member name="M:physx.PxProfileZone.createProfileZone(physx.PxFoundation*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxProfileNames,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezone.h" line="86">
			\brief Create a new profile zone.  

			\param inFoundation memory allocation is controlled through the foundation if one is passed in.
			\param inSDKName Name of the profile zone; useful for clients to understand where events came from.
			\param inProvider Mapping from event id -&gt; event name.
			\param inEventBufferByteSize Size of the canonical event buffer.  This does not need to be a large number
				as profile events are fairly small individually.
			\return a profile zone implementation.

</member>
<member name="M:physx.PxProfileZone.createProfileZone(physx.PxFoundation*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxProfileNameProvider*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezone.h" line="100">
deprecated forms of the above functions 
</member>
<member name="T:physx.PxProfileZoneManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezonemanager.h" line="45">
	The profiling system was setup in the expectation that there would be several
	systems that each had its own island of profile information.  PhysX, client code,
	and APEX would be the first examples of these.  Each one of these islands is represented
	by a profile zone.
	
	The Manager is a singleton-like object where all these different systems can be registered
	so that clients of the profiling system can have one point to capture *all* profiling events.

	Flushing the manager implies that you want to loop through all the profile zones and flush
	each one.

</member>
<member name="M:physx.PxProfileZoneManager.addProfileZone(physx.PxProfileZone*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezonemanager.h" line="63">
Threadsafe call, can be done from any thread.  Handlers that are already connected
will get a new callback on the current thread.

</member>
<member name="M:physx.PxProfileZoneManager.addProfileZoneHandler(physx.PxProfileZoneHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezonemanager.h" line="70">
Threadsafe call.  The new handler will immediately be notified about all
known SDKs.

</member>
<member name="M:physx.PxProfileZoneManager.createProfileZone(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxProfileNames,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezonemanager.h" line="78">
	Create a new profile zone.  This means you don't need access to a PxFoundation to 
	create your profile zone object, and your object is automatically registered with
	the profile zone manager.

	You still need to release your object when you are finished with it.
	\param inSDKName Name of the SDK object.
	\param inProvider Option set of event id to name mappings.
	\param inEventBufferByteSize rough maximum size of the event buffer.  May exceed this size
		by sizeof one event.  When full an immediate call to all listeners is made.

</member>
<member name="M:physx.PxProfileZoneManager.createProfileZone(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxProfileNameProvider*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxprofilesdk\pxprofilezonemanager.h" line="91">
Deprecated form of the above function.

</member>
<member name="D:physx.PxVisualDebuggerConnection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnection.h" line="72">
\brief Convenience typedef for the PvdConnection. 
</member>
<member name="T:physx.debugger.PvdNetworkOutStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="17">
Implementations don't need to implement a caching layer nor do they need
to worry about threadsafe implementations; that is all built on top of
this interface.

</member>
<member name="M:physx.debugger.PvdNetworkOutStream.write(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="28">
write bytes to the other endpoint of the connection.  If an error occurs
this connection will assume to be dead.

Errors -

NetworkError - Some failure to write data either to buffer or over network.

</member>
<member name="M:physx.debugger.PvdNetworkOutStream.isConnected" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="43">
Return true if this stream is still connected.

</member>
<member name="M:physx.debugger.PvdNetworkOutStream.disconnect" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="47">
Close the in stream.

</member>
<member name="M:physx.debugger.PvdNetworkOutStream.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="51">
release any resources related to this stream.

</member>
<member name="M:physx.debugger.PvdNetworkOutStream.flush" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="56">
send any data and block until we know it is at least on the wire.

</member>
<member name="M:physx.debugger.PvdNetworkOutStream.getWrittenDataSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="61">
Return the size of data have been written to target

</member>
<member name="T:physx.debugger.PvdNetworkInStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="70">
Implementations don't need to implement a caching layer nor do they need
to worry about threadsafe implementations; that is all built on top of
this interface.

</member>
<member name="M:physx.debugger.PvdNetworkInStream.readBytes(System.Byte*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="81">
Read the requested number of bytes from the socket.  Block until that number
of bytes is returned.

Errors -
NetworkError - If call cannot complete.

</member>
<member name="M:physx.debugger.PvdNetworkInStream.isConnected" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="90">
Return true if this stream is still connected.

</member>
<member name="M:physx.debugger.PvdNetworkInStream.disconnect" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="94">
Close the in stream.

</member>
<member name="M:physx.debugger.PvdNetworkInStream.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="98">
release any resources related to this stream.

</member>
<member name="M:physx.debugger.PvdNetworkInStream.getLoadedDataSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdnetworkstreams.h" line="103">
Return the number of bytes the stream has read.

</member>
<member name="T:physx.debugger.comm.PvdConnectionHandler" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="32">
When PVD is connected two callbacks happen.  This avoids conditions
where a handler tries to initiate sending objects from another
handler on its OnConnection but the first handler hasn't had an
opportunity to send its class descriptions.
The callbacks happen in this order:
onSendClassDescriptions
onPvdConnected
onPvdDisconnected

</member>
<member name="T:physx.debugger.comm.PvdConnectionManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="54">
	The connection factory manager provides ways of managing a single PVD connection.
	Clients can be notified when the connection is created and can setup a policy
	for dealing with the incoming data from the PVD application if there is any.

	The default data provider uses a thread that does a block read on the incoming
	connection stream.  If you would like to do something else you will need first
	implement you own network abstraction as the physx networking layers don't work
	in non-blocking mode on platforms other than windows (and they only partially work
	in non-blocking mode on windows).  

</member>
<member name="M:physx.debugger.comm.PvdConnectionManager.setProfileZoneManager(physx.PxProfileZoneManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="70">
Set the profile zone manager.  This takes care of ensuring that all profiling
events get forwarded to PVD.

</member>
<member name="M:physx.debugger.comm.PvdConnectionManager.addHandler(physx.debugger.comm.PvdConnectionHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="95">
Handler will be notified every time there is a new connection.

</member>
<member name="M:physx.debugger.comm.PvdConnectionManager.removeHandler(physx.debugger.comm.PvdConnectionHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="99">
Handler will be notified when a connection is destroyed.

</member>
<member name="M:physx.debugger.comm.PvdConnectionManager.connectAddRef(physx.debugger.PvdNetworkInStream*,physx.debugger.PvdNetworkOutStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.debugger.PvdConnectionType.Enum,System.UInt32&gt;,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="103">
	Create a new PvdConnection and returns the interface with an extra reference.

	The connection type is static and can't change once the system starts.
	Not that something could have disconnected by the time this function returned.
	Such behavior would probably crash but it could happen. User need to release 
  the returned interface after using it.

</member>
<member name="M:physx.debugger.comm.PvdConnectionManager.getAndAddRefCurrentConnection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="151">
	Return the object representing the current connection to PVD, if any.
  You need to call release on the connection after this call.  This is because
	...
	The manager releases its reference to the connection when something causes
	the connection to disconnect.  This doesn't necessarily happen in this thread.
	So in order to return a connection and be sure it isn't returning a dangling pointer
	because another thread caused a disconnect (like because the read thread noticed
	the socket is dead), this object addrefs the connection if possible and the returns
	it.  So, callers of this function need to release the (possibly disconnected connection)
	if they got one.

</member>
<member name="M:physx.debugger.comm.PvdConnectionManager.isConnected" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="164">
For the reasons stated above, querying isConnected is an atomic
operation.

</member>
<member name="M:physx.debugger.comm.PvdConnectionManager.disconnect" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="170">
If there is a current connection, disconnect from the factory.

</member>
<member name="D:physx.PxVisualDebuggerConnectionHandler" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="182">
\brief Convenience typedef for the PvdConnectionHandler. 
</member>
<member name="D:physx.PxVisualDebuggerConnectionManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\physxvisualdebuggersdk\pvdconnectionmanager.h" line="185">
\brief Convenience typedef for the PvdConnectionManager. 
</member>
<member name="T:physx.PxVisualDebuggerFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="50">
\brief PVD Flags.

</member>
<member name="D:physx.PxVisualDebuggerFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="63">
\brief Bitfield that contains a set of raised flags defined in PxVisualDebuggerFlag.

@see PxVisualDebuggerFlag

</member>
<member name="T:physx.PxVisualDebugger" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="72">
\brief Class to communicate with the PhysX Visual Debugger.

</member>
<member name="M:physx.PxVisualDebugger.disconnect" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="79">
Disconnects the SDK from the PhysX Visual Debugger application.
If we are still connected, this will kill the entire debugger connection.

</member>
<member name="M:physx.PxVisualDebugger.checkConnection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="85">
Checks if the connect state is paused. If it is, then this method will not
return until the connection state changes or pvd disconnects.

</member>
<member name="M:physx.PxVisualDebugger.getPvdConnection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="91">
returns the PVD connection that was passed to the SDK.
returns NULL if no connection is present.

</member>
<member name="M:physx.PxVisualDebugger.getPvdDataStream(physx.PxScene!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="97">
\param scene The scene of which the PVD data stream should be returned.
returns the PVD data stream of a given scene.
returns NULL if no data stream is present.

</member>
<member name="M:physx.PxVisualDebugger.setVisualizeConstraints(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="104">
\deprecated
Controls if joint visualization info is sent to pvd.
\param inViz true if visualizations info is sent to PVD.

</member>
<member name="M:physx.PxVisualDebugger.isVisualizingConstraints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="110">
\deprecated
\return True when constraint viz info is sent to PVD.

</member>
<member name="M:physx.PxVisualDebugger.setVisualDebuggerFlag(physx.PxVisualDebuggerFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="116">
Sets the PVD flag. See PxVisualDebuggerFlags.
\param flag Flag to set.
\param value value the flag gets set to.

</member>
<member name="M:physx.PxVisualDebugger.setVisualDebuggerFlags(physx.PxFlags&lt;physx.PxVisualDebuggerFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="123">
Sets the PVD flags. See PxVisualDebuggerFlags.
\param flags Flags to set.

</member>
<member name="M:physx.PxVisualDebugger.getVisualDebuggerFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="129">
Retrieves the PVD flags. See PxVisualDebuggerFlags.

</member>
<member name="M:physx.PxVisualDebugger.updateCamera(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="134">
	Updates the pose of a PVD camera.
	\param name Name of camera to update.
	\param origin The origin of the camera.
	\param up The up vector of the camera. It should be the up vector of the game camera for PVD to update the view that matches the game. 
     The default up vector is the world up vector for a fixed PVD camera view.
	\param target The target vector of the camera.

</member>
<member name="M:physx.PxVisualDebugger.sendErrorMessage(physx.PxErrorCode.Enum,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pvd\pxvisualdebugger.h" line="144">
\brief send an error message to pvd.
\param code Error code, see #PxErrorCode
\param message Message to display.
\param file File error occured in.
\param line Line number error occured on.

</member>
<member name="T:physx.PxCpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcpudispatcher.h" line="23">
 \brief A CpuDispatcher is responsible for scheduling the execution of tasks passed to it by the SDK.

 A typical implementation would for example use a thread pool with the dispatcher
 pushing tasks onto worker thread queues or a global queue.

 @see PxBaseTask
 @see PxTask
 @see PxTaskManager

</member>
<member name="M:physx.PxCpuDispatcher.submitTask(physx.PxBaseTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcpudispatcher.h" line="36">
	\brief Called by the TaskManager when a task is to be queued for execution.
	
	Upon receiving a task, the dispatcher should schedule the task
	to run when resource is available.  After the task has been run,
	it should call the release() method and discard it's pointer.

	\param[in] task The task to be run.

	@see PxBaseTask

</member>
<member name="M:physx.PxCpuDispatcher.getWorkerCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcpudispatcher.h" line="49">
\brief Returns the number of available worker threads for this dispatcher.

The SDK will use this count to control how many tasks are submitted. By
matching the number of tasks with the number of execution units task
overhead can be reduced.

</member>
<member name="T:physx.PxAllocId" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="34">
\brief ID of the Feature which owns/allocated memory from the heap
 *
 * Maximum of 64k IDs allowed.

</member>
<member name="T:physx.PxAllocId.Enum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="40">
\brief ID of the Feature which owns/allocated memory from the heap

</member>
<member name="T:physx.PxCudaBufferMemorySpace" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="54">
\brief memory type managed by a heap
</member>
<member name="T:physx.PxCudaBufferMemorySpace.Enum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="57">
\brief memory type managed by a heap

</member>
<member name="T:physx.PxAllocInfo" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="70">
\brief class to track allocation statistics, see PxgMirrored
</member>
<member name="M:physx.PxAllocInfo.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="74">
\brief AllocInfo default constructor

</member>
<member name="M:physx.PxAllocInfo.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxAllocId.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="79">
\brief AllocInfo constructor that initializes all of the members

</member>
<member name="M:physx.PxAllocInfo.getFileName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="89">
\brief get the allocation file name
</member>
<member name="M:physx.PxAllocInfo.getLine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="95">
\brief get the allocation line
</member>
<member name="M:physx.PxAllocInfo.getAllocName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="101">
\brief get the allocation name
</member>
<member name="M:physx.PxAllocInfo.getAllocId" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="107">
\brief get the allocation ID
</member>
<member name="T:physx.PxAllocIdStats" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="120">
\brief statistics collected per AllocationId by HeapManager.
</member>
<member name="T:physx.PxCudaBufferFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="132">
\brief Hint flag to tell how the buffer will be used
</member>
<member name="T:physx.PxCudaBufferFlags.Enum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="135">
\brief Enumerations for the hint flag to tell how the buffer will be used
</member>
<member name="T:physx.PxCudaMemoryManagerStats" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="145">
\brief Memory statistics struct returned by CudaMemMgr::getStats()
</member>
<member name="T:physx.PxCudaBufferType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="156">
\brief Buffer type: made of hint flags and the memory space (Device Memory, Pinned Host Memory, ...)
</member>
<member name="M:physx.PxCudaBufferType.#ctor(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="159">
\brief PxCudaBufferType copy constructor
</member>
<member name="M:physx.PxCudaBufferType.#ctor(physx.PxCudaBufferMemorySpace.Enum,physx.PxCudaBufferFlags.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="165">
\brief PxCudaBufferType constructor to explicitely assign members
</member>
<member name="T:physx.PxCudaBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="176">
\brief Buffer which keeps informations about allocated piece of memory.
</member>
<member name="M:physx.PxCudaBuffer.getCudaMemoryManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="180">
Retrieves the manager over which the buffer was allocated.
</member>
<member name="M:physx.PxCudaBuffer.free" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="183">
Releases the buffer and the memory it used, returns true if successful.
</member>
<member name="M:physx.PxCudaBuffer.realloc(System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxAllocId.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="186">
Realloc memory. Use to shrink or resize the allocated chunk of memory of this buffer.
Returns true if successful. Fails if the operation would change the address and need a memcopy.
In that case the user has to allocate, copy and free the memory with separate steps.
Realloc to size 0 always returns false and doesn't change the state.
</member>
<member name="M:physx.PxCudaBuffer.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="192">
Returns the type of the allocated memory.
</member>
<member name="M:physx.PxCudaBuffer.getPtr" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="195">
Returns the pointer to the allocated memory.
</member>
<member name="M:physx.PxCudaBuffer.getSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="198">
Returns the size of the allocated memory.
</member>
<member name="M:physx.PxCudaBuffer.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="202">
\brief protected destructor
</member>
<member name="T:physx.PxCudaMemoryManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="207">
\brief Allocator class for different kinds of CUDA related memory.
</member>
<member name="M:physx.PxCudaMemoryManager.alloc(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxAllocId.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="211">
Allocate memory of given type and size. Returns a CudaBuffer if successful. Returns NULL if failed.
</member>
<member name="M:physx.PxCudaMemoryManager.alloc(physx.PxCudaBufferMemorySpace.Enum,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxAllocId.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="214">
Basic heap allocator without PxCudaBuffer
</member>
<member name="M:physx.PxCudaMemoryManager.free(physx.PxCudaBufferMemorySpace.Enum,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="217">
Basic heap deallocator without PxCudaBuffer
</member>
<member name="M:physx.PxCudaMemoryManager.realloc(physx.PxCudaBufferMemorySpace.Enum,System.UInt32,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxAllocId.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="220">
Basic heap realloc without PxCudaBuffer
</member>
<member name="M:physx.PxCudaMemoryManager.getStats(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCudaMemoryManagerStats*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="223">
Retrieve stats for the memory of given type. See PxCudaMemoryManagerStats.
</member>
<member name="M:physx.PxCudaMemoryManager.reserve(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="226">
Ensure that a given amount of free memory is available. Triggers CUDA allocations in size of (2^n * pageSize) if necessary.
Returns false if page allocations failed.
</member>
<member name="M:physx.PxCudaMemoryManager.setPageSize(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="230">
Set the page size. The managed memory grows by blocks 2^n * pageSize. Page allocations trigger CUDA driver allocations,
so the page size should be reasonably big. Returns false if input size was invalid, i.e. not power of two.
Default is 2 MB.
</member>
<member name="M:physx.PxCudaMemoryManager.setMaxMemorySize(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="235">
Set the upper limit until which pages of a given memory type can be allocated.
Reducing the max when it is already hit does not shrink the memory until it is deallocated by releasing the buffers which own the memory.
</member>
<member name="M:physx.PxCudaMemoryManager.getBaseSize(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="239">
Returns the base size. The base memory block stays persistently allocated over the SDKs life time.
</member>
<member name="M:physx.PxCudaMemoryManager.getPageSize(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="242">
Returns the currently set page size. The memory grows and shrinks in blocks of size (2^n pageSize)
</member>
<member name="M:physx.PxCudaMemoryManager.getMaxMemorySize(physx.PxCudaBufferType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="245">
Returns the upper limit until which the manager is allowed to allocate additional pages from the CUDA driver.
</member>
<member name="M:physx.PxCudaMemoryManager.getMappedPinnedPtr(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="248">
Get device mapped pinned host mem ptr. Operation only valid for memory space PxCudaBufferMemorySpace::T_PINNED_HOST.
</member>
<member name="M:physx.PxCudaMemoryManager.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudamemorymanager.h" line="252">
\brief protected destructor
</member>
<member name="T:physx.PxCudaInteropMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="28">
\brief Possible graphic/CUDA interoperability modes for context 
</member>
<member name="T:physx.PxCudaInteropMode.Enum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="31">
\brief Possible graphic/CUDA interoperability modes for context

</member>
<member name="F:physx.PxCudaContextManagerDesc.ctx" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="50">
 \brief The CUDA context to manage

 If left NULL, the PxCudaContextManager will create a new context.  If
 graphicsDevice is also not NULL, this new CUDA context will be bound to
 that graphics device, enabling the use of CUDA/Graphics interop features.

 If ctx is not NULL, the specified context must be applied to the thread
 that is allocating the PxCudaContextManager at creation time (aka, it
 cannot be popped).  The PxCudaContextManager will take ownership of the
 context until the manager is released.  All access to the context must be
 gated by lock acquisition.

 If the user provides a context for the PxCudaContextManager, the context
 _must_ have either been created on the GPU ordinal returned by
 PxGetSuggestedCudaDeviceOrdinal() or on your graphics device.

 It is perfectly acceptable to allocate device or host pinned memory from
 the context outside the scope of the PxCudaMemoryManager, so long as you
 manage its eventual cleanup.

</member>
<member name="F:physx.PxCudaContextManagerDesc.graphicsDevice" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="73">
 \brief D3D device pointer or OpenGl context handle

 Only applicable when ctx is NULL, thus forcing a new context to be
 created.  In that case, the created context will be bound to this
 graphics device.

</member>
<member name="F:physx.PxCudaContextManagerDesc.appGUID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="83">
 \brief Application-specific GUID

 If your application employs PhysX modules that use CUDA you need to use a GUID 
 so that patches for new architectures can be released for your game.You can obtain a GUID for your 
 application from Nvidia.

</member>
<member name="F:physx.PxCudaContextManagerDesc.interopMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="92">
 \brief The CUDA/Graphics interop mode of this context

 If ctx is NULL, this value describes the nature of the graphicsDevice
 pointer provided by the user.  Else it describes the nature of the
 context provided by the user.

</member>
<member name="F:physx.PxCudaContextManagerDesc.memoryBaseSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="102">
 \brief Size of persistent memory

 This memory is allocated up front and stays allocated until the
 PxCudaContextManager is released.  Size is in bytes, has to be power of two
 and bigger than the page size.  Set to 0 to only use dynamic pages.

 Note: On Vista O/S and above, there is a per-memory allocation overhead
 to every CUDA work submission, so we recommend that you carefully tune
 this initial base memory size to closely approximate the amount of
 memory your application will consume.

</member>
<member name="F:physx.PxCudaContextManagerDesc.memoryPageSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="116">
 \brief Size of memory pages

 The memory manager will dynamically grow and shrink in blocks multiple of
 this page size. Size has to be power of two and bigger than 0.

</member>
<member name="F:physx.PxCudaContextManagerDesc.maxMemorySize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="124">
\brief Maximum size of memory that the memory manager will allocate

</member>
<member name="T:physx.PxCudaContextManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="147">
 \brief Manages memory, thread locks, and task scheduling for a CUDA context

 A PxCudaContextManager manages access to a single CUDA context, allowing it to
 be shared between multiple scenes.   Memory allocations are dynamic: starting
 with an initial heap size and growing on demand by a configurable page size.
 The context must be acquired from the manager before using any CUDA APIs.

 The PxCudaContextManager is based on the CUDA driver API and explictly does not
 support the the CUDA runtime API (aka, CUDART).

 To enable CUDA use by an APEX scene, a PxCudaContextManager must be created
 (supplying your own CUDA context, or allowing a new context to be allocated
 for you), the PxGpuDispatcher for that context is retrieved via the
 getGpuDispatcher() method, and this is assigned to the TaskManager that is
 given to the scene via its NxApexSceneDesc.

</member>
<member name="M:physx.PxCudaContextManager.acquireContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="167">
 \brief Acquire the CUDA context for the current thread

 Acquisitions are allowed to be recursive within a single thread.
 You can acquire the context multiple times so long as you release
 it the same count.

 The context must be acquired before using most CUDA functions.

 It is not necessary to acquire the CUDA context inside GpuTask
 launch functions, because the PxGpuDispatcher will have already
 acquired the context for its worker thread.  However it is not
 harmfull to (re)acquire the context in code that is shared between
 GpuTasks and non-task functions.

</member>
<member name="M:physx.PxCudaContextManager.releaseContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="184">
 \brief Release the CUDA context from the current thread

 The CUDA context should be released as soon as practically
 possible, to allow other CPU threads (including the
 PxGpuDispatcher) to work efficiently.

</member>
<member name="M:physx.PxCudaContextManager.getMemoryManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="193">
\brief Return the PxCudaMemoryManager instance associated with this
CUDA context

</member>
<member name="T:physx.PxGpuDispatcher" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="199">
\brief Return the PxGpuDispatcher instance associated with this
CUDA context

</member>
<member name="M:physx.PxCudaContextManager.contextIsValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="205">
 \brief Context manager has a valid CUDA context

 This method should be called after creating a PxCudaContextManager,
 especially if the manager was responsible for allocating its own
 CUDA context (desc.ctx == NULL).  If it returns false, there is
 no point in assigning this manager's PxGpuDispatcher to a
 TaskManager as it will be unable to execute GpuTasks.

</member>
<member name="M:physx.PxCudaContextManager.registerResourceInCudaGL(CUgraphicsResource_st**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="242">
 \brief Register a rendering resource with CUDA

 This function is called to register render resources (allocated
 from OpenGL) with CUDA so that the memory may be shared
 between the two systems.  This is only required for render
 resources that are designed for interop use.  In APEX, each
 render resource descriptor that could support interop has a
 'registerInCUDA' boolean variable.

 The function must be called again any time your graphics device
 is reset, to re-register the resource.

 Returns true if the registration succeeded.  A registered
 resource must be unregistered before it can be released.

 \param resource [OUT] the handle to the resource that can be used with CUDA
 \param buffer [IN] GLuint buffer index to be mapped to cuda

</member>
<member name="M:physx.PxCudaContextManager.registerResourceInCudaD3D(CUgraphicsResource_st**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="263">
 \brief Register a rendering resource with CUDA

 This function is called to register render resources (allocated
 from Direct3D) with CUDA so that the memory may be shared
 between the two systems.  This is only required for render
 resources that are designed for interop use.  In APEX, each
 render resource descriptor that could support interop has a
 'registerInCUDA' boolean variable.

 The function must be called again any time your graphics device
 is reset, to re-register the resource.

 Returns true if the registration succeeded.  A registered
 resource must be unregistered before it can be released.

 \param resource [OUT] the handle to the resource that can be used with CUDA
 \param resourcePointer [IN] A pointer to either IDirect3DResource9, or ID3D10Device, or ID3D11Resource to be registered.

</member>
<member name="M:physx.PxCudaContextManager.unregisterResourceInCuda(CUgraphicsResource_st*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="284">
 \brief Unregister a rendering resource with CUDA

 If a render resource was successfully registered with CUDA using
 the registerResourceInCuda***() methods, this function must be called
 to unregister the resource before the it can be released.

</member>
<member name="M:physx.PxCudaContextManager.usingDedicatedPhysXGPU" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="293">
\brief Determine if the user has configured a dedicated PhysX GPU in the NV Control Panel
\note If using CUDA Interop, this will always return false
\returns 1 if there is a dedicated PhysX GPU
\returns 0 if there is NOT a dedicated PhysX GPU
\returns -1 if the routine is not implemented

</member>
<member name="M:physx.PxCudaContextManager.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="302">
 \brief Release the PxCudaContextManager

 When the manager instance is released, it also releases its
 PxGpuDispatcher instance and PxCudaMemoryManager.  Before the memory
 manager is released, it frees all allocated memory pages.  If the
 PxCudaContextManager created the CUDA context it was responsible
 for, it also frees that context.

 Do not release the PxCudaContextManager if there are any scenes
 using its PxGpuDispatcher.  Those scenes must be released first
 since there is no safe way to remove a PxGpuDispatcher from a
 TaskManager once the TaskManager has been given to a scene.


</member>
<member name="M:physx.PxCudaContextManager.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="321">
\brief protected destructor, use release() method

</member>
<member name="T:physx.PxScopedCudaLock" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="327">
\brief Convenience class for holding CUDA lock within a scope

</member>
<member name="M:physx.PxScopedCudaLock.#ctor(physx.PxCudaContextManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="333">
\brief ScopedCudaLock constructor

</member>
<member name="M:physx.PxScopedCudaLock.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="341">
\brief ScopedCudaLock destructor

</member>
<member name="F:physx.PxScopedCudaLock.mCtx" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="351">
\brief CUDA context manager pointer (initialized in the the constructor)

</member>
<member name="M:physx.PxGetSuggestedCudaDeviceOrdinal(physx.PxErrorCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="358">
\brief Ask the NVIDIA control panel which GPU has been selected for use by
PhysX.  Returns -1 if no PhysX capable GPU is found or GPU PhysX has
been disabled.

</member>
<member name="M:physx.PxCreateCudaContextManager(physx.PxFoundation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCudaContextManagerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxProfileZoneManager*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="365">
\brief Allocate a CUDA Context manager, complete with heaps and task dispatcher.
You only need one CUDA context manager per GPU device you intend to use for
CUDA tasks.  If mgr is NULL, no profiling of CUDA code will be possible.

</member>
<member name="M:physx.PxLoadPhysxGPUModule(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxcudacontextmanager.h" line="372">
\brief get handle of physx GPU module

</member>
<member name="T:physx.PxGpuCopyDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydesc.h" line="23">
 \brief Input descriptor for the GpuDispatcher's built-in copy kernel

 All host memory involved in copy transactions must be page-locked.
 If more than one descriptor is passed to the copy kernel in one launch,
 the descriptors themselves must be in page-locked memory.

</member>
<member name="T:physx.PxGpuCopyDesc.CopyType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydesc.h" line="32">
\brief Input descriptor for the GpuDispatcher's built-in copy kernel

</member>
<member name="M:physx.PxGpuCopyDesc.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydesc.h" line="48">
\brief Copy is optimally performed as 64bit words, requires 64bit alignment.  But it can
gracefully degrade to 32bit copies if necessary

</member>
<member name="T:physx.PxTaskType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="31">
\brief Identifies the type of each heavyweight PxTask object

\note This enum type is only used by PxTask and GpuTask objects, LightCpuTasks do not use this enum.

@see PxTask
@see PxLightCpuTask

</member>
<member name="T:physx.PxTaskType.Enum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="41">
\brief Identifies the type of each heavyweight PxTask object

</member>
<member name="T:physx.PxTaskManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="57">
 \brief The PxTaskManager interface
 
 A PxTaskManager instance holds references to user-provided dispatcher objects, when tasks are
 submitted the PxTaskManager routes them to the appropriate dispatcher and handles task profiling if enabled. 
 Users should not implement the PxTaskManager interface, the SDK creates it's own concrete PxTaskManager object
 per-scene which users can configure by passing dispatcher objects into the PxSceneDesc.

 @see PxSceneDesc
 @see CpuDispatcher
 @see PxGpuDispatcher
 @see PxSpuDispatcher

</member>
<member name="M:physx.PxTaskManager.setCpuDispatcher(physx.PxCpuDispatcher*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="74">
	\brief Set the user-provided dispatcher object for CPU tasks

	\param[in] ref The dispatcher object.

	@see CpuDispatcher

</member>
<member name="M:physx.PxTaskManager.setGpuDispatcher(physx.PxGpuDispatcher*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="83">
	\brief Set the user-provided dispatcher object for GPU tasks

	\param[in] ref The dispatcher object.

	@see PxGpuDispatcher

</member>
<member name="M:physx.PxTaskManager.setSpuDispatcher(physx.PxSpuDispatcher*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="92">
	\brief Set the user-provided dispatcher object for SPU tasks

	\param[in] ref The dispatcher object.

	@see PxSpuDispatcher

</member>
<member name="M:physx.PxTaskManager.initializeProfiling(physx.PxProfileZoneManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="101">
	\brief Set profile zone used for task profiling.

	\param[in] ref The profile zone manager

	@see PxProfileZoneManager

</member>
<member name="M:physx.PxTaskManager.getCpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="110">
	\brief Get the user-provided dispatcher object for CPU tasks

	\return The CPU dispatcher object.

	@see CpuDispatcher

</member>
<member name="M:physx.PxTaskManager.getGpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="119">
	\brief Get the user-provided dispatcher object for GPU tasks

	\return The GPU dispatcher object.

	@see PxGpuDispatcher

</member>
<member name="M:physx.PxTaskManager.getSpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="128">
	\brief Get the user-provided dispatcher object for SPU tasks

	\return The SPU dispatcher object.

	@see PxSpuDispatcher

</member>
<member name="M:physx.PxTaskManager.resetDependencies" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="137">
	\brief Reset any dependencies between Tasks

	\note Will be called at the start of every frame before tasks are submited.

	@see PxTask

</member>
<member name="M:physx.PxTaskManager.startSimulation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="146">
	\brief Called by the owning scene to start the task graph.

	\note All tasks with with ref count of 1 will be dispatched.

	@see PxTask

</member>
<member name="M:physx.PxTaskManager.stopSimulation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="155">
	\brief Called by the owning scene at the end of a simulation step to synchronize the PxGpuDispatcher

	@see PxGpuDispatcher

</member>
<member name="M:physx.PxTaskManager.taskCompleted(physx.PxTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="162">
	\brief Called by the worker threads to inform the PxTaskManager that a task has completed processing

	\param[in] task The task which has been completed

</member>
<member name="M:physx.PxTaskManager.getNamedTask(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="169">
	\brief Retrieve a task by name

	\param[in] name The unique name of a task
	\return The ID of the task with that name, or TT_NOT_PRESENT if not found

</member>
<member name="M:physx.PxTaskManager.submitNamedTask(physx.PxTask*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxTaskType.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="177">
	\brief Submit a task with a unique name.

	\param[in] task The task to be executed
	\param[in] name The unique name of a task
	\param[in] type The type of the task (default TT_CPU)
	\return The ID of the task with that name, or TT_NOT_PRESENT if not found


</member>
<member name="M:physx.PxTaskManager.submitUnnamedTask(physx.PxTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTaskType.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="188">
	\brief Submit an unnamed task.

	\param[in] task The task to be executed
	\param[in] type The type of the task (default TT_CPU)

	\return The ID of the task with that name, or TT_NOT_PRESENT if not found

</member>
<member name="M:physx.PxTaskManager.getTaskFromID(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="198">
	\brief Retrive a task given a task ID

	\param[in] id The ID of the task to return, a valid ID must be passed or results are undefined

	\return The task associated with the ID

</member>
<member name="M:physx.PxTaskManager.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="207">
\brief Release the PxTaskManager object, referneced dispatchers will not be released

</member>
<member name="M:physx.PxTaskManager.createTaskManager(physx.PxCpuDispatcher*,physx.PxGpuDispatcher*,physx.PxSpuDispatcher*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtaskmanager.h" line="212">
\brief Construct a new PxTaskManager instance with the given [optional] dispatchers

</member>
<member name="T:physx.PxBaseTask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="23">
 \brief Base class of all task types

 PxBaseTask defines a runnable reference counted task with built-in profiling.

</member>
<member name="M:physx.PxBaseTask.run" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="34">
 \brief The user-implemented run method where the task's work should be performed

 run() methods must be thread safe, stack friendly (no alloca, etc), and
 must never block.

</member>
<member name="M:physx.PxBaseTask.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="42">
     * \brief Return a user-provided task name for profiling purposes.
     *
     * It does not have to be unique, but unique names are helpful.
	 *
	 * \return The name of this task

</member>
<member name="M:physx.PxBaseTask.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="58">
\brief Implemented by derived implementation classes
	 *
	 * A task may assume in its release() method that the task system no longer holds 
	 * references to it - so it may safely run its destructor, recycle itself, etc.
	 * provided no additional user references to the task exist

</member>
<member name="M:physx.PxBaseTask.runProfiled(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="67">
     * \brief Execute user run method with wrapping profiling events.
     *
     * Optional entry point for use by CpuDispatchers.
	 *
	 * \param[in] threadId The threadId of the thread that executed the task.

</member>
<member name="M:physx.PxBaseTask.setProfileStat(System.UInt16)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="81">
     * \brief Specify stop event statistic
     *
     * If called before or while the task is executing, the given value
	 * will appear in the task's event bar in the profile viewer
	 *
	 * \param[in] stat The stat to signal when the task is finished

</member>
<member name="M:physx.PxBaseTask.getTaskManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="94">
 \brief Return PxTaskManager to which this task was submitted

 Note, can return NULL if task was not submitted, or has been
 completed.

</member>
<member name="T:physx.PxTask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="114">
 \brief A PxBaseTask implementation with deferred execution and full dependencies

 A PxTask must be submitted to a PxTaskManager to to be executed, Tasks may
 optionally be named when they are submitted.

</member>
<member name="M:physx.PxTask.addReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="153">
\brief Manually increment this task's reference count.  The task will
not be allowed to run until removeReference() is called.

</member>
<member name="M:physx.PxTask.removeReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="163">
\brief Manually decrement this task's reference count.  If the reference
count reaches zero, the task will be dispatched.

</member>
<member name="M:physx.PxTask.getReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="173">
\brief Return the ref-count for this task 

</member>
<member name="M:physx.PxTask.getTaskID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="181">
\brief Return the unique ID for this task

</member>
<member name="M:physx.PxTask.submitted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="189">
 \brief Called by PxTaskManager at submission time for initialization

 Perform simulation step initialization here.

</member>
<member name="M:physx.PxTask.requestSyncPoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="201">
\brief Specify that the GpuTask sync flag be set

</member>
<member name="T:physx.PxLightCpuTask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="220">
 \brief A PxBaseTask implementation with immediate execution and simple dependencies

 A PxLightCpuTask bypasses the PxTaskManager launch dependencies and will be
 submitted directly to your scene's CpuDispatcher.  When the run() function
 completes, it will decrement the reference count of the specified
 continuation task.

 You must use a full-blown PxTask if you want your task to be resolved
 by another PxTask, or you need more than a single dependency to be
 resolved when your task completes, or your task will not run on the
 CpuDispatcher.

</member>
<member name="M:physx.PxLightCpuTask.setContinuation(physx.PxTaskManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBaseTask*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="246">
     * \brief Initialize this task and specify the task that will have its ref count decremented on completion.
     *
     * Submission is deferred until the task's mRefCount is decremented to zero.  
	 * Note that we only use the PxTaskManager to query the appropriate dispatcher.
	 *
	 * \param[in] tm The PxTaskManager this task is managed by
	 * \param[in] c The task to be executed when this task has finished running

</member>
<member name="M:physx.PxLightCpuTask.setContinuation(physx.PxBaseTask*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="267">
     * \brief Initialize this task and specify the task that will have its ref count decremented on completion.
     *
     * This overload of setContinuation() queries the PxTaskManager from the continuation
     * task, which cannot be NULL.
	 * \param[in] c The task to be executed after this task has finished running

</member>
<member name="M:physx.PxLightCpuTask.getContinuation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="288">
\brief Retrieves continuation task

</member>
<member name="M:physx.PxLightCpuTask.removeReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="296">
\brief Manually decrement this task's reference count.  If the reference
count reaches zero, the task will be dispatched.

</member>
<member name="M:physx.PxLightCpuTask.getReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="305">
\brief Return the ref-count for this task 
</member>
<member name="M:physx.PxLightCpuTask.addReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="311">
\brief Manually increment this task's reference count.  The task will
not be allowed to run until removeReference() is called.

</member>
<member name="M:physx.PxLightCpuTask.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxtask.h" line="320">
 \brief called by CpuDispatcher after run method has completed

 Decrements the continuation task's reference count, if specified.

</member>
<member name="T:physx.PxGpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="30">
\brief A GpuTask dispatcher
 *
 * A PxGpuDispatcher executes GpuTasks submitted by one or more TaskManagers (one
 * or more scenes).  It maintains a CPU worker thread which waits on GpuTask
 * "groups" to be submitted.  The submission API is explicitly sessioned so that
 * GpuTasks are dispatched together as a group whenever possible to improve
 * parallelism on the GPU.
 *
 * A PxGpuDispatcher cannot be allocated ad-hoc, they are created as a result of
 * creating a PxCudaContextManager.  Every PxCudaContextManager has a PxGpuDispatcher
 * instance that can be queried.  In this way, each PxGpuDispatcher is tied to
 * exactly one CUDA context.
 *
 * A scene will use CPU fallback Tasks for GpuTasks if the PxTaskManager provided
 * to it does not have a PxGpuDispatcher.  For this reason, the PxGpuDispatcher must
 * be assigned to the PxTaskManager before the PxTaskManager is given to a scene.
 *
 * Multiple TaskManagers may safely share a single PxGpuDispatcher instance, thus
 * enabling scenes to share a CUDA context.
 *
 * Only failureDetected() is intended for use by the user.  The rest of the
 * PxGpuDispatcher public methods are reserved for internal use by only both
 * TaskManagers and GpuTasks.

</member>
<member name="M:physx.PxGpuDispatcher.startSimulation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="57">
\brief Record the start of a simulation step
	 *
	 * A PxTaskManager calls this function to record the beginning of a simulation
	 * step.  The PxGpuDispatcher uses this notification to initialize the
	 * profiler state.

</member>
<member name="M:physx.PxGpuDispatcher.startGroup" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="65">
\brief Record the start of a GpuTask batch submission
	 *
	 * A PxTaskManager calls this function to notify the PxGpuDispatcher that one or
	 * more GpuTasks are about to be submitted for execution.  The PxGpuDispatcher
	 * will not read the incoming task queue until it receives one finishGroup()
	 * call for each startGroup() call.  This is to ensure as many GpuTasks as
	 * possible are executed together as a group, generating optimal parallelism
	 * on the GPU.

</member>
<member name="M:physx.PxGpuDispatcher.submitTask(physx.PxTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="76">
\brief Submit a GpuTask for execution
	 *
	 * Submitted tasks are pushed onto an incoming queue.  The PxGpuDispatcher
	 * will take the contents of this queue every time the pending group count
	 * reaches 0 and run the group of submitted GpuTasks as an interleaved
	 * group.

</member>
<member name="M:physx.PxGpuDispatcher.finishGroup" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="85">
\brief Record the end of a GpuTask batch submission
	 *
	 * A PxTaskManager calls this function to notify the PxGpuDispatcher that it is
	 * done submitting a group of GpuTasks (GpuTasks which were all make ready
	 * to run by the same prerequisite dependency becoming resolved).  If no
	 * other group submissions are in progress, the PxGpuDispatcher will execute
	 * the set of ready tasks.

</member>
<member name="M:physx.PxGpuDispatcher.addCompletionPrereq(physx.PxBaseTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="95">
\brief Add a CUDA completion prerequisite dependency to a task
	 *
	 * A GpuTask calls this function to add a prerequisite dependency on another
	 * task (usually a CpuTask) preventing that task from starting until all of
	 * the CUDA kernels and copies already launched have been completed.  The
	 * PxGpuDispatcher will increment that task's reference count, blocking its
	 * execution, until the CUDA work is complete.
	 *
	 * This is generally only required when a CPU task is expecting the results
	 * of the CUDA kernels to have been copied into host memory.
	 *
	 * This mechanism is not at all not required to ensure CUDA kernels and
	 * copies are issued in the correct order.  Kernel issue order is determined
	 * by normal task dependencies.  The rule of thumb is to only use a blocking
	 * completion prerequisite if the task in question depends on a completed
	 * GPU-&gt;Host DMA.
	 *
	 * The PxGpuDispatcher issues a blocking event record to CUDA for the purposes
	 * of tracking the already submitted CUDA work.  When this event is
	 * resolved, the PxGpuDispatcher manually decrements the reference count of
	 * the specified task, allowing it to execute (assuming it does not have
	 * other pending prerequisites).

</member>
<member name="M:physx.PxGpuDispatcher.getCudaContextManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="120">
\brief Retrieve the PxCudaContextManager associated with this
	 * PxGpuDispatcher
	 *
	 * Every PxCudaContextManager has one PxGpuDispatcher, and every PxGpuDispatcher
	 * has one PxCudaContextManager.

</member>
<member name="M:physx.PxGpuDispatcher.stopSimulation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="128">
\brief Record the end of a simulation frame
	 *
	 * A PxTaskManager calls this function to record the completion of its
	 * dependency graph.  If profiling is enabled, the PxGpuDispatcher will
	 * trigger the retrieval of profiling data from the GPU at this point.

</member>
<member name="M:physx.PxGpuDispatcher.failureDetected" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="136">
\brief Returns true if a CUDA call has returned a non-recoverable error
	 *
	 * A return value of true indicates a fatal error has occurred. To protect
	 * itself, the PxGpuDispatcher enters a fall through mode that allows GpuTasks
	 * to complete without being executed.  This allows simulations to continue
	 * but leaves GPU content static or corrupted.
	 *
	 * The user may try to recover from these failures by deleting GPU content
	 * so the visual artifacts are mimimized.  But there is no way to recover
	 * the state of the GPU actors before the failure.  Once a CUDA context is
	 * in this state, the only recourse is to create a new CUDA context, a new
	 * scene, and start over.
	 *
	 * This is our "Best Effort" attempt to not turn a soft failure into a hard
	 * failure because continued use of a CUDA context after it has returned an
	 * error will usually result in a driver reset.  However if the initial
	 * failure was serious enough, a reset may have already occurred by the time
	 * we learn of it.

</member>
<member name="M:physx.PxGpuDispatcher.forceFailureMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="157">
\brief Force the PxGpuDispatcher into failure mode
	 *
	 * This API should be used if user code detects a non-recoverable CUDA
	 * error.  This ensures the PxGpuDispatcher does not launch any further
	 * CUDA work.  Subsequent calls to failureDetected() will return true.

</member>
<member name="M:physx.PxGpuDispatcher.getCurrentProfileBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="165">
\brief Returns a pointer to the current in-use profile buffer
	 *
	 * The returned pointer should be passed to all kernel launches to enable
	 * CTA/Warp level profiling.  If a data collector is not attached, or CTA
	 * profiling is not enabled, the pointer will be zero.

</member>
<member name="M:physx.PxGpuDispatcher.registerKernelNames(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**,System.UInt16)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="173">
\brief Register kernel names with PlatformAnalyzer
	 *
	 * The returned PxU16 must be stored and used as a base offset for the ID
	 * passed to the KERNEL_START|STOP_EVENT macros.

</member>
<member name="M:physx.PxGpuDispatcher.launchCopyKernel(physx.PxGpuCopyDesc*,System.UInt32,CUstream_st*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="180">
\brief Launch a copy kernel with arbitrary number of copy commands
	 *
	 * This method is intended to be called from Kernel GpuTasks, but it can
	 * function outside of that context as well.
	 *
	 * If count is 1, the descriptor is passed to the kernel as arguments, so it
	 * may be declared on the stack.
	 *
	 * If count is greater than 1, the kernel will read the descriptors out of
	 * host memory.  Because of this, the descriptor array must be located in
	 * page locked (pinned) memory.  The provided descriptors may be modified by
	 * this method (converting host pointers to their GPU mapped equivalents)
	 * and should be considered *owned* by CUDA until the current batch of work
	 * has completed, so descriptor arrays should not be freed or modified until
	 * you have received a completion notification.
	 *
	 * If your GPU does not support mapping of page locked memory (SM&gt;=1.1),
	 * this function degrades to calling CUDA copy methods.

</member>
<member name="M:physx.PxGpuDispatcher.getPreLaunchTask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="201">
\brief Query pre launch task that runs before launching gpu kernels.
	 *
	 * This is part of an optional feature to schedule multiple gpu features 
	 * at the same time to get kernels to run in parallel.
	 * \note Do *not* set the continuation on the returned task, but use addPreLaunchDependent().

</member>
<member name="M:physx.PxGpuDispatcher.addPreLaunchDependent(physx.PxBaseTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="209">
\brief Adds a gpu launch task that gets executed after the pre launch task.
	 *
	 * This is part of an optional feature to schedule multiple gpu features 
	 * at the same time to get kernels to run in parallel.
	 * \note Each call adds a reference to the pre-launch task. 

</member>
<member name="M:physx.PxGpuDispatcher.getPostLaunchTask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="217">
\brief Query post launch task that runs after the gpu is done.
	 *
	 * This is part of an optional feature to schedule multiple gpu features 
	 * at the same time to get kernels to run in parallel.
	 * \note Do *not* set the continuation on the returned task, but use addPostLaunchDependent().

</member>
<member name="M:physx.PxGpuDispatcher.addPostLaunchDependent(physx.PxBaseTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="225">
\brief Adds a task that gets executed after the post launch task.
	 *
	 * This is part of an optional feature to schedule multiple gpu features 
	 * at the same time to get kernels to run in parallel.
	 * \note Each call adds a reference to the pre-launch task. 

</member>
<member name="M:physx.PxGpuDispatcher.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpudispatcher.h" line="234">
\brief protected destructor
	 *
	 * GpuDispatchers are allocated and freed by their PxCudaContextManager.

</member>
<member name="T:physx.PxGpuCopyDescQueue" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydescqueue.h" line="26">
\brief Container class for queueing PxGpuCopyDesc instances in pinned (non-pageable) CPU memory
</member>
<member name="M:physx.PxGpuCopyDescQueue.#ctor(physx.PxGpuDispatcher*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydescqueue.h" line="30">
\brief PxGpuCopyDescQueue constructor
</member>
<member name="M:physx.PxGpuCopyDescQueue.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydescqueue.h" line="41">
\brief PxGpuCopyDescQueue destructor
</member>
<member name="M:physx.PxGpuCopyDescQueue.reset(CUstream_st*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydescqueue.h" line="50">
\brief Reset the enqueued copy descriptor list

Must be called at least once before any copies are enqueued, and each time the launched
copies are known to have been completed.  The recommended use case is to call this at the
start of each simulation step.
</member>
<member name="M:physx.PxGpuCopyDescQueue.enqueue(physx.PxGpuCopyDesc*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydescqueue.h" line="81">
\brief Enqueue the specified copy descriptor, or launch immediately if no room is available
</member>
<member name="M:physx.PxGpuCopyDescQueue.flushEnqueued" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgpucopydescqueue.h" line="100">
\brief Launch all copies queued since the last flush or reset
</member>
<member name="T:physx.PxGpuTaskHint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgputask.h" line="25">
\brief Define the 'flavor' of a PxGpuTask
 *
 * Each PxGpuTask should have a specific function; either copying data to the
 * device, running kernels on that data, or copying data from the device.
 *
 * For optimal performance, the dispatcher should run all available HtoD tasks
 * before running all Kernel tasks, and all Kernel tasks before running any DtoH
 * tasks.  This provides maximal kernel overlap and the least number of CUDA
 * flushes.

</member>
<member name="T:physx.PxGpuTaskHint.Enum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgputask.h" line="37">
\brief Enums for the type of GPU task
</member>
<member name="T:physx.PxGpuTask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgputask.h" line="48">
\brief PxTask implementation for launching CUDA work

</member>
<member name="M:physx.PxGpuTask.launchInstance(CUstream_st*,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgputask.h" line="56">
 \brief iterative "run" function for a PxGpuTask

 The GpuDispatcher acquires the CUDA context for the duration of this
 function call, and it is highly recommended that the PxGpuTask use the
 provided CUstream for all kernels.

 kernelIndex will be 0 for the initial call and incremented before each
 subsequent call.  Once launchInstance() returns false, its PxGpuTask is
 considered completed and is released.

</member>
<member name="M:physx.PxGpuTask.getTaskHint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgputask.h" line="69">
\brief Returns a hint indicating the function of this task

</member>
<member name="M:physx.PxGpuTask.setCompletionTask(physx.PxBaseTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgputask.h" line="74">
\brief Specify a task that will have its reference count decremented
when this task is released

</member>
<member name="F:physx.PxGpuTask.mComp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxgputask.h" line="94">
\brief A pointer to the completion task
</member>
<member name="T:physx.PxSpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxspudispatcher.h" line="23">
\brief A PxSpuDispatcher 

A PxSpuDispatcher is responsible for scheduling the execution of SPU tasks passed to it by the SDK.

@see PxSpuTask
@see PxTaskManager

</member>
<member name="M:physx.PxSpuDispatcher.submitTask(physx.PxSpuTask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxspudispatcher.h" line="34">
	\brief Called by the TaskManager when an SPU task is to be queued for execution.
	
	Upon receiving a task, the dispatcher should schedule the task
	to run on any available SPUs.  After the task has been run,
	it should call the release() method and discard it's pointer.

	\param[in] task The task to be run.

	@see PxSpuTask

</member>
<member name="T:physx.PxSpuTask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="24">
 \brief A task to be executed on one or more SPUs

 Each PxSpuTask can run in a data parallel fashion on up to 6 SPUs. To coordinate the
 workers, each SPU will be passed its own set of arguments.

 When all SPU workers have completed their work, the task is considered complete and the
 SpuDispatcher will call release on the task, this in turn will call removeReference() 
 on the task's continuation.

 In this way LightCpuTasks may be launched automatically at PxSpuTask completion and vice versa.

 Users should not need to implement or create SpuTasks directly. The SDK creates the tasks
 internally and will submit them to the TaskManager's SpuDispatcher for execution. The
 SpuDispatcher that will be used is configured on a per-scene basis through the PxSceneDesc.
 
 @see SpuDispatcher
 @see PxSceneDesc

</member>
<member name="M:physx.PxSpuTask.#ctor(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,System.UInt32!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="50">
\brief Construct a new PxSpuTask object
\param[in] elfStart The starting address of the embedded SPU binary
\param[in] elfSize The size in bytes of the embedded SPU binary
\param[in] numSpus The number of SPU workers this task will run across
\param[in] args A pointer to an array of arguments, must be at least kArgsPerSpu*numSpus big

</member>
<member name="M:physx.PxSpuTask.getSpuCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="72">
\brief Return the number of SPUs used to run this task

</member>
<member name="M:physx.PxSpuTask.setSpuCount(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="80">
\brief Set the number of SPUs to be used when running this task

</member>
<member name="M:physx.PxSpuTask.getArgs(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="89">
\brief Retrieve the per-SPU argument
\param[in] spuIndex The SPU that we want to retrieve the argument for
\return A pointer to the parameters for the given SPU index

</member>
<member name="M:physx.PxSpuTask.setArgs(System.UInt32,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="101">
\brief Set the arguments for a given SPU worker
\param[in] spuIndex The index of the SPU worker whose arguments are to be set
\param[in] arg0 The first argument to be passed to this worker
\param[in] arg1 The second argument to be passed to this worker	

</member>
<member name="M:physx.PxSpuTask.getElfStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="115">
\brief Return the address to the start of the embedded elf binary for this task

</member>
<member name="M:physx.PxSpuTask.getElfSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="123">
\brief Return the size of the embedded elf binary for this task

</member>
<member name="M:physx.PxSpuTask.notifySpuFinish" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="131">
\brief Called by the SpuDispatcher when a SPU worker has completed, when all
workers have completed the task is considered finished and the continuation will
have it's ref count decremented.

</member>
<member name="M:physx.PxSpuTask.removeReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="155">
\brief Modifies PxLightCpuTask's behavior by submitting to the SpuDispatcher

</member>
<member name="M:physx.PxSpuTask.run" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="164">
\brief Allow the task to perform PPU side intialization before the task is
scheduled to the SPUs.

This should be called by the SpuDispatcher from whichever thread calls
submitTask(); the task should be scheduled to the SPUs immediately 
following this function returning.

</member>
<member name="M:physx.PxSpuTask.runProfiled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxtask\pxsputask.h" line="174">
\brief The same as run() but will emit PVD profile events.

</member>
<member name="T:physx.PxGeometryType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometry.h" line="29">
\brief A geometry type.

Used to distinguish the type of a ::PxGeometry object.

</member>
<member name="T:physx.PxGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometry.h" line="51">
\brief A geometry object.

A geometry object defines the characteristics of a spatial object, but without any information
about its placement in the world.

\note This is an abstract class.  You cannot create instances directly.  Create an instance of one of the derived classes instead.

</member>
<member name="M:physx.PxGeometry.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometry.h" line="62">
\brief Returns the type of the geometry.
\return The type of the object.

</member>
<member name="T:physx.PxBoxGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxboxgeometry.h" line="27">
\brief Class representing the geometry of a box.  

The geometry of a box can be fully specified by its half extents.  This is the half of its width, height, and depth.
\note The scaling of the box is expected to be baked into these values, there is no additional scaling parameter.

</member>
<member name="M:physx.PxBoxGeometry.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxboxgeometry.h" line="36">
\brief Default constructor, initializes to a box with zero dimensions.

</member>
<member name="M:physx.PxBoxGeometry.#ctor(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxboxgeometry.h" line="41">
\brief Constructor to initialize half extents from scalar parameters.
\param hx Initial half extents' x component.
\param hy Initial half extents' y component.
\param hz Initial half extents' z component.

</member>
<member name="M:physx.PxBoxGeometry.#ctor(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxboxgeometry.h" line="49">
\brief Constructor to initialize half extents from vector parameter.
\param halfExtents_ Initial half extents.

</member>
<member name="M:physx.PxBoxGeometry.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxboxgeometry.h" line="55">
	\brief Returns true if the geometry is valid.

	\return True if the current settings are valid

	\note A valid box has a positive extent in each direction (halfExtents.x &gt; 0, halfExtents.y &gt; 0, halfExtents.z &gt; 0). 
	It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a box that has zero extent in any direction.

	@see PxRigidActor::createShape, PxPhysics::createShape

</member>
<member name="F:physx.PxBoxGeometry.halfExtents" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxboxgeometry.h" line="68">
\brief Half of the width, height, and depth of the box.

</member>
<member name="T:physx.PxCapsuleGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxcapsulegeometry.h" line="26">
\brief Class representing the geometry of a capsule.

Capsules are shaped as the union of a cylinder of length 2 * halfHeight and with the 
given radius centered at the origin and extending along the x axis, and two hemispherical ends.
\note The scaling of the capsule is expected to be baked into these values, there is no additional scaling parameter.

The function PxTransformFromSegment is a helper for generating an appropriate transform for the capsule from the capsule's interior line segment.

@see PxTransformFromSegment

</member>
<member name="M:physx.PxCapsuleGeometry.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxcapsulegeometry.h" line="40">
\brief Default constructor, initializes to a capsule with zero height and radius.

</member>
<member name="M:physx.PxCapsuleGeometry.#ctor(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxcapsulegeometry.h" line="45">
\brief Constructor, initializes to a capsule with passed radius and half height.

</member>
<member name="M:physx.PxCapsuleGeometry.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxcapsulegeometry.h" line="50">
	\brief Returns true if the geometry is valid.

	\return True if the current settings are valid.

	\note A valid capsule has radius &gt; 0, halfHeight &gt; 0.
	It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a capsule that has zero radius or height.

	@see PxRigidActor::createShape, PxPhysics::createShape

</member>
<member name="F:physx.PxCapsuleGeometry.radius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxcapsulegeometry.h" line="63">
\brief The radius of the capsule.

</member>
<member name="F:physx.PxCapsuleGeometry.halfHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxcapsulegeometry.h" line="68">
\brief half of the capsule's height, measured between the centers of the hemispherical ends.

</member>
<member name="M:physx.PxTransformFromSegment(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxcapsulegeometry.h" line="88">
\brief creates a transform from the endpoints of a segment, suitable for an actor transform for a PxCapsuleGeometry

\param[in] p0 one end of major axis of the capsule
\param[in] p1 the other end of the axis of the capsule
\param[out] halfHeight the halfHeight of the capsule. This parameter is optional.
\return A PxTransform which will transform the vector (1,0,0) to the capsule axis shrunk by the halfHeight

</member>
<member name="T:physx.PxHullPolygon" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="28">
\brief Polygon data

Plane format: (mPlane[0],mPlane[1],mPlane[2]).dot(x) + mPlane[3] = 0
With the normal outward-facing from the hull.

</member>
<member name="T:physx.PxConvexMesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="41">
\brief A convex mesh.

Internally represented as a list of convex polygons. The number
of polygons is limited to 256.

To avoid duplicating data when you have several instances of a particular
mesh positioned differently, you do not use this class to represent a
convex object directly. Instead, you create an instance of this mesh via
the PxConvexMeshGeometry and PxShape classes.

<h3>Creation</h3>

To create an instance of this class call PxPhysics::createConvexMesh(),
and PxConvexMesh::release() to delete it. This is only possible
once you have released all of its #PxShape instances.

<h3>Visualizations:</h3>
\li #PxVisualizationParameter::eCOLLISION_AABBS
\li #PxVisualizationParameter::eCOLLISION_SHAPES
\li #PxVisualizationParameter::eCOLLISION_AXES
\li #PxVisualizationParameter::eCOLLISION_FNORMALS
\li #PxVisualizationParameter::eCOLLISION_EDGES

@see PxConvexMeshDesc PxPhysics.createConvexMesh()

</member>
<member name="M:physx.PxConvexMesh.getNbVertices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="71">
\brief Returns the number of vertices.
\return	Number of vertices.
@see getVertices()

</member>
<member name="M:physx.PxConvexMesh.getVertices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="78">
\brief Returns the vertices.
\return	Array of vertices.
@see getNbVertices()

</member>
<member name="M:physx.PxConvexMesh.getIndexBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="85">
\brief Returns the index buffer.
\return	Index buffer.
@see getNbPolygons() getPolygonData()

</member>
<member name="M:physx.PxConvexMesh.getNbPolygons" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="92">
\brief Returns the number of polygons.
\return	Number of polygons.
@see getIndexBuffer() getPolygonData()

</member>
<member name="M:physx.PxConvexMesh.getPolygonData(System.UInt32,physx.PxHullPolygon*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="99">
\brief Returns the polygon data.
\param[in] index	Polygon index in [0 ; getNbPolygons()[.
\param[out] data	Polygon data.
\return	True if success.
@see getIndexBuffer() getNbPolygons()

</member>
<member name="M:physx.PxConvexMesh.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="108">
	\brief Decrements the reference count of a convex mesh and releases it if the new reference count is zero.	
	
	The mesh is destroyed when the application's reference is released and all shapes referencing the mesh are destroyed.

	@see PxPhysics.createConvexMesh() PxConvexMeshGeometry PxShape

</member>
<member name="M:physx.PxConvexMesh.getReferenceCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="117">
	\brief Returns the reference count for shared meshes.

	At creation, the reference count of the convex mesh is 1. Every shape referencing this convex mesh increments the
	count by 1.	When the reference count reaches 0, and only then, the convex mesh gets destroyed automatically.

	\return the current reference count.

</member>
<member name="M:physx.PxConvexMesh.getMassInformation(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMat33*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="127">
	\brief Returns the mass properties of the mesh assuming unit density.

	The following relationship holds between mass and volume:

		mass = volume * density

	The mass of a unit density mesh is equal to its volume, so this function returns the volume of the mesh.

	Similarly, to obtain the localInertia of an identically shaped object with a uniform density of d, simply multiply the
	localInertia of the unit density mesh by d.

	\param[out] mass The mass of the mesh assuming unit density.
	\param[out] localInertia The inertia tensor in mesh local space assuming unit density.
	\param[out] localCenterOfMass Position of center of mass (or centroid) in mesh local space.

</member>
<member name="M:physx.PxConvexMesh.getLocalBounds" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmesh.h" line="145">
	\brief Returns the local-space (vertex space) AABB from the convex mesh.

	\return	local-space bounds

</member>
<member name="T:physx.PxMeshScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="28">
\brief A class expressing a nonuniform scaling transformation.

The scaling is along arbitrary axes that are specified by PxMeshScale::rotation.

\note Currently only positive scale values are supported.

@see PxConvexMeshGeometry PxTriangleMeshGeometry

</member>
<member name="M:physx.PxMeshScale.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="46">
\brief Constructor initializes to identity scale.

</member>
<member name="M:physx.PxMeshScale.#ctor(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="53">
\brief Constructor from scalar.

</member>
<member name="M:physx.PxMeshScale.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="60">
\brief Constructor to initialize to arbitrary scaling.

</member>
<member name="M:physx.PxMeshScale.isIdentity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="71">
\brief Returns true if the scaling is an identity transformation.

</member>
<member name="M:physx.PxMeshScale.getInverse" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="79">
\brief Returns the inverse of this scaling transformation.

</member>
<member name="M:physx.PxMeshScale.createIdentity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="87">
\deprecated
\brief Returns the identity scaling transformation.

</member>
<member name="M:physx.PxMeshScale.toMat33" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshscale.h" line="96">
\brief Converts this transformation to a 3x3 matrix representation.

</member>
<member name="T:physx.PxConvexMeshGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmeshgeometry.h" line="29">
\brief Convex mesh geometry class.

This class unifies a convex mesh object with a scaling transform, and 
lets the combined object be used anywhere a PxGeometry is needed.

The scaling is a transform along arbitrary axes contained in the scale object.
The vertices of the mesh in geometry (or shape) space is the 
PxMeshScale::toMat33() transform, multiplied by the vertex space vertices 
in the PxConvexMesh object.

</member>
<member name="M:physx.PxConvexMeshGeometry.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmeshgeometry.h" line="43">
	\brief Default constructor.

	Creates an empty object with a NULL mesh and identity scale.

</member>
<member name="M:physx.PxConvexMeshGeometry.#ctor(physx.PxConvexMesh*,physx.PxMeshScale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmeshgeometry.h" line="54">
\brief Constructor.
\param[in] mesh The Mesh pointer.  May be NULL, though this will not make the object valid for shape construction.
\param[in] scaling The scale factor.


</member>
<member name="M:physx.PxConvexMeshGeometry.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmeshgeometry.h" line="67">
	\brief Returns true if the geometry is valid.

	\return True if the current settings are valid for shape creation.

	\note A valid convex mesh has a positive scale value in each direction (scale.x &gt; 0, scale.y &gt; 0, scale.z &gt; 0).
	It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a convex that has zero extent in any direction.

	@see PxRigidActor::createShape, PxPhysics::createShape

</member>
<member name="F:physx.PxConvexMeshGeometry.scale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmeshgeometry.h" line="81">
\brief Scale factor that transforms from vertex space to shape space.

</member>
<member name="F:physx.PxConvexMeshGeometry.convexMesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxconvexmeshgeometry.h" line="85">
\brief The mesh data in vertex space.

</member>
<member name="T:physx.PxSphereGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxspheregeometry.h" line="26">
\brief A class representing the geometry of a sphere.

Spheres are defined by their radius.
\note The scaling of the sphere is expected to be baked into this value, there is no additional scaling parameter.

</member>
<member name="M:physx.PxSphereGeometry.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxspheregeometry.h" line="38">
	\brief Returns true if the geometry is valid.

	\return True if the current settings are valid

	\note A valid sphere has radius &gt; 0.  
	It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a sphere that has zero radius.

	@see PxRigidActor::createShape, PxPhysics::createShape

</member>
<member name="F:physx.PxSphereGeometry.radius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxspheregeometry.h" line="52">
\brief The radius of the sphere.

</member>
<!-- Discarding badly formed XML document comment for member 'T:physx.PxPlaneGeometry'. -->
<member name="M:physx.PxPlaneGeometry.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxplanegeometry.h" line="46">
	\brief Returns true if the geometry is valid.

	\return True if the current settings are valid

</member>
<member name="M:physx.PxTransformFromPlaneEquation(physx.PxPlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxplanegeometry.h" line="64">
\brief creates a transform from a plane equation, suitable for an actor transform for a PxPlaneGeometry

\param[in] plane the desired plane equation
\return a PxTransform which will transform the plane PxPlane(1,0,0,0) to the specified plane

</member>
<member name="M:physx.PxPlaneEquationFromTransform(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxplanegeometry.h" line="72">
\brief creates a plane equation from a transform, such as the actor transform for a PxPlaneGeometry

\param[in] transform the transform
\return the plane

</member>
<member name="T:physx.PxMeshGeometryFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemeshgeometry.h" line="31">
\brief Some flags to control the simulated behavior of the mesh geometry.

Used in ::PxMeshGeometryFlags.

</member>
<member name="D:physx.PxMeshGeometryFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemeshgeometry.h" line="46">
\brief collection of set bits defined in PxMeshGeometryFlag.

@see PxMeshGeometryFlag

</member>
<member name="T:physx.PxTriangleMeshGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemeshgeometry.h" line="54">
\brief Triangle mesh geometry class.

This class unifies a mesh object with a scaling transform, and 
lets the combined object be used anywhere a PxGeometry is needed.

The scaling is a transform along arbitrary axes contained in the scale object.
The vertices of the mesh in geometry (or shape) space is the 
PxMeshScale::toMat33() transform, multiplied by the vertex space vertices 
in the PxConvexMesh object.

</member>
<member name="M:physx.PxTriangleMeshGeometry.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemeshgeometry.h" line="82">
	\brief Returns true if the geometry is valid.

	\return True if the current settings are valid.

	\note A valid triangle mesh has a positive scale value in each direction (scale.scale.x &gt; 0, scale.scale.y &gt; 0, scale.scale.z &gt; 0).
	It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a triangle mesh that has zero extents in any direction.

	@see PxRigidActor::createShape, PxPhysics::createShape

</member>
<member name="T:physx.PxHeightFieldGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldgeometry.h" line="32">
\brief Height field geometry class.

This class allows to create a scaled height field geometry instance.

There is a minimum allowed value for Y and XZ scaling - PX_MIN_HEIGHTFIELD_XZ_SCALE, heightfield creation will fail if XZ value is below this value.

</member>
<member name="M:physx.PxHeightFieldGeometry.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldgeometry.h" line="65">
	\brief Returns true if the geometry is valid.

	\return True if the current settings are valid

	\note A valid height field has a positive scale value in each direction (heightScale &gt; 0, rowScale &gt; 0, columnScale &gt; 0).
	It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a height field that has zero extents in any direction.

	@see PxRigidActor::createShape, PxPhysics::createShape

</member>
<member name="F:physx.PxHeightFieldGeometry.heightField" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldgeometry.h" line="78">
\brief The height field data.

</member>
<member name="F:physx.PxHeightFieldGeometry.heightScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldgeometry.h" line="83">
\brief The scaling factor for the height field in vertical direction (y direction in local space).

</member>
<member name="F:physx.PxHeightFieldGeometry.rowScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldgeometry.h" line="88">
\brief The scaling factor for the height field in the row direction (x direction in local space).

</member>
<member name="F:physx.PxHeightFieldGeometry.columnScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldgeometry.h" line="93">
\brief The scaling factor for the height field in the column direction (z direction in local space).

</member>
<member name="F:physx.PxHeightFieldGeometry.heightFieldFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldgeometry.h" line="98">
\brief Flags to specify some collision properties for the height field.

</member>
<member name="T:physx.PxGeometryHolder" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryhelpers.h" line="38">
\brief Geometry holder class

This class contains enough space to hold a value of any PxGeometry subtype.

Its principal use is as a convenience class to allow geometries to be returned polymorphically 
from functions. See PxShape::getGeometry();

</member>
<member name="T:physx.PxHitFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="31">
\brief Scene query and geometry query behavior flags.

PxHitFlags are used for 3 different purposes:

1) To request hit fields to be filled in by scene queries (such as hit position, normal, distance or UVs).
2) Once query is completed, to indicate which fields are valid (note that a query may produce more valid fields than requested).
3) To specify additional options for the narrow phase and mid-phase intersection routines.

All these flags apply to both scene queries and geometry queries (PxGeometryQuery).

@see PxRaycastHit PxSweepHit PxOverlapHit PxScene.raycast PxScene.sweep PxScene.overlap PxGeometryQuery

</member>
<member name="F:eMODIFIABLE_FLAGS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="69">
\brief Only this subset of flags can be modified by pre-filter. Other modifications will be discarded. 
</member>
<member name="D:physx.PxHitFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="75">
\brief collection of set bits defined in PxHitFlag.

@see PxHitFlag

</member>
<member name="T:physx.PxActorShape" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="82">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
\brief Combines a shape pointer and the actor the shape belongs to into one memory location.

Used with PxVolumeCache iterator and serves as a base class for PxQueryHit.

@see PxVolumeCache PxQueryHit

</member>
<member name="T:physx.PxQueryHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="104">
\brief Scene query hit information.

</member>
<member name="F:physx.PxQueryHit.faceIndex" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="111">
	Face index of touched triangle, for triangle meshes, convex meshes and height fields.

	\note This index will default to 0xFFFFffff value for overlap queries.
	\note Please refer to the user guide for more details for sweep queries.
	\note This index is remapped by mesh cooking. Use #PxTriangleMesh::getTrianglesRemap() to convert to original mesh index.
	\note For convex meshes use #PxConvexMesh::getPolygonData() to retrieve touched polygon data.

</member>
<member name="T:physx.PxLocationHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="122">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
\brief Scene query hit information for raycasts and sweeps returning hit position and normal information.

::PxHitFlag flags can be passed to scene query functions, as an optimization, to cause the SDK to
only generate specific members of this structure.

</member>
<member name="M:physx.PxLocationHit.hadInitialOverlap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="135">
	\note For raycast hits: true for shapes overlapping with raycast origin.
	\note For sweep hits: true for shapes overlapping at zero sweep distance.

	@see PxRaycastHit PxSweepHit

</member>
<member name="F:physx.PxLocationHit.distance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="149">
\brief	Distance to hit.
\note	If the eMTD flag is used, distance will be a negative value if shapes are overlapping indicating the penetration depth.
\note	Otherwise, this value will be &gt;= 0 (flag: #PxHitFlag::eDISTANCE) 
</member>
<member name="T:physx.PxRaycastHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="157">
\brief Stores results of raycast queries.

::PxHitFlag flags can be passed to raycast function, as an optimization, to cause the SDK to only compute specified members of this
structure.

Some members like barycentric coordinates are currently only computed for triangle meshes and height fields, but next versions
might provide them in other cases. The client code should check #flags to make sure returned values are valid.

@see PxScene.raycast PxBatchQuery.raycast PxVolumeCache.raycast

</member>
<member name="T:physx.PxOverlapHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="181">
\brief Stores results of overlap queries.

@see PxScene.overlap and PxBatchQuery.overlap PxVolumeCache.overlap

</member>
<member name="T:physx.PxSweepHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="189">
\brief Stores results of sweep queries.

@see PxScene.sweep PxBatchQuery.sweep PxVolumeCache.sweep

</member>
<member name="D:physx.PxAgain" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="202">
\brief Describes query behavior after returning a partial query result via a callback.

If callback returns true, traversal will continue and callback can be issued again.
If callback returns false, traversal will stop, callback will not be issued again.

@see PxHitCallback

</member>
<member name="D:physx.PxRaycastCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="338">
\brief Raycast query callback. 
</member>
<member name="D:physx.PxOverlapCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="341">
\brief Overlap query callback. 
</member>
<member name="D:physx.PxSweepCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="344">
\brief Sweep query callback. 
</member>
<member name="D:physx.PxRaycastBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="347">
\brief Raycast query buffer. 
</member>
<member name="D:physx.PxOverlapBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="350">
\brief Overlap query buffer. 
</member>
<member name="D:physx.PxSweepBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryreport.h" line="353">
\brief Sweep query buffer. 
</member>
<member name="T:physx.PxGeometryQuery" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryquery.h" line="43">
\brief Collection of geometry object queries (sweeps, raycasts, overlaps, ...).

</member>
<member name="M:physx.PxGeometryQuery.sweep(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSweepHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UIn" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryquery.h" line="50">
	\brief Sweep a specified geometry object in space and test for collision with a given object.

	The following combinations are supported.

	\li PxSphereGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
	\li PxCapsuleGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
	\li PxBoxGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
	\li PxConvexMeshGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}

	\param[in] unitDir Normalized direction along which object geom0 should be swept
	\param[in] maxDist Maximum sweep distance, has to be in the [0, inf) range
	\param[in] geom0 The geometry object to sweep. Supported geometries are #PxSphereGeometry, #PxCapsuleGeometry, #PxBoxGeometry and #PxConvexMeshGeometry
	\param[in] pose0 Pose of the geometry object to sweep
	\param[in] geom1 The geometry object to test the sweep against
	\param[in] pose1 Pose of the geometry object to sweep against
	\param[out] sweepHit The sweep hit information. Only valid if this method returns true.
	\param[in] hitFlags Specify which properties per hit should be computed and written to result hit array. Combination of #PxHitFlag flags
	\param[in] inflation Surface of the swept shape is additively extruded in the normal direction, rounding corners and edges.

	\return True if the swept geometry object geom0 hits the object geom1

	@see PxSweepHit PxGeometry PxTransform

</member>
<member name="M:physx.PxGeometryQuery.overlap(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryquery.h" line="85">
	\brief Overlap test for two geometry objects.

	All combinations are supported except:
	\li PxPlaneGeometry vs. {PxPlaneGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
	\li PxTriangleMeshGeometry vs. {PxTriangleMeshGeometry, PxHeightFieldGeometry}
	\li PxHeightFieldGeometry vs. {PxHeightFieldGeometry}

	\param[in] geom0 The first geometry object
	\param[in] pose0 Pose of the first geometry object
	\param[in] geom1 The second geometry object
	\param[in] pose1 Pose of the second geometry object
	\return True if the two geometry objects overlap

	@see PxGeometry PxTransform

</member>
<member name="M:physx.PxGeometryQuery.raycast(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,System.UInt32,physx.PxRaycastHit*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryquery.h" line="105">
	\brief Raycast test against a geometry object.

	\param[in] origin The origin of the ray to test the geometry object against
	\param[in] unitDir Normalized direction of the ray to test the geometry object against
	\param[in] geom The geometry object to test the ray against
	\param[in] pose Pose of the geometry object
	\param[in] maxDist Maximum ray length, has to be in the [0, inf) range
	\param[in] hitFlags Specification of the kind of information to retrieve on hit. Combination of #PxHitFlag flags
	\param[in] maxHits max number of returned hits = size of 'rayHits' buffer
	\param[out] rayHits Raycast hits information
	\param[in] anyHit Set to false if the closest hit point should be computed, else the query aborts as soon as any hit point along the ray is found.
	\return Number of hits between the ray and the geometry object

	\note PX_DEPRECATED: The 'anyHit' parameter is deprecated. Please use PxHitFlag::eMESH_ANY instead.

	@see PxRaycastHit PxGeometry PxTransform

</member>
<member name="M:physx.PxGeometryQuery.computePenetration(physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryquery.h" line="133">
	\brief Compute minimum translational distance (MTD) between two geometry objects.

	All combinations of geom objects are supported except:
	- plane/plane
	- plane/mesh
	- plane/heightfield
	- mesh/mesh
	- mesh/heightfield
	- heightfield/heightfield

	The function returns a unit vector ('direction') and a penetration depth ('depth').

	The depenetration vector D = direction * depth should be applied to the first object, to
	get out of the second object.

	Returned depth should always be positive or null.

	If objects do not overlap, the function can not compute the MTD and returns false.

	\param[out] direction Computed MTD unit direction
	\param[out] depth Penetration depth. Always positive or null.
	\param[in] geom0 The first geometry object
	\param[in] pose0 Pose of the first geometry object
	\param[in] geom1 The second geometry object
	\param[in] pose1 Pose of the second geometry object
	\return True if the MTD has successfully been computed, i.e. if objects do overlap.

	@see PxGeometry PxTransform

</member>
<member name="M:physx.PxGeometryQuery.pointDistance(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryquery.h" line="167">
	\brief Computes distance between a point and a geometry object.

	Currently supported geometry objects: box, sphere, capsule, convex.

	\param[in] point The point P
	\param[in] geom The geometry object
	\param[in] pose Pose of the geometry object
	\param[out] closestPoint Optionally returned closest point to P on the geom object. Only valid when returned distance is strictly positive.
	\return Square distance between the point and the geom object, or 0.0 if the point is inside the object, or -1.0 if the geometry type is not supported.

	@see PxGeometry PxTransform

</member>
<member name="M:physx.PxGeometryQuery.getWorldBounds(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxgeometryquery.h" line="183">
	\brief get the bounds for a geometry object

	\param[in] geom The geometry object
	\param[in] pose Pose of the geometry object
	\param[in] inflation  Scale factor for computed world bounds. Box extents are multiplied by this value.
	\return The bounds of the object

	@see PxGeometry PxTransform

</member>
<member name="T:physx.PxHeightFieldFormat" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldflag.h" line="27">
\brief Describes the format of height field samples.
@see PxHeightFieldDesc.format PxHeightFieldDesc.samples

</member>
<member name="F:eS16_TM" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldflag.h" line="35">
		\brief Height field height data is 16 bit signed integers, followed by triangle materials. 
		
		Each sample is 32 bits wide arranged as follows:
		
		\image html heightFieldFormat_S16_TM.png

		1) First there is a 16 bit height value.
		2) Next, two one byte material indices, with the high bit of each byte reserved for special use.
		(so the material index is only 7 bits).
		The high bit of material0 is the tess-flag.
		The high bit of material1 is reserved for future use.
		
		There are zero or more unused bytes before the next sample depending on PxHeightFieldDesc.sampleStride, 
		where the application may eventually keep its own data.

		This is the only format supported at the moment.

		@see PxHeightFieldDesc.format PxHeightFieldDesc.samples

</member>
<member name="T:physx.PxHeightFieldTessFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldflag.h" line="59">
\brief Determines the tessellation of height field cells.
@see PxHeightFieldDesc.format PxHeightFieldDesc.samples

</member>
<member name="F:e0TH_VERTEX_SHARED" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldflag.h" line="67">
		\brief This flag determines which way each quad cell is subdivided.

		The flag lowered indicates subdivision like this: (the 0th vertex is referenced by only one triangle)
		
		\image html heightfieldTriMat2.PNG

		<pre>
		+--+--+--+---&gt; column
		| /| /| /|
		|/ |/ |/ |
		+--+--+--+
		| /| /| /|
		|/ |/ |/ |
		+--+--+--+
		|
		|
		V row
		</pre>
		
		The flag raised indicates subdivision like this: (the 0th vertex is shared by two triangles)
		
		\image html heightfieldTriMat1.PNG

		<pre>
		+--+--+--+---&gt; column
		|\ |\ |\ |
		| \| \| \|
		+--+--+--+
		|\ |\ |\ |
		| \| \| \|
		+--+--+--+
		|
		|
		V row
		</pre>
		
		@see PxHeightFieldDesc.format PxHeightFieldDesc.samples

</member>
<member name="T:physx.PxHeightFieldFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldflag.h" line="111">
\brief Enum with flag values to be used in PxHeightFieldDesc.flags.

</member>
<member name="F:eNO_BOUNDARY_EDGES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldflag.h" line="118">
		\brief Disable collisions with height field with boundary edges.
		
		Raise this flag if several terrain patches are going to be placed adjacent to each other, 
		to avoid a bump when sliding across.

		This flag is ignored in contact generation with sphere and capsule shapes.

		@see PxHeightFieldDesc.flags

</member>
<member name="D:physx.PxHeightFieldFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldflag.h" line="132">
\brief collection of set bits defined in PxHeightFieldFlag.

@see PxHeightFieldFlag

</member>
<member name="T:physx.PxHeightField" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="30">
\brief A height field class.

Height fields work in a similar way as triangle meshes specified to act as
height fields, with some important differences:

Triangle meshes can be made of nonuniform geometry, while height fields are
regular, rectangular grids.  This means that with PxHeightField, you sacrifice
flexibility in return for improved performance and decreased memory consumption.

In local space rows extend in X direction, columns in Z direction and height in Y direction.

Like Convexes and TriangleMeshes, HeightFields are referenced by shape instances
(see #PxHeightFieldGeometry, #PxShape).

To avoid duplicating data when you have several instances of a particular
height field differently, you do not use this class to represent a
height field object directly. Instead, you create an instance of this height field
via the PxHeightFieldGeometry and PxShape classes.

<h3>Creation</h3>

To create an instance of this class call PxPhysics::createHeightField(),
and release() to delete it. This is only possible
once you have released all of its PxHeightFiedShape instances.

<h3>Visualizations:</h3>
\li #PxVisualizationParameter::eCOLLISION_AABBS
\li #PxVisualizationParameter::eCOLLISION_SHAPES
\li #PxVisualizationParameter::eCOLLISION_AXES
\li #PxVisualizationParameter::eCOLLISION_FNORMALS
\li #PxVisualizationParameter::eCOLLISION_EDGES

@see PxHeightFieldDesc PxHeightFieldGeometry PxShape PxPhysics.createHeightField()

</member>
<member name="M:physx.PxHeightField.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="69">
	\brief Decrements the reference count of a height field and releases it if the new reference count is zero.

	The height field is destroyed when the application's reference is released and all shapes referencing the height field are destroyed.

	@see PxPhysics.createHeightField() PxHeightFieldDesc PxHeightFieldGeometry PxShape

</member>
<member name="M:physx.PxHeightField.saveCells(System.Void*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="78">
    \brief Writes out the sample data array.

	The user provides destBufferSize bytes storage at destBuffer.
	The data is formatted and arranged as PxHeightFieldDesc.samples.

	\param[out] destBuffer The destination buffer for the sample data.
	\param[in] destBufferSize The size of the destination buffer.
	\return The number of bytes written.

	@see PxHeightFieldDesc.samples

</member>
<member name="M:physx.PxHeightField.modifySamples(System.Int32,System.Int32,physx.PxHeightFieldDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="92">
    \brief Replaces a rectangular subfield in the sample data array.

	The user provides the description of a rectangular subfield in subfieldDesc.
	The data is formatted and arranged as PxHeightFieldDesc.samples.

	\param[in] startCol First cell in the destination heightfield to be modified. Can be negative.
	\param[in] startRow First row in the destination heightfield to be modified. Can be negative.
	\param[in] subfieldDesc Description of the source subfield to read the samples from.
	\param[in] shrinkBounds If left as false, the bounds will never shrink but only grow. If set to true the bounds will be recomputed from all HF samples at O(nbColums*nbRows) perf cost.
	\return True on success, false on failure. Failure can occur due to format mismatch.

	\note Modified samples are constrained to the same height quantization range as the original heightfield.
	Source samples that are out of range of target heightfield will be clipped with no error.
	PhysX does not keep a mapping from the heightfield to heightfield shapes that reference it.
	Call PxShape::setGeometry on each shape which references the height field, to ensure that internal data structures are updated to reflect the new geometry.
	Please note that PxShape::setGeometry does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.

	@see PxHeightFieldDesc.samples PxShape.setGeometry

</member>
<member name="M:physx.PxHeightField.getNbRows" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="114">
	\brief Retrieves the number of sample rows in the samples array.

	\return The number of sample rows in the samples array.

	@see PxHeightFieldDesc.nbRows

</member>
<member name="M:physx.PxHeightField.getNbColumns" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="123">
	\brief Retrieves the number of sample columns in the samples array.

	\return The number of sample columns in the samples array.

	@see PxHeightFieldDesc.nbColumns

</member>
<member name="M:physx.PxHeightField.getFormat" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="132">
	\brief Retrieves the format of the sample data.

	\return The format of the sample data.

	@see PxHeightFieldDesc.format PxHeightFieldFormat

</member>
<member name="M:physx.PxHeightField.getSampleStride" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="141">
	\brief Retrieves the offset in bytes between consecutive samples in the array.

	\return The offset in bytes between consecutive samples in the array.

	@see PxHeightFieldDesc.sampleStride

</member>
<member name="M:physx.PxHeightField.getThickness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="150">
	\brief Retrieves the thickness of the height volume in the vertical direction.

	\return The thickness of the height volume in the vertical direction.

	@see PxHeightFieldDesc.thickness

</member>
<member name="M:physx.PxHeightField.getConvexEdgeThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="159">
	\brief Retrieves the convex edge threshold.

	\return The convex edge threshold.

	@see PxHeightFieldDesc.convexEdgeThreshold

</member>
<member name="M:physx.PxHeightField.getFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="168">
	\brief Retrieves the flags bits, combined from values of the enum ::PxHeightFieldFlag.

	\return The flags bits, combined from values of the enum ::PxHeightFieldFlag.

	@see PxHeightFieldDesc.flags PxHeightFieldFlag

</member>
<member name="M:physx.PxHeightField.getHeight(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="177">
	\brief Retrieves the height at the given coordinates in grid space.

	\return The height at the given coordinates or 0 if the coordinates are out of range.

</member>
<member name="M:physx.PxHeightField.getReferenceCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="184">
	\brief Returns the reference count for shared heightfields.

	At creation, the reference count of the heightfield is 1. Every shape referencing this heightfield increments the
	count by 1.	When the reference count reaches 0, and only then, the heightfield gets destroyed automatically.

	\return the current reference count.

</member>
<member name="M:physx.PxHeightField.getTriangleMaterialIndex(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="194">
	\brief Returns material table index of given triangle

	\note This function takes a post cooking triangle index.

	\param[in] triangleIndex (internal) index of desired triangle
	\return Material table index, or 0xffff if no per-triangle materials are used

</member>
<member name="M:physx.PxHeightField.getTriangleNormal(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfield.h" line="204">
	\brief Returns a triangle face normal for a given triangle index

	\note This function takes a post cooking triangle index.

	\param[in] triangleIndex (internal) index of desired triangle
	\return Triangle normal for a given triangle index

</member>
<member name="T:physx.PxHeightFieldDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfielddesc.h" line="30">
\brief Descriptor class for #PxHeightField.

\note The heightfield data is *copied* when a PxHeightField object is created from this descriptor. After the call the
user may discard the height data.

@see PxHeightField PxHeightFieldGeometry PxShape PxPhysics.createHeightField()

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxHeightFieldDesc.nbRows'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxHeightFieldDesc.nbColumns'. -->
<member name="F:physx.PxHeightFieldDesc.format" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfielddesc.h" line="62">
	\brief Format of the sample data.

	Currently the only supported format is PxHeightFieldFormat::eS16_TM:

	<b>Default:</b> PxHeightFieldFormat::eS16_TM

	@see PxHeightFormat PxHeightFieldDesc.samples

</member>
<member name="F:physx.PxHeightFieldDesc.samples" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfielddesc.h" line="73">
	\brief The samples array.

	It is copied to the SDK's storage at creation time.

	There are nbRows * nbColumn samples in the array,
	which define nbRows * nbColumn vertices and cells,
	of which (nbRows - 1) * (nbColumns - 1) cells are actually used.

	The array index of sample(row, column) = row * nbColumns + column.
	The byte offset of sample(row, column) = sampleStride * (row * nbColumns + column).
	The sample data follows at the offset and spans the number of bytes defined by the format.
	Then there are zero or more unused bytes depending on sampleStride before the next sample.

	<b>Default:</b> NULL

	@see PxHeightFormat

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxHeightFieldDesc.thickness'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxHeightFieldDesc.convexEdgeThreshold'. -->
<member name="F:physx.PxHeightFieldDesc.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfielddesc.h" line="128">
	\brief Flags bits, combined from values of the enum ::PxHeightFieldFlag.

	<b>Default:</b> 0

	@see PxHeightFieldFlag PxHeightFieldFlags

</member>
<member name="M:physx.PxHeightFieldDesc.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfielddesc.h" line="137">
\brief Constructor sets to default.

</member>
<member name="M:physx.PxHeightFieldDesc.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfielddesc.h" line="142">
\brief (re)sets the structure to the default.

</member>
<member name="M:physx.PxHeightFieldDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfielddesc.h" line="147">
\brief Returns true if the descriptor is valid.
\return True if the current settings are valid.

</member>
<member name="T:physx.PxHeightFieldMaterial" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldsample.h" line="27">
\brief Special material index values for height field samples.

@see PxHeightFieldSample.materialIndex0 PxHeightFieldSample.materialIndex1

</member>
<member name="T:physx.PxHeightFieldSample" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldsample.h" line="40">
\brief Heightfield sample format.

This format corresponds to the #PxHeightFieldFormat member PxHeightFieldFormat::eS16_TM.

An array of heightfield samples are used when creating a PxHeightField to specify
the elevation of the heightfield points. In addition the material and tessellation of the adjacent 
triangles are specified.

@see PxHeightField PxHeightFieldDesc PxHeightFieldDesc.samples

</member>
<member name="F:physx.PxHeightFieldSample.height" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldsample.h" line="60">
	\brief The height of the heightfield sample

	This value is scaled by PxHeightFieldGeometry::heightScale.

	@see PxHeightFieldGeometry

</member>
<member name="F:physx.PxHeightFieldSample.materialIndex0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldsample.h" line="69">
	\brief The triangle material index of the quad's lower triangle + tesselation flag

	An index pointing into the material table of the shape which instantiates the heightfield.
	This index determines the material of the lower of the quad's two triangles (i.e. the quad whose 
	upper-left corner is this sample, see the Guide for illustrations).

	Special values of the 7 data bits are defined by PxHeightFieldMaterial

	The tesselation flag specifies which way the quad is split whose upper left corner is this sample.
	If the flag is set, the diagonal of the quad will run from this sample to the opposite vertex; if not,
	it will run between the other two vertices (see the Guide for illustrations).

	@see PxHeightFieldGeometry materialIndex1 PxShape.setmaterials() PxShape.getMaterials()

</member>
<member name="F:physx.PxHeightFieldSample.materialIndex1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxheightfieldsample.h" line="90">
	\brief The triangle material index of the quad's upper triangle + reserved flag

	An index pointing into the material table of the shape which instantiates the heightfield.
	This index determines the material of the upper of the quad's two triangles (i.e. the quad whose 
	upper-left corner is this sample, see the Guide for illustrations).

	@see PxHeightFieldGeometry materialIndex0 PxShape.setmaterials() PxShape.getMaterials()

</member>
<member name="M:physx.PxMeshQuery.getTriangle(physx.PxTriangleMeshGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,physx.PxTriangle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*,System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshquery.h" line="40">
	\brief Retrieves triangle data from a triangle ID.

	This function can be used together with #findOverlapTriangleMesh() to retrieve triangle properties.

	\param[in] triGeom Geometry of the triangle mesh to extract the triangle from.
	\param[in] transform Transform for the triangle mesh
	\param[in] triangleIndex The index of the triangle to retrieve.
	\param[out] triangle Triangle points in world space.
	\param[out] vertexIndices Returned vertex indices for given triangle
	\param[out] adjacencyIndices Returned 3 triangle adjacency internal face indices (0xFFFFFFFF if no adjacency). The mesh must be cooked with cooking param buildTriangleAdjacencies enabled.

	@see PxTriangle PxTriangleFlags PxTriangleID findOverlapTriangleMesh()

</member>
<member name="M:physx.PxMeshQuery.getTriangle(physx.PxHeightFieldGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,physx.PxTriangle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*,System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshquery.h" line="57">
	\brief Retrieves triangle data from a triangle ID.

	This function can be used together with #findOverlapHeightField() to retrieve triangle properties.

	\param[in] hfGeom Geometry of the height field to extract the triangle from.
	\param[in] transform Transform for the height field.
	\param[in] triangleIndex The index of the triangle to retrieve.
	\param[out] triangle Triangle points in world space.
	\param[out] vertexIndices Returned vertex indices for given triangle
	\param[out] adjacencyIndices Returned 3 triangle adjacency triangle indices (0xFFFFFFFF if no adjacency).

	@see PxTriangle PxTriangleFlags PxTriangleID findOverlapHeightField()

</member>
<member name="M:physx.PxMeshQuery.findOverlapTriangleMesh(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTriangleMeshGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*,System.UInt32,System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshquery.h" line="74">
	\brief Find the mesh triangles which touch the specified geometry object.

	Returned triangle indices can be used with #getTriangle() to retrieve the triangle properties.

	\param[in] geom The geometry object to test for mesh triangle overlaps. Supported geometries are #PxSphereGeometry, #PxCapsuleGeometry and #PxBoxGeometry
	\param[in] geomPose Pose of the geometry object
	\param[in] meshGeom The triangle mesh geometry to check overlap against
	\param[in] meshPose Pose of the triangle mesh
	\param[out] results Indices of overlapping triangles
	\param[in] maxResults Size of 'results' buffer
	\param[in] startIndex Index of first result to be retrieved. Previous indices are skipped.
	\param[out] overflow True if a buffer overflow occured
	\return Number of overlaps found, i.e. number of elements written to the results buffer

	@see PxTriangleMeshGeometry getTriangle()

</member>
<member name="M:physx.PxMeshQuery.findOverlapHeightField(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxHeightFieldGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*,System.UInt32,System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshquery.h" line="95">
	\brief Find the height field triangles which touch the specified geometry object.

	Returned triangle indices can be used with #getTriangle() to retrieve the triangle properties.

	\param[in] geom The geometry object to test for height field overlaps. Supported geometries are #PxSphereGeometry, #PxCapsuleGeometry and #PxBoxGeometry. The sphere and capsule queries are currently conservative estimates.
	\param[in] geomPose Pose of the geometry object
	\param[in] hfGeom The height field geometry to check overlap against
	\param[in] hfPose Pose of the height field
	\param[out] results Indices of overlapping triangles
	\param[in] maxResults Size of 'results' buffer
	\param[in] startIndex Index of first result to be retrieved. Previous indices are skipped.
	\param[out] overflow True if a buffer overflow occured
	\return Number of overlaps found, i.e. number of elements written to the results buffer

	@see PxHeightFieldGeometry getTriangle()

</member>
<member name="M:physx.PxMeshQuery.sweep(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,physx.PxTriangle!System.Runtime.CompilerServices.IsConst*,physx.PxSweepHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,System.UInt32!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxmeshquery.h" line="116">
	\brief Sweep a specified geometry object in space and test for collision with a set of given triangles.

	This function simply sweeps input geometry against each input triangle. This is an O(N) operation with N = number of input triangles.
	It does not use any particular acceleration structure.

	\param[in] unitDir Normalized direction of the sweep.
	\param[in] distance Sweep distance. Needs to be larger than 0. Clamped to PX_MAX_SWEEP_DISTANCE.
	\param[in] geom The geometry object to sweep. Supported geometries are #PxSphereGeometry, #PxCapsuleGeometry and #PxBoxGeometry
	\param[in] pose Pose of the geometry object to sweep.
	\param[in] triangleCount Number of specified triangles
	\param[in] triangles Array of triangles to sweep against
	\param[out] sweepHit The sweep hit information. See the notes below for limitations about returned results.
	\param[in] hintFlags Specification of the kind of information to retrieve on hit. Combination of #PxHitFlag flags. See the notes below for limitations about supported flags.
	\param[in] cachedIndex Cached triangle index for subsequent calls. Cached triangle is tested first. Optional parameter.
	\param[in] inflation This parameter creates a skin around the swept geometry which increases its extents for sweeping. The sweep will register a hit as soon as the skin touches a shape, and will return the corresponding distance and normal.
	\param[in] doubleSided Counterpart of PxMeshGeometryFlag::eDOUBLE_SIDED for input triangles.
	\return True if the swept geometry object hits the specified triangles

	\note Only the following geometry types are currently supported: PxSphereGeometry, PxCapsuleGeometry, PxBoxGeometry
	\note If a shape from the scene is already overlapping with the query shape in its starting position, the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.
	\note This function returns a single closest hit across all the input triangles. Multiple hits are not supported.
	\note Only PxHitFlag::eASSUME_NO_INITIAL_OVERLAP, PxHitFlag::ePRECISE_SWEEP and PxHitFlag::eMESH_BOTH_SIDES are supported in hintFlags.
	\note Unlike scene queries the validity flags in sweepHit are not set by this call and only eDISTANCE and eNORMAL fields are always defined.
	\note ePOSITION is only defined when there is no initial overlap (sweepHit.hadInitialOverlap() == false)
	\note The returned normal for initially overlapping sweeps is set to -unitDir.
	\note The returned PxSweepHit::faceIndex parameter will hold the index of the hit triangle in input array, i.e. the range is [0; triangleCount). For initially overlapping sweeps, this is the index of overlapping triangle.
	\note The returned PxSweepHit::actor and PxSweepHit::shape pointers are not filled.
	\note The inflation parameter is not compatible with PxHitFlag::ePRECISE_SWEEP.

	@see PxTriangle PxSweepHit PxGeometry PxTransform

</member>
<member name="T:physx.PxMeshFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="30">
\brief Enum with flag values to be used in PxSimpleTriangleMesh::flags.

</member>
<member name="F:eFLIPNORMALS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="37">
		\brief Specifies if the SDK should flip normals.

		The PhysX libraries assume that the face normal of a triangle with vertices [a,b,c] can be computed as:
		edge1 = b-a
		edge2 = c-a
		face_normal = edge1 x edge2.

		Note: This is the same as a counterclockwise winding in a right handed coordinate system or
		alternatively a clockwise winding order in a left handed coordinate system.

		If this does not match the winding order for your triangles, raise the below flag.

</member>
<member name="D:physx.PxMeshFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="55">
\brief collection of set bits defined in PxMeshFlag.

@see PxMeshFlag

</member>
<member name="T:physx.PxSimpleTriangleMesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="64">
\brief A structure describing a triangle mesh.

</member>
<member name="F:physx.PxSimpleTriangleMesh.points" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="71">
\brief Pointer to first vertex point.

</member>
<member name="F:physx.PxSimpleTriangleMesh.triangles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="76">
	\brief Pointer to first triangle.

	Caller may add triangleStrideBytes bytes to the pointer to access the next triangle.

	These are triplets of 0 based indices:
	vert0 vert1 vert2
	vert0 vert1 vert2
	vert0 vert1 vert2
	...

	where vertex is either a 32 or 16 bit unsigned integer. There are numTriangles*3 indices.

	This is declared as a void pointer because it is actually either an PxU16 or a PxU32 pointer.

</member>
<member name="F:physx.PxSimpleTriangleMesh.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="93">
\brief Flags bits, combined from values of the enum ::PxMeshFlag

</member>
<member name="M:physx.PxSimpleTriangleMesh.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="98">
\brief constructor sets to default.

</member>
<member name="M:physx.PxSimpleTriangleMesh.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="102">
\brief (re)sets the structure to the default.	

</member>
<member name="M:physx.PxSimpleTriangleMesh.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxsimpletrianglemesh.h" line="106">
\brief returns true if the current settings are valid

</member>
<member name="T:physx.PxTriangle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="28">
\brief Triangle class.

</member>
<member name="M:physx.PxTriangle.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="34">
\brief Constructor

</member>
<member name="M:physx.PxTriangle.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="39">
	\brief Constructor

	\param[in] p0 Point 0
	\param[in] p1 Point 1
	\param[in] p2 Point 2

</member>
<member name="M:physx.PxTriangle.#ctor(physx.PxTriangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="53">
	\brief Copy constructor

	\param[in] triangle Tri to copy

</member>
<member name="M:physx.PxTriangle.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="65">
\brief Destructor

</member>
<member name="F:physx.PxTriangle.verts" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="70">
\brief Array of Vertices.

</member>
<member name="M:physx.PxTriangle.normal(physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="75">
	\brief Compute the normal of the Triangle.

	\param[out] _normal Triangle normal.

</member>
<member name="M:physx.PxTriangle.denormalizedNormal(physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="86">
	\brief Compute the unnormalized normal of the triangle.

	\param[out] _normal Triangle normal (not normalized).

</member>
<member name="M:physx.PxTriangle.area" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtriangle.h" line="100">
	\brief Compute the area of the triangle.

	\return Area of the triangle.

</member>
<member name="T:physx.PxTriangleMeshFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="29">
\brief Flags for the mesh geometry properties.

Used in ::PxTriangleMeshFlags.

</member>
<member name="D:physx.PxTriangleMeshFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="46">
\brief collection of set bits defined in PxTriangleMeshFlag.

@see PxTriangleMeshFlag

</member>
<member name="T:physx.PxTriangleMesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="54">

\brief A triangle mesh, also called a 'polygon soup'.

It is represented as an indexed triangle list. There are no restrictions on the
triangle data. 

To avoid duplicating data when you have several instances of a particular 
mesh positioned differently, you do not use this class to represent a 
mesh object directly. Instead, you create an instance of this mesh via
the PxTriangleMeshGeometry and PxShape classes.

<h3>Creation</h3>

To create an instance of this class call PxPhysics::createTriangleMesh(),
and release() to delete it. This is only possible
once you have released all of its PxShape instances.


<h3>Visualizations:</h3>
\li #PxVisualizationParameter::eCOLLISION_AABBS
\li #PxVisualizationParameter::eCOLLISION_SHAPES
\li #PxVisualizationParameter::eCOLLISION_AXES
\li #PxVisualizationParameter::eCOLLISION_FNORMALS
\li #PxVisualizationParameter::eCOLLISION_EDGES

@see PxTriangleMeshDesc PxTriangleMeshGeometry PxShape PxPhysics.createTriangleMesh()

</member>
<member name="M:physx.PxTriangleMesh.getNbVertices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="86">
\brief Returns the number of vertices.
\return	number of vertices
@see getVertices()

</member>
<member name="M:physx.PxTriangleMesh.getVertices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="93">
\brief Returns the vertices.
\return	array of vertices
@see getNbVertices()

</member>
<member name="M:physx.PxTriangleMesh.getNbTriangles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="100">
\brief Returns the number of triangles.
\return	number of triangles
@see getTriangles() getTrianglesRemap()

</member>
<member name="M:physx.PxTriangleMesh.getTriangles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="107">
	\brief Returns the triangle indices.

	The indices can be 16 or 32bit depending on the number of triangles in the mesh.
	Call getTriangleMeshFlags() to know if the indices are 16 or 32 bits.

	The number of indices is the number of triangles * 3.

	\return	array of triangles
	@see getNbTriangles() getTriangleMeshFlags() getTrianglesRemap()

</member>
<member name="M:physx.PxTriangleMesh.getTriangleMeshFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="120">
	\brief Reads the PxTriangleMesh flags.
	
	See the list of flags #PxTriangleMeshFlag

	\return The values of the PxTriangleMesh flags.

	@see PxTriangleMesh

</member>
<member name="M:physx.PxTriangleMesh.getTrianglesRemap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="131">
	\brief Returns the triangle remapping table.

	The triangles are internally sorted according to various criteria. Hence the internal triangle order
	does not always match the original (user-defined) order. The remapping table helps finding the old
	indices knowing the new ones:

		remapTable[ internalTriangleIndex ] = originalTriangleIndex

	\return	the remapping table (or NULL if 'PxCookingParams::suppressTriangleMeshRemapTable' has been used)
	@see getNbTriangles() getTriangles() PxCookingParams::suppressTriangleMeshRemapTable

</member>
<member name="M:physx.PxTriangleMesh.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="146">
\brief Decrements the reference count of a triangle mesh and releases it if the new reference count is zero.	

The mesh is destroyed when the application's reference is released and all shapes referencing the mesh are destroyed.

@see PxPhysics.createTriangleMesh()

</member>
<member name="M:physx.PxTriangleMesh.getTriangleMaterialIndex(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="155">
	\brief Returns material table index of given triangle

	This function takes a post cooking triangle index.

	\param[in] triangleIndex (internal) index of desired triangle
	\return Material table index, or 0xffff if no per-triangle materials are used

</member>
<member name="M:physx.PxTriangleMesh.getLocalBounds" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="165">
	\brief Returns the local-space (vertex space) AABB from the triangle mesh.

	\return	local-space bounds

</member>
<member name="M:physx.PxTriangleMesh.getReferenceCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\geometry\pxtrianglemesh.h" line="172">
	\brief Returns the reference count for shared meshes.

	At creation, the reference count of the mesh is 1. Every shape referencing this mesh increments the
	count by 1.	When the reference count reaches 0, and only then, the mesh gets destroyed automatically.

	\return the current reference count.

</member>
<member name="D:physx.PxClientID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="24">
\brief An ID to identify different clients for multiclient support.

@see PxScene::createClient() 

</member>
<member name="T:physx.PxClientBehaviorFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="45">
\brief Behavior bit flags for simulation clients.

@see PxClientBehaviorFlags PxScene::setClientBehaviorFlags() 

</member>
<member name="F:eREPORT_FOREIGN_OBJECTS_TO_TRIGGER_NOTIFY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="54">
		\brief Report actors belonging to other clients to the trigger callback of this client.

		@see PxSimulationEventCallback::onTrigger()

</member>
<member name="F:eREPORT_FOREIGN_OBJECTS_TO_CONTACT_NOTIFY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="60">
		\brief Report actors belonging to other clients to the contact callback of this client.

		@see PxSimulationEventCallback::onContact()

</member>
<member name="F:eREPORT_FOREIGN_OBJECTS_TO_CONSTRAINT_BREAK_NOTIFY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="66">
		\brief Report actors belonging to other clients to the constraint break callback of this client.

		@see PxSimulationEventCallback::onConstraintBreak()

</member>
<member name="F:eREPORT_FOREIGN_OBJECTS_TO_SCENE_QUERY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="72">
\brief Report actors belonging to other clients to scene queries of this client.

</member>
<member name="D:physx.PxClientBehaviorFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="79">
\brief Bitfield that contains a set of raised flags defined in PxClientBehaviorFlag.

@see PxClientBehaviorFlag PxScene::setClientBehaviorFlags() 

</member>
<member name="T:physx.PxActorClientBehaviorFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="88">
\brief Multiclient behavior bit flags for actors.

@see PxActorClientBehaviorFlags PxActor::setClientBehaviorFlags()

</member>
<member name="F:eREPORT_TO_FOREIGN_CLIENTS_TRIGGER_NOTIFY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="97">
		\brief Report this actor to trigger callbacks of other clients.

		@see PxSimulationEventCallback::onTrigger()

</member>
<member name="F:eREPORT_TO_FOREIGN_CLIENTS_CONTACT_NOTIFY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="103">
		\brief Report this actor to contact callbacks of other clients.

		@see PxSimulationEventCallback::onContact()

</member>
<member name="F:eREPORT_TO_FOREIGN_CLIENTS_CONSTRAINT_BREAK_NOTIFY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="109">
		\brief Report this actor to constraint break callbacks of other clients.

		@see PxSimulationEventCallback::onConstraintBreak()

</member>
<member name="F:eREPORT_TO_FOREIGN_CLIENTS_SCENE_QUERY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="115">
\brief Report this actor to scene queries of other clients.

</member>
<member name="D:physx.PxActorClientBehaviorFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxclient.h" line="122">
\brief Bitfield that contains a set of raised flags defined in PxActorClientBehaviorFlag.

@see PxActorClientBehaviorFlag PxActor::setClientBehaviorFlags()

</member>
<member name="D:physx.PxDominanceGroup" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="42">
Group index which allows to specify 1- or 2-way interaction 
</member>
<member name="T:physx.PxActorFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="45">
\brief Flags which control the behavior of an actor.

@see PxActorFlags PxActor PxActor.setActorFlag() PxActor.getActorFlags()

</member>
<member name="F:eVISUALIZATION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="54">
		\brief Enable debug renderer for this actor

		@see PxScene.getRenderBuffer() PxRenderBuffer PxVisualizationParameter

</member>
<member name="F:eDISABLE_GRAVITY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="61">
\brief Disables scene gravity for this actor

</member>
<member name="F:eSEND_SLEEP_NOTIFIES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="66">
		\brief Enables the sending of PxSimulationEventCallback::onWake() and PxSimulationEventCallback::onSleep() notify events

		@see PxSimulationEventCallback::onWake() PxSimulationEventCallback::onSleep()

</member>
<member name="F:eDISABLE_SIMULATION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="73">
		\brief Disables simulation for the actor.
		
		\note This is only supported by PxRigidStatic and PxRigidDynamic actors and can be used to reduce the memory footprint when rigid actors are
		used for scene queries only.

		\note Setting this flag will remove all constraints attached to the actor from the scene.

		\note If this flag is set, the following calls are forbidden:
		\li PxRigidBody: setLinearVelocity(), setAngularVelocity(), addForce(), addTorque(), clearForce(), clearTorque()
		\li PxRigidDynamic: setKinematicTarget(), setWakeCounter(), wakeUp(), putToSleep()

		\par <b>Sleeping:</b>
		Raising this flag will set all velocities and the wake counter to 0, clear all forces, clear the kinematic target, put the actor
		to sleep and wake up all touching actors from the previous frame.

</member>
<member name="D:physx.PxActorFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="94">
\brief collection of set bits defined in PxActorFlag.

@see PxActorFlag

</member>
<member name="T:physx.PxActorType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="102">
\brief Identifies each type of actor.
@see PxActor 

</member>
<member name="F:eRIGID_STATIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="110">
\brief A static rigid body
@see PxRigidStatic

</member>
<member name="F:eRIGID_DYNAMIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="116">
\brief A dynamic rigid body
@see PxRigidDynamic

</member>
<member name="F:ePARTICLE_SYSTEM" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="123">
\brief A particle system
@see PxParticleSystem

</member>
<member name="F:ePARTICLE_FLUID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="129">
\brief A particle fluid
@see PxParticleFluid

</member>
<member name="F:eARTICULATION_LINK" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="136">
\brief An articulation link
@see PxArticulationLink

</member>
<member name="F:eCLOTH" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="143">
\brief A cloth
@see PxCloth

</member>
<member name="T:physx.PxActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="157">
\brief PxActor is the base class for the main simulation objects in the physics SDK.

The actor is owned by and contained in a PxScene.


</member>
<member name="M:physx.PxActor.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="166">
	\brief Deletes the actor.
	
	Do not keep a reference to the deleted instance.

	If the actor belongs to a #PxAggregate object, it is automatically removed from the aggregate.

	@see PxBase.release(), PxAggregate

</member>
<member name="M:physx.PxActor.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="177">
	\brief Retrieves the type of actor.

	\return The actor type of the actor.

	@see PxActorType

</member>
<member name="M:physx.PxActor.isRigidStatic" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="187">
	\deprecated
	\brief Attempts to cast to specific actor type.

	\return NULL if the actor is not of the appropriate type. Otherwise a pointer to the specific actor type.

	\note Since PxParticleFluid inherits from PxParticleSystem, calling isParticleSystem() on a PxParticleFluid instance will
	succeed and return the upcast to PxParticleSystem.

	@see PxActorType PxRigidActor PxRigidBody PxRigidStatic PxRigidDynamic PxParticleBase PxParticleSystem PxParticleFluid

</member>
<member name="M:physx.PxActor.getScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="218">
	\brief Retrieves the scene which this actor belongs to.

	\return Owner Scene. NULL if not part of a scene.

	@see PxScene

</member>
<member name="M:physx.PxActor.setName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="229">
	\brief Sets a name string for the object that can be retrieved with getName().
	
	This is for debugging and is not used by the SDK. The string is not copied by the SDK, 
	only the pointer is stored.

	\param[in] name String to set the objects name to.

	<b>Default:</b> NULL

	@see getName()

</member>
<member name="M:physx.PxActor.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="243">
	\brief Retrieves the name string set with setName().

	\return Name string associated with object.

	@see setName()

</member>
<member name="M:physx.PxActor.getWorldBounds(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="252">
	\brief Retrieves the axis aligned bounding box enclosing the actor.

	\param[in] inflation  Scale factor for computed world bounds. Box extents are multiplied by this value.

	\return The actor's bounding box.

	@see PxBounds3

</member>
<member name="M:physx.PxActor.setActorFlag(physx.PxActorFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="263">
	\brief Raises or clears a particular actor flag.
	
	See the list of flags #PxActorFlag

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] flag  The PxActor flag to raise(set) or clear. See #PxActorFlag.
	\param[in] value The boolean value to assign to the flag.

	<b>Default:</b> PxActorFlag::eVISUALIZATION

	@see PxActorFlag getActorFlags() 

</member>
<member name="M:physx.PxActor.setActorFlags(physx.PxFlags&lt;physx.PxActorFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="278">
\brief sets the actor flags

See the list of flags #PxActorFlag
@see PxActorFlag setActorFlag() 

</member>
<member name="M:physx.PxActor.getActorFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="286">
	\brief Reads the PxActor flags.
	
	See the list of flags #PxActorFlag

	\return The values of the PxActor flags.

	@see PxActorFlag setActorFlag() 

</member>
<member name="M:physx.PxActor.setDominanceGroup(System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="297">
	\brief Assigns dynamic actors a dominance group identifier.
	
	PxDominanceGroup is a 5 bit group identifier (legal range from 0 to 31).
	
	The PxScene::setDominanceGroupPair() lets you set certain behaviors for pairs of dominance groups.
	By default every dynamic actor is created in group 0.

	<b>Default:</b> 0

	<b>Sleeping:</b> Changing the dominance group does <b>NOT</b> wake the actor up automatically.

	\param[in] dominanceGroup The dominance group identifier. <b>Range:</b> [0..31]

	@see getDominanceGroup() PxDominanceGroup PxScene::setDominanceGroupPair()

</member>
<member name="M:physx.PxActor.getDominanceGroup" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="315">
	\brief Retrieves the value set with setDominanceGroup().

	\return The dominance group of this actor.

	@see setDominanceGroup() PxDominanceGroup PxScene::setDominanceGroupPair()

</member>
<member name="M:physx.PxActor.setOwnerClient(System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="325">
	\brief Sets the owner client of an actor.

	This cannot be done once the actor has been placed into a scene.

	<b>Default:</b> PX_DEFAULT_CLIENT

	@see PxClientID PxScene::createClient() 

</member>
<member name="M:physx.PxActor.getOwnerClient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="336">
	\brief Returns the owner client that was specified with at creation time.

	This value cannot be changed once the object is placed into the scene.

	@see PxClientID PxScene::createClient()

</member>
<member name="M:physx.PxActor.setClientBehaviorFlags(physx.PxFlags&lt;physx.PxActorClientBehaviorFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="345">
	\brief Sets the behavior bits of the actor.

	The behavior bits determine which types of events the actor will broadcast to foreign clients.
	The actor will always send notice for all possible events to its own owner client.  By default
	it will not send any events to any other clients.  If the user however raises a bit flag for
	any event type using this function, that event will then be sent also to any other clients which
	are programmed to listed to foreign actor events of that type.  

	<b>Default:</b> 0

	@see PxClientID PxActorClientBehaviorFlag PxScene::setClientBehaviorFlags()

</member>
<member name="M:physx.PxActor.getClientBehaviorFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="360">
	\brief Retrieves the behavior bits of the actor.

	The behavior bits determine which types of events the actor will broadcast to foreign clients.

	@see PxActorClientBehaviorFlag setClientBehaviorFlags()

</member>
<member name="M:physx.PxActor.getAggregate" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxactor.h" line="369">
	\brief Retrieves the aggregate the actor might be a part of.

	\return The aggregate the actor is a part of, or NULL if the actor does not belong to an aggregate.

	@see PxAggregate

</member>
<member name="T:physx.PxAggregate" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="32">
\brief Class to aggregate actors into a single broad phase entry.

A PxAggregate object is a collection of PxActors, which will exist as a single entry in the
broad-phase structures. This has 3 main benefits:

1) it reduces "broad phase pollution", where multiple objects of a single entity often overlap
   all the time (e.g. typically in a ragdoll).

2) it reduces broad-phase memory usage (which can be vital e.g. on SPU)

3) filtering can be optimized a lot if self-collisions within an aggregate are not needed. For
   example if you don't need collisions between ragdoll bones, it's faster to simply disable
   filtering once and for all, for the aggregate containing the ragdoll, rather than filtering
   out each bone-bone collision in the filter shader.

@see PxActor, PxPhysics.createAggregate

</member>
<member name="M:physx.PxAggregate.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="55">
	\brief Deletes the aggregate object.

	Deleting the PxAggregate object does not delete the aggregated actors. If the PxAggregate object
	belongs to a scene, the aggregated actors are automatically re-inserted in that scene. If you intend
	to delete both the PxAggregate and its actors, it is best to release the actors first, then release
	the PxAggregate when it is empty.

</member>
<member name="M:physx.PxAggregate.addActor(physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="65">
	\brief Adds an actor to the aggregate object.

	A warning is output if the total number of actors is reached, or if the incoming actor already belongs
	to an aggregate.

	If the aggregate belongs to a scene, adding an actor to the aggregate also adds the actor to that scene.

	If the actor already belongs to a scene, a warning is output and the call is ignored. You need to remove
	the actor from the scene first, before adding it to the aggregate.

	\param	[in] actor The actor that should be added to the aggregate
	return	true if success

</member>
<member name="M:physx.PxAggregate.removeActor(physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="81">
	\brief Removes an actor from the aggregate object.

	A warning is output if the incoming actor does not belong to the aggregate. Otherwise the actor is
	removed from the aggregate. If the aggregate belongs to a scene, the actor is reinserted in that
	scene. If you intend to delete the actor, it is best to call #PxActor::release() directly. That way
	the actor will be automatically removed from its aggregate (if any) and not reinserted in a scene.

	\param	[in] actor The actor that should be removed from the aggregate
	return	true if success

</member>
<member name="M:physx.PxAggregate.addArticulation(physx.PxArticulation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="94">
	\brief Adds an articulation to the aggregate object.

	A warning is output if the total number of actors is reached (every articulation link counts as an actor), 
	or if the incoming articulation already belongs	to an aggregate.

	If the aggregate belongs to a scene, adding an articulation to the aggregate also adds the articulation to that scene.

	If the articulation already belongs to a scene, a warning is output and the call is ignored. You need to remove
	the articulation from the scene first, before adding it to the aggregate.

	\param	[in] articulation The articulation that should be added to the aggregate
	return	true if success

</member>
<member name="M:physx.PxAggregate.removeArticulation(physx.PxArticulation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="110">
	\brief Removes an articulation from the aggregate object.

	A warning is output if the incoming articulation does not belong to the aggregate. Otherwise the articulation is
	removed from the aggregate. If the aggregate belongs to a scene, the articulation is reinserted in that
	scene. If you intend to delete the articulation, it is best to call #PxArticulation::release() directly. That way
	the articulation will be automatically removed from its aggregate (if any) and not reinserted in a scene.

	\param	[in] articulation The articulation that should be removed from the aggregate
	return	true if success

</member>
<member name="M:physx.PxAggregate.getNbActors" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="123">
	\brief Returns the number of actors contained in the aggregate.

	You can use #getActors() to retrieve the actor pointers.

	\return Number of actors contained in the aggregate.

	@see PxActor getActors()

</member>
<member name="M:physx.PxAggregate.getMaxNbActors" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="134">
	\brief Retrieves max amount of actors that can be contained in the aggregate.

	\return Max aggregate size. 

	@see PxPhysics::createAggregate()

</member>
<member name="M:physx.PxAggregate.getActors(physx.PxActor**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="143">
	\brief Retrieve all actors contained in the aggregate.

	You can retrieve the number of actor pointers by calling #getNbActors()

	\param[out] userBuffer The buffer to store the actor pointers.
	\param[in] bufferSize Size of provided user buffer.
	\param[in] startIndex Index of first actor pointer to be retrieved
	\return Number of actor pointers written to the buffer.

	@see PxShape getNbShapes()

</member>
<member name="M:physx.PxAggregate.getScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="157">
	\brief Retrieves the scene which this aggregate belongs to.

	\return Owner Scene. NULL if not part of a scene.

	@see PxScene

</member>
<member name="M:physx.PxAggregate.getSelfCollision" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxaggregate.h" line="166">
	\brief Retrieves aggregate's self-collision flag.

	\return self-collision flag

</member>
<member name="T:physx.PxArticulationDriveCache" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="29">
\brief Articulation drive cache

This cache is used for making one or more impulse applications to the articulation.

@see PxArticulation PxArticulation.createDriveCache

</member>
<member name="T:physx.PxArticulation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="42">
\brief a tree structure of bodies connected by joints that is treated as a unit by the dynamics solver

Articulations are more expensive to simulate than the equivalent collection of
PxRigidDynamic and PxJoint structures, but because the dynamics solver treats
each articulation as a single object, they are much less prone to separation and
have better support for actuation.

@see PxArticulationJoint PxArticulationLink PxPhysics.createArticulation

</member>
<member name="M:physx.PxArticulation.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="55">
	\brief Deletes the articulation.
	
	Do not keep a reference to the deleted instance.

	@see PxPhysics.createArticulation()

</member>
<member name="M:physx.PxArticulation.getScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="64">
	\brief Retrieves the scene which this articulation belongs to.

	\return Owner Scene. NULL if not part of a scene.

	@see PxScene

</member>
<member name="M:physx.PxArticulation.setMaxProjectionIterations(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="74">
	\brief sets maxProjectionIterations.

	This is the maximum number of iterations to run projection on the articulation to bring
	the links back together if the separation  tolerance is exceeded.


	\param[in] iterations the maximum number of projection iterations 
	<b>Default:</b> 4

	@see getMaxProjectionIterations()

</member>
<member name="M:physx.PxArticulation.getMaxProjectionIterations" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="88">
	\brief gets maxProjectionIterations.

	\return the maximum number of projection iterations

	@see setMaxProjectionIterations()

</member>
<member name="M:physx.PxArticulation.setSeparationTolerance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="98">
	\brief sets separationTolerance.

	This is the maximum allowed separation of any joint in the articulation before projection is used

	<b>Default: 0.1f, scaled by the tolerance scale </b>

	\param[in] tolerance the separation tolerance for the articulation

	@see getSeparationTolerance()

</member>
<member name="M:physx.PxArticulation.getSeparationTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="111">
	\brief gets separationTolerance.

	\return the separation tolerance

	@see setSeparationTolerance()

</member>
<member name="M:physx.PxArticulation.setInternalDriveIterations(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="122">
	\brief sets the number of iterations used to compute the drive response to internal forces

	The drive model uses an iterative algorithm to determine the load on each joint of the articulation. 
	This is the number of iterations to use when computing response of the drive to internal forces.

	\param[in] iterations the number of iterations used to compute the drive response to internal forces.
	
	<b>Default:</b> 4

	@see getInternalDriveIterations()

</member>
<member name="M:physx.PxArticulation.getInternalDriveIterations" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="136">
	\brief gets internal driveIterations.

	\return the number of iterations used to compute the drive response to internal forces

	@see setInternalDriveIterations()

</member>
<member name="M:physx.PxArticulation.setExternalDriveIterations(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="147">
	\brief sets the number of iterations for drive response to external forces.

	The drive model uses an iterative algorithm to determine the load on each joint of the articulation. 
	This is the number of iterations to use when computing response of the drive to external forces.

	\param[in] iterations the number of iterations used to compute the drive response to external forces.

	<b>Default:</b> 4

	@see getExternalDriveIterations()

</member>
<member name="M:physx.PxArticulation.getExternalDriveIterations" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="162">
	\brief gets externalDriveIterations.

	\return the number of iterations used to compute the drive response to external forces

	@see setExternalDriveIterations()

</member>
<member name="M:physx.PxArticulation.setSolverIterationCounts(System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="174">
	\brief Sets the solver iteration counts for the articulation. 
	
	The solver iteration count determines how accurately joints and contacts are resolved. 
	If you are having trouble with jointed bodies oscillating and behaving erratically, then
	setting a higher position iteration count may improve their stability.

	If intersecting bodies are being depenetrated too violently, increase the number of velocity 
	iterations. More velocity iterations will drive the relative exit velocity of the intersecting 
	objects closer to the correct value given the restitution.

	\param[in] minPositionIters Number of position iterations the solver should perform for this articulation. <b>Range:</b> [1,255]
	\param[in] minVelocityIters Number of velocity iterations the solver should perform for this articulation. <b>Range:</b> [1,255]

	@see getSolverIterationCounts()

</member>
<member name="M:physx.PxArticulation.getSolverIterationCounts(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="192">
	\brief Retrieves the solver iteration counts.

	@see setSolverIterationCounts()

</member>
<member name="M:physx.PxArticulation.isSleeping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="199">
	\brief Returns true if this articulation is sleeping.

	When an actor does not move for a period of time, it is no longer simulated in order to save time. This state
	is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object,
	or a sleep-affecting property is changed by the user, the entire sleep mechanism should be transparent to the user.
	
	An articulation can only go to sleep if all links are ready for sleeping. An articulation is guaranteed to be awake 
	if at least one of the following holds:

	\li The wake counter is positive (see #setWakeCounter()).
	\li The linear or angular velocity of any link is non-zero.
	\li A non-zero force or torque has been applied to the articulation or any of its links.

	If an articulation is sleeping, the following state is guaranteed:

	\li The wake counter is zero.
	\li The linear and angular velocity of all links is zero.
	\li There is no force update pending.

	When an articulation gets inserted into a scene, it will be considered asleep if all the points above hold, else it will 
	be treated as awake.

	If an articulation is asleep after the call to PxScene::fetchResults() returns, it is guaranteed that the poses of the
	links were not changed. You can use this information to avoid updating the transforms of associated of dependent objects.

	\note It is invalid to use this method if the articulation has not been added to a scene already.

	\return True if the articulation is sleeping.

	@see isSleeping() wakeUp() putToSleep()  getSleepThreshold()

</member>
<member name="M:physx.PxArticulation.setSleepThreshold(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="233">
	\brief Sets the mass-normalized energy threshold below which an articulation may go to sleep.

	The articulation will sleep if the energy of each body is below this threshold.

	\param[in] threshold Energy below which an actor may go to sleep. <b>Range:</b> [0, PX_MAX_F32)

	@see isSleeping() getSleepThreshold() wakeUp() putToSleep()

</member>
<member name="M:physx.PxArticulation.getSleepThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="244">
	\brief Returns the mass-normalized energy below which an articulation may go to sleep.

	\return The energy threshold for sleeping.

	@see isSleeping() wakeUp() putToSleep() setSleepThreshold()

</member>
<member name="M:physx.PxArticulation.setStabilizationThreshold(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="253">
	\brief Sets the mass-normalized kinetic energy threshold below which an articulation may participate in stabilization.

	Articulation whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.

	This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.

	<b>Default:</b> 0.01 * PxTolerancesScale::speed * PxTolerancesScale::speed

	\param[in] threshold Energy below which an actor may participate in stabilization. <b>Range:</b> (0,inf]

	@see  getStabilizationThreshold() PxSceneFlag::eENABLE_STABILIZATION

</member>
<member name="M:physx.PxArticulation.getStabilizationThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="268">
	\brief Returns the mass-normalized kinetic energy below which an articulation may participate in stabilization.

	Articulations whose kinetic energy divided by their mass is above this threshold will not participate in stabilization. 

	\return The energy threshold for participating in stabilization.

	@see setStabilizationThreshold() PxSceneFlag::eENABLE_STABILIZATION

</member>
<member name="M:physx.PxArticulation.setWakeCounter(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="279">
	\brief Sets the wake counter for the articulation.

	The wake counter value determines the minimum amount of time until the articulation can be put to sleep. Please note
	that an articulation will not be put to sleep if the energy is above the specified threshold (see #setSleepThreshold())
	or if other awake objects are touching it.

	\note Passing in a positive value will wake the articulation up automatically.

	<b>Default:</b> 0.4 (which corresponds to 20 frames for a time step of 0.02)

	\param[in] wakeCounterValue Wake counter value. <b>Range:</b> [0, PX_MAX_F32)

	@see isSleeping() getWakeCounter()

</member>
<member name="M:physx.PxArticulation.getWakeCounter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="296">
	\brief Returns the wake counter of the articulation.

	\return The wake counter of the articulation.

	@see isSleeping() setWakeCounter()

</member>
<member name="M:physx.PxArticulation.wakeUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="305">
	\brief Wakes up the articulation if it is sleeping.

	The articulation will get woken up and might cause other touching objects to wake up as well during the next simulation step.

	\note This will set the wake counter of the articulation to the value specified in #PxSceneDesc::wakeCounterResetValue.

	\note It is invalid to use this method if the articulation has not been added to a scene already.

	@see isSleeping() putToSleep()

</member>
<member name="M:physx.PxArticulation.putToSleep" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="318">
	\brief Forces the articulation to sleep. 
	
	The articulation will stay asleep during the next simulation step if not touched by another non-sleeping actor.
	
	\note This will set any applied force, the velocity and the wake counter of all bodies in the articulation to zero.

	\note It is invalid to use this method if the articulation has not been added to a scene already.

	@see isSleeping() wakeUp()

</member>
<member name="M:physx.PxArticulation.createLink(physx.PxArticulationLink*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="331">
	\brief adds a link to the articulation with default attribute values.

	\param[in] parent the parent link of the articulation. Should be NULL if (and only if) this is the root link
	\param[in] pose the pose of the new link

	\return the new link, or NULL if the link cannot be created because the articulation has reached
	its maximum link count
	
	@see PxArticulationLink

</member>
<member name="M:physx.PxArticulation.getNbLinks" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="346">
\brief returns the number of links in the articulation

</member>
<member name="M:physx.PxArticulation.getLinks(physx.PxArticulationLink**,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="352">
	\brief returns the set of links in the articulation

	\param[in] userBuffer buffer into which to write an array of articulation link pointers
	\param[in] bufferSize the size of the buffer. If this is not large enough to contain all the pointers to links,
	only as many as will fit are written.

	\return the number of links written into the buffer.

	@see PxsArticulationLink

</member>
<member name="M:physx.PxArticulation.setName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="366">
	\brief Sets a name string for the object that can be retrieved with getName().
	
	This is for debugging and is not used by the SDK. The string is not copied by the SDK, 
	only the pointer is stored.

	\param[in] name String to set the objects name to.

	@see getName()

</member>
<member name="M:physx.PxArticulation.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="378">
	\brief Retrieves the name string set with setName().

	\return Name string associated with object.

	@see setName()

</member>
<member name="M:physx.PxArticulation.getWorldBounds(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="387">
	\brief Retrieves the axis aligned bounding box enclosing the articulation.

	\param[in] inflation  Scale factor for computed world bounds. Box extents are multiplied by this value.

	\return The articulation's bounding box.

	@see PxBounds3

</member>
<member name="M:physx.PxArticulation.getAggregate" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="398">
	\brief Retrieves the aggregate the articulation might be a part of.

	\return The aggregate the articulation is a part of, or NULL if the articulation does not belong to an aggregate.

	@see PxAggregate

</member>
<member name="M:physx.PxArticulation.createDriveCache(System.Single,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="407">
	\brief create a drive cache for applying impulses which are propagated to the entire articulation

	\param[in] compliance the compliance value to use at all joints of the articulation. This is equivalent to the external compliance
	parameter for articulation joints, as the impulse is treated as an external force
	\param[in] driveIterations the number of iterations to use to evaluate the drive strengths

	\return a drive cache

	@see PxArticulationDriveCache updateDriveCache releaseDriveCache applyImpulse computeImpulseResponse
	
	\note this call may only be made on articulations that are in a scene, and may not be made during simulation


</member>
<member name="M:physx.PxArticulation.updateDriveCache(physx.PxArticulationDriveCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="425">
	\brief update a drive cache

	\param[in] driveCache the drive cache to update
	\param[in] compliance the compliance value to use at all joints of the articulation. 
	\param[in] driveIterations the number of iterations to use to evaluate the drive strengths

	\return a drive cache

	@see releaseDriveCache createDriveCache applyImpulse computeImpulseResponse
	
	\note this call may only be made on articulations that are in a scene, and may not be made during simulation


</member>
<member name="M:physx.PxArticulation.releaseDriveCache(physx.PxArticulationDriveCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="443">
	\brief release a drive cache
	
	\param[in] driveCache the drive cache to release

	@see createDriveCache updateDriveCache

</member>
<member name="M:physx.PxArticulation.applyImpulse(physx.PxArticulationLink*,physx.PxArticulationDriveCache!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="452">
	\brief apply an impulse to an entire articulation
	
	\param[in] link the link to which to apply the impulse
	\param[in] driveCache the drive cache
	\param[in] linearImpulse the linear impulse to apply
	\param[in] angularImpulse the angular impulse to apply

	@see computeImpulseResponse

	\note this call may only be made on articulations that are in a scene, and may not be made during simulation


</member>
<member name="M:physx.PxArticulation.computeImpulseResponse(physx.PxArticulationLink*,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxArticulationDriveCache!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulation.h" line="470">
	\brief determine the effect of applying an impulse to an entire articulation, without applying the impulse
	
	\param[in] link the link to which to apply the impulse
	\param[out] linearResponse the change in linear velocity of the articulation link
	\param[out] angularResponse the change in angular velocity of the articulation link
	\param[in] driveCache the drive cache
	\param[in] linearImpulse the linear impulse to apply
	\param[in] angularImpulse the angular impulse to apply

	@see applyImpulse

	This call will wake up the articulation if it is asleep.

	\note this call may only be made on articulations that are in a scene, and may not be made during simulation

</member>
<member name="T:physx.PxArticulationJointDriveType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="27">
\brief The type of joint drive to use for the articulation joint.

Two drive models are currently supported. in the TARGET model, the drive spring displacement will be determined 
as the rotation vector from the relative quaternion beetween child and parent, and the target quaternion.

In the ERROR model, the drive spring displacement will be taken directly from the imaginary part of the relative
quaternion. This drive model requires more computation on the part of the application, but allows driving the joing
with a spring displacement that is more than a complete rotation.

@see PxArticulationJoint

</member>
<member name="T:physx.PxArticulationJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="50">
\brief a joint between two links in an articulation.

The joint model is very similar to a PxSphericalJoint with swing and twist limits,
and an implicit drive model.

@see PxArticulation PxArticulationLink

</member>
<member name="M:physx.PxArticulationJoint.setParentPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="63">
	\brief set the joint pose in the parent frame

	\param[in] pose the joint pose in the parent frame
	<b>Default:</b> the identity matrix

	@see getParentPose()

</member>
<member name="M:physx.PxArticulationJoint.getParentPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="74">
	\brief get the joint pose in the parent frame

	\return the joint pose in the parent frame

	@see setParentPose()

</member>
<member name="M:physx.PxArticulationJoint.setChildPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="85">
	\brief set the joint pose in the child frame

	\param[in] pose the joint pose in the child frame
	<b>Default:</b> the identity matrix

	@see getChildPose()

</member>
<member name="M:physx.PxArticulationJoint.getChildPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="96">
	\brief get the joint pose in the child frame

	\return the joint pose in the child frame

	@see setChildPose()

</member>
<member name="M:physx.PxArticulationJoint.setTargetOrientation(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="106">
	\brief set the target drive

	This is the target position for the joint drive, measured in the parent constraint frame.

	\param[in] orientation the target orientation for the joint
	<b>Range:</b> a unit quaternion
	<b>Default:</b> the identity quaternion

	@see getTargetOrientation()

</member>
<member name="M:physx.PxArticulationJoint.getTargetOrientation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="120">
	\brief get the target drive position

	\return the joint drive target position

	@see setTargetOrientation()

</member>
<member name="M:physx.PxArticulationJoint.setTargetVelocity(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="129">
	\brief set the target drive velocity

	This is the target velocity for the joint drive, measured in the parent constraint frame

	\param[in] velocity the target velocity for the joint
	<b>Default:</b> the zero vector

	@see getTargetVelocity()

</member>
<member name="M:physx.PxArticulationJoint.getTargetVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="141">
	\brief get the target drive velocity

	\return the target velocity for the joint

	@see setTargetVelocity()

</member>
<member name="M:physx.PxArticulationJoint.setDriveType(physx.PxArticulationJointDriveType.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="151">
	\brief set the drive type

	\param[in] driveType the drive type for the joint
	<b>Default:</b> PxArticulationJointDriveType::eTARGET

	@see getDriveType()

</member>
<member name="M:physx.PxArticulationJoint.getDriveType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="161">
	\brief get the drive type

	\return the drive type

	@see setDriveType()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxArticulationJoint.setStiffness(System.Single)'. -->
<member name="M:physx.PxArticulationJoint.getStiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="187">
	\brief get the drive strength of the joint acceleration spring

	\return the spring strength of the joint

	@see setStiffness()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxArticulationJoint.setDamping(System.Single)'. -->
<member name="M:physx.PxArticulationJoint.getDamping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="212">
	\brief get the damping of the joint acceleration spring

	@see setDamping()

</member>
<member name="M:physx.PxArticulationJoint.setInternalCompliance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="220">
	\brief set the internal compliance

	Compliance determines the extent to which the joint resists acceleration. 
	
	There are separate values for resistance to accelerations caused by external
	forces such as gravity and contact forces, and internal forces generated from
	other joints.

	A low compliance means that forces have little effect, a compliance of 1 means 
	the joint does not resist such forces at all.

	\param[in] compliance the compliance to internal forces
	<b> Range: (0, 1]</b>
	<b> Default:</b> 0.0

	@see getInternalCompliance()

</member>
<member name="M:physx.PxArticulationJoint.getInternalCompliance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="242">
	\brief get the internal compliance

	\return the compliance to internal forces

	@see setInternalCompliance()

</member>
<member name="M:physx.PxArticulationJoint.setExternalCompliance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="251">
	\brief get the drive external compliance

	Compliance determines the extent to which the joint resists acceleration. 
	
	There are separate values for resistance to accelerations caused by external
	forces such as gravity and contact forces, and internal forces generated from
	other joints.

	A low compliance means that forces have little effect, a compliance of 1 means 
	the joint does not resist such forces at all.

	\param[in] compliance the compliance to external forces
	<b> Range: (0, 1]</b>
	<b> Default:</b> 0.0

	@see getExternalCompliance()

</member>
<member name="M:physx.PxArticulationJoint.getExternalCompliance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="272">
	\brief get the drive external compliance

	\return the compliance to external forces

	@see setExternalCompliance()

</member>
<member name="M:physx.PxArticulationJoint.setSwingLimit(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="283">
	\brief set the extents of the cone limit. The extents are measured in the frame
	of the parent.

	Note that very small or highly elliptical limit cones may result in jitter.

	\param[in] yLimit the allowed extent of rotation around the y-axis
	\param[in] zLimit the allowed extent of rotation around the z-axis
	<b> Range:</b> ( (0, Pi), (0, Pi) )
	<b> Default:</b> (Pi/4, Pi/4)

</member>
<member name="M:physx.PxArticulationJoint.getSwingLimit(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="298">
	\brief get the extents for the swing limit cone
	
	\param[out] yLimit the allowed extent of rotation around the y-axis
	\param[out] zLimit the allowed extent of rotation around the z-axis

	@see setSwingLimit()

</member>
<member name="M:physx.PxArticulationJoint.setTangentialStiffness(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="310">
\brief set the tangential spring for the limit cone
<b> Range:</b> ([0, PX_MAX_F32), [0, PX_MAX_F32))
<b> Default:</b> (0.0, 0.0)

</member>
<member name="M:physx.PxArticulationJoint.getTangentialStiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="319">
	\brief get the tangential spring for the swing limit cone
	
	\return the tangential spring

	@see setTangentialStiffness()

</member>
<member name="M:physx.PxArticulationJoint.setTangentialDamping(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="329">
\brief set the tangential damping for the limit cone
<b> Range:</b> ([0, PX_MAX_F32), [0, PX_MAX_F32))
<b> Default:</b> (0.0, 0.0)

</member>
<member name="M:physx.PxArticulationJoint.getTangentialDamping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="338">
	\brief get the tangential damping for the swing limit cone
	
	\return the tangential damping

	@see setTangentialDamping()

</member>
<member name="M:physx.PxArticulationJoint.setSwingLimitContactDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="348">
	\brief set the contact distance for the swing limit

	The contact distance should be less than either limit angle. 

	<b> Range:</b> [0, Pi]
	<b> Default:</b> 0.05 radians

	@see getSwingLimitContactDistance()

</member>
<member name="M:physx.PxArticulationJoint.getSwingLimitContactDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="362">
	\brief get the contact distance for the swing limit
	
	\return the contact distance for the swing limit cone

	@see setSwingLimitContactDistance()

</member>
<member name="M:physx.PxArticulationJoint.setSwingLimitEnabled(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="373">
	\brief set the flag which enables the swing limit

	\param[in] enabled whether the limit is enabled
	<b>Default:</b> false

	@see getSwingLimitEnabled()

</member>
<member name="M:physx.PxArticulationJoint.getSwingLimitEnabled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="383">
	\brief get the flag which enables the swing limit

	\return whether the swing limit is enabled

	@see setSwingLimitEnabled()

</member>
<member name="M:physx.PxArticulationJoint.setTwistLimit(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="394">
	\brief set the bounds of the twistLimit

	\param[in] lower the lower extent of the twist limit
	\param[in] upper the upper extent of the twist limit
	<b> Range: (-Pi, Pi)</b>
	<b> Default:</b> (-Pi/4, Pi/4)

	The lower limit value must be less than the upper limit if the limit is enabled

	@see getTwistLimit()

</member>
<member name="M:physx.PxArticulationJoint.getTwistLimit(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="408">
	\brief get the bounds of the twistLimit

	\param[out] lower the lower extent of the twist limit
	\param[out] upper the upper extent of the twist limit

	@see setTwistLimit()

</member>
<member name="M:physx.PxArticulationJoint.setTwistLimitEnabled(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="420">
	\brief set the flag which enables the twist limit

	\param[in] enabled whether the twist limit is enabled
	<b>Default:</b> false

	@see getTwistLimitEnabled()

</member>
<member name="M:physx.PxArticulationJoint.getTwistLimitEnabled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="430">
	\brief get the twistLimitEnabled flag

	\return whether the twist limit is enabled

	@see setTwistLimitEnabled()

</member>
<member name="M:physx.PxArticulationJoint.setTwistLimitContactDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="441">
	\brief set the contact distance for the swing limit

	The contact distance should be less than half the distance between the upper and lower limits. 

	<b> Range:</b> [0, Pi)
	<b> Default:</b> 0.05 radians

	@see getTwistLimitContactDistance()

</member>
<member name="M:physx.PxArticulationJoint.getTwistLimitContactDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationjoint.h" line="455">
	\brief get the contact distance for the swing limit
	
	\return the contact distance for the twist limit

	@see setTwistLimitContactDistance()

</member>
<member name="T:physx.PxShapeFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="42">
\brief Flags which affect the behavior of PxShapes.

@see PxShape PxShape.setFlag()

</member>
<member name="F:eSIMULATION_SHAPE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="51">
		\brief The shape will partake in collision in the physical simulation.

		\note It is illegal to raise the eSIMULATION_SHAPE and eTRIGGER_SHAPE flags.
		In the event that one of these flags is already raised the sdk will reject any 
		attempt to raise the other.  To raise the eSIMULATION_SHAPE first ensure that 
		eTRIGGER_SHAPE is already lowered.

		\note This flag has no effect if simulation is disabled for the corresponding actor (see #PxActorFlag::eDISABLE_SIMULATION).

		@see PxSimulationEventCallback.onContact() PxScene.setSimulationEventCallback() PxShape.setFlag(), PxShape.setFlags()

</member>
<member name="F:eSCENE_QUERY_SHAPE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="65">
\brief The shape will partake in scene queries (ray casts, overlap tests, sweeps, ...).

</member>
<member name="F:eTRIGGER_SHAPE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="70">
		\brief The shape is a trigger which can send reports whenever other shapes enter/leave its volume.

		\note Triangle meshes and heightfields can not be triggers. Shape creation will fail in these cases.

		\note Shapes marked as triggers do not collide with other objects. If an object should act both
		as a trigger shape and a collision shape then create a rigid body with two shapes, one being a 
		trigger shape and the other a collision shape. 	It is illegal to raise the eTRIGGER_SHAPE and 
		eSIMULATION_SHAPE flags on a single PxShape instance.  In the event that one of these flags is already 
		raised the sdk will reject any attempt to raise the other.  To raise the eTRIGGER_SHAPE flag first 
		ensure that eSIMULATION_SHAPE flag is already lowered.

		\note Shapes marked as triggers are allowed to participate in scene queries, provided the eSCENE_QUERY_SHAPE flag is set. 

		\note This flag has no effect if simulation is disabled for the corresponding actor (see #PxActorFlag::eDISABLE_SIMULATION).

		@see PxSimulationEventCallback.onTrigger() PxScene.setSimulationEventCallback() PxShape.setFlag(), PxShape.setFlags()

</member>
<member name="F:eVISUALIZATION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="90">
		\brief Enable debug renderer for this shape

		@see PxScene.getRenderBuffer() PxRenderBuffer PxVisualizationParameter

</member>
<member name="F:ePARTICLE_DRAIN" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="97">
\brief Sets the shape to be a particle drain.

</member>
<member name="D:physx.PxShapeFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="104">
\brief collection of set bits defined in PxShapeFlag.

@see PxShapeFlag

</member>
<member name="T:physx.PxShape" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="113">
\brief Abstract class for collision shapes.

Shapes are shared, reference counted objects.

An instance can be created by calling the createShape() method of the PxRigidActor class, or
the createShape() method of the PxPhysics class.

<h3>Visualizations</h3>
\li PxVisualizationParameter::eCOLLISION_AABBS
\li PxVisualizationParameter::eCOLLISION_SHAPES
\li PxVisualizationParameter::eCOLLISION_AXES

@see PxPhysics.createShape() PxRigidActor.createShape() PxBoxGeometry PxSphereGeometry PxCapsuleGeometry PxPlaneGeometry PxConvexMeshGeometry
PxTriangleMeshGeometry PxHeightFieldGeometry

</member>
<member name="M:physx.PxShape.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="133">
	\brief Decrements the reference count of a shape and releases it if the new reference count is zero.

	Note that in releases prior to PhysX 3.3 this method did not have reference counting semantics and was used to destroy a shape 
	created with PxActor::createShape(). In PhysX 3.3 and above, this usage is deprecated, instead, use PxRigidActor::detachShape() to detach
	a shape from an actor. If the shape to be detached was created with PxActor::createShape(), the actor holds the only counted reference,
	and so when the shape is detached it will also be destroyed. 

	@see PxRigidActor::createShape() PxPhysics::createShape() PxRigidActor::attachShape() PxRigidActor::detachShape()

</member>
<member name="M:physx.PxShape.getGeometryType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="145">
	\brief Get the geometry type of the shape.

	\return Type of shape geometry.

	@see PxGeometryType

</member>
<member name="M:physx.PxShape.setGeometry(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="154">
	\brief Adjust the geometry of the shape.

	\note The type of the passed in geometry must match the geometry type of the shape.
	\note It is not allowed to change the geometry type of a shape.
	\note This function does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.

	\param[in] geometry New geometry of the shape.

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="168">
	\brief Retrieve the geometry from the shape in a PxGeometryHolder wrapper class.

	\return a PxGeometryHolder object containing the geometry;
	
	@see PxGeometry PxGeometryType getGeometryType() setGeometry()

</member>
<member name="M:physx.PxShape.getBoxGeometry(physx.PxBoxGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="179">
	\brief Fetch the geometry of the shape.

	\note If the type of geometry to extract does not match the geometry type of the shape
	then the method will return false and the passed in geometry descriptor is not modified.

	\param[in] geometry The descriptor to save the shape's geometry data to.
	\return True on success else false

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getSphereGeometry(physx.PxSphereGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="192">
	\brief Fetch the geometry of the shape.

	\note If the type of geometry to extract does not match the geometry type of the shape
	then the method will return false and the passed in geometry descriptor is not modified.

	\param[in] geometry The descriptor to save the shape's geometry data to.
	\return True on success else false

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getCapsuleGeometry(physx.PxCapsuleGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="205">
	\brief Fetch the geometry of the shape.

	\note If the type of geometry to extract does not match the geometry type of the shape
	then the method will return false and the passed in geometry descriptor is not modified.

	\param[in] geometry The descriptor to save the shape's geometry data to.
	\return True on success else false

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getPlaneGeometry(physx.PxPlaneGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="218">
	\brief Fetch the geometry of the shape.

	\note If the type of geometry to extract does not match the geometry type of the shape
	then the method will return false and the passed in geometry descriptor is not modified.

	\param[in] geometry The descriptor to save the shape's geometry data to.
	\return True on success else false

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getConvexMeshGeometry(physx.PxConvexMeshGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="231">
	\brief Fetch the geometry of the shape.

	\note If the type of geometry to extract does not match the geometry type of the shape
	then the method will return false and the passed in geometry descriptor is not modified.

	\param[in] geometry The descriptor to save the shape's geometry data to.
	\return True on success else false

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getTriangleMeshGeometry(physx.PxTriangleMeshGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="244">
	\brief Fetch the geometry of the shape.

	\note If the type of geometry to extract does not match the geometry type of the shape
	then the method will return false and the passed in geometry descriptor is not modified.

	\param[in] geometry The descriptor to save the shape's geometry data to.
	\return True on success else false

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getHeightFieldGeometry(physx.PxHeightFieldGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="257">
	\brief Fetch the geometry of the shape.

	\note If the type of geometry to extract does not match the geometry type of the shape
	then the method will return false and the passed in geometry descriptor is not modified.

	\param[in] geometry The descriptor to save the shape's geometry data to.
	\return True on success else false

	@see PxGeometry PxGeometryType getGeometryType()

</member>
<member name="M:physx.PxShape.getActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="270">
	\brief Retrieves the actor which this shape is associated with.

	\return The actor this shape is associated with, if it is an exclusive shape, else NULL

	@see PxRigidStatic, PxRigidDynamic, PxArticulationLink

</member>
<member name="M:physx.PxShape.setLocalPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="282">
@name Pose Manipulation

	\brief Sets the pose of the shape in actor space, i.e. relative to the actors to which they are attached.
	
	This transformation is identity by default.

	The local pose is an attribute of the shape, and so will apply to all actors to which the shape is attached.

	<b>Sleeping:</b> Does <b>NOT</b> wake the associated actor up automatically.

	<i>Note:</i> Does not automatically update the inertia properties of the owning actor (if applicable); use the
	PhysX extensions method #PxRigidBodyExt::updateMassAndInertia() to do this.

	<b>Default:</b> the identity transform

	\param[in] pose	The new transform from the actor frame to the shape frame. <b>Range:</b> rigid body transform

	@see getLocalPose() 

</member>
<member name="M:physx.PxShape.getLocalPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="306">
	\brief Retrieves the pose of the shape in actor space, i.e. relative to the actor they are owned by.

	This transformation is identity by default.

	\return Pose of shape relative to the actor's frame.

	@see setLocalPose() 

</member>
<member name="M:physx.PxShape.setSimulationFilterData(physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="320">
@name Collision Filtering

	\brief Sets the user definable collision filter data.
	
	<b>Sleeping:</b> Does wake up the actor if the filter data change causes a formerly suppressed
	collision pair to be enabled.

	<b>Default:</b> (0,0,0,0)

	@see getSimulationFilterData() 

</member>
<member name="M:physx.PxShape.getSimulationFilterData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="336">
	\brief Retrieves the shape's collision filter data.

	@see setSimulationFilterData() 

</member>
<member name="M:physx.PxShape.resetFiltering" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="343">
\deprecated
\brief Marks the object to reset interactions and re-run collision filters in the next simulation step.

\note This method has been deprecated. Please use #PxScene::resetFiltering() instead.

</member>
<member name="M:physx.PxShape.setQueryFilterData(physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="351">
	\brief Sets the user definable query filter data.

	<b>Default:</b> (0,0,0,0)

	@see getQueryFilterData() 

</member>
<member name="M:physx.PxShape.getQueryFilterData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="360">
	\brief Retrieves the shape's Query filter data.

	@see setQueryFilterData() 

</member>
<member name="M:physx.PxShape.setMaterials(physx.PxMaterial*!System.Runtime.CompilerServices.IsConst*,System.UInt16)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="370">
	\brief Assigns material(s) to the shape.
	
	<b>Sleeping:</b> Does <b>NOT</b> wake the associated actor up automatically.

	\param[in] materials List of material pointers to assign to the shape. See #PxMaterial
	\param[in] materialCount The number of materials provided.

	@see PxPhysics.createMaterial() getMaterials() 

</member>
<member name="M:physx.PxShape.getNbMaterials" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="382">
	\brief Returns the number of materials assigned to the shape.

	You can use #getMaterials() to retrieve the material pointers.

	\return Number of materials associated with this shape.

	@see PxMaterial getMaterials()

</member>
<member name="M:physx.PxShape.getMaterials(physx.PxMaterial**,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="393">
	\brief Retrieve all the material pointers associated with the shape.

	You can retrieve the number of material pointers by calling #getNbMaterials()

	Note: Removing materials with #PxMaterial::release() will invalidate the pointer of the released material.

	\param[out] userBuffer The buffer to store the material pointers.
	\param[in] bufferSize Size of provided user buffer.
	\return Number of material pointers written to the buffer.

	@see PxMaterial getNbMaterials() PxMaterial::release()

</member>
<member name="M:physx.PxShape.getMaterialFromInternalFaceIndex(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="408">
	\brief Retrieve material from given triangle index.

	The input index is the internal triangle index as used inside the SDK. This is the index
	returned to users by various SDK functions such as raycasts.
	
	This function is only useful for triangle meshes or heightfields, which have per-triangle
	materials. For other shapes the function returns the single material associated with the
	shape, regardless of the index.

	\param[in] faceIndex The internal triangle index whose material you want to retrieve.
	\return Material from input triangle

	\note If faceIndex value of 0xFFFFffff is passed as an input for mesh and heightfield shapes, this function will issue a warning and return NULL.
	\note Scene queries set the value of PxQueryHit::faceIndex to 0xFFFFffff whenever it is undefined or does not apply.

	@see PxMaterial getNbMaterials() PxMaterial::release()

</member>
<member name="M:physx.PxShape.setContactOffset(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="428">
	\brief Sets the contact offset.

	Shapes whose distance is less than the sum of their contactOffset values will generate contacts. The contact offset must be positive and
	greater than the rest offset. Having a contactOffset greater than than the restOffset allows the collision detection system to
	predictively enforce the contact constraint even when the objects are slightly separated. This prevents jitter that would occur
	if the constraint were enforced only when shapes were within the rest distance.

	<b>Default:</b> 0.02f * PxTolerancesScale::length

	<b>Sleeping:</b> Does <b>NOT</b> wake the associated actor up automatically.

	\param[in] contactOffset <b>Range:</b> [maximum(0,restOffset), PX_MAX_F32)

	@see getContactOffset PxTolerancesScale setRestOffset

</member>
<member name="M:physx.PxShape.getContactOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="446">
	\brief Retrieves the contact offset. 

	\return The contact offset of the shape.

	@see setContactOffset()

</member>
<member name="M:physx.PxShape.setRestOffset(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="455">
	\brief Sets the rest offset. 

	Two shapes will come to rest at a distance equal to the sum of their restOffset values. If the restOffset is 0, they should converge to touching 
	exactly.  Having a restOffset greater than zero is useful to have objects slide smoothly, so that they do not get hung up on irregularities of 
	each others' surfaces.

	<b>Default:</b> 0.0f

	<b>Sleeping:</b> Does <b>NOT</b> wake the associated actor up automatically.

	\param[in] restOffset	<b>Range:</b> (-PX_MAX_F32, contactOffset)

	@see getRestOffset setContactOffset

</member>
<member name="M:physx.PxShape.getRestOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="472">
	\brief Retrieves the rest offset. 

	\return The rest offset of the shape.

	@see setRestOffset()

</member>
<member name="M:physx.PxShape.setFlag(physx.PxShapeFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="483">
	\brief Sets shape flags

	<b>Sleeping:</b> Does <b>NOT</b> wake the associated actor up automatically.

	\param[in] flag The shape flag to enable/disable. See #PxShapeFlag.
	\param[in] value True to set the flag. False to clear the flag specified in flag.

	<b>Default:</b> PxShapeFlag::eVISUALIZATION | PxShapeFlag::eSIMULATION_SHAPE | PxShapeFlag::eSCENE_QUERY_SHAPE

	@see PxShapeFlag getFlags()

</member>
<member name="M:physx.PxShape.setFlags(physx.PxFlags&lt;physx.PxShapeFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="497">
	\brief Sets shape flags

	@see PxShapeFlag getFlags()

</member>
<member name="M:physx.PxShape.getFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="504">
	\brief Retrieves shape flags.

	\return The values of the shape flags.

	@see PxShapeFlag setFlag()

</member>
<member name="M:physx.PxShape.isExclusive" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="513">
\brief Returns true if the shape is exclusive to an actor.

@see PxPhysics::createShape()

</member>
<member name="M:physx.PxShape.setName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="520">
	\brief Sets a name string for the object that can be retrieved with #getName().
	
	This is for debugging and is not used by the SDK.
	The string is not copied by the SDK, only the pointer is stored.

	<b>Default:</b> NULL
	
	\param[in] name The name string to set the objects name to.

	@see getName()

</member>
<member name="M:physx.PxShape.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxshape.h" line="535">
	\brief retrieves the name string set with setName().
	\return The name associated with the shape.

	@see setName()

</member>
<member name="T:physx.PxRigidActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="32">
\brief PxRigidActor represents a base class shared between dynamic and static rigid bodies in the physics SDK.

PxRigidActor objects specify the geometry of the object by defining a set of attached shapes (see #PxShape, #createShape()).

@see PxActor

</member>
<member name="M:physx.PxRigidActor.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="43">
	\brief Deletes the rigid actor object.
	
	Also releases any shapes associated with the actor.

	Releasing an actor will affect any objects that are connected to the actor (constraint shaders like joints etc.).
	Such connected objects will be deleted upon scene deletion, or explicitly by the user by calling release()
	on these objects. It is recommended to always remove all objects that reference actors before the actors
	themselves are removed. It is not possible to retrieve list of dead connected objects.

	<b>Sleeping:</b> This call will awaken any sleeping actors contacting the deleted actor (directly or indirectly).

	Calls #PxActor::release() so you might want to check the documentation of that method as well.

	@see PxActor::release()

</member>
<member name="M:physx.PxRigidActor.getGlobalPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="63">
@name Global Pose Manipulation

	\brief Retrieves the actors world space transform.

	The getGlobalPose() method retrieves the actor's current actor space to world space transformation.

	\return Global pose of object.

	@see PxRigidDynamic.setGlobalPose() PxRigidStatic.setGlobalPose()

</member>
<member name="M:physx.PxRigidActor.setGlobalPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="77">
	\brief Method for setting an actor's pose in the world.

	This method instantaneously changes the actor space to world space transformation. 

	This method is mainly for dynamic rigid bodies (see #PxRigidDynamic). Calling this method on static actors is 
	likely to result in a performance penalty, since internal optimization structures for static actors may need to be 
	recomputed. In addition, moving static actors will not interact correctly with dynamic actors or joints. 
	
	To directly control an actor's position and have it correctly interact with dynamic bodies and joints, create a dynamic 
	body with the PxRigidBodyFlag::eKINEMATIC flag, then use the setKinematicTarget() commands to define its path.

	Even when moving dynamic actors, exercise restraint in making use of this method. Where possible, avoid:
	
	\li moving actors into other actors, thus causing overlap (an invalid physical state)
	
	\li moving an actor that is connected by a joint to another away from the other (thus causing joint error)

	<b>Sleeping:</b> This call wakes dynamic actors if they are sleeping and the autowake parameter is true (default).

	\param[in] pose Transformation from the actors local frame to the global frame. <b>Range:</b> rigid body transform.
	\param[in] autowake whether to wake the object if it is dynamic. This parameter has no effect for static or kinematic actors. If true and the current wake counter value is smaller than #PxSceneDesc::wakeCounterResetValue it will get increased to the reset value.

	@see getGlobalPose()

</member>
<member name="M:physx.PxRigidActor.createShape(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial*!System.Runtime.CompilerServices.IsConst*,System.UInt16,physx.PxFlags&lt;physx.PxShapeFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="106">
@name Shapes

	\brief Creates a new shape with default properties and a list of materials and adds it to the list of shapes of this actor.
	
	This is equivalent to the following

	PxShape* shape(...) = PxGetPhysics().createShape(...);	// reference count is 1
	actor-&gt;attachShape(shape);								// increments reference count
	shape-&gt;release();										// releases user reference, leaving reference count at 1

	As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.

	\note The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see #PxShapeFlag).
	Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for 
	non-kinematic PxRigidDynamic instances.

	\note Creating compounds with a very large number of shapes may adversely affect performance and stability.

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] geometry	the geometry of the shape
	\param[in] materials a pointer to an array of material pointers
	\param[in] materialCount the count of materials
	\param[in] shapeFlags optional PxShapeFlags

	\return The newly created shape.

	@see PxShape PxShape::release()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxRigidActor.createShape(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial*!System.Runtime.CompilerServices.IsConst*,System.UInt32,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:physx.PxRigidActor.createShape(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxShapeFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="160">
	\brief Creates a new shape with default properties and a single material adds it to the list of shapes of this actor.

	This is equivalent to the following

	PxShape* shape(...) = PxGetPhysics().createShape(...);	// reference count is 1
	actor-&gt;attachShape(shape);								// increments reference count
	shape-&gt;release();										// releases user reference, leaving reference count at 1

	As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.

	\note The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see #PxShapeFlag).
	Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for 
	non-kinematic PxRigidDynamic instances.

	\note Creating compounds with a very large number of shapes may adversely affect performance and stability.

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] geometry	the geometry of the shape
	\param[in] material	the material for the shape
	\param[in] shapeFlags optional PxShapeFlags

	\return The newly created shape.

	@see PxShape PxShape::release() detachShape()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxRigidActor.createShape(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:physx.PxRigidActor.attachShape(physx.PxShape*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="214">
attach a shared shape to an actor 

	This call will increment the reference count of the shape.

	\note Mass properties of dynamic rigid actors will not automatically be recomputed 
	to reflect the new mass distribution implied by the shape. Follow this call with a call to 
	the PhysX extensions method #PxRigidBodyExt::updateMassAndInertia() to do that.

	Attaching a triangle mesh, heightfield or plane geometry shape configured as eSIMULATION_SHAPE is not supported for 
	non-kinematic PxRigidDynamic instances.


	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] shape	the shape to attach.


</member>
<member name="M:physx.PxRigidActor.detachShape(physx.PxShape*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="234">
detach a shape from an actor. 
	
	This will also decrement the reference count of the PxShape, and if the reference count is zero, will cause it to be deleted.

	For static rigid actors it is not possible to detach all shapes associated with the actor.
	An attempt to remove the last shape will be ignored.

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] shape	the shape to detach.
	\param[in] wakeOnLostTouch Specifies whether touching objects from the previous frame should get woken up in the next frame. Only applies to PxArticulation and PxRigidActor types.


</member>
<member name="M:physx.PxRigidActor.getNbShapes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="250">
	\brief Returns the number of shapes assigned to the actor.

	You can use #getShapes() to retrieve the shape pointers.

	\return Number of shapes associated with this actor.

	@see PxShape getShapes()

</member>
<member name="M:physx.PxRigidActor.getShapes(physx.PxShape**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="262">
	\brief Retrieve all the shape pointers belonging to the actor.

	These are the shapes used by the actor for collision detection.

	You can retrieve the number of shape pointers by calling #getNbShapes()

	Note: Removing shapes with #PxShape::release() will invalidate the pointer of the released shape.

	\param[out] userBuffer The buffer to store the shape pointers.
	\param[in] bufferSize Size of provided user buffer.
	\param[in] startIndex Index of first shape pointer to be retrieved
	\return Number of shape pointers written to the buffer.

	@see PxShape getNbShapes() PxShape::release()

</member>
<member name="M:physx.PxRigidActor.getNbConstraints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="281">
@name Constraints

	\brief Returns the number of constraint shaders attached to the actor.

	You can use #getConstraints() to retrieve the constraint shader pointers.

	\return Number of constraint shaders attached to this actor.

	@see PxConstraint getConstraints()

</member>
<member name="M:physx.PxRigidActor.getConstraints(physx.PxConstraint**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidactor.h" line="296">
	\brief Retrieve all the constraint shader pointers belonging to the actor.

	You can retrieve the number of constraint shader pointers by calling #getNbConstraints()

	Note: Removing constraint shaders with #PxConstraint::release() will invalidate the pointer of the released constraint.

	\param[out] userBuffer The buffer to store the constraint shader pointers.
	\param[in] bufferSize Size of provided user buffer.
	\param[in] startIndex Index of first constraint pointer to be retrieved
	\return Number of constraint shader pointers written to the buffer.

	@see PxConstraint getNbConstraints() PxConstraint::release()

</member>
<member name="T:physx.PxForceMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxforcemode.h" line="26">
\brief Parameter to addForce() and addTorque() calls, determines the exact operation that is carried out.

@see PxRigidBody.addForce() PxRigidBody.addTorque()

</member>
<member name="T:physx.PxRigidBodyFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="29">
\brief Collection of flags describing the behavior of a rigid body.

@see PxRigidBody.setRigidBodyFlag(), PxRigidBody.getRigidBodyFlags()

</member>
<member name="F:eKINEMATIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="40">
		\brief Enables kinematic mode for the actor.

		Kinematic actors are special dynamic actors that are not 
		influenced by forces (such as gravity), and have no momentum. They are considered to have infinite
		mass and can be moved around the world using the setKinematicTarget() method. They will push 
		regular dynamic actors out of the way. Kinematics will not collide with static or other kinematic objects.

		Kinematic actors are great for moving platforms or characters, where direct motion control is desired.

		You can not connect Reduced joints to kinematic actors. Lagrange joints work ok if the platform
		is moving with a relatively low, uniform velocity.

		<b>Sleeping:</b>
		\li Setting this flag on a dynamic actor will put the actor to sleep and set the velocities to 0.
		\li If this flag gets cleared, the current sleep state of the actor will be kept.

		@see PxRigidDynamic.setKinematicTarget()

</member>
<member name="F:eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="61">
		\brief Use the kinematic target transform for scene queries.

		If this flag is raised, then scene queries will treat the kinematic target transform as the current pose
		of the body (instead of using the actual pose). Without this flag, the kinematic target will only take 
		effect with respect to scene queries after a simulation step.

		@see PxRigidDynamic.setKinematicTarget()

</member>
<member name="F:eENABLE_CCD" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="72">
		\brief Enables swept integration for the actor.

		If this flag is raised and CCD is enabled on the scene, then this body will be simulated by the CCD system to ensure that collisions are not missed due to 
		high-speed motion. Note individual shape pairs still need to enable PxPairFlag::eDETECT_CCD_CONTACT in the collision filtering to enable the CCD to respond to 
		individual interactions. 

</member>
<member name="F:eENABLE_CCD_FRICTION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="81">
		\brief Enabled CCD in swept integration for the actor.

		If this flag is raised and CCD is enabled, CCD interactions will simulate friction. By default, friction is disabled in CCD interactions because 
		CCD friction has been observed to introduce some simulation artifacts. CCD friction was enabled in previous versions of the SDK. Raising this flag will result in behavior 
		that is a closer match for previous versions of the SDK.

		\note This flag requires PxRigidBodyFlag::eENABLE_CCD to be raised to have any effect.

</member>
<member name="D:physx.PxRigidDynamicFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="94">
\deprecated
\brief A legacy typedef. PxRigidDynamicFlag has been deprecated in favor of PxRigidBodyFlag. Retained for compatibility with old API only.

@see PxRigidBodyFlag

</member>
<member name="D:physx.PxRigidBodyFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="103">
\brief collection of set bits defined in PxRigidBodyFlag.

@see PxRigidBodyFlag

</member>
<member name="D:physx.PxRigidDynamicFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="111">
\brief collection of set bits defined in PxRigidDynamicFlag.
\deprecated PxRigidDynamicFlag is deprecated. Please use PxRigidBodyFlag

</member>
<member name="T:physx.PxRigidBody" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="118">
\brief PxRigidBody is a base class shared between dynamic rigid body objects.

@see PxRigidActor

</member>
<member name="M:physx.PxRigidBody.setCMassLocalPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="130">
@name Mass Manipulation

	\brief Sets the pose of the center of mass relative to the actor.	
	
	\note Changing this transform will not move the actor in the world!

	\note Setting an unrealistic center of mass which is a long way from the body can make it difficult for
	the SDK to solve constraints. Perhaps leading to instability and jittering bodies.

	<b>Default:</b> the identity transform

	\param[in] pose Mass frame offset transform relative to the actor frame. <b>Range:</b> rigid body transform.

	@see getCMassLocalPose() PxRigidBodyDesc.massLocalPose

</member>
<member name="M:physx.PxRigidBody.getCMassLocalPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="150">
	\brief Retrieves the center of mass pose relative to the actor frame.

	\return The center of mass pose relative to the actor frame.

	@see setCMassLocalPose() PxRigidBodyDesc.massLocalPose

</member>
<member name="M:physx.PxRigidBody.setMass(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="160">
	\brief Sets the mass of a dynamic actor.
	
	The mass must be non-negative.
	
	setMass() does not update the inertial properties of the body, to change the inertia tensor
	use setMassSpaceInertiaTensor() or the PhysX extensions method #PxRigidBodyExt::updateMassAndInertia().

	\note A value of 0 is interpreted as infinite mass.
	\note Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic. 

	<b>Default:</b> 1.0

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] mass New mass value for the actor. <b>Range:</b> [0, PX_MAX_F32)

	@see getMass() PxRigidBodyDesc.mass setMassSpaceInertiaTensor()

</member>
<member name="M:physx.PxRigidBody.getMass" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="181">
	\brief Retrieves the mass of the actor.

	\note A value of 0 is interpreted as infinite mass.

	\return The mass of this actor.

	@see setMass() PxRigidBodyDesc.mass setMassSpaceInertiaTensor()

</member>
<member name="M:physx.PxRigidBody.getInvMass" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="192">
	\brief Retrieves the inverse mass of the actor.

	\return The inverse mass of this actor.

	@see setMass() PxRigidBodyDesc.mass setMassSpaceInertiaTensor()

</member>
<member name="M:physx.PxRigidBody.setMassSpaceInertiaTensor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="201">
	\brief Sets the inertia tensor, using a parameter specified in mass space coordinates.
	
	Note that such matrices are diagonal -- the passed vector is the diagonal.

	If you have a non diagonal world/actor space inertia tensor(3x3 matrix). Then you need to
	diagonalize it and set an appropriate mass space transform. See #setCMassLocalPose().

	The inertia tensor elements must be non-negative.

	\note A value of 0 in an element is interpreted as infinite inertia along that axis.
	\note Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic. 

	<b>Default:</b> (1.0, 1.0, 1.0)

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] m New mass space inertia tensor for the actor.

	@see PxRigidBodyDesc.massSpaceInertia getMassSpaceInertia() setMass() setCMassLocalPose()

</member>
<member name="M:physx.PxRigidBody.getMassSpaceInertiaTensor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="224">
	\brief  Retrieves the diagonal inertia tensor of the actor relative to the mass coordinate frame.

	This method retrieves a mass frame inertia vector.

	\return The mass space inertia tensor of this actor.

	\note A value of 0 in an element is interpreted as infinite inertia along that axis.

	@see PxRigidBodyDesc.massSpaceInertia setMassSpaceInertiaTensor() setMass() setCMassLocalPose()

</member>
<member name="M:physx.PxRigidBody.getMassSpaceInvInertiaTensor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="237">
	\brief  Retrieves the diagonal inverse inertia tensor of the actor relative to the mass coordinate frame.

	This method retrieves a mass frame inverse inertia vector.

	\return The mass space inverse inertia tensor of this actor.

	@see PxRigidBodyDesc.massSpaceInertia setMassSpaceInertiaTensor() setMass() setCMassLocalPose()

</member>
<member name="M:physx.PxRigidBody.getLinearVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="250">
@name Velocity

	\brief Retrieves the linear velocity of an actor.

	\return The linear velocity of the actor.

	@see PxRigidDynamic.setLinearVelocity() getAngularVelocity()

</member>
<member name="M:physx.PxRigidBody.setLinearVelocity(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="263">
	\brief Sets the linear velocity of the actor.
	
	Note that if you continuously set the velocity of an actor yourself, 
	forces such as gravity or friction will not be able to manifest themselves, because forces directly
	influence only the velocity/momentum of an actor.

	<b>Default:</b> (0.0, 0.0, 0.0)

	<b>Sleeping:</b> This call wakes the actor if it is sleeping, the autowake parameter is true (default) or the 
	new velocity is non-zero

	\note It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.

	\param[in] linVel New linear velocity of actor. <b>Range:</b> velocity vector
	\param[in] autowake Whether to wake the object up if it is asleep and the velocity is non-zero. If true and the current wake counter value is smaller than #PxSceneDesc::wakeCounterResetValue it will get increased to the reset value.

	@see getLinearVelocity() setAngularVelocity()

</member>
<member name="M:physx.PxRigidBody.getAngularVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="286">
	\brief Retrieves the angular velocity of the actor.

	\return The angular velocity of the actor.

	@see PxRigidDynamic.setAngularVelocity() getLinearVelocity() 

</member>
<member name="M:physx.PxRigidBody.setAngularVelocity(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="296">
	\brief Sets the angular velocity of the actor.
	
	Note that if you continuously set the angular velocity of an actor yourself, 
	forces such as friction will not be able to rotate the actor, because forces directly influence only the velocity/momentum.

	<b>Default:</b> (0.0, 0.0, 0.0)

	<b>Sleeping:</b> This call wakes the actor if it is sleeping, the autowake parameter is true (default) or the 
	new velocity is non-zero

	\note It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.

	\param[in] angVel New angular velocity of actor. <b>Range:</b> angular velocity vector
	\param[in] autowake Whether to wake the object up if it is asleep and the velocity is non-zero.  If true and the current wake counter value is smaller than #PxSceneDesc::wakeCounterResetValue it will get increased to the reset value.

	@see getAngularVelocity() setLinearVelocity() 

</member>
<member name="M:physx.PxRigidBody.addForce(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxForceMode.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="318">
@name Forces

	\brief Applies a force (or impulse) defined in the global coordinate frame to the actor.

	<b>This will not induce a torque</b>.

	::PxForceMode determines if the force is to be conventional or impulsive.

	\note The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links

	\note It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.

	\note if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
	articulation.

	\note see #PxRigidBodyExt::computeVelocityDeltaFromImpulse for detatils of how to compute the change in linear velocity that 
	will arise from the application of an impulsive force, where an impulsive force is applied force multiplied by a timestep.

	<b>Sleeping:</b> This call wakes the actor if it is sleeping and the autowake parameter is true (default) or the force is non-zero.

	\param[in] force Force/Impulse to apply defined in the global frame. <b>Range:</b> force vector
	\param[in] mode The mode to use when applying the force/impulse(see #PxForceMode)
	\param[in] autowake Specify if the call should wake up the actor if it is currently asleep. If true and the current wake counter value is smaller than #PxSceneDesc::wakeCounterResetValue it will get increased to the reset value.

	@see PxForceMode addTorque

</member>
<member name="M:physx.PxRigidBody.addTorque(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxForceMode.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="348">
	\brief Applies an impulsive torque defined in the global coordinate frame to the actor.

	::PxForceMode determines if the torque is to be conventional or impulsive.

	\note The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links

	\note It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.

	\note if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
	articulation.

	\note see #PxRigidBodyExt::computeVelocityDeltaFromImpulse for detatils of how to compute the change in angular velocity that 
	will arise from the application of an impulsive torque, where an impulsive torque is an applied torque multiplied by a timestep.

	<b>Sleeping:</b> This call wakes the actor if it is sleeping and the autowake parameter is true (default) or the torque is non-zero.

	\param[in] torque Torque to apply defined in the global frame. <b>Range:</b> torque vector
	\param[in] mode The mode to use when applying the force/impulse(see #PxForceMode).
	\param[in] autowake whether to wake up the object if it is asleep. If true and the current wake counter value is smaller than #PxSceneDesc::wakeCounterResetValue it will get increased to the reset value.

	@see PxForceMode addForce()

</member>
<member name="M:physx.PxRigidBody.clearForce(physx.PxForceMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="373">
	\brief Clears the accumulated forces (sets the accumulated force back to zero).

	::PxForceMode determines if the cleared force is to be conventional or impulsive.

	\note The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links

	\note It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.

	\note It is not possible to clear the force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE separately. The same holds for the force modes PxForceMode::eFORCE and PxForceMode::eACCELERATION.

	\param[in] mode The mode to use when clearing the force/impulse(see #PxForceMode)

	@see PxForceMode addForce

</member>
<member name="M:physx.PxRigidBody.clearTorque(physx.PxForceMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="390">
	\brief Clears the impulsive torque defined in the global coordinate frame to the actor.

	::PxForceMode determines if the cleared torque is to be conventional or impulsive.

	\note The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links

	\note It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.

	\note It is not possible to clear the force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE separately. The same holds for the force modes PxForceMode::eFORCE and PxForceMode::eACCELERATION.

	\param[in] mode The mode to use when clearing the force/impulse(see #PxForceMode).

	@see PxForceMode addTorque

</member>
<member name="M:physx.PxRigidBody.setRigidDynamicFlag(physx.PxRigidBodyFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="407">
	\deprecated
	\brief Raises or clears a particular dynamic rigid body flag.
	
	See the list of flags #PxRigidBodyFlag

	<b>Default:</b> no flags are set

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] flag		The PxRigidDynamic flag to raise(set) or clear. See #PxRigidDynamicFlag #PxRigidBodyFlag.
	\param[in] value	The new boolean value for the flag.

	@see PxRigidDynamicFlag getRigidDynamicFlags() 

</member>
<member name="M:physx.PxRigidBody.setRigidBodyFlag(physx.PxRigidBodyFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="425">
	\brief Raises or clears a particular rigid body flag.
	
	See the list of flags #PxRigidBodyFlag

	<b>Default:</b> no flags are set

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] flag		The PxRigidBody flag to raise(set) or clear. See #PxRigidBodyFlag.
	\param[in] value	The new boolean value for the flag.

	@see PxRigidBodyFlag getRigidBodyFlags() 

</member>
<member name="M:physx.PxRigidBody.getRigidDynamicFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="443">
	\deprecated
	\brief Reads the PxRigidBody flags.
	
	See the list of flags #PxRigidBodyFlag

	\return The values of the PxRigidBody flags.

	@see PxRigidDynamicFlag setRigidDynamicFlag()

</member>
<member name="M:physx.PxRigidBody.getRigidBodyFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="455">
	\brief Reads the PxRigidBody flags.
	
	See the list of flags #PxRigidBodyFlag

	\return The values of the PxRigidBody flags.

	@see PxRigidBodyFlag setRigidBodyFlag()

</member>
<member name="M:physx.PxRigidBody.setMinCCDAdvanceCoefficient(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="466">
	\brief Sets the CCD minimum advance coefficient.

	The CCD minimum advance coefficient is a value in the range [0, 1] that is used to control the minimum amount of time a body is integrated when
	it has a CCD contact. The actual minimum amount of time that is integrated depends on various properties, including the relative speed and collision shapes
	of the bodies involved in the contact. From these properties, a numeric value is calculated that determines the maximum distance (and therefore maximum time) 
	which these bodies could be integrated forwards that would ensure that these bodies did not pass through each-other. This value is then scaled by CCD minimum advance
	coefficient to determine the amount of time that will be consumed in the CCD pass.

	<b>Things to consider:</b> 
	A large value (approaching 1) ensures that the objects will always advance some time. However, larger values increase the chances of objects gently drifting through each-other in
	scenes which the constraint solver can't converge, e.g. scenes where an object is being dragged through a wall with a constraint.
	A value of 0 ensures that the pair of objects stop at the exact time-of-impact and will not gently drift through each-other. However, with very small/thin objects initially in 
	contact, this can lead to a large amount of time being dropped and increases the chances of jamming. Jamming occurs when the an object is persistently in contact with an object 
	such that the time-of-impact is	0, which results in no time being advanced for those objects in that CCD pass.

	The chances of jamming can be reduced by increasing the number of CCD mass @see PxSceneDesc.ccdMaxPasses. However, increasing this number increases the CCD overhead.

	\param[in] advanceCoefficient The CCD min advance coefficient. <b>Range:</b> [0, 1] <b>Default:</b> 0.15

</member>
<member name="M:physx.PxRigidBody.getMinCCDAdvanceCoefficient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="489">
	\brief Gets the CCD minimum advance coefficient.

	\return The value of the CCD min advance coefficient.

	@see setMinCCDAdvanceCoefficient


</member>
<member name="M:physx.PxRigidBody.setMaxDepenetrationVelocity(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="501">
\brief Sets the maximum depenetration velocity permitted to be introduced by the solver.
This value controls how much velocity the solver can introduce to correct for penetrations in contacts. 
\param[in] biasClamp The maximum velocity to de-penetrate by <b>Range:</b> (0, PX_MAX_F32].

</member>
<member name="M:physx.PxRigidBody.getMaxDepenetrationVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidbody.h" line="508">
\brief Returns the maximum depenetration velocity the solver is permitted to introduced.
This value controls how much velocity the solver can introduce to correct for penetrations in contacts. 
\return The maximum penetration bias applied by the solver.

</member>
<member name="T:physx.PxArticulationLink" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationlink.h" line="28">
\brief a component of an articulation that represents a rigid body

A limited subset of the properties of PxRigidDynamic are supported. In particular, sleep properties
are attributes of the articulation rather than each individual body, damping and velocity limits
are not supported, and links may not be kinematic.

@see PxArticulation PxArticulation.createLink PxArticulationJoint PxRigidBody

</member>
<member name="M:physx.PxArticulationLink.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationlink.h" line="41">
	\brief Deletes the articulation link.
	
	\note Only a leaf articulation link can be released
	
	Do not keep a reference to the deleted instance.

	@see PxArticulation::createLink()

</member>
<member name="M:physx.PxArticulationLink.getArticulation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationlink.h" line="53">
	\brief get the articulation to which this articulation link belongs

	\return the articulation to which this link belongs

</member>
<member name="M:physx.PxArticulationLink.getInboundJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationlink.h" line="60">
	\brief Get the joint which connects this link to its parent.
	
	\return The joint connecting the link to the parent. NULL for the root link.

	@see PxArticulationJoint

</member>
<member name="M:physx.PxArticulationLink.getNbChildren" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationlink.h" line="69">
	\brief Get number of child links.

	\return the number of child links

	@see getChildren()

</member>
<member name="M:physx.PxArticulationLink.getChildren(physx.PxArticulationLink**,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxarticulationlink.h" line="78">
	\brief Retrieve all the child links.

	\param[out] userBuffer The buffer to receive articulation link pointers.
	\param[in] bufferSize Size of provided user buffer.
	\return Number of articulation links written to the buffer.

	@see getNbChildren()

</member>
<member name="T:physx.PxPairFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="32">
\brief Collection of flags describing the actions to take for a collision pair.

@see PxPairFlags PxSimulationFilterShader.filter() PxSimulationFilterCallback

</member>
<member name="F:eSOLVE_CONTACT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="41">
		\brief Process the contacts of this collision pair in the dynamics solver.

		\note Only takes effect if the colliding actors are rigid bodies.

</member>
<member name="F:eMODIFY_CONTACTS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="48">
		\brief Call contact modification callback for this collision pair

		\note Only takes effect if the colliding actors are rigid bodies.

		@see PxContactModifyCallback

</member>
<member name="F:eNOTIFY_TOUCH_FOUND" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="57">
		\brief Call contact report callback or trigger callback when this collision pair starts to be in contact.

		If one of the two collision objects is a trigger shape (see #PxShapeFlag::eTRIGGER_SHAPE) 
		then the trigger callback will get called as soon as the other object enters the trigger volume. 
		If none of the two collision objects is a trigger shape then the contact report callback will get 
		called when the actors of this collision pair start to be in contact.

		\note Only takes effect if the colliding actors are rigid bodies.

		\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised

		@see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()

</member>
<member name="F:eNOTIFY_TOUCH_PERSISTS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="73">
		\brief Call contact report callback while this collision pair is in contact

		If none of the two collision objects is a trigger shape then the contact report callback will get 
		called while the actors of this collision pair are in contact.

		\note Triggers do not support this event. Persistent trigger contacts need to be tracked separately by observing eNOTIFY_TOUCH_FOUND/eNOTIFY_TOUCH_LOST events.

		\note Only takes effect if the colliding actors are rigid bodies.

		\note No report will get sent if the objects in contact are sleeping.

		\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised

		\note If this flag gets enabled while a pair is in touch already, there will be no eNOTIFY_TOUCH_PERSISTS events until the pair loses and regains touch.

		@see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()

</member>
<member name="F:eNOTIFY_TOUCH_LOST" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="93">
		\brief Call contact report callback or trigger callback when this collision pair stops to be in contact

		If one of the two collision objects is a trigger shape (see #PxShapeFlag::eTRIGGER_SHAPE) 
		then the trigger callback will get called as soon as the other object leaves the trigger volume. 
		If none of the two collision objects is a trigger shape then the contact report callback will get 
		called when the actors of this collision pair stop to be in contact.

		\note Only takes effect if the colliding actors are rigid bodies.

		\note This event will also get triggered if one of the colliding objects gets deleted.

		\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised

		@see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()

</member>
<member name="F:eNOTIFY_TOUCH_CCD" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="111">
		\brief Call contact report callback when this collision pair is in contact during CCD passes.

		If CCD with multiple passes is enabled, then a fast moving object might bounce on and off the same
		object multiple times. Hence, the same pair might be in contact multiple times during a simulation step.
		This flag will make sure that all the detected collision during CCD will get reported. For performance
		reasons, the system can not always tell whether the contact pair lost touch in one of the previous CCD 
		passes and thus can also not always tell whether the contact is new or has persisted. eNOTIFY_TOUCH_CCD
		just reports when the two collision objects were detected as being in contact during a CCD pass.

		\note Only takes effect if the colliding actors are rigid bodies.

		\note Trigger shapes are not supported.

		\note Only takes effect if eDETECT_CCD_CONTACT is raised

		@see PxSimulationEventCallback.onContact() PxSimulationEventCallback.onTrigger()

</member>
<member name="F:eNOTIFY_THRESHOLD_FORCE_FOUND" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="131">
		\brief Call contact report callback when the contact force between the actors of this collision pair exceeds one of the actor-defined force thresholds.

		\note Only takes effect if the colliding actors are rigid bodies.

		\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised

		@see PxSimulationEventCallback.onContact()

</member>
<member name="F:eNOTIFY_THRESHOLD_FORCE_PERSISTS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="142">
		\brief Call contact report callback when the contact force between the actors of this collision pair continues to exceed one of the actor-defined force thresholds.

		\note Only takes effect if the colliding actors are rigid bodies.

		\note If a pair gets re-filtered and this flag has previously been disabled, then the report will not get fired in the same frame even if the force threshold has been reached in the
		previous one (unless #eNOTIFY_THRESHOLD_FORCE_FOUND has been set in the previous frame).

		\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised

		@see PxSimulationEventCallback.onContact()

</member>
<member name="F:eNOTIFY_THRESHOLD_FORCE_LOST" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="156">
		\brief Call contact report callback when the contact force between the actors of this collision pair falls below one of the actor-defined force thresholds (includes the case where this collision pair stops being in contact).

		\note Only takes effect if the colliding actors are rigid bodies.

		\note If a pair gets re-filtered and this flag has previously been disabled, then the report will not get fired in the same frame even if the force threshold has been reached in the
		previous one (unless #eNOTIFY_THRESHOLD_FORCE_FOUND or #eNOTIFY_THRESHOLD_FORCE_PERSISTS has been set in the previous frame).

		\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised

		@see PxSimulationEventCallback.onContact()

</member>
<member name="F:eNOTIFY_CONTACT_POINTS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="170">
		\brief Provide contact points in contact reports for this collision pair.

		\note Only takes effect if the colliding actors are rigid bodies and if used in combination with the flags eNOTIFY_TOUCH_... or eNOTIFY_THRESHOLD_FORCE_...

		\note Only takes effect if eDETECT_DISCRETE_CONTACT or eDETECT_CCD_CONTACT is raised

		@see PxSimulationEventCallback.onContact() PxContactPair PxContactPair.extractContacts()

</member>
<member name="F:eDETECT_DISCRETE_CONTACT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="181">
		\brief This flag is used to indicate whether this pair generates discrete collision detection contacts. 

		\note Contacts are only responded to if eSOLVE_CONTACT is enabled.

</member>
<member name="F:eDETECT_CCD_CONTACT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="190">
		\brief This flag is used to indicate whether this pair generates CCD contacts. 

		\note The contacts will only be responded to if eSOLVE_CONTACT is enabled on this pair.
		\note The scene must have PxSceneFlag::eENABLE_CCD enabled to use this feature.
		\note Non-static bodies of the pair should have PxRigidBodyFlag::eENABLE_CCD specified for this feature to work correctly.
		\note This flag is not supported with trigger shapes. However, CCD trigger events can be emulated using non-trigger shapes 
		and requesting eNOTIFY_TOUCH_FOUND and eNOTIFY_TOUCH_LOST and not raising eSOLVE_CONTACT on the pair.

		@see PxRigidBodyFlag::eENABLE_CCD
		@see PxSceneFlag::eENABLE_CCD

</member>
<member name="F:ePRE_SOLVER_VELOCITY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="205">
\brief Provide pre solver velocities in contact reports for this collision pair.

If the collision pair has contact reports enabled, the velocities of the rigid bodies before contacts have been solved
will be provided in the contact report callback unless the pair lost touch in which case no data will be provided.

\note Usually it is not necessary to request these velocities as they will be available by querying the velocity from the provided
PxRigidActor object directly. However, it might be the case that the velocity of a rigid body gets set while the simulation is running
in which case the PxRigidActor would return this new velocity in the contact report callback and not the velocity the simulation used.

@see PxSimulationEventCallback.onContact(), PxContactPairVelocity, PxContactPairHeader.extraDataStream

</member>
<member name="F:ePOST_SOLVER_VELOCITY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="219">
\brief Provide post solver velocities in contact reports for this collision pair.

If the collision pair has contact reports enabled, the velocities of the rigid bodies after contacts have been solved
will be provided in the contact report callback unless the pair lost touch in which case no data will be provided.

@see PxSimulationEventCallback.onContact(), PxContactPairVelocity, PxContactPairHeader.extraDataStream

</member>
<member name="F:eCONTACT_EVENT_POSE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="229">
\brief Provide rigid body poses in contact reports for this collision pair.

If the collision pair has contact reports enabled, the rigid body poses at the contact event will be provided 
in the contact report callback unless the pair lost touch in which case no data will be provided.

\note Usually it is not necessary to request these poses as they will be available by querying the pose from the provided
PxRigidActor object directly. However, it might be the case that the pose of a rigid body gets set while the simulation is running
in which case the PxRigidActor would return this new pose in the contact report callback and not the pose the simulation used.
Another use case is related to CCD with multiple passes enabled, A fast moving object might bounce on and off the same 
object multiple times. This flag can be used to request the rigid body poses at the time of impact for each such collision event.

@see PxSimulationEventCallback.onContact(), PxContactPairPose, PxContactPairHeader.extraDataStream

</member>
<member name="F:eRESOLVE_CONTACTS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="247">
\deprecated
\brief Provides default flag for resolving contacts

</member>
<member name="F:eCCD_LINEAR" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="254">
\deprecated
\brief Provided default flag to enable performing linear CCD sweeps and response for this collision pair.

</member>
<member name="F:eCONTACT_DEFAULT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="260">
\brief Provided default flag to do simple contact processing for this collision pair.

</member>
<member name="F:eTRIGGER_DEFAULT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="265">
\brief Provided default flag to get commonly used trigger behavior for this collision pair.

</member>
<member name="D:physx.PxPairFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="272">
\brief Bitfield that contains a set of raised flags defined in PxPairFlag.

@see PxPairFlag

</member>
<member name="T:physx.PxFilterFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="282">
\brief Collection of flags describing the filter actions to take for a collision pair.

@see PxFilterFlags PxSimulationFilterShader PxSimulationFilterCallback

</member>
<member name="F:eKILL" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="291">
		\brief Ignore the collision pair as long as the bounding volumes of the pair objects overlap.

		Killed pairs will be ignored by the simulation and won't run through the filter again until one
		of the following occurs:

		\li The bounding volumes of the two objects overlap again (after being separated)
		\li The user enforces a re-filtering (see #PxScene::resetFiltering())

		@see PxScene::resetFiltering()

</member>
<member name="F:eSUPPRESS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="304">
		\brief Ignore the collision pair as long as the bounding volumes of the pair objects overlap or until filtering relevant data changes for one of the collision objects.

		Suppressed pairs will be ignored by the simulation and won't make another filter request until one
		of the following occurs:

		\li Same conditions as for killed pairs (see #eKILL)
		\li The filter data or the filter object attributes change for one of the collision objects

		\note For PxCloth objects, eSUPPRESS will be treated as eKILL.

		@see PxFilterData PxFilterObjectAttributes

</member>
<member name="F:eCALLBACK" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="319">
		\brief Invoke the filter callback (#PxSimulationFilterCallback::pairFound()) for this collision pair.

		@see PxSimulationFilterCallback

</member>
<member name="F:eNOTIFY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="326">
		\brief Track this collision pair with the filter callback mechanism.

		When the bounding volumes of the collision pair lose contact, the filter callback #PxSimulationFilterCallback::pairLost()
		will be invoked. Furthermore, the filter status of the collision pair can be adjusted through #PxSimulationFilterCallback::statusChange()
		once per frame (until a pairLost() notification occurs).

		@see PxSimulationFilterCallback

</member>
<member name="F:eDEFAULT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="337">
		\brief Provided default to get standard behavior:

		The application configure the pair's collision properties once when bounding volume overlap is found and
		doesn't get asked again about that pair until overlap status or filter properties changes, or re-filtering is requested.

		No notification is provided when bounding volume overlap is lost

		The pair will not be killed or suppressed, so collision detection will be processed

</member>
<member name="D:physx.PxFilterFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="352">
\brief Bitfield that contains a set of raised flags defined in PxFilterFlag.

@see PxFilterFlag

</member>
<member name="T:physx.PxFilterData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="361">
\brief PxFilterData is user-definable data which gets passed into the collision filtering shader and/or callback.

@see PxShape.setSimulationFilterData() PxShape.getSimulationFilterData()  PxSimulationFilterShader PxSimulationFilterCallback

</member>
<member name="M:physx.PxFilterData.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="379">
\brief Default constructor.

</member>
<member name="M:physx.PxFilterData.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="387">
\brief Constructor to set filter data initially.

</member>
<member name="M:physx.PxFilterData.setToDefault" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="392">
\brief (re)sets the structure to the default.	

</member>
<member name="T:physx.PxFilterObjectType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="407">
\brief Identifies each type of filter object.

@see PxGetFilterObjectType()

</member>
<member name="F:eRIGID_STATIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="416">
\brief A static rigid body
@see PxRigidStatic

</member>
<member name="F:eRIGID_DYNAMIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="422">
\brief A dynamic rigid body
@see PxRigidDynamic

</member>
<member name="F:ePARTICLE_SYSTEM" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="428">
\brief A particle system
@see PxParticleSystem

</member>
<member name="F:ePARTICLE_FLUID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="434">
\brief A particle fluid
@see PxParticleFluid

</member>
<member name="F:eARTICULATION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="440">
\brief An articulation
@see PxArticulation

</member>
<member name="F:eCLOTH" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="446">
\brief A cloth object
@see PxCloth

</member>
<member name="D:physx.PxFilterObjectAttributes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="472">
\brief Structure which gets passed into the collision filtering shader and/or callback providing additional information on objects of a collision pair

@see PxSimulationFilterShader PxSimulationFilterCallback getActorType() PxFilterObjectIsKinematic() PxFilterObjectIsTrigger()

</member>
<member name="M:physx.PxGetFilterObjectType(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="480">
\brief Extract filter object type from the filter attributes of a collision pair object

\param[in] attr The filter attribute of a collision pair object
\return The type of the collision pair object.

@see PxFilterObjectType

</member>
<member name="M:physx.PxFilterObjectIsKinematic(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="494">
\brief Specifies whether the collision object belongs to a kinematic rigid body

\param[in] attr The filter attribute of a collision pair object
\return True if the object belongs to a kinematic rigid body, else false

@see PxRigidBodyFlag::eKINEMATIC

</member>
<member name="M:physx.PxFilterObjectIsTrigger(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="508">
\brief Specifies whether the collision object is a trigger shape

\param[in] attr The filter attribute of a collision pair object
\return True if the object is a trigger shape, else false

@see PxShapeFlag::eTRIGGER_SHAPE

</member>
<member name="D:physx.PxSimulationFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="522">
\brief Filter shader to specify handling of collision pairs.

Collision filtering is a mechanism to specify how a pair of potentially colliding objects should be processed by the
simulation. A pair of objects is potentially colliding if the bounding volumes of the two objects overlap.
In short, a collision filter decides whether a collision pair should get processed, temporarily ignored or discarded.
If a collision pair should get processed, the filter can additionally specify how it should get processed, for instance,
whether contacts should get resolved, which callbacks should get invoked or which reports should be sent etc.

\note A default implementation of a filter shader is provided in the PhysX extensions library, see #PxDefaultSimulationFilterShader.

@see PxSceneDesc.filterShader PxSimulationFilterCallback

\brief Filter method to specify how a pair of potentially colliding objects should be processed.

Return the PxFilterFlag flags and set the PxPairFlag flags to define what the simulation should do with the given collision pair.

This methods gets called when:
\li The bounding volumes of two objects start to overlap.
\li The bounding volumes of two objects overlap and the filter data or filter attributes of one of the objects changed
\li A re-filtering was forced through resetFiltering() (see #PxScene::resetFiltering())
\li Filtering is requested in scene queries

\note Certain pairs of objects are always ignored and this method does not get called. This is the case for the
following pairs:

\li Pair of static rigid actors
\li A static rigid actor and a kinematic actor (unless one is a trigger or if explicitly enabled through #PxSceneFlag::eENABLE_KINEMATIC_STATIC_PAIRS)
\li Two kinematic actors (unless one is a trigger or if explicitly enabled through #PxSceneFlag::eENABLE_KINEMATIC_PAIRS)
\li Pair of particle systems
\li Two jointed rigid bodies and the joint was defined to disable collision
\li Two articulation links if connected through an articulation joint
\li Cloth objects and rigid body actors

\note This is a performance critical method and should be stateless. You should neither access external objects 
from within this method nor should you call external methods that are not inlined. If you need a more complex
logic to filter a collision pair then use the filter callback mechanism for this pair (see #PxSimulationFilterCallback,
#PxFilterFlag::eCALLBACK, #PxFilterFlag::eNOTIFY).

\param[in] attributes0 The filter attribute of the first object
\param[in] filterData0 The custom filter data of the first object
\param[in] attributes1 The filter attribute of the second object
\param[in] filterData1 The custom filter data of the second object
\param[out] pairFlags Flags giving additional information on how an accepted pair should get processed
\param[in] constantBlock The constant global filter data (see #PxSceneDesc.filterShaderData)
\param[in] constantBlockSize Size of the global filter data (see #PxSceneDesc.filterShaderDataSize)
\return Filter flags defining whether the pair should be discarded, temporarily ignored, processed and whether the
filter callback should get invoked for this pair.

@see PxSimulationFilterCallback PxFilterData PxFilterObjectAttributes PxFilterFlag PxFilterFlags PxPairFlag PxPairFlags

</member>
<member name="T:physx.PxSimulationFilterCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="583">
\brief Filter callback to specify handling of collision pairs.

This class is provided to implement more complex and flexible collision pair filtering logic, for instance, taking
the state of the user application into account. Filter callbacks also give the user the opportunity to track collision
pairs and update their filter state.

You might want to check the documentation on #PxSimulationFilterShader as well since it includes more general information
on filtering.

\note SDK state should not be modified from within the callbacks. In particular objects should not
be created or destroyed. If state modification is needed then the changes should be stored to a buffer
and performed after the simulation step.

\note The callbacks may execute in user threads or simulation threads, possibly simultaneously. The corresponding objects 
may have been deleted by the application earlier in the frame. It is the application's responsibility to prevent race conditions
arising from using the SDK API in the callback while an application thread is making write calls to the scene, and to ensure that
the callbacks are thread-safe. Return values which depend on when the callback is called during the frame will introduce nondeterminism 
into the simulation. On PS3 use of this callback may compromise simulation performance.

@see PxSceneDesc.filterCallback PxSimulationFilterShader

</member>
<member name="M:physx.PxSimulationFilterCallback.pairFound(System.UInt32,System.UInt32,physx.PxFilterData,physx.PxActor!System.Runtime.CompilerServices.IsConst*,physx.PxShape!System.Runtime.CompilerServices.IsConst*,System.UInt32,physx.PxFilterData,physx.PxActor!System.Runtime.CompilerServices.IsConst*,physx.PxShape!System.Runtime.CompilerServices.IsConst*,physx.PxFlags&lt;physx.PxPairFlag.Enum,System.UInt16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="609">
	\brief Filter method to specify how a pair of potentially colliding objects should be processed.

	This method gets called when the filter flags returned by the filter shader (see #PxSimulationFilterShader)
	indicate that the filter callback should be invoked (#PxFilterFlag::eCALLBACK or #PxFilterFlag::eNOTIFY set).
	Return the PxFilterFlag flags and set the PxPairFlag flags to define what the simulation should do with the given 
	collision pair.

	\param[in] pairID Unique ID of the collision pair used to issue filter status changes for the pair (see #statusChange())
	\param[in] attributes0 The filter attribute of the first object
	\param[in] filterData0 The custom filter data of the first object
	\param[in] a0 Actor pointer of the first object
	\param[in] s0 Shape pointer of the first object (NULL if the object has no shapes, for example in the case of a particle system)
	\param[in] attributes1 The filter attribute of the second object
	\param[in] filterData1 The custom filter data of the second object
	\param[in] a1 Actor pointer of the second object
	\param[in] s1 Shape pointer of the second object (NULL if the object has no shapes, for example in the case of a  particle system)
	\param[in,out] pairFlags In: Pair flags returned by the filter shader. Out: Additional information on how an accepted pair should get processed
	\return Filter flags defining whether the pair should be discarded, temporarily ignored or processed and whether the pair
	should be tracked and send a report on pair deletion through the filter callback

	@see PxSimulationFilterShader PxFilterData PxFilterObjectAttributes PxFilterFlag PxPairFlag

</member>
<member name="M:physx.PxSimulationFilterCallback.pairLost(System.UInt32,System.UInt32,physx.PxFilterData,System.UInt32,physx.PxFilterData,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="637">
	\brief Callback to inform that a tracked collision pair is gone.

	This method gets called when a collision pair disappears or gets re-filtered. Only applies to
	collision pairs which have been marked as filter callback pairs (#PxFilterFlag::eNOTIFY set in #pairFound()).

	\param[in] pairID Unique ID of the collision pair that disappeared
	\param[in] attributes0 The filter attribute of the first object
	\param[in] filterData0 The custom filter data of the first object
	\param[in] attributes1 The filter attribute of the second object
	\param[in] filterData1 The custom filter data of the second object
	\param[in] objectRemoved True if the pair was lost because one of the objects got removed from the scene

	@see pairFound() PxSimulationFilterShader PxFilterData PxFilterObjectAttributes

</member>
<member name="M:physx.PxSimulationFilterCallback.statusChange(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxPairFlag.Enum,System.UInt16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxFilterFlag.Enum,System.UInt16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxfiltering.h" line="659">
	\brief Callback to give the opportunity to change the filter state of a tracked collision pair.

	This method gets called once per simulation step to let the application change the filter and pair
	flags of a collision pair that has been reported in #pairFound() and requested callbacks by
	setting #PxFilterFlag::eNOTIFY. To request a change of filter status, the target pair has to be
	specified by its ID, the new filter and pair flags have to be provided and the method should return true.

	\note If this method changes the filter status of a collision pair and the pair should keep being tracked
	by the filter callbacks then #PxFilterFlag::eNOTIFY has to be set.

	\note The application is responsible to ensure that this method does not get called for pairs that have been
	reported as lost, see #pairLost().

	\param[out] pairID ID of the collision pair for which the filter status should be changed
	\param[out] pairFlags The new pairFlags to apply to the collision pair
	\param[out] filterFlags The new filterFlags to apply to the collision pair
	\return True if the changes should be applied. In this case the method will get called again. False if
	no more status changes should be done in the current simulation step. In that case the provided flags will be discarded.

	@see pairFound() pairLost() PxFilterFlag PxPairFlag

</member>
<member name="T:physx.PxQueryFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="35">
\brief Filtering flags for scene queries.

@see PxQueryFilterData.flags

</member>
<member name="D:physx.PxQueryFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="64">
\brief Flags typedef for the set of bits defined in PxQueryFlag.

@see PxSceneQueryFilter

</member>
<!-- Discarding badly formed XML document comment for member 'T:physx.PxQueryHitType'. -->
<!-- Discarding badly formed XML document comment for member 'T:physx.PxQueryFilterData'. -->
<member name="M:physx.PxQueryFilterData.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="126">
\brief default constructor 
</member>
<member name="M:physx.PxQueryFilterData.#ctor(physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxQueryFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="129">
\brief constructor to set both filter data and filter flags 
</member>
<member name="M:physx.PxQueryFilterData.#ctor(physx.PxFlags&lt;physx.PxQueryFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="132">
\brief constructor to set filter flags only 
</member>
<member name="T:physx.PxQueryFilterCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="140">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
\brief Scene query filtering callbacks.

Custom filtering logic for scene query intersection candidates. If an intersection candidate object passes the data based filter
(see #PxQueryFilterData), filtering callbacks are executed if requested (see #PxQueryFilterData.flags)

\li If #PxQueryFlag::ePREFILTER is set, the preFilter function runs before exact intersection tests.
If this function returns #PxQueryHitType::eTOUCH or #PxQueryHitType::eBLOCK, exact testing is performed to 
determine the intersection location.

The preFilter function may overwrite the copy of queryFlags it receives as an argument to specify any of #PxHitFlag::eMODIFIABLE_FLAGS 
on a per-shape basis. Changes apply only to the shape being filtered, and changes to other flags are ignored.

\li If #PxQueryFlag::ePREFILTER is not set, precise intersection testing is performed using the original query's filterData.flags.

\li If #PxQueryFlag::ePOSTFILTER is set, the postFilter function is called for each intersection to determine the touch/block status.
This overrides any touch/block status previously returned from the preFilter function for this shape.

Filtering calls are not guaranteed to be sorted along the ray or sweep direction.

@see PxScene.raycast PxScene.sweep PxScene.overlap PxQueryFlags PxHitFlags

</member>
<member name="M:physx.PxQueryFilterCallback.preFilter(physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxShape!System.Runtime.CompilerServices.IsConst*,physx.PxRigidActor!System.Runtime.CompilerServices.IsConst*,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="169">
	\brief This filter callback is executed before the exact intersection test if PxQueryFlag::ePREFILTER flag was set.

	\param[in] filterData custom filter data specified as the query's filterData.data parameter.
	\param[in] shape A shape that has not yet passed the exact intersection test.
	\param[in] actor The shape's actor.
	\param[in,out] queryFlags scene query flags from the query's function call (only flags from PxHitFlag::eMODIFIABLE_FLAGS bitmask can be modified)
	\return the updated type for this hit  (see #PxQueryHitType)

</member>
<member name="M:physx.PxQueryFilterCallback.postFilter(physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryHit!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="181">
	\brief This filter callback is executed if the exact intersection test returned true and PxQueryFlag::ePOSTFILTER flag was set.

	\param[in] filterData custom filter data of the query
	\param[in] hit Scene query hit information. faceIndex member is not valid for overlap queries. For sweep and raycast queries the hit information can be cast to #PxSweepHit and #PxRaycastHit respectively.
	\return the updated hit type for this hit  (see #PxQueryHitType)

</member>
<member name="M:physx.PxQueryFilterCallback.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="190">
\brief virtual destructor

</member>
<member name="D:physx.PxBatchQueryPreFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="196">
\brief Deprecated define for backwards compatibility with PhysX 3.2 
\brief Batched query pre-filter shader.

Custom filtering logic for batched query intersection candidates. If an intersection candidate object passes the data based filter (see #PxQueryFilterData),
filtering shader runs if specified in filtering flags (see #PxQueryFilterData.flags)

\li If #PxQueryFlag::ePREFILTER is set, the preFilter shader runs before exact intersection tests.
If the shader returns #PxQueryHitType::eTOUCH or #PxQueryHitType::eBLOCK, exact testing is performed to 
determine the intersection location.

The preFilter shader may overwrite the copy of queryFlags it receives as an argument to specify any of #PxHitFlag::eMODIFIABLE_FLAGS 
on a per-shape basis. Changes apply only to the shape being filtered, and changes to other flags are ignored.

\li If #PxQueryFlag::ePREFILTER is not set, precise intersection testing is performed using the original query's filterData.flags.

Filtering calls are not guaranteed to be sorted along the ray or sweep direction.

@see PxBatchQueryDesc.preFilterShader PxQueryFilterCallback.preFilter PxBatchQueryPostFilterShader


\param[in] queryFilterData Query filter data
\param[in] objectFilterData Object filter data
\param[in] constantBlock Global constant filter data (see #PxBatchQuery)
\param[in] constantBlockSize Size of global filter data (see #PxBatchQuery)
\param[in,out] hitFlags Per-object modifiable hit flags (only flags from PxHitFlag::eMODIFIABLE_FLAGS mask can be modified)
\return the updated hit type for this hit (see #PxQueryHitType)

@see PxBatchQueryPostFilterShader 

</member>
<member name="D:physx.PxBatchQueryPostFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxqueryfiltering.h" line="235">
\brief Batched query post-filter shader.

Custom filtering logic for batched query intersection candidates. If an intersection candidate object passes the data based filter (see #PxQueryFilterData),
the filtering shader run on request (see #PxQueryFilterData.flags)

\li If #PxQueryFlag::ePOSTFILTER is set, the postFilter shader is called for each intersection to determine the touch/block status.
This overrides any touch/block status previously returned from the preFilter function for this shape.

Filtering shaders are not in order along the query direction, rather they are processed in the order in which
candidate shapes for testing are found by PhysX' scene traversal algorithms.

@see PxBatchQueryDesc.postFilterShader PxQueryFilterCallback.postFilter PxBatchQueryPreFilterShader

\param[in] queryFilterData Query filter data
\param[in] objectFilterData Object filter data
\param[in] constantBlock Global constant filter data (see #PxBatchQuery)
\param[in] constantBlockSize Size of global filter data (see #PxBatchQuery)
\param[in] hit Hit data from the prior exact intersection test.
\return the new hit type for this hit (see #PxQueryHitType)

@see PxBatchQueryPreFilterShader 

</member>
<member name="F:ePENDING" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="37">
\brief This is the initial state before a query starts.

</member>
<member name="F:eSUCCESS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="42">
\brief The query is finished; results have been written into the result and hit buffers.

</member>
<member name="F:eOVERFLOW" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="47">
\brief The query results were incomplete due to touch hit buffer overflow. Blocking hit is still correct.

</member>
<member name="D:physx.PxRaycastQueryResult" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="77">
\brief Convenience typedef for the result of a batched raycast query. 
</member>
<member name="D:physx.PxSweepQueryResult" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="80">
\brief Convenience typedef for the result of a batched sweep query. 
</member>
<member name="D:physx.PxOverlapQueryResult" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="83">
\brief Convenience typedef for the result of a batched overlap query. 
</member>
<member name="T:physx.PxBatchQueryMemory" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="86">
\brief Struct for #PxBatchQuery memory pointers.
 
@see PxBatchQuery PxBatchQueryDesc

</member>
<member name="F:physx.PxBatchQueryMemory.userRaycastResultBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="93">
	\brief The pointer to the user-allocated buffer for results of raycast queries in corresponding order of issue
 
 	\note The size should be large enough to fit the number of expected raycast queries.
 	\note For ps3, this must be 16 bytes aligned and not on stack
 
 	@see PxRaycastQueryResult 

</member>
<member name="F:physx.PxBatchQueryMemory.userRaycastTouchBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="103">
 	\brief The pointer to the user-allocated buffer for raycast touch hits.
 	\note The size of this buffer should be large enough to store PxRaycastHit. 
 	If the buffer is too small to store hits, the related PxRaycastQueryResult.queryStatus will be set to eOVERFLOW
 	\note For ps3, this buffer must be 16 bytes aligned and not on stack
 

</member>
<member name="F:physx.PxBatchQueryMemory.userSweepResultBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="112">
 	\brief The pointer to the user-allocated buffer for results of sweep queries in corresponding order of issue
 
 	\note The size should be large enough to fit the number of expected sweep queries.
 	\note For ps3, this must be 16 bytes aligned and not on stack
 
 	@see PxRaycastQueryResult 

</member>
<member name="F:physx.PxBatchQueryMemory.userSweepTouchBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="122">
 	\brief The pointer to the user-allocated buffer for sweep hits.
 	\note The size of this buffer should be large enough to store PxSweepHit. 
 	If the buffer is too small to store hits, the related PxSweepQueryResult.queryStatus will be set to eOVERFLOW
 	\note For ps3, this buffer must be 16 bytes aligned and not on stack
 

</member>
<member name="F:physx.PxBatchQueryMemory.userOverlapResultBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="131">
 	\brief The pointer to the user-allocated buffer for results of overlap queries in corresponding order of issue
 
 	\note The size should be large enough to fit the number of expected overlap queries.
 	\note For ps3, this must be 16 bytes aligned and not on stack
 
 	@see PxRaycastQueryResult 

</member>
<member name="F:physx.PxBatchQueryMemory.userOverlapTouchBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="141">
 	\brief The pointer to the user-allocated buffer for overlap hits.
 	\note The size of this buffer should be large enough to store the hits returned. 
 	If the buffer is too small to store hits, the related PxOverlapQueryResult.queryStatus will be set to eABORTED
 	\note For ps3, this buffer must be 16 bytes aligned and not on stack
 

</member>
<member name="F:physx.PxBatchQueryMemory.raycastTouchBufferSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="150">
\brief Capacity of the user-allocated userRaycastTouchBuffer in elements 
</member>
<member name="F:physx.PxBatchQueryMemory.sweepTouchBufferSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="153">
\brief Capacity of the user-allocated userSweepTouchBuffer in elements 
</member>
<member name="F:physx.PxBatchQueryMemory.overlapTouchBufferSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="156">
\brief Capacity of the user-allocated userOverlapTouchBuffer in elements 
</member>
<member name="M:physx.PxBatchQueryMemory.getMaxRaycastsPerExecute" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="159">
\return Capacity of the user-allocated userRaycastResultBuffer in elements (max number of raycast() calls before execute() call) 
</member>
<member name="M:physx.PxBatchQueryMemory.getMaxSweepsPerExecute" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="162">
\return Capacity of the user-allocated userSweepResultBuffer in elements (max number of sweep() calls before execute() call) 
</member>
<member name="M:physx.PxBatchQueryMemory.getMaxOverlapsPerExecute" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="165">
\return Capacity of the user-allocated userOverlapResultBuffer in elements (max number of overlap() calls before execute() call) 
</member>
<member name="T:physx.PxBatchQueryDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="190">
\brief Maximum allowed size for combined SPU shader code and data size.

\brief Descriptor class for #PxBatchQuery.

@see PxBatchQuery PxSceneQueryExecuteMode

</member>
<member name="F:physx.PxBatchQueryDesc.filterShaderData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="204">
	\brief Shared global filter data which will get passed into the filter shader.

	\note The provided data will get copied to internal buffers and this copy will be used for filtering calls.

	<b>Default:</b> NULL

	@see PxSimulationFilterShader

</member>
<member name="F:physx.PxBatchQueryDesc.filterShaderDataSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="215">
	\brief Size (in bytes) of the shared global filter data #filterShaderData.

	<b>Default:</b> 0

	@see PxSimulationFilterShader filterShaderData

</member>
<member name="F:physx.PxBatchQueryDesc.preFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="224">
	\brief The custom preFilter shader to use for filtering.

	@see PxBatchQueryPreFilterShader PxDefaultPreFilterShader

</member>
<member name="F:physx.PxBatchQueryDesc.postFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="231">
	\brief The custom postFilter shader to use for filtering.

	@see PxBatchQueryPostFilterShader PxDefaultPostFilterShader

</member>
<member name="F:physx.PxBatchQueryDesc.spuPreFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="238">
	\brief The custom spu pre filter shader to use for collision filtering.

	\note This parameter is a fragment of SPU binary codes with the similar function of #PxBatchQueryPreFilterShader. 
	The requirement of the spu function is the same as PxBatchQueryPreFilterShader::filter. To compile the shader for 
	spu, you can reference the implementation, makefile and awk scripts in SampleVehicle. If you don't want to define 
	your own filter shader you can just leave this variable as NULL.

	<b>Platform specific:</b> Applies to PS3 only.


</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxBatchQueryDesc.spuPreFilterShaderSize'. -->
<member name="F:physx.PxBatchQueryDesc.spuPostFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="264">
	\brief The custom spu post filter shader to use for collision filtering.

	\note This parameter is a fragment of SPU binary codes with the similar function of #PxBatchQueryPostFilterShader.
	The requirement of the spu function is the same as PxBatchQueryPreFilterShader::filter. To compile the shader for 
	spu, you can reference the implementation, PreBuild configuration in the project file of SampleVehicle.If you don't want to define 
	your own filter shader you can just leave this variable as NULL.
	library.

	<b>Platform specific:</b> Applies to PS3 only.


</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxBatchQueryDesc.spuPostFilterShaderSize'. -->
<member name="F:physx.PxBatchQueryDesc.ownerClient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="291">
	\brief client that creates and owns this scene query.

	This value will be used as an override when PX_DEFAULT_CLIENT value is passed to the query in PxQueryFilterData.clientId.

	@see PxScene::createClient()

</member>
<member name="F:physx.PxBatchQueryDesc.queryMemory" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="300">
	\brief User memory buffers for the query.

	@see PxBatchQueryMemory

</member>
<member name="F:physx.PxBatchQueryDesc.runOnSpu" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="307">
	\brief PS3 only. Enables or disables SPU execution for this batch.

	Defaults to true on PS3, ignored on other platforms.

</member>
<member name="M:physx.PxBatchQueryDesc.#ctor(System.UInt32,System.UInt32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquerydesc.h" line="314">
	\brief Construct a batch query with specified maximum number of queries per batch.

	If the number of raycasts/sweeps/overlaps per execute exceeds the limit, the query will be discarded with a warning.

	\param maxRaycastsPerExecute	Maximum number of raycast() calls allowed before execute() call.
									This has to match the amount of memory allocated for PxBatchQueryMemory::userRaycastResultBuffer.
	\param maxSweepsPerExecute	Maximum number of sweep() calls allowed before execute() call.
									This has to match the amount of memory allocated for PxBatchQueryMemory::userSweepResultBuffer.
	\param maxOverlapsPerExecute	Maximum number of overlap() calls allowed before execute() call.
									This has to match the amount of memory allocated for PxBatchQueryMemory::userOverlapResultBuffer.

</member>
<member name="T:physx.PxBatchQuery" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="34">
\brief Batched queries object. This is used to perform several queries at the same time. 

@see PxScene, PxScene.createBatchQuery

</member>
<member name="M:physx.PxBatchQuery.execute" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="43">
\brief Executes batched queries.

</member>
<member name="M:physx.PxBatchQuery.getPreFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="48">
	\brief Gets the prefilter shader in use for this scene query.

	\return Prefilter shader.

	@see PxBatchQueryDesc.preFilterShade PxBatchQueryPreFilterShader

</member>
<member name="M:physx.PxBatchQuery.getPostFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="57">
	\brief Gets the postfilter shader in use for this scene query.

	\return Postfilter shader.

	@see PxBatchQueryDesc.preFilterShade PxBatchQueryPostFilterShader

</member>
<member name="M:physx.PxBatchQuery.getFilterShaderData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="67">
	\brief Gets the shared global filter data in use for this scene query.

	\return Shared filter data for filter shader.

	@see getFilterShaderDataSize() PxBatchQueryDesc.filterShaderData PxBatchQueryPreFilterShader, PxBatchQueryPostFilterShader

</member>
<member name="M:physx.PxBatchQuery.getFilterShaderDataSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="76">
	\brief Gets the size of the shared global filter data (#PxSceneDesc.filterShaderData)

	\return Size of shared filter data [bytes].

	@see getFilterShaderData() PxBatchQueryDesc.filterShaderDataSize PxBatchQueryPreFilterShader, PxBatchQueryPostFilterShader

</member>
<member name="M:physx.PxBatchQuery.getOwnerClient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="86">
	\brief Retrieves the client specified with PxBatchQueryDesc::ownerClient at creation time.

	It is not possible to change this value after creating the scene query.

	@see PxBatchQueryDesc::ownerClient

</member>
<member name="M:physx.PxBatchQuery.setUserMemory(physx.PxBatchQueryMemory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="95">
 	\brief Sets new user memory pointers.
 
 	It is not possible to change the memory during query execute.
 
 	@see PxBatchQueryDesc

</member>
<member name="M:physx.PxBatchQuery.getUserMemory" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="104">
 	\brief Gets the user memory pointers. 	
 
 	@see PxBatchQueryDesc

</member>
<member name="M:physx.PxBatchQuery.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="111">
	\brief Releases PxBatchQuery from PxScene

	@see PxScene, PxScene.createBatchQuery

</member>
<member name="M:physx.PxBatchQuery.setRunOnSpu(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="119">
	\brief PS3 only. Enables or disables SPU execution for this query.

	@see PxBatchQueryDesc

</member>
<member name="M:physx.PxBatchQuery.getRunOnSpu" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="126">
	\brief PS3 only. Returns true if this query should run on SPU.

	@see PxBatchQueryDesc

</member>
<member name="M:physx.PxBatchQuery.raycast(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.UInt16,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="133">
	\brief Performs a raycast against objects in the scene, returns results in PxBatchQueryMemory::userRaycastResultBuffer
	specified at PxBatchQuery creation time or via PxBatchQuery::setUserMemory call.

	\note	Touching hits are not ordered.
	\note	Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.

	\param[in] origin		Origin of the ray.
	\param[in] unitDir		Normalized direction of the ray.
	\param[in] distance		Length of the ray. Needs to be larger than 0.
	\param[in] maxTouchHits	Maximum number of hits to record in the touch buffer for this query. Default=0 reports a single blocking hit. If maxTouchHits is set to 0 all hits are treated as blocking by default.
	\param[in] hitFlags		Specifies which properties per hit should be computed and returned in hit array and blocking hit.
	\param[in] filterData	Filtering data passed to the filer shader. See #PxQueryFilterData #PxBatchQueryPreFilterShader, #PxBatchQueryPostFilterShader
	\param[in] userData		User can pass any value in this argument, usually to identify this particular query
	\param[in] cache		Cached hit shape (optional). Query is tested against cached shape first. If no hit is found the ray gets queried against the scene.
							Note: Filtering is not executed for a cached shape if supplied; instead, if a hit is found, it is assumed to be a blocking hit.
							Note: Using past touching hits as cache will produce incorrect behavior since the cached hit will always be treated as blocking.
	
	\note This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock
		and overlapping writes from different threads may result in undefined behavior).

	@see PxQueryFilterData PxBatchQueryPreFilterShader PxBatchQueryPostFilterShader PxRaycastHit PxScene::raycast

</member>
<member name="M:physx.PxBatchQuery.overlap(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="163">
	\brief Performs an overlap test of a given geometry against objects in the scene, returns results in PxBatchQueryMemory::userOverlapResultBuffer
	specified at PxBatchQuery creation time or via PxBatchQuery::setUserMemory call.
	
	\note Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see #PxQueryHitType).

	\param[in] geometry		Geometry of object to check for overlap (supported types are: box, sphere, capsule, convex).
	\param[in] pose			Pose of the object.
	\param[in] maxTouchHits	Maximum number of hits to record in the touch buffer for this query. Default=0 reports a single blocking hit. If maxTouchHits is set to 0 all hits are treated as blocking by default.
	\param[in] filterData	Filtering data and simple logic. See #PxQueryFilterData #PxBatchQueryPreFilterShader, #PxBatchQueryPostFilterShader
	\param[in] userData		User can pass any value in this argument, usually to identify this particular query
	\param[in] cache		Cached hit shape (optional). Query is tested against cached shape first. If no hit is found the ray gets queried against the scene.
							Note: Filtering is not executed for a cached shape if supplied; instead, if a hit is found, it is assumed to be a blocking hit.
							Note: Using past touching hits as cache will produce incorrect behavior since the cached hit will always be treated as blocking.

	\note eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.
	\note If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed.
	\note This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock
		and overlapping writes from different threads may result in undefined behavior).

	@see PxQueryFilterData PxBatchQueryPreFilterShader PxBatchQueryPostFilterShader 

</member>
<member name="M:physx.PxBatchQuery.sweep(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.UInt16,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbatchquery.h" line="189">
	\brief Performs a sweep test against objects in the scene, returns results in PxBatchQueryMemory::userSweepResultBuffer
	specified at PxBatchQuery creation time or via PxBatchQuery::setUserMemory call.
	
	\note	Touching hits are not ordered.
	\note	If a shape from the scene is already overlapping with the query shape in its starting position,
			the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.

	\param[in] geometry		Geometry of object to sweep (supported types are: box, sphere, capsule, convex).
	\param[in] pose			Pose of the sweep object.
	\param[in] unitDir		Normalized direction of the sweep.
	\param[in] distance		Sweep distance. Needs to be larger than 0. Will be clamped to PX_MAX_SWEEP_DISTANCE.
	\param[in] maxTouchHits	Maximum number of hits to record in the touch buffer for this query. Default=0 reports a single blocking hit. If maxTouchHits is set to 0 all hits are treated as blocking by default.
	\param[in] hitFlags		Specifies which properties per hit should be computed and returned in hit array and blocking hit.
	\param[in] filterData	Filtering data and simple logic. See #PxQueryFilterData #PxBatchQueryPreFilterShader, #PxBatchQueryPostFilterShader
	\param[in] userData		User can pass any value in this argument, usually to identify this particular query
	\param[in] cache		Cached hit shape (optional). Query is tested against cached shape first. If no hit is found the ray gets queried against the scene.
							Note: Filtering is not executed for a cached shape if supplied; instead, if a hit is found, it is assumed to be a blocking hit.
							Note: Using past touching hits as cache will produce incorrect behavior since the cached hit will always be treated as blocking.
	\param[in] inflation	This parameter creates a skin around the swept geometry which increases its extents for sweeping. The sweep will register a hit as soon as the skin touches a shape, and will return the corresponding distance and normal.
							Note: ePRECISE_SWEEP doesn't support inflation. Therefore the sweep will be performed with zero inflation.

	\note This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock
		and overlapping writes from different threads may result in undefined behavior).

	@see PxHitFlags PxQueryFilterData PxBatchQueryPreFilterShader PxBatchQueryPostFilterShader PxSweepHit

</member>
<member name="T:physx.Px1DConstraintFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="48">
 \brief constraint row flags

 These flags configure the post-processing of constraint rows and the behavior of the solver while solving constraints

</member>
<member name="T:physx.PxConstraintSolveHint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="70">
\brief constraint type hints which the solver uses to optimize constraint handling

</member>
<member name="T:physx.Px1DConstraint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="88">
\brief A constraint

A constraint is expressed as a set of 1-dimensional constraint rows which define the required constraint
on the objects' velocities. 

Each constraint is either a hard constraint or a spring. We define the velocity at the constraint to be
the quantity 

 v = body0vel.dot(lin0,ang0) - body1vel.dot(lin1, ang1)

For a hard constraint, the solver attempts to generate 

1. a set of velocities for the objects which, when integrated, respect the constraint errors:

  v + (geometricError / timestep) = velocityTarget

2. a set of velocities for the objects which respect the constraints:

  v = velocityTarget

Hard constraints support restitution: if the impact velocity exceeds the bounce threshold, then the target velocity
of the constraint will be set to restitution * -v

Alternatively, the solver can attempt to resolve the velocity constraint as an implicit spring:

  F = stiffness * -geometricError + damping * (velocityTarget - v)

where F is the constraint force or acceleration. Springs are fully implicit: that is, the force or acceleration 
is a function of the position and velocity after the solve.

All constraints support limits on the minimum or maximum impulse applied.



</member>
<member name="T:physx.PxConstraintVisualizationFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="158">
\brief Flags for determining which components of the constraint should be visualized.

@see PxConstraintVisualize

</member>
<member name="D:physx.PxConstraintSolverPrep" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="187">
solver constraint generation shader

This function is called by the constraint solver framework. The function must be reentrant, since it may be called simultaneously
from multiple threads, and should access only the arguments passed into it, since on PS3 this function may execute on SPU. 

Developers writing custom constraints are encouraged to read the documentation in the user guide and the implementation code in PhysXExtensions.

\param[out] constraints an array of solver constraint rows to be filled in
\param[out] bodyAWorldOffset the origin point (offset from the position vector of bodyA) at which the constraint is resolved. This value does not affect how constraints are solved, only the constraint force reported. 
\param[in] maxConstraints the size of the constraint buffer. At most this many constraints rows may be written
\param[out] invMassScale the inverse mass and inertia scales for the constraint
\param[in] constantBlock the constant data block
\param[in] bodyAToWorld The world transform of the first constrained body (the identity transform if the first actor is static, or if a NULL actor pointer was provided for it)
\param[in] bodyBToWorld The world transform of the second constrained body (the identity transform if the second actor is static, or if a NULL actor pointer was provided for it)

\return the number of constraint rows written.

</member>
<member name="D:physx.PxConstraintProject" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="213">
solver constraint projection shader

This function is called by the constraint post-solver framework. The function must be reentrant, since it may be called simultaneously
from multiple threads and should access only the arguments passed into it, since on PS3 this function may execute on SPU.

\param[in] constantBlock the constant data block
\param[out] bodyAToWorld The world transform of the first constrained body (the identity if the body is NULL)
\param[out] bodyBToWorld The world transform of the second constrained body (the identity if the body is NULL)
\param[in] true if the constraint should be projected by moving the second body towards the first, false if the converse

</member>
<member name="T:physx.PxConstraintVisualizer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="229">
API used to visualize details about a constraint.

</member>
<member name="D:physx.PxConstraintVisualize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="248">
solver constraint visualization function

This function is called by the constraint post-solver framework to visualize the constraint

\param[out] out the render buffer to render to
\param[in] constantBlock the constant data block
\param[in] body0Transform The world transform of the first constrained body (the identity if the body is NULL)
\param[in] body1Transform The world transform of the second constrained body (the identity if the body is NULL)
\param[in] frameScale the visualization scale for the constraint frames
\param[in] limitScale the visualization scale for the constraint limits
\param[in] flags the visualization flags

@see PxRenderBuffer 

</member>
<member name="T:physx.PxConstraintConnector" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="280">

\brief This class connects a custom constraint to the SDK

This class connects a custom constraint to the SDK, and functions are called by the SDK
to query the custom implementation for specific information to pass on to the application
or inform the constraint when the application makes calls into the SDK which will update
the custom constraint's internal implementation

</member>
<member name="M:physx.PxConstraintConnector.prepareData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="293">
when the constraint is marked dirty, this function is called at the start of the simulation
step for the SDK to copy the constraint data block.

</member>
<member name="M:physx.PxConstraintConnector.updatePvdProperties(physx.debugger.comm.PvdDataStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxConstraint!System.Runtime.CompilerServices.IsConst*,physx.PxPvdUpdateType.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="300">
this function is called by the SDK to update PVD's view of it

</member>
<member name="M:physx.PxConstraintConnector.onConstraintRelease" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="308">
	When the SDK deletes a PxConstraint object this function is called by the SDK. In general
	custom constraints should not be deleted directly by applications: rather, the constraint
	should respond to a release() request by calling PxConstraint::release(), then wait for
	this call to release its own resources, so that even if the release() call occurs during
	a simulation step, the deletion of the constraint is buffered until that step completes.
	
	This function is also called when a PxConstraint object is deleted on cleanup due to 
	destruction of the PxPhysics object.


</member>
<member name="M:physx.PxConstraintConnector.onComShift(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="322">
This function is called by the SDK when the CoM of one of the actors is moved. Since the
API specifies constraint positions relative to actors, and the constraint shader functions
are supplied with coordinates relative to bodies, some synchronization is usually required
when the application moves an object's center of mass.

</member>
<member name="M:physx.PxConstraintConnector.onOriginShift(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="331">
	This function is called by the SDK when the scene origin gets shifted and allows to adjust
	custom data which contains world space transforms.

	\note If the adjustments affect constraint shader data, it is necessary to call PxConstraint::markDirty()
	to make sure that the data gets synced at the beginning of the next simulation step.

	\param[in] shift Translation vector the origin is shifted by.

	@see PxScene.shiftOrigin()

</member>
<member name="M:physx.PxConstraintConnector.getExternalReference(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="345">
	\brief Fetches external data for a constraint.
	
	This function is used by the SDK to acquire a reference to the owner of a constraint and a unique
	owner type ID. This information will be passed on when a breakable constraint breaks or when
	#PxConstraint::getExternalReference() is called.

	\param[out] typeID Unique type identifier of the external object. The value 0xffffffff is reserved and should not be used. Furthermore, if the PhysX extensions library is used, some other IDs are reserved already (see PxConstraintExtIDs)
	\return Reference to the external object which owns the constraint.

	@see PxConstraintInfo PxSimulationEventCallback.onConstraintBreak()

</member>
<member name="M:physx.PxConstraintConnector.getSerializable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="360">
	\brief Obtain a reference to a PxBase interface if the constraint has one.

	If the constraint does not implement the PxBase interface, it should return NULL. 

</member>
<member name="M:physx.PxConstraintConnector.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraintdesc.h" line="369">
\brief virtual destructor

</member>
<member name="T:physx.PxConstraintFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="34">
\brief a table of function pointers for a constraint

@see PxConstraint

\brief constraint flags

\note eBROKEN is a read only flag

</member>
<member name="D:physx.PxConstraintFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="63">
\brief constraint flags
@see PxConstraintFlag

</member>
<member name="T:physx.PxConstraint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="92">
\brief A plugin class for implementing constraints

@see PxPhysics.createConstraint

</member>
<member name="M:physx.PxConstraint.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="102">
	\brief Releases a PxConstraint instance.

	\note This call does not wake up the connected rigid bodies.

	@see PxPhysics.createConstraint, PxBase.release()

</member>
<member name="M:physx.PxConstraint.getScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="111">
	\brief Retrieves the scene which this constraint belongs to.

	\return Owner Scene. NULL if not part of a scene.

	@see PxScene

</member>
<member name="M:physx.PxConstraint.getActors(physx.PxRigidActor**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="120">
	\brief Retrieves the actors for this constraint.

	\param[out] actor0 a reference to the pointer for the first actor
	\param[out] actor1 a reference to the pointer for the second actor

	@see PxActor

</member>
<member name="M:physx.PxConstraint.setActors(physx.PxRigidActor*,physx.PxRigidActor*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="132">
	\brief Sets the actors for this constraint.

	\param[in] actor0 a reference to the pointer for the first actor
	\param[in] actor1 a reference to the pointer for the second actor

	@see PxActor

</member>
<member name="M:physx.PxConstraint.markDirty" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="143">
\brief Notify the scene that the constraint shader data has been updated by the application

</member>
<member name="M:physx.PxConstraint.setFlags(physx.PxFlags&lt;physx.PxConstraintFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="149">
	\brief Set the flags for this constraint

	\param[in] flags the new constraint flags

	default: PxConstraintFlag::eDRIVE_LIMITS_ARE_FORCES

	@see PxConstraintFlags

</member>
<member name="M:physx.PxConstraint.getFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="161">
	\brief Retrieve the flags for this constraint

	\return the constraint flags
	@see PxConstraintFlags

</member>
<member name="M:physx.PxConstraint.setFlag(physx.PxConstraintFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="171">
	\brief Set a flag for this constraint

	\param[in] flag the constraint flag
	\param[in] value the new value of the flag

	@see PxConstraintFlags

</member>
<member name="M:physx.PxConstraint.getForce(physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="182">
\brief Retrieve the constraint force most recently applied to maintain this constraint.

\param[out] linear the constraint force
\param[out] angular the constraint torque

</member>
<member name="M:physx.PxConstraint.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="191">
	\brief whether the constraint is valid. 
	
	A constraint is valid if it has at least one dynamic rigid body or articulation link. A constraint that
	is not valid may not be inserted into a scene, and therefore a static actor to which an invalid constraint
	is attached may not be inserted into a scene.

	Invalid constraints arise only when an actor to which the constraint is attached has been deleted.


</member>
<member name="M:physx.PxConstraint.setBreakForce(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="203">
	\brief Set the break force and torque thresholds for this constraint. 
	
	If either the force or torque measured at the constraint exceed these thresholds the constraint will break.

	\param[in] linear the linear break threshold
	\param[in] angular the angular break threshold

</member>
<member name="M:physx.PxConstraint.getBreakForce(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="215">
	\brief Retrieve the constraint break force and torque thresholds
	
	\param[out] linear the linear break threshold
	\param[out] angular the angular break threshold


</member>
<member name="M:physx.PxConstraint.getExternalReference(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="225">
	\brief Fetch external owner of the constraint.
	
	Provides a reference to the external owner of a constraint and a unique owner type ID.

	\param[out] typeID Unique type identifier of the external object.
	\return Reference to the external object which owns the constraint.

	@see PxConstraintConnector.getExternalReference()

</member>
<member name="M:physx.PxConstraint.setConstraintFunctions(physx.PxConstraintConnector*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxConstraintShaderTable!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxconstraint.h" line="237">
	\brief Set the constraint functions for this constraint
	
	\param[in] connector the constraint connector object by which the SDK communicates with the constraint.
	\param[in] shaders the shader table for the constraint
 
	@see PxConstraintConnector PxConstraintSolverPrep PxConstraintProject PxConstraintVisualize

</member>
<member name="T:physx.PxContactHeader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="32">
\brief Base header structure for compressed contact data.

</member>
<member name="F:physx.PxContactHeader.totalContactCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="46">
\brief Total contact count for entire compressed contact stream

</member>
<member name="F:physx.PxContactHeader.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="50">
\brief The flags
@see PxContactHeaderFlags

</member>
<member name="T:physx.PxModifyContactHeader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="57">
\brief Extended header structure for modifiable contacts.

</member>
<member name="F:physx.PxModifyContactHeader.invMassScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="62">
\brief Inverse mass scale for body A.

</member>
<member name="F:physx.PxModifyContactHeader.invMassScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="66">
\brief Inverse mass scale for body B.

</member>
<member name="F:physx.PxModifyContactHeader.invInertiaScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="70">
\brief Inverse inertia scale for body A.

</member>
<member name="F:physx.PxModifyContactHeader.invInertiaScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="74">
\brief Inverse inertia scale for body B.

</member>
<member name="T:physx.PxContactPatchBase" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="80">
\brief Base header for a contact patch

</member>
<member name="F:physx.PxContactPatchBase.nbContacts" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="85">
\brief Number of contacts in this patch.

</member>
<member name="F:physx.PxContactPatchBase.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="89">
\brief Flags for this patch.

</member>
<member name="T:physx.PxContactPatch" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="95">
\brief Header for contact patch where all points share same material and normal

</member>
<member name="F:physx.PxContactPatch.normal" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="100">
\brief Contact normal

</member>
<member name="F:physx.PxContactPatch.staticFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="104">
\brief Static friction coefficient

</member>
<member name="F:physx.PxContactPatch.dynamicFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="108">
\brief Dynamic friction coefficient

</member>
<member name="F:physx.PxContactPatch.restitution" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="112">
\brief Restitution coefficient

</member>
<member name="F:physx.PxContactPatch.materialIndex0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="116">
\brief Shape A's material index

</member>
<member name="F:physx.PxContactPatch.materialIndex1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="120">
\brief Shape B's material index

</member>
<member name="T:physx.PxSimpleContact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="126">
\brief Base contact point data

</member>
<member name="F:physx.PxSimpleContact.contact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="131">
\brief Contact point in world space

</member>
<member name="F:physx.PxSimpleContact.separation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="135">
\brief Separation value (negative implies penetration).

</member>
<member name="T:physx.PxFeatureContact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="141">
\brief Extended contact point data including face (feature) indices

</member>
<member name="F:physx.PxFeatureContact.internalFaceIndex0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="146">
\brief Face index on shape A.

</member>
<member name="F:physx.PxFeatureContact.internalFaceIndex1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="150">
\brief Face index on shape B.

</member>
<member name="T:physx.PxModifiableContact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="156">
\brief A modifiable contact point. This has additional fields per-contact to permit modification by user.
\note Not all fields are currently exposed to the user.

</member>
<member name="F:physx.PxModifiableContact.normal" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="162">
\brief Contact normal

</member>
<member name="F:physx.PxModifiableContact.targetVel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="166">
\brief Target velocity

</member>
<member name="F:physx.PxModifiableContact.maxImpulse" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="170">
\brief Maximum impulse

</member>
<member name="F:physx.PxModifiableContact.staticFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="174">
\brief Static friction coefficient

</member>
<member name="F:physx.PxModifiableContact.dynamicFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="178">
\brief Dynamic friction coefficient

</member>
<member name="F:physx.PxModifiableContact.restitution" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="182">
\brief Restitution coefficient

</member>
<member name="F:physx.PxModifiableContact.materialIndex0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="186">
\brief Material index on shape A

</member>
<member name="F:physx.PxModifiableContact.materialIndex1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="190">
\brief Material index on shape B

</member>
<member name="F:physx.PxModifiableContact.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="194">
\brief Flags

</member>
<member name="T:physx.PxContactStreamIterator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="200">
\brief A class to iterate over a compressed contact stream. This supports read-only access to the various contact formats.

</member>
<member name="F:physx.PxContactStreamIterator.zero" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="205">
\brief Utility zero vector to optimize functions returning zero vectors when a certain flag isn't set.
\note This allows us to return by reference instead of having to return by value. Returning by value will go via memory (registers -&gt; stack -&gt; registers), which can 
cause performance issues on certain platforms.

</member>
<member name="F:physx.PxContactStreamIterator.header" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="211">
\brief The current contact header.

</member>
<member name="F:physx.PxContactStreamIterator.currPtr" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="215">
\brief Current pointer in the stream.

</member>
<member name="F:physx.PxContactStreamIterator.endPtr" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="219">
\brief Pointer to the end of the stream.

</member>
<member name="F:physx.PxContactStreamIterator.patchStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="223">
\brief Pointer to the start of the patch.

</member>
<member name="F:physx.PxContactStreamIterator.patchEnd" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="227">
\brief Pointer to the end of the patch.

</member>
<member name="F:physx.PxContactStreamIterator.contactStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="231">
\brief Pointer to the first contact in the patch.

</member>
<member name="F:physx.PxContactStreamIterator.streamSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="235">
\brief Size of the stream in bytes.

</member>
<member name="F:physx.PxContactStreamIterator.nbContactsInPatch" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="239">
\brief Total number of contacts in the patch.

</member>
<member name="F:physx.PxContactStreamIterator.currentContact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="243">
\brief Current contact index in the patch

</member>
<member name="F:physx.PxContactStreamIterator.contactPatchHeaderSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="247">
\brief Size of contact patch header 
\note This varies whether the patch is modifiable or not.

</member>
<member name="F:physx.PxContactStreamIterator.contactPointSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="252">
\brief Contact point size
\note This varies whether the patch has feature indices or is modifiable.

</member>
<member name="F:physx.PxContactStreamIterator.hasFaceIndices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="257">
\brief Indicates whether this stream carries face indices

</member>
<member name="F:physx.PxContactStreamIterator.contactsWereModifiable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="261">
\brief Indicates whether this stream is created from modifiable contact (internal usage), the variables are still read-only

</member>
<member name="F:physx.PxContactStreamIterator.forceNoResponse" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="265">
\brief Indicates whether this stream is notify-only or not.

</member>
<member name="M:physx.PxContactStreamIterator.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="270">
\brief Constructor
\param[in] stream Pointer to the start of the stream.
\param[in] size Size of the stream in bytes.

</member>
<member name="M:physx.PxContactStreamIterator.hasNextPatch" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="319">
\brief Returns whether there are more patches in this stream.
\return Whether there are more patches in this stream.

</member>
<member name="M:physx.PxContactStreamIterator.getTotalContactCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="328">
\brief Returns the total contact count.
\return Total contact count.

</member>
<member name="M:physx.PxContactStreamIterator.nextPatch" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="337">
\brief Advances iterator to next contact patch.

</member>
<member name="M:physx.PxContactStreamIterator.hasNextContact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="360">
\brief Returns if the current patch has more contacts.
\return If there are more contacts in the current patch.

</member>
<member name="M:physx.PxContactStreamIterator.nextContact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="369">
\brief Advances to the next contact in the patch.

</member>
<member name="M:physx.PxContactStreamIterator.getContactNormal" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="380">
\brief Gets the current contact's normal
\return The current contact's normal.

</member>
<member name="M:physx.PxContactStreamIterator.getInvMassScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="389">
\brief Gets the inverse mass scale for body 0.
\return The inverse mass scale for body 0.

</member>
<member name="M:physx.PxContactStreamIterator.getInvMassScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="398">
\brief Gets the inverse mass scale for body 1.
\return The inverse mass scale for body 1.

</member>
<member name="M:physx.PxContactStreamIterator.getInvInertiaScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="407">
\brief Gets the inverse inertia scale for body 0.
\return The inverse inertia scale for body 0.

</member>
<member name="M:physx.PxContactStreamIterator.getInvInertiaScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="416">
\brief Gets the inverse inertia scale for body 1.
\return The inverse inertia scale for body 1.

</member>
<member name="M:physx.PxContactStreamIterator.getMaxImpulse" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="425">
\brief Gets the contact's max impulse.
\return The contact's max impulse.

</member>
<member name="M:physx.PxContactStreamIterator.getTargetVel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="434">
\brief Gets the contact's target velocity.
\return The contact's target velocity.

</member>
<member name="M:physx.PxContactStreamIterator.getContactPoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="443">
\brief Gets the contact's contact point.
\return The contact's contact point.

</member>
<member name="M:physx.PxContactStreamIterator.getSeparation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="452">
\brief Gets the contact's separation.
\return The contact's separation.

</member>
<member name="M:physx.PxContactStreamIterator.getFaceIndex0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="461">
\brief Gets the contact's face index for shape 0.
\return The contact's face index for shape 0.

</member>
<member name="M:physx.PxContactStreamIterator.getFaceIndex1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="470">
\brief Gets the contact's face index for shape 1.
\return The contact's face index for shape 1.

</member>
<member name="M:physx.PxContactStreamIterator.getStaticFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="479">
\brief Gets the contact's static friction coefficient.
\return The contact's static friction coefficient.

</member>
<member name="M:physx.PxContactStreamIterator.getDynamicFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="488">
\brief Gets the contact's static dynamic coefficient.
\return The contact's static dynamic coefficient.

</member>
<member name="M:physx.PxContactStreamIterator.getRestitution" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="497">
\brief Gets the contact's restitution coefficient.
\return The contact's restitution coefficient.

</member>
<member name="M:physx.PxContactStreamIterator.getMaterialFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="506">
\brief Gets the contact's material flags.
\return The contact's material flags.

</member>
<member name="M:physx.PxContactStreamIterator.getMaterialIndex0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="515">
\brief Gets the contact's material index for shape 0.
\return The contact's material index for shape 0.

</member>
<member name="M:physx.PxContactStreamIterator.getMaterialIndex1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="524">
\brief Gets the contact's material index for shape 1.
\return The contact's material index for shape 1.

</member>
<member name="M:physx.PxContactStreamIterator.advanceToIndex(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="533">
\brief Advances the contact stream iterator to a specific contact index.

</member>
<member name="M:physx.PxContactStreamIterator.getContactPatch" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="576">
\brief Internal helper

</member>
<member name="M:physx.PxContactStreamIterator.getModifiableContact" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="585">
\brief Internal helper

</member>
<member name="M:physx.PxContactStreamIterator.getModifiableContactHeader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontact.h" line="594">
\brief Internal helper

</member>
<member name="T:physx.PxContactSet" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="33">
\brief An array of contact points, as passed to contact modification.

The word 'set' in the name does not imply that duplicates are filtered in any 
way.  This initial set of contacts does potentially get reduced to a smaller 
set before being passed to the solver.

You can use the accessors to read and write contact properties.  The number of 
contacts is immutable, other than being able to disable contacts using ignore().

@see PxContactModifyCallback, PxModifiableContact

</member>
<member name="M:physx.PxContactSet.getPoint(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="48">
	\brief Get the position of a specific contact point in the set.

	The contact points could be on the surface of either shape and there are currently no guarantees provided upon which shape the points lie.

	@see PxModifiableContact.point

</member>
<member name="M:physx.PxContactSet.setPoint(System.UInt32,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="57">
	\brief Alter the position of a specific contact point in the set.

	@see PxModifiableContact.point

</member>
<member name="M:physx.PxContactSet.getNormal(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="67">
	\brief Get the contact normal of a specific contact point in the set.

	The contact normal points from the second shape to the first shape.

	@see PxModifiableContact.normal

</member>
<member name="M:physx.PxContactSet.setNormal(System.UInt32,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="76">
	\brief Alter the contact normal of a specific contact point in the set.

	\note Changing the normal can cause contact points to be ignored.
	\note This must be a normalized vector.

	@see PxModifiableContact.normal

</member>
<member name="M:physx.PxContactSet.getSeparation(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="89">
	\brief Get the separation of a specific contact point in the set.

	This value can be either positive or negative. A negative value denotes penetration whereas a positive value denotes separation.

	@see PxModifiableContact.separation

</member>
<member name="M:physx.PxContactSet.setSeparation(System.UInt32,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="98">
	\brief Alter the separation of a specific contact point in the set.

	@see PxModifiableContact.separation

</member>
<member name="M:physx.PxContactSet.getTargetVelocity(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="108">
	\brief Get the target velocity of a specific contact point in the set.

	@see PxModifiableContact.targetVelocity


</member>
<member name="M:physx.PxContactSet.setTargetVelocity(System.UInt32,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="116">
	\brief Alter the target velocity of a specific contact point in the set.

	The user-defined target velocity is used to complement the normal and frictional response to a contact. The actual response to a contact depends on 
	the relative velocity, bounce threshold, mass properties and material properties.

	The user-defined property should be defined as a relative velocity in the space (v0 - v1), where v0 is actor[0]'s velocity and v1 is actor[1]'s velocity.

	\note Target velocity can be set in any direction and is independent of the contact normal. Any component of the target velocity that projects onto the contact normal
	will affect normal response and may cause the bodies to either suck into each-other or separate. Any component of the target velocity that does not project onto the contact
	normal will affect the friction response. Target velocities tangential to the contact normal can be an effective way of replicating effects like a conveyor belt.

	@see PxModifiableContact.targetVelocity

</member>
<member name="M:physx.PxContactSet.getInternalFaceIndex0(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="138">
	\brief Get the face index with respect to the first shape of the pair for a specific contact point in the set.

	@see PxModifiableContact.internalFaceIndex0

</member>
<member name="M:physx.PxContactSet.getInternalFaceIndex1(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="145">
	\brief Get the face index with respect to the second shape of the pair for a specific contact point in the set.

	@see PxModifiableContact.internalFaceIndex1

</member>
<member name="M:physx.PxContactSet.getMaxImpulse(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="152">
	\brief Get the maximum impulse for a specific contact point in the set.

	The value of maxImpulse is a real value in the range [0, PX_MAX_F32]. A value of 0 will disable the contact. The applied impulse will be clamped such that it
	cannot exceed the max impulse.

	@see PxModifiableContact.maxImpulse

</member>
<member name="M:physx.PxContactSet.setMaxImpulse(System.UInt32,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="162">
	\brief Alter the maximum impulse for a specific contact point in the set.

	\note Must be nonnegative. If set to zero, the contact point will be ignored, otherwise the impulse applied inside the solver will be clamped such that it cannot
	exceed this value.

	@see PxModifiableContact.maxImpulse

</member>
<member name="M:physx.PxContactSet.ignore(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="178">
	\brief Ignore the contact point.

	If a contact point is ignored then no force will get applied at this point. This can be used to disable collision in certain areas of a shape, for example.

</member>
<member name="M:physx.PxContactSet.size" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="185">
\brief The number of contact points in the set.

</member>
<member name="M:physx.PxContactSet.getInvMassScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="190">
	\brief Returns the invMassScale of body 0

	The scale is defaulted to 1.0, meaning that the body's true mass will be used.

</member>
<member name="M:physx.PxContactSet.getInvMassScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="202">
	\brief Returns the invMassScale of body 1

	The scale is defaulted to 1.0, meaning that the body's true mass will be used.

</member>
<member name="M:physx.PxContactSet.getInvInertiaScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="214">
	\brief Returns the invInertiaScale of body 0

	The scale is defaulted to 1.0, meaning that the body's true invInertia will be used.

</member>
<member name="M:physx.PxContactSet.getInvInertiaScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="226">
	\brief Returns the invInertiaScale of body 1

	The scale is defaulted to 1.0, meaning that the body's true invInertia will be used.

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxContactSet.setInvMassScale0(System.Single!System.Runtime.CompilerServices.IsConst)'. -->
<!-- Discarding badly formed XML document comment for member 'M:physx.PxContactSet.setInvMassScale1(System.Single!System.Runtime.CompilerServices.IsConst)'. -->
<!-- Discarding badly formed XML document comment for member 'M:physx.PxContactSet.setInvInertiaScale0(System.Single!System.Runtime.CompilerServices.IsConst)'. -->
<!-- Discarding badly formed XML document comment for member 'M:physx.PxContactSet.setInvInertiaScale1(System.Single!System.Runtime.CompilerServices.IsConst)'. -->
<member name="T:physx.PxContactModifyPair" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="301">
\brief An array of instances of this class is passed to PxContactModifyCallback::onContactModify().

@see PxContactModifyCallback

</member>
<member name="F:physx.PxContactModifyPair.actor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="311">
\brief The actors which make up the pair in contact. 

Note that these are the actors as seen by the simulation, and may have been deleted since the simulation step started.

</member>
<member name="F:physx.PxContactModifyPair.shape" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="318">
\brief The shapes which make up the pair in contact. 

Note that these are the shapes as seen by the simulation, and may have been deleted since the simulation step started.

</member>
<member name="F:physx.PxContactModifyPair.transform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="326">
\brief The shape to world transforms of the two shapes. 

These are the transforms as the simulation engine sees them, and may have been modified by the application
since the simulation step started.


</member>
<member name="F:physx.PxContactModifyPair.contacts" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="336">
\brief An array of contact points between these two shapes.

</member>
<member name="T:physx.PxContactModifyCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="344">
\brief An interface class that the user can implement in order to modify contact constraints.

<b>Threading:</b> It is <b>necessary</b> to make this class thread safe as it will be called in the context of the
simulation thread. It might also be necessary to make it reentrant, since some calls can be made by multi-threaded
parts of the physics engine.

You can enable the use of this contact modification callback by raising the flag PxPairFlag::eMODIFY_CONTACTS in
the filter shader/callback (see #PxSimulationFilterShader) for a pair of rigid body objects.

Please note: 
+ Raising the contact modification flag will not wake the actors up automatically.
+ It is not possible to turn off the performance degradation by simply removing the callback from the scene, the
  filter shader/callback has to be used to clear the contact modification flag.
+ The contacts will only be reported as long as the actors are awake. There will be no callbacks while the actors are sleeping.

@see PxScene.setContactModifyCallback() PxScene.getContactModifyCallback()

</member>
<member name="M:physx.PxContactModifyCallback.onContactModify(physx.PxContactModifyPair*!System.Runtime.CompilerServices.IsConst,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="366">
	\brief Passes modifiable arrays of contacts to the application.

	The initial contacts are as determined fresh each frame by collision detection.
	
	The number of contacts can not be changed, so you cannot add your own contacts.  You may however
	disable contacts using PxContactSet::ignore().

	@see PxContactModifyPair

</member>
<member name="T:physx.PxCCDContactModifyCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="382">
\brief An interface class that the user can implement in order to modify CCD contact constraints.

<b>Threading:</b> It is <b>necessary</b> to make this class thread safe as it will be called in the context of the
simulation thread. It might also be necessary to make it reentrant, since some calls can be made by multi-threaded
parts of the physics engine.

You can enable the use of this contact modification callback by raising the flag PxPairFlag::eMODIFY_CONTACTS in
the filter shader/callback (see #PxSimulationFilterShader) for a pair of rigid body objects.

Please note: 
+ Raising the contact modification flag will not wake the actors up automatically.
+ It is not possible to turn off the performance degradation by simply removing the callback from the scene, the
  filter shader/callback has to be used to clear the contact modification flag.
+ The contacts will only be reported as long as the actors are awake. There will be no callbacks while the actors are sleeping.

@see PxScene.setContactModifyCallback() PxScene.getContactModifyCallback()

</member>
<member name="M:physx.PxCCDContactModifyCallback.onCCDContactModify(physx.PxContactModifyPair*!System.Runtime.CompilerServices.IsConst,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxcontactmodifycallback.h" line="404">
	\brief Passes modifiable arrays of contacts to the application.

	The initial contacts are as determined fresh each frame by collision detection.
	
	The number of contacts can not be changed, so you cannot add your own contacts.  You may however
	disable contacts using PxContactSet::ignore().

	@see PxContactModifyPair

</member>
<member name="T:physx.PxDeletionEventFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxdeletionlistener.h" line="29">
\brief Flags specifying deletion event types.

@see PxDeletionListener::onRelease PxPhysics.registerDeletionListener()

</member>
<member name="D:physx.PxDeletionEventFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxdeletionlistener.h" line="43">
\brief Collection of set bits defined in PxDeletionEventFlag.

@see PxDeletionEventFlag

</member>
<member name="T:physx.PxDeletionListener" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxdeletionlistener.h" line="52">
\brief interface to get notification on object deletion


</member>
<member name="M:physx.PxDeletionListener.onRelease(physx.PxBase!System.Runtime.CompilerServices.IsConst*,System.Void*,physx.PxDeletionEventFlag.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxdeletionlistener.h" line="59">
	\brief Notification if an object or its memory gets released

	If release() gets called on a PxBase object, an eUSER_RELEASE event will get fired immediately. The object state can be queried in the callback but
	it is not allowed to change the state. Furthermore, when reading from the object it is the user's responsibility to make sure that no other thread 
	is writing at the same time to the object (this includes the simulation itself, i.e., #PxScene::fetchResults() must not get called at the same time).

	Calling release() on a PxBase object does not necessarily trigger its destructor immediately. For example, the object can be shared and might still
	be referenced by other objects or the simulation might still be running and accessing the object state. In such cases the destructor will be called
	as soon as it is safe to do so. After the destruction of the object and its memory, an eMEMORY_RELEASE event will get fired. In this case it is not
	allowed to dereference the object pointer in the callback.

	\param[in] observed The object for which the deletion event gets fired.
	\param[in] userData The user data pointer of the object for which the deletion event gets fired. Not available for all object types in which case it will be set to 0.
	\param[in] deletionEvent The type of deletion event. Do not dereference the object pointer argument if the event is eMEMORY_RELEASE.


</member>
<member name="D:physx.PxDataAccessFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxlockeddata.h" line="38">
\brief collection of set bits defined in PxDataAccessFlag.

@see PxDataAccessFlag

</member>
<member name="T:physx.PxLockedData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxlockeddata.h" line="47">
\brief Parent class for bulk data that is shared between the SDK and the application.

</member>
<member name="M:physx.PxLockedData.getDataAccessFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxlockeddata.h" line="54">
\brief Any combination of PxDataAccessFlag::eREADABLE and PxDataAccessFlag::eWRITABLE
@see PxDataAccessFlag

</member>
<member name="M:physx.PxLockedData.unlock" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxlockeddata.h" line="60">
\brief Unlocks the bulk data.

</member>
<member name="M:physx.PxLockedData.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxlockeddata.h" line="65">
\brief virtual destructor

</member>
<member name="T:physx.PxMaterialFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="30">
\brief Flags which control the behavior of a material.

@see PxMaterial 

</member>
<member name="F:eDISABLE_FRICTION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="40">
If this flag is set, friction computations are always skipped between shapes with this material and any other shape.

</member>
<member name="F:eDISABLE_STRONG_FRICTION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="45">
		The difference between "normal" and "strong" friction is that the strong friction feature
		remembers the "friction error" between simulation steps. The friction is a force trying to
		hold objects in place (or slow them down) and this is handled in the solver. But since the
		solver is only an approximation, the result of the friction calculation can include a small
		"error" - e.g. a box resting on a slope should not move at all if the static friction is in
		action, but could slowly glide down the slope because of a small friction error in each 
		simulation step. The strong friction counter-acts this by remembering the small error and
		taking it to account during the next simulation step.

		However, in some cases the strong friction could cause problems, and this is why it is
		possible to disable the strong friction feature by setting this flag. One example is
		raycast vehicles, that are sliding fast across the surface, but still need a precise
		steering behavior. It may be a good idea to reenable the strong friction when objects
		are coming to a rest, to prevent them from slowly creeping down inclines.

		Note: This flag only has an effect if the PxMaterialFlag::eDISABLE_FRICTION bit is 0.

</member>
<member name="D:physx.PxMaterialFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="67">
\brief collection of set bits defined in PxMaterialFlag.

@see PxMaterialFlag

</member>
<member name="T:physx.PxCombineMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="76">
\brief enumeration that determines the way in which two material properties will be combined to yield a friction or restitution coefficient for a collision.

When two actors come in contact with each other, they each have materials with various coefficients, but we only need a single set of coefficients for the pair.

Physics doesn't have any inherent combinations because the coefficients are determined empirically on a case by case
basis. However, simulating this with a pairwise lookup table is often impractical.

For this reason the following combine behaviors are available:

eAVERAGE
eMIN
eMULTIPLY
eMAX

The effective combine mode for the pair is maximum(material0.combineMode, material1.combineMode).

@see PxMaterial.setFrictionCombineMode() PxMaterial.getFrictionCombineMode() PxMaterial.setRestitutionCombineMode() PxMaterial.getFrictionCombineMode()

</member>
<member name="T:physx.PxMaterial" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="108">
\brief Material class to represent a set of surface properties. 

@see PxPhysics.createMaterial

</member>
<member name="M:physx.PxMaterial.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="117">
	\brief Decrements the reference count of a material and releases it if the new reference count is zero.		
	
	The material is destroyed when the application's reference is released and all shapes referencing the material are destroyed.

	@see PxPhysics.createMaterial()

</member>
<member name="M:physx.PxMaterial.getReferenceCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="126">
	\brief Returns the reference count of the material.

	At creation, the reference count of the material is 1. Every shape referencing this material increments the
	count by 1.	When the reference count reaches 0, and only then, the material gets destroyed automatically.

	\return the current reference count.

</member>
<member name="M:physx.PxMaterial.setDynamicFriction(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="136">
	\brief Sets the coefficient of dynamic friction.
	
	The coefficient of dynamic friction should be in [0, PX_MAX_F32). If set to greater than staticFriction, the effective value of staticFriction will be increased to match.

	<b>Sleeping:</b> Does <b>NOT</b> wake any actors which may be affected.

	\param[in] coef Coefficient of dynamic friction. <b>Range:</b> [0, PX_MAX_F32)

	@see getDynamicFriction()

</member>
<member name="M:physx.PxMaterial.getDynamicFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="149">
	\brief Retrieves the DynamicFriction value.

	\return The coefficient of dynamic friction.

	@see setDynamicFriction

</member>
<member name="M:physx.PxMaterial.setStaticFriction(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="158">
	\brief Sets the coefficient of static friction
	
	The coefficient of static friction should be in the range [0, PX_MAX_F32)

	<b>Sleeping:</b> Does <b>NOT</b> wake any actors which may be affected.

	\param[in] coef Coefficient of static friction. <b>Range:</b> [0, PX_MAX_F32)

	@see getStaticFriction() 

</member>
<member name="M:physx.PxMaterial.getStaticFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="171">
	\brief Retrieves the coefficient of static friction.
	\return The coefficient of static friction.

	@see setStaticFriction 

</member>
<member name="M:physx.PxMaterial.setRestitution(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="179">
	\brief Sets the coefficient of restitution 
	
	A coefficient of 0 makes the object bounce as little as possible, higher values up to 1.0 result in more bounce.

	<b>Sleeping:</b> Does <b>NOT</b> wake any actors which may be affected.

	\param[in] rest Coefficient of restitution. <b>Range:</b> [0,1]

	@see getRestitution() 

</member>
<member name="M:physx.PxMaterial.getRestitution" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="192">
	\brief Retrieves the coefficient of restitution.     

	See #setRestitution.

	\return The coefficient of restitution.

	@see setRestitution() 

</member>
<member name="M:physx.PxMaterial.setFlag(physx.PxMaterialFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="203">
	\brief Raises or clears a particular material flag.
	
	See the list of flags #PxMaterialFlag

	<b>Sleeping:</b> Does <b>NOT</b> wake any actors which may be affected.

	\param[in] flag The PxMaterial flag to raise(set) or clear.

	@see getFlags() PxMaterialFlag

</member>
<member name="M:physx.PxMaterial.setFlags(physx.PxFlags&lt;physx.PxMaterialFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="217">
	\brief sets all the material flags.
	
	See the list of flags #PxMaterialFlag

	<b>Sleeping:</b> Does <b>NOT</b> wake any actors which may be affected.


</member>
<member name="M:physx.PxMaterial.getFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="227">
	\brief Retrieves the flags. See #PxMaterialFlag.

	\return The material flags.

	@see PxMaterialFlag setFlags()

</member>
<member name="M:physx.PxMaterial.setFrictionCombineMode(physx.PxCombineMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="236">
	\brief Sets the friction combine mode.
	
	See the enum ::PxCombineMode .

	<b>Sleeping:</b> Does <b>NOT</b> wake any actors which may be affected.

	\param[in] combMode Friction combine mode to set for this material. See #PxCombineMode.

	@see PxCombineMode getFrictionCombineMode setStaticFriction() setDynamicFriction()

</member>
<member name="M:physx.PxMaterial.getFrictionCombineMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="249">
	\brief Retrieves the friction combine mode.
	
	See #setFrictionCombineMode.

	\return The friction combine mode for this material.

	@see PxCombineMode setFrictionCombineMode() 

</member>
<member name="M:physx.PxMaterial.setRestitutionCombineMode(physx.PxCombineMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="260">
	\brief Sets the restitution combine mode.
	
	See the enum ::PxCombineMode .

	<b>Sleeping:</b> Does <b>NOT</b> wake any actors which may be affected.

	\param[in] combMode Restitution combine mode for this material. See #PxCombineMode.

	@see PxCombineMode getRestitutionCombineMode() setRestitution()

</member>
<member name="M:physx.PxMaterial.getRestitutionCombineMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxmaterial.h" line="273">
	\brief Retrieves the restitution combine mode.
	
	See #setRestitutionCombineMode.

	\return The coefficient of restitution combine mode for this material.

	@see PxCombineMode setRestitutionCombineMode getRestitution()

</member>
<member name="T:physx.PxClothFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothtypes.h" line="30">
\brief flag for behaviors of the cloth solver
\details Defines flags to turn on/off features of the cloth solver.
The flag can be set during the cloth object construction (\see PxPhysics.createCloth() ),
or individually after the cloth has been created (\see PxCloth.setClothFlag() ).

</member>
<member name="T:physx.PxClothParticle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothtypes.h" line="50">
\brief Per particle data for cloth.
\details Defines position of the cloth particle as well as inverse mass.
When inverse mass is set to 0, the particle gets fully constrained
to the position during simulation.
\see PxPhysics.createCloth()
\see PxCloth.setParticles()

</member>
<member name="M:physx.PxClothParticle.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothtypes.h" line="63">
\brief Default constructor, performs no initialization.

</member>
<member name="T:physx.PxClothParticleMotionConstraint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothtypes.h" line="71">
\brief Constraints for cloth particle motion.
\details Defines a spherical volume to which the motion of a particle should be constrained.
@see PxCloth.setMotionConstraints()

</member>
<member name="M:physx.PxClothParticleMotionConstraint.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothtypes.h" line="81">
\brief Default constructor, performs no initialization.

</member>
<member name="T:physx.PxClothParticleSeparationConstraint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothtypes.h" line="89">
\brief Separation constraints for cloth particle movement
\details Defines a spherical volume such that corresponding particles should stay outside.
@see PxCloth.setSeparationConstraints()

</member>
<member name="M:physx.PxClothParticleSeparationConstraint.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothtypes.h" line="99">
\brief Default constructor, performs no initialization.

</member>
<member name="T:physx.PxClothFabricPhaseType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="28">
\brief Describe type of phase in cloth fabric.
\see PxClothFabric for an explanation of concepts on phase and set.

</member>
<member name="T:physx.PxClothFabricPhase" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="45">
\brief References a set of constraints that can be solved in parallel.
\see PxClothFabric for an explanation of the concepts on phase and set.

</member>
<member name="F:physx.PxClothFabricPhase.phaseType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="54">
\brief Type of constraints to solve.

</member>
<member name="F:physx.PxClothFabricPhase.setIndex" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="59">
\brief Index of the set that contains the particle indices.

</member>
<member name="T:physx.PxClothFabricDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="71">
\brief References all the data required to create a fabric.
\see PxPhysics.createClothFabric(), PxClothFabricCooker.getDescriptor()

</member>
<member name="F:physx.PxClothFabricDesc.nbParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="78">
\brief The number of particles needed when creating a PxCloth instance from the fabric. 
</member>
<member name="F:physx.PxClothFabricDesc.nbPhases" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="81">
\brief The number of solver phases. 
</member>
<member name="F:physx.PxClothFabricDesc.phases" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="83">
\brief Array defining which constraints to solve each phase. See #PxClothFabric.getPhases(). 
</member>
<member name="F:physx.PxClothFabricDesc.nbSets" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="86">
\brief The number of sets in the fabric. 
</member>
<member name="F:physx.PxClothFabricDesc.sets" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="88">
\brief Array with an index per set which points one entry beyond the last constraint of the set. See #PxClothFabric.getSets(). 
</member>
<member name="F:physx.PxClothFabricDesc.indices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="91">
\brief Array of particle indices which specifies the pair of constrained vertices. See #PxClothFabric.getParticleIndices(). 
</member>
<member name="F:physx.PxClothFabricDesc.restvalues" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="93">
\brief Array of rest values for each constraint. See #PxClothFabric.getRestvalues(). 
</member>
<member name="F:physx.PxClothFabricDesc.nbTethers" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="96">
\brief Size of tetherAnchors and tetherLengths arrays, needs to be multiple of nbParticles. 
</member>
<member name="F:physx.PxClothFabricDesc.tetherAnchors" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="98">
\brief Array of particle indices specifying the tether anchors. See #PxClothFabric.getTetherAnchors(). 
</member>
<member name="F:physx.PxClothFabricDesc.tetherLengths" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="100">
\brief Array of rest distance between tethered particle pairs. See #PxClothFabric.getTetherLengths(). 
</member>
<member name="M:physx.PxClothFabricDesc.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="103">
\brief constructor sets to default.

</member>
<member name="M:physx.PxClothFabricDesc.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="108">
\brief (re)sets the structure to the default.	

</member>
<member name="M:physx.PxClothFabricDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="113">
\brief Returns true if the descriptor is valid.
\return True if the current settings are valid

</member>
<!-- Discarding badly formed XML document comment for member 'T:physx.PxClothFabric'. -->
<member name="M:physx.PxClothFabric.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="160">
\brief Release the cloth fabric.
\details Releases the application's reference to the cloth fabric.
The fabric is destroyed when the application's reference is released and all cloth instances referencing the fabric are destroyed.
\see PxPhysics.createClothFabric()

</member>
<member name="M:physx.PxClothFabric.getNbParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="168">
\brief Returns number of particles.
\return The number of particles needed when creating a PxCloth instance from the fabric.

</member>
<member name="M:physx.PxClothFabric.getNbPhases" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="174">
\brief Returns number of phases.
\return The number of solver phases. 

</member>
<member name="M:physx.PxClothFabric.getNbRestvalues" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="180">
\brief Returns number of rest values.
\return The size of the rest values array.

</member>
<member name="M:physx.PxClothFabric.getNbSets" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="186">
\brief Returns number of sets.
\return The size of the set array.

</member>
<member name="M:physx.PxClothFabric.getNbParticleIndices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="192">
    \brief Get number of particle indices.
	\return The size of the particle indices array.

</member>
<member name="M:physx.PxClothFabric.getNbTethers" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="198">
    \brief Get number of tether constraints.
	\return The size of the tether anchors and lengths arrays.

</member>
<member name="M:physx.PxClothFabric.getPhases(physx.PxClothFabricPhase*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="204">
    \brief Copies the phase array to a user specified buffer.
	\details The phase array is a mapping of the phase index to the corresponding phase.
	The array has the same length as getNbPhases().
    \param [in] userPhaseBuffer Destination buffer to copy the phase data to.
    \param [in] bufferSize Size of userPhaseBuffer, should be at least getNbPhases().
    \return getNbPhases() if the copy was successful, 0 otherwise.
	\note This function is potentially slow. Consider caching 
	the (static) result instead of retrieving it multiple times.

</member>
<member name="M:physx.PxClothFabric.getSets(System.UInt32*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="216">
\brief Copies the set array to a user specified buffer.
\details The set array is the inclusive prefix sum of the number of constraints per set.
It has the same length as getNbSets().
\param [in] userSetBuffer Destination buffer to copy the set data to.
\param [in] bufferSize Size of userSetBuffer, should be at least getNbSets().
\return getNbSets() if the copy was successful, 0 otherwise.
\note Indices of the i-th set are stored at indices [i?2*set[i-1]:0, 2*set[i]) in the indices array.
\note This function is potentially slow. Consider caching 
the (static) result instead of retrieving it multiple times.

</member>
<member name="M:physx.PxClothFabric.getParticleIndices(System.UInt32*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="229">
\brief Copies the particle indices array to a user specified buffer.
\details The particle indices array determines which particles are affected by each constraint.
It has the same length as getNbParticleIndices() and twice the number of constraints.
\param [in] userParticleIndexBuffer Destination buffer to copy the set data to.
\param [in] bufferSize Size of userParticleIndexBuffer, should be at least getNbParticleIndices().
\return getNbParticleIndices() if the copy was successful, 0 otherwise.
\note This function is potentially slow. Consider caching 
the (static) result instead of retrieving it multiple times.

</member>
<member name="M:physx.PxClothFabric.getRestvalues(System.Single*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="241">
\brief Copies the rest values array to a user specified buffer.
\details The rest values array holds the target value of the constraint in rest state, 
for example edge length for stretch constraints.
It stores one value per constraint, so its length is half of getNbParticleIndices(), and 
it has the same length as getNbRestvalues(). The rest-values are stored in the order
they are (indirectly) referenced by the phases. 
\param [in] userRestvalueBuffer Destination buffer to copy the set data to.
\param [in] bufferSize Size of userRestvalueBuffer, should be at least getNbRestvalues().
\return getNbRestvalues() if the copy was successful, 0 otherwise.
\note This function is potentially slow. Between calling scaleRestlengths(), 
consider caching the result instead of retrieving it multiple times.

</member>
<member name="M:physx.PxClothFabric.getTetherAnchors(System.UInt32*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="256">
\brief Copies the tether anchors array to a user specified buffer.
\details The tether anchors array stores for each particle the index of 
another particle from which it cannot move further away than specified by the 
tether lengths array. 
\param [in] userAnchorBuffer Destination buffer to copy the set data to.
\param [in] bufferSize Size of userAnchorBuffer, should be at least getNbTethers().
\return getNbTethers() if the copy was successful, 0 otherwise.
\note This function is potentially slow, consider caching the 
result instead of retrieving the data multiple times.
\see getTetherLengths, getNbTethers

</member>
<member name="M:physx.PxClothFabric.getTetherLengths(System.Single*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="270">
\brief Copies the tether lengths array to a user specified buffer.
\details The tether lengths array stores for each particle how far it is 
allowed to move away from the particle specified by the tether anchor array. 
\param [in] userLengthBuffer Destination buffer to copy the set data to.
\param [in] bufferSize Size of userLengthBuffer, should be at least getNbTethers().
\return getNbTethers() if the copy was successful, 0 otherwise.
\note This function is potentially slow. Between calling scaleRestlengths(), 
consider caching the result instead of retrieving it multiple times.
\see getTetherAnchors, getNbTethers

</member>
<member name="M:physx.PxClothFabric.getPhaseType(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="283">
	\deprecated
	\brief Returns the type of a phase.
	\param [in] phaseIndex The index of the phase to return the type for.
	\return The phase type as PxClothFabricPhaseType::Enum.
    \note If phase index is invalid, PxClothFabricPhaseType::eINVALID is returned.

</member>
<member name="M:physx.PxClothFabric.scaleRestlengths(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="292">
\brief Scale all rest values of length dependent constraints.
\param[in] scale The scale factor to multiply each rest value with.

</member>
<member name="M:physx.PxClothFabric.getReferenceCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothfabric.h" line="298">
\brief Reference count of the cloth instance
\details At creation, the reference count of the fabric is 1. Every cloth instance referencing this fabric increments the
count by 1.	When the reference count reaches 0, and only then, the fabric gets released automatically.
\see PxCloth

</member>
<member name="F:eCONVEX_VERSION_PC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="57">
		Version numbers follow this format:

		Version = 16bit|16bit

		The high part is increased each time the format changes so much that
		pre-cooked files become incompatible with the system (and hence must
		be re-cooked)

		The low part is increased each time the format changes but the code
		can still read old files. You don't need to re-cook the data in that
		case, unless you want to make sure cooked files are optimal.

</member>
<member name="T:physx.PxPhysics" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="79">
\brief Abstract singleton factory class used for instancing objects in the Physics SDK.

In addition you can use PxPhysics to set global parameters which will effect all scenes and create 
objects that can be shared across multiple scenes.

You can get an instance of this class by calling PxCreateBasePhysics() or PxCreatePhysics() with pre-registered modules.

@see PxCreatePhysics() PxCreateBasePhysics() PxScene PxVisualizationParameter

</member>
<member name="M:physx.PxPhysics.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="93">
@name Basics

</member>
<member name="M:physx.PxPhysics.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="102">
	\brief Destroys the instance it is called on.

	Use this release method to destroy an instance of this class. Be sure
	to not keep a reference to this object after calling release.
	Avoid release calls while a scene is simulating (in between simulate() and fetchResults() calls).

	Note that this must be called once for each prior call to PxCreatePhysics, as
	there is a reference counter. Also note that you mustn't destroy the allocator or the error callback (if available) until after the
	reference count reaches 0 and the SDK is actually removed.

	Releasing an SDK will also release any scenes, triangle meshes, convex meshes, heightfields and shapes
	created through it, provided the user hasn't already done so.

	\note This function is required to be called to release foundation usage.

	@see PxCreatePhysics()

</member>
<member name="M:physx.PxPhysics.getFoundation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="122">
\brief Retrieves the Foundation instance.
\return A reference to the Foundation object.

</member>
<member name="M:physx.PxPhysics.getVisualDebugger" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="128">
\brief Retrieves the PhysX Visual Debugger.
\return A pointer to the PxVisualDebugger. Can be NULL if PVD is not supported on this platform.

</member>
<member name="M:physx.PxPhysics.getPvdConnectionManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="134">
		The factory manager allows notifications when a new
		connection to pvd is made.  It also allows the users to specify
		a scheme to handle the read-side of a network connection.  By default, 
		the SDK specifies that a thread gets launched which blocks reading
		on the network socket.
	
		\return A valid manager *if* the SDK was compiled with PVD support.  Null otherwise.

</member>
<member name="M:physx.PxPhysics.createAggregate(System.UInt32,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="154">
	\brief Creates an aggregate with the specified maximum size and selfCollision property.

	\param[in] maxSize the maximum number of actors that may be placed in the aggregate.  This value must not exceed 128, otherwise NULL will be returned.
	\param[in] enableSelfCollision whether the aggregate supports self-collision
	\return The new aggregate.

	@see PxAggregate

</member>
<member name="M:physx.PxPhysics.getTolerancesScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="165">
\brief Returns the simulation tolerance parameters.  
\return The current simulation tolerance parameters.  

</member>
<member name="M:physx.PxPhysics.createTriangleMesh(physx.PxInputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="173">
@name Meshes

	\brief Creates a triangle mesh object.

	This can then be instanced into #PxShape objects.

	\param[in] stream The triangle mesh stream.
	\return The new triangle mesh.

	@see PxTriangleMesh PxMeshPreprocessingFlag PxTriangleMesh.release() PxInputStream PxTriangleMeshFlag

</member>
<member name="M:physx.PxPhysics.getNbTriangleMeshes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="191">
	\brief Return the number of triangle meshes that currently exist.

	\return Number of triangle meshes.

	@see getTriangleMeshes()

</member>
<member name="M:physx.PxPhysics.getTriangleMeshes(physx.PxTriangleMesh**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="200">
	\brief Writes the array of triangle mesh pointers to a user buffer.
	
	Returns the number of pointers written.

	The ordering of the triangle meshes in the array is not specified.

	\param[out] userBuffer The buffer to receive triangle mesh pointers.
	\param[in] bufferSize The number of triangle mesh pointers which can be stored in the buffer.
	\param[in] startIndex Index of first mesh pointer to be retrieved
	\return The number of triangle mesh pointers written to userBuffer, this should be less or equal to bufferSize.

	@see getNbTriangleMeshes() PxTriangleMesh

</member>
<member name="M:physx.PxPhysics.createHeightField(physx.PxHeightFieldDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="216">
	\brief Creates a PxHeightField object.

	Deprecated please use PxCooking::createHeightField

	This can then be instanced into #PxShape objects.

	\param[in] heightFieldDesc The descriptor to load the object from.
	\return The new height field object.

	@see PxHeightField PxHeightField.release() PxHeightFieldDesc PxHeightFieldGeometry PxShape PxRegisterHeightFields PxRegisterUnifiedHeightFields

</member>
<member name="M:physx.PxPhysics.createHeightField(physx.PxInputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="230">
	\brief Creates a heightfield object from previously cooked stream.

	This can then be instanced into #PxShape objects.

	\param[in] stream The heightfield mesh stream.
	\return The new heightfield.

	@see PxHeightField PxHeightField.release() PxInputStream PxRegisterHeightFields PxRegisterUnifiedHeightFields

</member>
<member name="M:physx.PxPhysics.getNbHeightFields" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="242">
	\brief Return the number of heightfields that currently exist.

	\return Number of heightfields.

	@see getHeightFields()

</member>
<member name="M:physx.PxPhysics.getHeightFields(physx.PxHeightField**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="251">
	\brief Writes the array of heightfield pointers to a user buffer.
	
	Returns the number of pointers written.

	The ordering of the heightfields in the array is not specified.

	\param[out] userBuffer The buffer to receive heightfield pointers.
	\param[in] bufferSize The number of heightfield pointers which can be stored in the buffer.
	\param[in] startIndex Index of first heightfield pointer to be retrieved
	\return The number of heightfield pointers written to userBuffer, this should be less or equal to bufferSize.

	@see getNbHeightFields() PxHeightField

</member>
<member name="M:physx.PxPhysics.createConvexMesh(physx.PxInputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="267">
	\brief Creates a convex mesh object.

	This can then be instanced into #PxShape objects.

	\param[in] stream The stream to load the convex mesh from.
	\return The new convex mesh.

	@see PxConvexMesh PxConvexMesh.release() PxInputStream createTriangleMesh() PxConvexMeshGeometry PxShape

</member>
<member name="M:physx.PxPhysics.getNbConvexMeshes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="279">
	\brief Return the number of convex meshes that currently exist.

	\return Number of convex meshes.

	@see getConvexMeshes()

</member>
<member name="M:physx.PxPhysics.getConvexMeshes(physx.PxConvexMesh**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="288">
	\brief Writes the array of convex mesh pointers to a user buffer.
	
	Returns the number of pointers written.

	The ordering of the convex meshes in the array is not specified.

	\param[out] userBuffer The buffer to receive convex mesh pointers.
	\param[in] bufferSize The number of convex mesh pointers which can be stored in the buffer.
	\param[in] startIndex Index of first convex mesh pointer to be retrieved
	\return The number of convex mesh pointers written to userBuffer, this should be less or equal to bufferSize.

	@see getNbConvexMeshes() PxConvexMesh

</member>
<member name="M:physx.PxPhysics.createClothFabric(physx.PxInputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="306">
	\brief Creates a cloth fabric object.

	This can then be instanced into #PxCloth objects.

	\param[in] stream The stream to load the cloth fabric from.
	\return The new cloth fabric.

	@see PxClothFabric PxClothFabric.release() PxInputStream PxCloth PxRegisterCloth

</member>
<member name="M:physx.PxPhysics.createClothFabric(physx.PxClothFabricDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="318">
	\brief Creates a cloth fabric object from particle connectivity and restlength information.

	\note The particle connectivity can be created using #PxClothFabricCooker in extensions.

	This can then be instanced into #PxCloth objects.

	\param[in] desc Fabric descriptor, see #PxClothFabricDesc.
	\return The new cloth fabric.

	@see PxClothFabric PxClothFabric.release() PxCloth

</member>
<member name="M:physx.PxPhysics.getNbClothFabrics" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="332">
	\brief Return the number of cloth fabrics that currently exist.

	\return Number of cloth fabrics.

	@see getClothFabrics()

</member>
<member name="M:physx.PxPhysics.getClothFabrics(physx.PxClothFabric**,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="341">
	\brief Writes the array of cloth fabrics to a user buffer.
	
	Returns the number of pointers written.

	The ordering of the cloth fabrics in the array is not specified.

	\param[out] userBuffer The buffer to receive cloth fabric pointers.
	\param[in] bufferSize The number of cloth fabric pointers which can be stored in the buffer.
	\return The number of cloth fabric pointers written to userBuffer, this should be less or equal to bufferSize.

	@see getNbClothFabrics() PxClothFabric

</member>
<member name="M:physx.PxPhysics.createScene(physx.PxSceneDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="358">
@name Scenes

	\brief Creates a scene.

	\param[in] sceneDesc Scene descriptor. See #PxSceneDesc
	\return The new scene object.

	@see PxScene PxScene.release() PxSceneDesc

</member>
<member name="M:physx.PxPhysics.getNbScenes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="372">
	\brief Gets number of created scenes.

	\return The number of scenes created.

	@see getScene()

</member>
<member name="M:physx.PxPhysics.getScenes(physx.PxScene**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="381">
	\brief Writes the array of scene pointers to a user buffer.
	
	Returns the number of pointers written.

	The ordering of the scene pointers in the array is not specified.

	\param[out] userBuffer The buffer to receive scene pointers.
	\param[in] bufferSize The number of scene pointers which can be stored in the buffer.
	\param[in] startIndex Index of first scene pointer to be retrieved
	\return The number of scene pointers written to userBuffer, this should be less or equal to bufferSize.

	@see getNbScenes() PxScene

</member>
<member name="M:physx.PxPhysics.createRigidStatic(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="398">
@name Actors

	\brief Creates a static rigid actor with the specified pose and all other fields initialized
	to their default values.
	
	\param[in] pose the initial pose of the actor. Must be a valid transform

	@see PxRigidStatic

</member>
<member name="M:physx.PxPhysics.createRigidDynamic(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="415">
	\brief Creates a dynamic rigid actor with the specified pose and all other fields initialized
	to their default values.
	
	\param[in] pose the initial pose of the actor. Must be a valid transform

	@see PxRigidDynamic

</member>
<member name="M:physx.PxPhysics.createParticleSystem(System.UInt32,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="428">
	\brief Creates a particle system.

	\param maxParticles the maximum number of particles that may be placed in the particle system
	\param perParticleRestOffset whether the ParticleSystem supports perParticleRestOffset
	\return The new particle system.

	@see PxParticleSystem PxRegisterParticles

</member>
<member name="M:physx.PxPhysics.createParticleFluid(System.UInt32,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="439">
	\brief Creates a particle fluid. 
	
	\param maxParticles the maximum number of particles that may be placed in the particle fluid
	\param perParticleRestOffset whether the ParticleFluid supports perParticleRestOffset
	\return The new particle fluid.

	@see PxParticleFluid PxRegisterParticles

</member>
<member name="M:physx.PxPhysics.createCloth(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxClothFabric*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxClothParticle!System.Runtime.CompilerServices.IsConst*,physx.PxFlags&lt;physx.PxClothFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="453">
	\brief Creates a cloth.

	\param globalPose The world space transform of the cloth.
	\param fabric The fabric the cloth should use.
	\param particles Particle definition buffer. The size of the buffer has to match fabric.getNbParticles().
	\param flags Cloth flags.
	\return The new cloth.

	@see PxCloth PxClothFabric PxClothFlags PxRegisterCloth

</member>
<member name="M:physx.PxPhysics.createShape(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,physx.PxFlags&lt;physx.PxShapeFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="468">
@name Shapes

	\brief Creates a shape which may be attached to multiple actors
	
	The shape will be created with a reference count of 1.

	\param[in] geometry the geometry for the shape
	\param[in] material the material for the shape
	\param[in] isExclusive whether this shape is exclusive to a single actor or maybe be shared
	\param[in] shapeFlags the PxShapeFlags to be set

	Shared shapes are not mutable when they are attached to an actor

	@see PxShape

</member>
<member name="M:physx.PxPhysics.createShape(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial*!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.Boolean,physx.PxFlags&lt;physx.PxShapeFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="498">
	\brief Creates a shape which may be attached to multiple actors
	
	The shape will be created with a reference count of 1.

	\param[in] geometry the geometry for the shape
	\param[in] materials the materials for the shape
	\param[in] materialCount the number of materials
	\param[in] isExclusive whether this shape is exclusive to a single actor or may be shared
	\param[in] shapeFlags the PxShapeFlags to be set

	Shared shapes are not mutable when they are attached to an actor

	@see PxShape

</member>
<member name="M:physx.PxPhysics.getNbShapes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="521">
	\brief Return the number of shapes that currently exist.

	\return Number of shapes.

	@see getShapes()

</member>
<member name="M:physx.PxPhysics.getShapes(physx.PxShape**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="530">
	\brief Writes the array of shape pointers to a user buffer.
	
	Returns the number of pointers written.

	The ordering of the shapes in the array is not specified.

	\param[out] userBuffer The buffer to receive shape pointers.
	\param[in] bufferSize The number of shape pointers which can be stored in the buffer.
	\param[in] startIndex Index of first shape pointer to be retrieved
	\return The number of shape pointers written to userBuffer, this should be less or equal to bufferSize.

	@see getNbShapes() PxShape

</member>
<member name="M:physx.PxPhysics.createConstraint(physx.PxRigidActor*,physx.PxRigidActor*,physx.PxConstraintConnector*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxConstraintShaderTable!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="547">
@name Constraints and Articulations

	\brief Creates a constraint shader.

	\note A constraint shader will get added automatically to the scene the two linked actors belong to. Either, but not both, of actor0 and actor1 may
	be NULL to denote attachment to the world.
	
	\param[in] actor0 the first actor
	\param[in] actor1 the second actor
	\param[in] connector the connector object, which the SDK uses to communicate with the infrastructure for the constraint
	\param[in] shaders the shader functions for the constraint
	\param[in] dataSize the size of the data block for the shader

	\return The new shader.

	@see PxConstraint

</member>
<member name="M:physx.PxPhysics.createArticulation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="571">
	\brief Creates an articulation with all fields initialized to their default values.
	
	\return the new articulation

	@see PxArticulation, PxRegisterArticulations

</member>
<member name="M:physx.PxPhysics.createMaterial(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="581">
@name Materials

	\brief Creates a new material with default properties.

	\return The new material.

	\param staticFriction the coefficient of static friction
	\param dynamicFriction the coefficient of dynamic friction
	\param restitution the coefficient of restitution

	@see PxMaterial 

</member>
<member name="M:physx.PxPhysics.getNbMaterials" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="600">
	\brief Return the number of materials that currently exist.

	\return Number of materials.

	@see getMaterials()

</member>
<member name="M:physx.PxPhysics.getMaterials(physx.PxMaterial**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="609">
	\brief Writes the array of material pointers to a user buffer.
	
	Returns the number of pointers written.

	The ordering of the materials in the array is not specified.

	\param[out] userBuffer The buffer to receive material pointers.
	\param[in] bufferSize The number of material pointers which can be stored in the buffer.
	\param[in] startIndex Index of first material pointer to be retrieved
	\return The number of material pointers written to userBuffer, this should be less or equal to bufferSize.

	@see getNbMaterials() PxMaterial

</member>
<member name="M:physx.PxPhysics.registerDeletionListener(physx.PxDeletionListener*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxDeletionEventFlag.Enum,System.Byte&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="626">
@name Deletion Listeners

	\brief Register a deletion listener. Listeners will be called whenever an object is deleted.

	It is illegal to register or unregister a deletion listener while deletions are being processed.

	\note By default a registered listener will receive events from all objects. Set the restrictedObjectSet parameter to true on registration and use #registerDeletionListenerObjects to restrict the received events to specific objects.

	\note The deletion events are only supported on core PhysX objects. In general, objects in extension modules do not provide this functionality, however, in the case of PxJoint objects, the underlying PxConstraint will send the events.

	\param[in] observer Observer object to send notifications to.
	\param[in] deletionEvents The deletion event types to get notified of.
	\param[in] restrictedObjectSet If false, the deletion listener will get events from all objects, else the objects to receive events from have to be specified explicitly through #registerDeletionListenerObjects.

	@see PxDeletionListener unregisterDeletionListener

</member>
<member name="M:physx.PxPhysics.unregisterDeletionListener(physx.PxDeletionListener*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="647">
	\brief Unregister a deletion listener. 

	It is illegal to register or unregister a deletion listener while deletions are being processed.

	\param[in] observer Observer object to send notifications to

	@see PxDeletionListener registerDeletionListener

</member>
<member name="M:physx.PxPhysics.registerDeletionListenerObjects(physx.PxDeletionListener*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="658">
	\brief Register specific objects for deletion events.

	This method allows for a deletion listener to limit deletion events to specific objects only.

	\note It is illegal to register or unregister objects while deletions are being processed.

	\note The deletion listener has to be registered through #registerDeletionListener() and configured to support restricted objects sets prior to this method being used.

	\param[in] observer Observer object to send notifications to.
	\param[in] observables List of objects for which to receive deletion events. Only PhysX core objects are supported. In the case of PxJoint objects, the underlying PxConstraint can be used to get the events.
	\param[in] observableCount Size of the observables list.

	@see PxDeletionListener unregisterDeletionListenerObjects

</member>
<member name="M:physx.PxPhysics.unregisterDeletionListenerObjects(physx.PxDeletionListener*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="675">
	\brief Unregister specific objects for deletion events.

	This method allows to clear previously registered objects for a deletion listener (see #registerDeletionListenerObjects()).

	\note It is illegal to register or unregister objects while deletions are being processed.

	\note The deletion listener has to be registered through #registerDeletionListener() and configured to support restricted objects sets prior to this method being used.

	\param[in] observer Observer object to stop sending notifications to.
	\param[in] observables List of objects for which to not receive deletion events anymore.
	\param[in] observableCount Size of the observables list.

	@see PxDeletionListener registerDeletionListenerObjects

</member>
<member name="M:physx.PxPhysics.getPhysicsInsertionCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="692">
	\brief Gets PxPhysics object insertion interface. 

	The insertion interface is needed ie. for PxCooking::createTriangleMesh, this allows runtime mesh creation. This is not adviced to do, please 
	use offline cooking if possible.

	@see PxCooking::createTriangleMesh PxCooking::createHeightfield

</member>
<member name="M:PxGetValue(physx.PxCookingValue.Enum)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="709">
\brief Reads an internal value (cooking format version).

\param[in] cookValue See #PxCookingValue

</member>
<member name="M:PxRegisterArticulations(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="717">
\brief Enables the usage of the articulations feature.  This function is called automatically inside PxCreatePhysics().
On resource constrained platforms, it is possible to call PxCreateBasePhysics() and then NOT call this function 
to save on code memory if your application does not use articulations.  In this case the linker should strip out
the relevant implementation code from the library.  If you need to use articulations but not some other optional 
component, you shoud call PxCreateBasePhysics() followed by this call.

</member>
<member name="M:PxRegisterHeightFields(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="726">
\brief Enables the usage of the default heightfield feature.  This function is called automatically inside PxCreatePhysics().
On resource constrained platforms, it is possible to call PxCreateBasePhysics() and then NOT call this function
to save on code memory if your application does not use heightfields.  In this case the linker should strip out
the relevant implementation code from the library.  If you need to use heightfield but not some other optional
component, you shoud call PxCreateBasePhysics() followed by this call.

This call will link the default 'legacy' implementation of heightfields which uses a special purpose collison code 
path distinct from triangle meshes.

You must call this function at a time where no ::PxScene instance exists, typically before calling PxPhysics::createScene().
This is to prevent a change to the heightfield implementation code at runtime which would have undefined results.

Calling PxCreateBasePhysics() and then attempting to create a heightfield shape without first calling 
::PxRegisterHeightFields() or ::PxRegisterUnifiedHeightFields() will result in an error.

</member>
<member name="M:PxRegisterUnifiedHeightFields(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="744">
\brief Enables the usage of the unified heightfield feature.  

This call will enable the new implementation of heightfields which is identical to the narrow phase of triangle meshes.

You can call this after either PxCreatePhysics() or after PxCreateBasePhysics(), but you must call it at a time where 
no ::PxScene instance exists, typically before calling PxPhysics::createScene().  This is to prevent a change to the 
heightfield implementation code at runtime which would have undefined results.

Calling PxCreateBasePhysics() and then attempting to create a heightfield shape without first calling
::PxRegisterHeightFields() or ::PxRegisterUnifiedHeightFields() will result in an error.

</member>
<member name="M:PxRegisterCloth(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="759">
\brief Enables the usage of the cloth feature.  This function is called automatically inside PxCreatePhysics().
On resource constrained platforms, it is possible to call PxCreateBasePhysics() and then NOT call this function
to save on code memory if your application does not use cloth.  In this case the linker should strip out
the relevant implementation code from the library.  If you need to use cloth but not some other optional
component, you shoud call PxCreateBasePhysics() followed by this call.

</member>
<member name="M:PxRegisterParticles(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="768">
\brief Enables the usage of the particles feature.  This function is called automatically inside PxCreatePhysics().
On resource constrained platforms, it is possible to call PxCreateBasePhysics() and then NOT call this function
to save on code memory if your application does not use particles.  In this case the linker should strip out
the relevant implementation code from the library.  If you need to use particles but not some other optional
component, you shoud call PxCreateBasePhysics() followed by this call.

</member>
<member name="M:PxCreateBasePhysics(System.UInt32,physx.PxFoundation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTolerancesScale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,physx.PxProfileZoneManager*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="777">
\brief Creates an instance of the physics SDK with minimal additional components registered

Creates an instance of this class. May not be a class member to avoid name mangling.
Pass the constant PX_PHYSICS_VERSION as the argument.
There may be only one instance of this class per process. Calling this method after an instance 
has been created already will result in an error message and NULL will be returned.

\param version Version number we are expecting(should be PX_PHYSICS_VERSION)
\param foundation Foundation instance (see #PxFoundation)
\param scale values used to determine default tolerances for objects at creation time
\param trackOutstandingAllocations true if you want to track memory allocations 
			so a debugger connection partway through your physics simulation will get
			an accurate map of everything that has been allocated so far.  This could have a memory
			and performance impact on your simulation hence it defaults to off.
\param profileZoneManager If profiling information is required, a profile zone manager has to be provided.
\return PxPhysics instance on success, NULL if operation failed

@see PxPhysics, PxFoundation, PxTolerancesScale, PxProfileZoneManager

</member>
<member name="M:PxCreatePhysics(System.UInt32,physx.PxFoundation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTolerancesScale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,physx.PxProfileZoneManager*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="803">
\brief Creates an instance of the physics SDK.

Creates an instance of this class. May not be a class member to avoid name mangling.
Pass the constant PX_PHYSICS_VERSION as the argument.
There may be only one instance of this class per process. Calling this method after an instance 
has been created already will result in an error message and NULL will be returned.

Calling this will register all optional code modules (Articulations, HeightFields, Cloth 
and Particles), preparing them for use.  If you do not need some of these modules, consider
calling PxCreateBasePhysics() instead and registering needed modules manually.  If you would
like to use the unified heightfield collision code instead, it is permitted to follow this call
with a call to ::PxRegisterUnifiedHeightFields().

\param version Version number we are expecting(should be PX_PHYSICS_VERSION)
\param foundation Foundation instance (see #PxFoundation)
\param scale values used to determine default tolerances for objects at creation time
\param trackOutstandingAllocations true if you want to track memory allocations 
			so a debugger connection partway through your physics simulation will get
			an accurate map of everything that has been allocated so far.  This could have a memory
			and performance impact on your simulation hence it defaults to off.
\param profileZoneManager If profiling information is required, a profile zone manager has to be provided.
			Additionally, for profiling with the Physx Visual Debugger the PVD connection flag 
			PxVisualDebuggerConnectionFlag::ePROFILE needs to be set.
\return PxPhysics instance on success, NULL if operation failed

@see PxPhysics, PxCreateBasePhysics, PxRegisterArticulations, PxRegisterHeightFields, PxRegisterCloth, PxRegisterParticles 

</member>
<member name="M:PxGetPhysics" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="849">
\brief Retrieves the Physics SDK after it has been created.

Before using this function the user must call #PxCreatePhysics().

\note The behavior of this method is undefined if the Physics SDK instance has not been created already.

</member>
<member name="M:PxGetPhysicsBinaryMetaData(physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="859">
\brief Retrieves the PhysX SDK metadata.
This function is used to implement PxSerialization.dumpBinaryMetaData() and is not intended to be needed otherwise.
@see PxSerialization.dumpBinaryMetaData()

</member>
<member name="M:PxRegisterPhysicsSerializers(physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="866">
\brief Registers physics classes for serialization.
This function is used to implement PxSerialization.createSerializationRegistry() and is not intended to be needed otherwise.
@see PxSerializationRegistry

</member>
<member name="M:PxUnregisterPhysicsSerializers(physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="873">
\brief Unregisters physics classes for serialization.
This function is used in the release implementation of PxSerializationRegistry and in not intended to be used otherwise.
@see PxSerializationRegistry

</member>
<member name="M:PxAddCollectionToPhysics(physx.PxCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxphysics.h" line="881">
\brief Adds collected objects to PxPhysics.

This function adds all objects contained in the input collection to the PxPhysics instance. This is used after deserializing 
the collection, to populate the physics with inplace deserialized objects.
\param[in] collection Objects to add to the PxPhysics instance.

@see PxCollection

</member>
<member name="T:physx.PxRigidDynamic" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="27">
\brief PxRigidDynamic represents a dynamic rigid simulation object in the physics SDK.

<h3>Creation</h3>
Instances of this class are created by calling #PxPhysics::createRigidDynamic() and deleted with #release().


<h3>Visualizations</h3>
\li #PxVisualizationParameter::eACTOR_AXES
\li #PxVisualizationParameter::eBODY_AXES
\li #PxVisualizationParameter::eBODY_MASS_AXES
\li #PxVisualizationParameter::eBODY_LIN_VELOCITY
\li #PxVisualizationParameter::eBODY_ANG_VELOCITY
\li #PxVisualizationParameter::eBODY_JOINT_GROUPS

@see PxRigidBody  PxPhysics.createRigidDynamic()  release()

</member>
<member name="M:physx.PxRigidDynamic.setKinematicTarget(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="52">
@name Kinematic Actors

	\brief Moves kinematically controlled dynamic actors through the game world.

	You set a dynamic actor to be kinematic using the PxRigidBodyFlag::eKINEMATIC flag
	with setRigidBodyFlag().
	
	The move command will result in a velocity that will move the body into 
	the desired pose. After the move is carried out during a single time step, 
	the velocity is returned to zero. Thus, you must continuously call 
	this in every time step for kinematic actors so that they move along a path.
	
	This function simply stores the move destination until the next simulation
	step is processed, so consecutive calls will simply overwrite the stored target variable.

	The motion is always fully carried out.	

	\note It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.

	<b>Sleeping:</b> This call wakes the actor if it is sleeping and will set the wake counter to #PxSceneDesc::wakeCounterResetValue.

	\param[in] destination The desired pose for the kinematic actor, in the global frame. <b>Range:</b> rigid body transform.

	@see getKinematicTarget() PxRigidBodyFlag setRigidBodyFlag()

</member>
<member name="M:physx.PxRigidDynamic.getKinematicTarget(physx.PxTransform*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="81">
	\brief Get target pose of a kinematically controlled dynamic actor.

	\param[out] target Transform to write the target pose to. Only valid if the method returns true.
	\return True if the actor is a kinematically controlled dynamic and the target has been set, else False.

	@see setKinematicTarget() PxRigidBodyFlag setRigidBodyFlag()

</member>
<member name="M:physx.PxRigidDynamic.setLinearDamping(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="92">
@name Damping

	\brief Sets the linear damping coefficient.
	
	Zero represents no damping. The damping coefficient must be nonnegative.

	<b>Default:</b> 0.0
	
	\param[in] linDamp Linear damping coefficient. <b>Range:</b> [0, PX_MAX_F32)

	@see getLinearDamping() setAngularDamping()

</member>
<member name="M:physx.PxRigidDynamic.getLinearDamping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="108">
	\brief Retrieves the linear damping coefficient.

	\return The linear damping coefficient associated with this actor.

	@see setLinearDamping() getAngularDamping()

</member>
<member name="M:physx.PxRigidDynamic.setAngularDamping(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="117">
	\brief Sets the angular damping coefficient.
	
	Zero represents no damping.
	
	The angular damping coefficient must be nonnegative.

	<b>Default:</b> 0.05

	\param[in] angDamp Angular damping coefficient. <b>Range:</b> [0, PX_MAX_F32)

	@see getAngularDamping() setLinearDamping()

</member>
<member name="M:physx.PxRigidDynamic.getAngularDamping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="132">
	\brief Retrieves the angular damping coefficient.

	\return The angular damping coefficient associated with this actor.

	@see setAngularDamping() getLinearDamping()

</member>
<member name="M:physx.PxRigidDynamic.setMaxAngularVelocity(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="142">
@name Velocity

	\brief Lets you set the maximum angular velocity permitted for this actor.
	
	For various internal computations, very quickly rotating actors introduce error 
	into the simulation, which leads to undesired results.

	With this function, you can set the  maximum angular velocity permitted for this rigid body. 
	Higher angular velocities are clamped to this value. 

	Note: The angular velocity is clamped to the set value <i>before</i> the solver, which means that
	the limit may still be momentarily exceeded.

	<b>Default:</b> 7.0

	\param[in] maxAngVel Max allowable angular velocity for actor. <b>Range:</b> [0, PX_MAX_F32)

	@see getMaxAngularVelocity()

</member>
<member name="M:physx.PxRigidDynamic.getMaxAngularVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="165">
	\brief Retrieves the maximum angular velocity permitted for this actor.

	\return The maximum allowed angular velocity for this actor.

	@see setMaxAngularVelocity

</member>
<member name="M:physx.PxRigidDynamic.isSleeping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="175">
@name Sleeping

	\brief Returns true if this body is sleeping.

	When an actor does not move for a period of time, it is no longer simulated in order to save time. This state
	is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object,
	or one of its properties is changed by the user, the entire sleep mechanism should be transparent to the user.

	In general, a dynamic rigid actor is guaranteed to be awake if at least one of the following holds:

	\li The wake counter is positive (see #setWakeCounter()).
	\li The linear or angular velocity is non-zero.
	\li A non-zero force or torque has been applied.

	If a dynamic rigid actor is sleeping, the following state is guaranteed:

	\li The wake counter is zero.
	\li The linear and angular velocity is zero.
	\li There is no force update pending.

	When an actor gets inserted into a scene, it will be considered asleep if all the points above hold, else it will be treated as awake.
	
	If an actor is asleep after the call to PxScene::fetchResults() returns, it is guaranteed that the pose of the actor 
	was not changed. You can use this information to avoid updating the transforms of associated objects.

	\note A kinematic actor is asleep unless a target pose has been set (in which case it will stay awake until the end of the next 
	simulation step where no target pose has been set anymore). The wake counter will get set to zero or to the reset value 
	#PxSceneDesc::wakeCounterResetValue in the case where a target pose has been set to be consistent with the definitions above.

	\note It is invalid to use this method if the actor has not been added to a scene already.

	\return True if the actor is sleeping.

	@see isSleeping() wakeUp() putToSleep()  getSleepThreshold()

</member>
<member name="M:physx.PxRigidDynamic.setSleepThreshold(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="215">
	\brief Sets the mass-normalized kinetic energy threshold below which an actor may go to sleep.

	Actors whose kinetic energy divided by their mass is below this threshold will be candidates for sleeping.

	<b>Default:</b> 5e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed

	\param[in] threshold Energy below which an actor may go to sleep. <b>Range:</b> [0, PX_MAX_F32)

	@see isSleeping() getSleepThreshold() wakeUp() putToSleep() PxTolerancesScale

</member>
<member name="M:physx.PxRigidDynamic.getSleepThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="228">
	\brief Returns the mass-normalized kinetic energy below which an actor may go to sleep.

	\return The energy threshold for sleeping.

	@see isSleeping() wakeUp() putToSleep() setSleepThreshold()

</member>
<member name="M:physx.PxRigidDynamic.setStabilizationThreshold(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="237">
	\brief Sets the mass-normalized kinetic energy threshold below which an actor may participate in stabilization.

	Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.

	This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.

	<b>Default:</b> 1e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed

	\param[in] threshold Energy below which an actor may participate in stabilization. <b>Range:</b> (0,inf]

	@see  getStabilizationThreshold() PxSceneFlag::eENABLE_STABILIZATION

</member>
<member name="M:physx.PxRigidDynamic.getStabilizationThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="252">
	\brief Returns the mass-normalized kinetic energy below which an actor may participate in stabilization.

	Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization. 

	\return The energy threshold for participating in stabilization.

	@see setStabilizationThreshold() PxSceneFlag::eENABLE_STABILIZATION

</member>
<member name="M:physx.PxRigidDynamic.setWakeCounter(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="264">
	\brief Sets the wake counter for the actor.

	The wake counter value determines the minimum amount of time until the body can be put to sleep. Please note
	that a body will not be put to sleep if the energy is above the specified threshold (see #setSleepThreshold())
	or if other awake bodies are touching it.

	\note Passing in a positive value will wake the actor up automatically.

	\note It is invalid to use this method for kinematic actors since the wake counter for kinematics is defined
	based on whether a target pose has been set (see the comment in #isSleeping()).

	\note It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.

	<b>Default:</b> 0.4 (which corresponds to 20 frames for a time step of 0.02)

	\param[in] wakeCounterValue Wake counter value. <b>Range:</b> [0, PX_MAX_F32)

	@see isSleeping() getWakeCounter()

</member>
<member name="M:physx.PxRigidDynamic.getWakeCounter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="286">
	\brief Returns the wake counter of the actor.

	\return The wake counter of the actor.

	@see isSleeping() setWakeCounter()

</member>
<member name="M:physx.PxRigidDynamic.wakeUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="295">
	\brief Wakes up the actor if it is sleeping.

	The actor will get woken up and might cause other touching actors to wake up as well during the next simulation step.

	\note This will set the wake counter of the actor to the value specified in #PxSceneDesc::wakeCounterResetValue.

	\note It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.

	\note It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined
	based on whether a target pose has been set (see the comment in #isSleeping()).

	@see isSleeping() putToSleep()

</member>
<member name="M:physx.PxRigidDynamic.putToSleep" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="311">
	\brief Forces the actor to sleep. 
	
	The actor will stay asleep during the next simulation step if not touched by another non-sleeping actor.
	
	\note Any applied force will be cleared and the velocity and the wake counter of the actor will be set to 0.

	\note It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.

	\note It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined
	based on whether a target pose has been set (see the comment in #isSleeping()).

	@see isSleeping() wakeUp()

</member>
<member name="M:physx.PxRigidDynamic.setSolverIterationCounts(System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="329">
	\brief Sets the solver iteration counts for the body. 
	
	The solver iteration count determines how accurately joints and contacts are resolved. 
	If you are having trouble with jointed bodies oscillating and behaving erratically, then
	setting a higher position iteration count may improve their stability.

	If intersecting bodies are being depenetrated too violently, increase the number of velocity 
	iterations. More velocity iterations will drive the relative exit velocity of the intersecting 
	objects closer to the correct value given the restitution.

	<b>Default:</b> 4 position iterations, 1 velocity iteration

	\param[in] minPositionIters Number of position iterations the solver should perform for this body. <b>Range:</b> [1,255]
	\param[in] minVelocityIters Number of velocity iterations the solver should perform for this body. <b>Range:</b> [1,255]

	@see getSolverIterationCounts()

</member>
<member name="M:physx.PxRigidDynamic.getSolverIterationCounts(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="349">
	\brief Retrieves the solver iteration counts.

	@see setSolverIterationCounts()

</member>
<member name="M:physx.PxRigidDynamic.getContactReportThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="356">
	\brief Retrieves the force threshold for contact reports.

	The contact report threshold is a force threshold. If the force between 
	two actors exceeds this threshold for either of the two actors, a contact report 
	will be generated according to the contact report threshold flags provided by
	the filter shader/callback.
	See #PxPairFlag.

	The threshold used for a collision between a dynamic actor and the static environment is 
    the threshold of the dynamic actor, and all contacts with static actors are summed to find 
    the total normal force.

	<b>Default:</b> PX_MAX_F32

	\return Force threshold for contact reports.

	@see setContactReportThreshold PxPairFlag PxSimulationFilterShader PxSimulationFilterCallback

</member>
<member name="M:physx.PxRigidDynamic.setContactReportThreshold(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigiddynamic.h" line="377">
	\brief Sets the force threshold for contact reports.

	See #getContactReportThreshold().

	\param[in] threshold Force threshold for contact reports. <b>Range:</b> [0, PX_MAX_F32)

	@see getContactReportThreshold PxPairFlag

</member>
<member name="T:physx.PxRigidStatic" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxrigidstatic.h" line="28">
\brief PxRigidStatic represents a static rigid body simulation object in the physics SDK.

PxRigidStatic objects are static rigid physics entities. They shall be used to define solid objects which are fixed in the world.

<h3>Creation</h3>
Instances of this class are created by calling #PxPhysics::createRigidStatic() and deleted with #release().

<h3>Visualizations</h3>
\li #PxVisualizationParameter::eACTOR_AXES

@see PxRigidActor  PxPhysics.createRigidStatic()  release()

</member>
<member name="T:physx.PxVisualizationParameter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="35">
\brief Debug visualization parameters.

#PxVisualizationParameter::eSCALE is the master switch for enabling visualization, please read the corresponding documentation
for further details.

@see PxScene.setVisualizationParameter() PxScene.getVisualizationParameter() PxScene.getRenderBuffer()

</member>
<!-- Discarding badly formed XML document comment for member 'F:eSCALE'. -->
<member name="F:eWORLD_AXES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="77">
\brief Visualize the world axes.

</member>
<member name="F:eBODY_AXES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="84">
		\brief Visualize a bodies axes.

		@see PxActor.globalPose PxActor

</member>
<member name="F:eBODY_MASS_AXES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="91">
		\brief Visualize a body's mass axes.

		This visualization is also useful for visualizing the sleep state of bodies. Sleeping bodies are drawn in
		black, while awake bodies are drawn in white. If the body is sleeping and part of a sleeping group, it is
		drawn in red.

		@see PxBodyDesc.massLocalPose PxActor

</member>
<member name="F:eBODY_LIN_VELOCITY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="102">
		\brief Visualize the bodies linear velocity.

		@see PxBodyDesc.linearVelocity PxActor

</member>
<member name="F:eBODY_ANG_VELOCITY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="109">
		\brief Visualize the bodies angular velocity.

		@see PxBodyDesc.angularVelocity PxActor

</member>
<member name="F:eBODY_JOINT_GROUPS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="117">
		\brief Visualize the bodies joint projection group.

		@see PxBodyDesc.angularVelocity PxActor

</member>
<member name="F:eCONTACT_POINT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="126">
\brief  Visualize contact points. Will enable contact information.

</member>
<member name="F:eCONTACT_NORMAL" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="131">
\brief Visualize contact normals. Will enable contact information.

</member>
<member name="F:eCONTACT_ERROR" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="136">
\brief  Visualize contact errors. Will enable contact information.

</member>
<member name="F:eCONTACT_FORCE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="141">
\brief Visualize Contact forces. Will enable contact information.

</member>
<member name="F:eACTOR_AXES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="147">
		\brief Visualize actor axes.

		@see PxRigidStatic PxRigidDynamic PxArticulationLink

</member>
<member name="F:eCOLLISION_AABBS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="155">
\brief Visualize bounds (AABBs in world space)

</member>
<member name="F:eCOLLISION_SHAPES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="160">
		\brief Shape visualization

		@see PxShape

</member>
<member name="F:eCOLLISION_AXES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="167">
		\brief Shape axis visualization

		@see PxShape

</member>
<member name="F:eCOLLISION_COMPOUNDS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="174">
\brief Compound visualization (compound AABBs in world space)

</member>
<!-- Discarding badly formed XML document comment for member 'F:eCOLLISION_FNORMALS'. -->
<member name="F:eCOLLISION_EDGES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="186">
		\brief Active edges for meshes

		@see PxTriangleMesh

</member>
<member name="F:eCOLLISION_STATIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="193">
\brief Static pruning structures

</member>
<member name="F:eCOLLISION_DYNAMIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="198">
\brief Dynamic pruning structures

</member>
<member name="F:eCOLLISION_PAIRS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="203">
		\brief Visualizes pairwise state.


</member>
<member name="F:eJOINT_LOCAL_FRAMES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="209">
\brief Joint local axes

</member>
<member name="F:eJOINT_LIMITS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="214">
\brief Joint limits

</member>
<member name="F:ePARTICLE_SYSTEM_POSITION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="222">
\brief Particle position visualization.

</member>
<member name="F:ePARTICLE_SYSTEM_VELOCITY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="227">
\brief Particle velocity visualization.

</member>
<member name="F:ePARTICLE_SYSTEM_COLLISION_NORMAL" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="232">
\brief Particle collision normal visualization.

</member>
<member name="F:ePARTICLE_SYSTEM_BOUNDS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="237">
\brief ParticleSystem AABB visualization.

</member>
<member name="F:ePARTICLE_SYSTEM_GRID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="242">
\brief Particle grid visualization.

</member>
<member name="F:ePARTICLE_SYSTEM_BROADPHASE_BOUNDS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="247">
\brief Particle system broad phase bounds.

</member>
<member name="F:ePARTICLE_SYSTEM_MAX_MOTION_DISTANCE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="252">
\brief ParticleSystem maximum motion distance visualization.

</member>
<member name="F:eCULL_BOX" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="259">
\brief Debug visualization culling

</member>
<member name="F:eCLOTH_VERTICAL" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="264">
\brief Cloth fabric vertical sets

</member>
<member name="F:eCLOTH_HORIZONTAL" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="268">
\brief Cloth fabric horizontal sets

</member>
<member name="F:eCLOTH_BENDING" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="272">
\brief Cloth fabric bending sets

</member>
<member name="F:eCLOTH_SHEARING" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="276">
\brief Cloth fabric shearing sets

</member>
<member name="F:eCLOTH_VIRTUAL_PARTICLES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="280">
\brief Cloth virtual particles

</member>
<member name="F:eMBP_REGIONS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="285">
\brief MBP regions

</member>
<member name="F:eNUM_VALUES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvisualizationparameter.h" line="290">
\brief This is not a parameter, it just records the current number of parameters (as maximum(PxVisualizationParameter)+1) for use in loops.

</member>
<member name="T:physx.PxBroadPhaseType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbroadphase.h" line="30">
	\brief Broad phase algorithm used in the simulation

	eSAP is a good generic choice with great performance when many objects are sleeping. Performance
	can degrade significantly though, when all objects are moving, or when large numbers of objects
	are added to or removed from the broad phase. This algorithm does not need world bounds to be
	defined in order to work.

	eMBP is an alternative broad phase algorithm that does not suffer from the same performance
	issues as eSAP when all objects are moving or when inserting large numbers of objects. However
	its generic performance when many objects are sleeping might be inferior to eSAP, and it requires
	users to define world bounds in order to work.

</member>
<member name="T:physx.PxBroadPhaseCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbroadphase.h" line="54">
	\brief Broad-phase callback to receive broad-phase related events.

	Each broadphase callback object is associated with a PxClientID. It is possible to register different
	callbacks for different clients. The callback functions are called this way:
	- for shapes/actors, the callback assigned to the actors' clients are used
	- for aggregates, the callbacks assigned to clients from aggregated actors  are used

	\note SDK state should not be modified from within the callbacks. In particular objects should not
	be created or destroyed. If state modification is needed then the changes should be stored to a buffer
	and performed after the simulation step.

	<b>Threading:</b> It is not necessary to make this class thread safe as it will only be called in the context of the
	user thread.

	@see PxSceneDesc PxScene.setBroadPhaseCallback() PxScene.getBroadPhaseCallback()

</member>
<member name="M:physx.PxBroadPhaseCallback.onObjectOutOfBounds(physx.PxShape*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbroadphase.h" line="76">
		\brief Out-of-bounds notification.
		
		This function is called when an object leaves the broad-phase.

		\param[in] shape	Shape that left the broad-phase bounds
		\param[in] actor	Owner actor

</member>
<member name="M:physx.PxBroadPhaseCallback.onObjectOutOfBounds(physx.PxAggregate*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbroadphase.h" line="86">
		\brief Out-of-bounds notification.
		
		This function is called when an aggregate leaves the broad-phase.

		\param[in] aggregate	Aggregate that left the broad-phase bounds

</member>
<member name="T:physx.PxBroadPhaseRegion" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbroadphase.h" line="96">
	\brief "Region of interest" for the broad-phase.

	This is currently only used for the PxBroadPhaseType::eMBP broad-phase, which requires zones or regions to be defined
	when the simulation starts in order to work. Regions can overlap and be added or removed at runtime, but at least one
	region needs to be defined when the scene is created.

	If objects that do no overlap any region are inserted into the scene, they will not be added to the broad-phase and
	thus collisions will be disabled for them. A PxBroadPhaseCallback out-of-bounds notification will be sent for each one
	of those objects.

	The total number of regions is limited by PxBroadPhaseCaps::maxNbRegions.

	The number of regions has a direct impact on performance and memory usage, so it is recommended to experiment with
	various settings to find the best combination for your game. A good default setup is to start with global bounds
	around the whole world, and subdivide these bounds into 4*4 regions. The PxBroadPhaseExt::createRegionsFromWorldBounds
	function can do that for you.

	@see PxBroadPhaseCallback PxBroadPhaseExt.createRegionsFromWorldBounds

</member>
<!-- Discarding badly formed XML document comment for member 'T:physx.PxBroadPhaseRegionInfo'. -->
<member name="T:physx.PxBroadPhaseCaps" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxbroadphase.h" line="134">
\brief Caps class for broad phase.

</member>
<member name="T:physx.PxPruningStructure" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="36">
\brief Pruning structure used to accelerate scene queries.

eNONE uses a simple data structure that consumes less memory than the alternatives,
but generally has slower query performance.

eDYNAMIC_AABB_TREE usually provides the fastest queries. However there is a
constant per-frame management cost associated with this structure. How much work should
be done per frame can be tuned via the #PxSceneDesc::dynamicTreeRebuildRateHint
parameter.

eSTATIC_AABB_TREE is typically used for static objects. It is the same as the
dynamic AABB tree, without the per-frame overhead. This can be a good choice for static
objects, if no static objects are added, moved or removed after the scene has been
created. If there is no such guarantee (e.g. when streaming parts of the world in and out),
then the dynamic version is a better choice even for static objects.

</member>
<member name="T:physx.PxSimulationOrder" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="66">
\brief The order in which collide and solve are run in a normal simulation time-step

eCOLLIDE_SOLVE Indicates that collide is performed before solve
eSOLVE_COLLIDE Indicates that solve is performed before collide <b>(This feature is currently disabled)</b>


</member>
<member name="T:physx.PxFrictionType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="85">
\brief Enum for selecting the friction algorithm used for simulation.

#PxFrictionType::ePATCH selects the patch friction model which typically leads to the most stable results at low solver iteration counts and is also quite inexpensive, as it uses only
up to four scalar solver constraints per pair of touching objects.  The patch friction model is the same basic strong friction algorithm as PhysX 3.2 and before.  

#PxFrictionType::eONE_DIRECTIONAL is a simplification of the Coulomb friction model, in which the friction for a given point of contact is applied in the alternating tangent directions of
the contact's normal.  This simplification allows us to reduce the number of iterations required for convergence but is not as accurate as the two directional model.

#PxFrictionType::eTWO_DIRECTIONAL is identical to the one directional model, but it applies friction in both tangent directions simultaneously.  This hurts convergence a bit so it 
requires more solver iterations, but is more accurate.  Like the one directional model, it is applied at every contact point, which makes it potentially more expensive
than patch friction for scenarios with many contact points.

</member>
<member name="T:physx.PxSceneFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="108">
\brief flags for configuring properties of the scene

@see PxScene

</member>
<member name="F:eENABLE_ACTIVETRANSFORMS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="118">
		\brief Enable Active Transform Notification.

		This flag enables the the Active Transform Notification feature for a scene.  This
		feature defaults to disabled.  When disabled, the function
		PxScene::getActiveTransforms() will always return a NULL list.

		\note There may be a performance penalty for enabling the Active Transform Notification, hence this flag should
		only be enabled if the application intends to use the feature.

		<b>Default:</b> False

</member>
<member name="F:eENABLE_CCD" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="132">
		\brief Enables a second broad phase check after integration that makes it possible to prevent objects from tunneling through eachother.

		PxPairFlag::eDETECT_CCD_CONTACT requires this flag to be specified.

		\note For this feature to be effective for bodies that can move at a significant velocity, the user should raise the flag PxRigidBodyFlag::eENABLE_CCD for them.
		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.

		<b>Default:</b> False

		@see PxRigidBodyFlag::eENABLE_CCD, PxPairFlag::eDETECT_CCD_CONTACT, eDISABLE_CCD_RESWEEP

</member>
<member name="F:eDISABLE_CCD_RESWEEP" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="146">
		\brief Enables a simplified swept integration strategy, which sacrifices some accuracy for improved performance.

		This simplified swept integration approach makes certain assumptions about the motion of objects that are not made when using a full swept integration. 
		These assumptions usually hold but there are cases where they could result in incorrect behavior between a set of fast-moving rigid bodies. A key issue is that
		fast-moving dynamic objects may tunnel through each-other after a rebound. This will not happen if this mode is disabled. However, this approach will be potentially 
		faster than a full swept integration because it will perform significantly fewer sweeps in non-trivial scenes involving many fast-moving objects. This approach 
		should successfully resist objects passing through the static environment.

		PxPairFlag::eDETECT_CCD_CONTACT requires this flag to be specified.

		\note This scene flag requires eENABLE_CCD to be enabled as well. If it is not, this scene flag will do nothing.
		\note For this feature to be effective for bodies that can move at a significant velocity, the user should raise the flag PxRigidBodyFlag::eENABLE_CCD for them.
		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.

		<b>Default:</b> False

		@see PxRigidBodyFlag::eENABLE_CCD, PxPairFlag::eDETECT_CCD_CONTACT, eENABLE_CCD

</member>
<member name="F:eADAPTIVE_FORCE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="168">
		\brief Enable adaptive forces to accelerate convergence of the solver. 
		
		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.

		<b>Default:</b> false

</member>
<member name="F:eENABLE_KINEMATIC_STATIC_PAIRS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="178">
		\brief Enable contact pair filtering between kinematic and static rigid bodies.
		
		By default contacts between kinematic and static rigid bodies are suppressed (see #PxFilterFlag::eSUPPRESS) and don't get reported to the filter mechanism.
		Raise this flag if these pairs should go through the filtering pipeline nonetheless.

		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.

		<b>Default:</b> false

</member>
<member name="F:eENABLE_KINEMATIC_PAIRS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="191">
		\brief Enable contact pair filtering between kinematic rigid bodies.
		
		By default contacts between kinematic bodies are suppressed (see #PxFilterFlag::eSUPPRESS) and don't get reported to the filter mechanism.
		Raise this flag if these pairs should go through the filtering pipeline nonetheless.

		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.

		<b>Default:</b> false

</member>
<member name="F:eENABLE_PCM" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="204">
		\brief Enable GJK-based distance collision detection system.
		
		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.

		<b>Default:</b> false

</member>
<member name="F:eDISABLE_CONTACT_REPORT_BUFFER_RESIZE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="213">
		\brief Disable contact report buffer resize. Once the contact buffer is full, the rest of the contact reports will 
		not be buffered and sent.

		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.
		
		<b>Default:</b> false

</member>
<member name="F:eDISABLE_CONTACT_CACHE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="223">
		\brief Disable contact cache.
		
		Contact caches are used internally to provide faster contact generation. You can disable all contact caches
		if memory usage for this feature becomes too high.

		<b>Default:</b> false

</member>
<member name="F:eREQUIRE_RW_LOCK" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="234">
		\brief Require scene-level locking

		When set to true this requires that threads accessing the PxScene use the
		multi-threaded lock methods.
		
		\note This flag is not mutable, and must be set in PxSceneDesc at scene creation.

		@see PxScene::lockRead
		@see PxScene::unlockRead
		@see PxScene::lockWrite
		@see PxScene::unlockWrite
		
		<b>Default:</b> false

</member>
<member name="F:eENABLE_STABILIZATION" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="251">
		\brief Enables additional stabilization pass in solver

		When set to true, this enables additional stabilization processing to improve that stability of complex interactions between large numbers of bodies.

		Note that this flag is not mutable and must be set in PxSceneDesc at scene creation. Also, this is an experimental feature which does result in some loss of momentum.

</member>
<member name="F:eENABLE_AVERAGE_POINT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="260">
		\brief Enables average points in contact manifolds

		When set to true, this enables additional contacts to be generated per manifold to represent the average point in a manifold. This can stabilize stacking when only a small
		number of solver iterations is used.

		Note that this flag is not mutable and must be set in PxSceneDesc at scene creation.

</member>
<member name="D:physx.PxSceneFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="273">
\brief collection of set bits defined in PxSceneFlag.

@see PxSceneFlag

</member>
<member name="T:physx.PxSceneLimits" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="287">
\brief Class used to retrieve limits(e.g. maximum number of bodies) for a scene. The limits
are used as a hint to the size of the scene, not as a hard limit (i.e. it will be possible
to create more objects than specified in the scene limits).

0 indicates no limit.

</member>
<member name="M:physx.PxSceneLimits.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="306">
\brief constructor sets to default 

</member>
<member name="M:physx.PxSceneLimits.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="311">
\brief (re)sets the structure to the default

</member>
<member name="M:physx.PxSceneLimits.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="316">
\brief Returns true if the descriptor is valid.
\return true if the current settings are valid.

</member>
<member name="T:physx.PxSceneDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="348">
\brief Descriptor class for scenes. See #PxScene.

This struct must be initialized with the same PxTolerancesScale values used to initialize PxPhysics.

@see PxScene PxPhysics.createScene PxTolerancesScale

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.gravity'. -->
<member name="F:physx.PxSceneDesc.simulationEventCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="371">
	\brief Possible notification callback.

	This callback will be associated with the client PX_DEFAULT_CLIENT.
	Please use PxScene::setSimulationEventCallback() to register callbacks for other clients.

	<b>Default:</b> NULL

	@see PxSimulationEventCallback PxScene.setSimulationEventCallback() PxScene.getSimulationEventCallback()

</member>
<member name="F:physx.PxSceneDesc.contactModifyCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="383">
	\brief Possible asynchronous callback for contact modification.

	<b>Default:</b> NULL

	@see PxContactModifyCallback PxScene.setContactModifyCallback() PxScene.getContactModifyCallback()

</member>
<member name="F:physx.PxSceneDesc.ccdContactModifyCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="392">
	\brief Possible asynchronous callback for contact modification.

	<b>Default:</b> NULL

	@see PxContactModifyCallback PxScene.setContactModifyCallback() PxScene.getContactModifyCallback()

</member>
<member name="F:physx.PxSceneDesc.filterShaderData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="401">
	\brief Shared global filter data which will get passed into the filter shader.

	\note The provided data will get copied to internal buffers and this copy will be used for filtering calls.

	<b>Default:</b> NULL

	@see PxSimulationFilterShader

</member>
<member name="F:physx.PxSceneDesc.filterShaderDataSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="412">
	\brief Size (in bytes) of the shared global filter data #filterShaderData.

	<b>Default:</b> 0

	@see PxSimulationFilterShader filterShaderData

</member>
<member name="F:physx.PxSceneDesc.filterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="421">
	\brief The custom filter shader to use for collision filtering.

	\note This parameter is compulsory. If you don't want to define your own filter shader you can
	use the default shader #PxDefaultSimulationFilterShader which can be found in the PhysX extensions 
	library.

	@see PxSimulationFilterShader

</member>
<member name="F:physx.PxSceneDesc.filterCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="432">
	\brief A custom collision filter callback which can be used to implement more complex filtering operations which need
	access to the simulation state, for example.

	<b>Default:</b> NULL

	@see PxSimulationFilterCallback

</member>
<member name="F:physx.PxSceneDesc.broadPhaseType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="442">
	\brief Selects the broad-phase algorithm to use.

	<b>Default:</b> PxBroadPhaseType::eSAP

	@see PxBroadPhaseType

</member>
<member name="F:physx.PxSceneDesc.broadPhaseCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="451">
	\brief Broad-phase callback

	This callback will be associated with the client PX_DEFAULT_CLIENT.
	Please use PxScene::setBroadPhaseCallback() to register callbacks for other clients.

	<b>Default:</b> NULL

	@see PxBroadPhaseCallback

</member>
<member name="F:physx.PxSceneDesc.limits" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="463">
	\brief Expected scene limits.

	@see PxSceneLimits

</member>
<member name="F:physx.PxSceneDesc.meshContactMargin" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="470">
	\deprecated
	\brief A small margin value used for mesh collision detection.
	(convex/box vs height field or convex/box vs triangle mesh)

	\note If interested in distance-based collision, please see
	the PxSceneFlag::eENABLE_PCM to enable the GJK/EPA path.

	\note Will be removed in future releases.

	@see PxTolerancesScale
	<b>Default:</b> 0.01 * PxTolerancesScale::length

</member>
<member name="F:physx.PxSceneDesc.frictionType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="486">
	\brief Selects the friction algorithm to use for simulation.

	\note frictionType cannot be modified after the first call to any of PxScene::simulate, PxScene::solve and PxScene::collide

	@see PxFrictionType
	<b>Default:</b> PxFrictionType::ePATCH

	@see PxScene::setFrictionType, PxScene::getFrictionType

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.contactCorrelationDistance'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.bounceThresholdVelocity'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.frictionOffsetThreshold'. -->
<member name="F:physx.PxSceneDesc.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="540">
	\brief Flags used to select scene options.

	@see PxSceneFlag PxSceneFlags

</member>
<member name="F:physx.PxSceneDesc.cpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="547">
	\brief The CPU task dispatcher for the scene.

	See PxCpuDispatcher, PxScene::getCpuDispatcher

</member>
<member name="F:physx.PxSceneDesc.gpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="554">
	\brief The GPU task dispatcher for the scene.

	<b>Platform specific:</b> Applies to PC GPU only.

	See PxGpuDispatcher, PxScene::getGpuDispatcher

</member>
<member name="F:physx.PxSceneDesc.spuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="563">
	\brief The SPU task dispatcher for the scene.

	<b>Platform specific:</b> Applies to PS3 only.

	See PxSpuDispatcher, PxScene::getSpuDispatcher

</member>
<member name="F:physx.PxSceneDesc.staticStructure" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="572">
	\brief Defines the structure used to store static objects.

	\note Only PxPruningStructure::eSTATIC_AABB_TREE and PxPruningStructure::eDYNAMIC_AABB_TREE are allowed here.

</member>
<member name="F:physx.PxSceneDesc.dynamicStructure" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="579">
\brief Defines the structure used to store dynamic objects.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.dynamicTreeRebuildRateHint'. -->
<member name="F:physx.PxSceneDesc.userData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="603">
	\brief Will be copied to PxScene::userData.

	<b>Default:</b> NULL

</member>
<member name="F:physx.PxSceneDesc.solverBatchSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="610">
	\brief Defines the number of actors required to spawn a separate rigid body solver island task chain.

	This parameter defines the minimum number of actors required to spawn a separate rigid body solver task chain. Setting a low value 
	will potentially cause more task chains to be generated. This may result in the overhead of spawning tasks can become a limiting performance factor. 
	Setting a high value will potentially cause fewer islands to be generated. This may reduce thread scaling (fewer task chains spawned) and may 
	detrimentally affect performance if some bodies in the scene have large solver iteration counts because all constraints in a given island are solved by the 
	maximum number of solver iterations requested by any body in the island.

	<b>Default:</b> 32

	<b>Platform specific:</b> Not applicable on PS3. All bodies are batched into one island.

	@see PxScene.setSolverBatchSize() PxScene.getSolverBatchSize()

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.nbContactDataBlocks'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.maxNbContactDataBlocks'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.contactReportStreamBufferSize'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.ccdMaxPasses'. -->
<member name="F:physx.PxSceneDesc.simulationOrder" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="690">
	\brief The simulation order 
	PhysX supports 2 simulation update approaches. The default model - eCOLLIDE_SOLVE - performs collision detection before solver. The alternative model, 
	eSOLVE_COLLIDE <b>(This feature is currently disabled)</b>, performs solve before collision. This has the performance benefit of allowing the game to defer collision detection for the subsequent frame
	so that it can overlap with things like game logic, rendering etc. However, it has the disadvantage that it requires insertions, removals and teleports to be deferred
	between dispatching collision detection and solve, which can potentially cause 1 frame's delay in these operations.

	<b>Default:</b> eCOLLIDE_SOLVE

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.wakeCounterResetValue'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxSceneDesc.sanityBounds'. -->
<member name="F:physx.PxSceneDesc.tolerancesScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="726">
\cond

</member>
<member name="M:physx.PxSceneDesc.#ctor(physx.PxTolerancesScale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="731">
\endcond

	\brief constructor sets to default.

	\param[in] scale scale values for the tolerances in the scene, these must be the same values passed into
	PxCreatePhysics(). The affected tolerances are meshContactMargin, contactCorrelationDistance, bounceThresholdVelocity
	and frictionOffsetThreshold.

	@see PxCreatePhysics() PxTolerancesScale meshContactMargin contactCorrelationDistance bounceThresholdVelocity frictionOffsetThreshold

</member>
<member name="M:physx.PxSceneDesc.setToDefault(physx.PxTolerancesScale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="748">
	\brief (re)sets the structure to the default.

	\param[in] scale scale values for the tolerances in the scene, these must be the same values passed into
	PxCreatePhysics(). The affected tolerances are meshContactMargin, contactCorrelationDistance, bounceThresholdVelocity
	and frictionOffsetThreshold.

	@see PxCreatePhysics() PxTolerancesScale meshContactMargin contactCorrelationDistance bounceThresholdVelocity frictionOffsetThreshold

</member>
<member name="M:physx.PxSceneDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="759">
\brief Returns true if the descriptor is valid.
\return true if the current settings are valid.

</member>
<member name="M:physx.PxSceneDesc.getTolerancesScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenedesc.h" line="765">
\cond

</member>
<member name="T:physx.PxSimulationStatistics" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="28">
\brief Class used to retrieve statistics for a simulation step.

@see PxScene::getSimulationStatistics()

</member>
<member name="T:physx.PxSimulationStatistics.VolumeType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="36">
\brief Identifies each type of broadphase volume.
@see nbBroadPhaseAdds nbBroadPhaseRemoves

</member>
<member name="F:eRIGID_BODY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="42">
\brief A volume belonging to a rigid body object
@see PxRigidStatic PxRigidDynamic PxArticulationLink

</member>
<member name="F:ePARTICLE_SYSTEM" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="48">
\brief A volume belonging to a particle system
@see PxParticleSystem PxParticleFluid

</member>
<member name="F:eCLOTH" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="54">
\brief A volume belonging to a cloth
@see PxCloth

</member>
<member name="T:physx.PxSimulationStatistics.RbPairStatsType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="63">
\brief Different types of rigid body collision pair statistics.
@see getRbPairStats

</member>
<member name="F:eDISCRETE_CONTACT_PAIRS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="69">
\brief Shape pairs processed as discrete contact pairs for the current simulation step.

</member>
<member name="F:eCCD_PAIRS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="74">
		\brief Shape pairs processed as swept integration pairs for the current simulation step.

		\note Counts the pairs for which special CCD (continuous collision detection) work was actually done and NOT the number of pairs which were configured for CCD. 
		Furthermore, there can be multiple CCD passes and all processed pairs of all passes are summed up, hence the number can be larger than the amount of pairs which have been configured for CCD.

		@see PxPairFlag::eDETECT_CCD_CONTACT,

</member>
<member name="F:eMODIFIED_CONTACT_PAIRS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="84">
		\brief Shape pairs processed with user contact modification enabled for the current simulation step.

		@see PxContactModifyCallback

</member>
<member name="F:eTRIGGER_PAIRS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="91">
		\brief Trigger shape pairs processed for the current simulation step.

		@see PxShapeFlag::eTRIGGER_SHAPE

</member>
<member name="F:physx.PxSimulationStatistics.nbActiveConstraints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="101">
\brief Number of active PxConstraint objects (joints etc.) for the current simulation step.

</member>
<member name="F:physx.PxSimulationStatistics.nbActiveDynamicBodies" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="106">
	\brief Number of active dynamic bodies for the current simulation step.

	\note Does not include active kinematic bodies

</member>
<member name="F:physx.PxSimulationStatistics.nbActiveKinematicBodies" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="113">
\brief Number of active kinematic bodies for the current simulation step.

\note Kinematic deactivation occurs at the end of the frame after the last call to PxRigidDynamic::setKinematicTarget() was called so kinematics that are
deactivated in a given frame will be included by this counter.

</member>
<member name="F:physx.PxSimulationStatistics.nbStaticBodies" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="121">
\brief Number of static bodies for the current simulation step.

</member>
<member name="F:physx.PxSimulationStatistics.nbDynamicBodies" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="126">
	\brief Number of dynamic bodies for the current simulation step.

	\note Includes inactive and kinematic bodies, and articulation links

</member>
<member name="F:physx.PxSimulationStatistics.nbShapes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="133">
\brief Number of shapes of each geometry type.

</member>
<member name="F:physx.PxSimulationStatistics.nbAxisSolverConstraints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="140">
\brief The number of 1D axis constraints(joints+contact) present in the current simulation step.

</member>
<member name="F:physx.PxSimulationStatistics.compressedContactSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="145">
\brief The size (in bytes) of the compressed contact stream in the current simulation step

</member>
<member name="F:physx.PxSimulationStatistics.requiredContactConstraintMemory" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="150">
\brief The total required size (in bytes) of the contact constraints in the current simulation step

</member>
<member name="F:physx.PxSimulationStatistics.peakConstraintMemory" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="155">
\brief The peak amount of memory (in bytes) that was allocated for constraints (this includes joints) in the current simulation step

</member>
<member name="M:physx.PxSimulationStatistics.getNbBroadPhaseAdds(physx.PxSimulationStatistics.VolumeType)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="161">
	\brief Get number of broadphase volumes of a certain type added for the current simulation step.

	\param[in] type The volume type for which to get the number
	\return Number of broadphase volumes added.

	@see VolumType

</member>
<member name="M:physx.PxSimulationStatistics.getNbBroadPhaseRemoves(physx.PxSimulationStatistics.VolumeType)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="180">
	\brief Get number of broadphase volumes of a certain type removed for the current simulation step.

	\param[in] type The volume type for which to get the number
	\return Number of broadphase volumes removed.

	@see VolumType

</member>
<member name="M:physx.PxSimulationStatistics.getRbPairStats(physx.PxSimulationStatistics.RbPairStatsType,physx.PxGeometryType.Enum,physx.PxGeometryType.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationstatistics.h" line="200">
	\brief Get number of shape collision pairs of a certain type processed for the current simulation step.

	There is an entry for each geometry pair type.

	\note entry[i][j] = entry[j][i], hence, if you want the sum of all pair
	      types, you need to discard the symmetric entries

	\param[in] pairType The type of pair for which to get information
	\param[in] g0 The geometry type of one pair object
	\param[in] g1 The geometry type of the other pair object
	\return Number of processed pairs of the specified geometry types.

</member>
<member name="T:physx.PxParticleBaseFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="27">
\brief ParticleBase flags

</member>
<member name="F:eCOLLISION_TWOWAY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="34">
\brief Enable/disable two way collision of particles with the rigid body scene.
In either case, particles are influenced by colliding rigid bodies.
If eCOLLISION_TWOWAY is not set, rigid bodies are not influenced by 
colliding particles. Use particleMass to
control the strength of the feedback force on rigid bodies.

\note Switching this flag while the particle system is part of a scene might have a negative impact on performance.

</member>
<member name="F:eCOLLISION_WITH_DYNAMIC_ACTORS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="45">
		\brief Enable/disable collision of particles with dynamic actors.
		The flag can be turned off as a hint to the sdk to save memory space and 
		execution time. In principle any collisions can be turned off using filters
		but without or reduced memory and performance benefits.

		\note Switching this flag while the particle system is part of a scene might have a negative impact on performance.

</member>
<member name="F:eENABLED" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="55">
\brief Enable/disable execution of particle simulation.

</member>
<member name="F:ePROJECT_TO_PLANE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="60">
\brief Defines whether the particles of this particle system should be projected to a plane.
This can be used to build 2D applications, for instance. The projection
plane is defined by the parameter projectionPlaneNormal and projectionPlaneDistance.

</member>
<member name="F:ePER_PARTICLE_REST_OFFSET" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="67">
\brief Enable/disable per particle rest offsets.
Per particle rest offsets can be used to support particles having different sizes with 
respect to collision.

\note This configuration cannot be changed after the particle system was created.

</member>
<member name="F:ePER_PARTICLE_COLLISION_CACHE_HINT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="76">
		\brief Ename/disable per particle collision caches.
		Per particle collision caches improve collision detection performance at the cost of increased 
		memory usage.

		\note Switching this flag while the particle system is part of a scene might have a negative impact on performance.

</member>
<member name="F:eGPU" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="85">
		\brief Enable/disable GPU acceleration. 
		Enabling GPU acceleration might fail. In this case the eGPU flag is switched off. 

		\note Switching this flag while the particle system is part of a scene might have a negative impact on performance.
		
		@see PxScene.removeActor() PxScene.addActor() PxParticleGpu

</member>
<member name="D:physx.PxParticleBaseFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebaseflag.h" line="98">
\brief collection of set bits defined in PxParticleBaseFlag.

@see PxParticleBaseFlag

</member>
<member name="T:physx.PxParticleCreationData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="29">
\brief Descriptor-like user-side class describing buffers for particle creation.

PxParticleCreationData is used to create particles within the SDK. The SDK copies the particle data referenced by PxParticleCreationData, it
may therefore be deallocated right after the creation call returned.

@see PxParticleBase::createParticles()

</member>
<member name="F:physx.PxParticleCreationData.numParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="41">
\brief The number of particles stored in the buffer. 

</member>
<member name="F:physx.PxParticleCreationData.indexBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="46">
	\brief Particle index data.

	When creating particles, providing the particle indices is mandatory.

</member>
<member name="F:physx.PxParticleCreationData.positionBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="53">
	\brief Particle position data.

	When creating particles, providing the particle positions is mandatory.

</member>
<member name="F:physx.PxParticleCreationData.velocityBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="60">
	\brief Particle velocity data.

	Providing velocity data is optional.

</member>
<member name="F:physx.PxParticleCreationData.restOffsetBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="67">
	\brief Particle rest offset data. 

	Values need to be in the range [0.0f, restOffset].
	If PxParticleBaseFlag.ePER_PARTICLE_REST_OFFSET is set, providing per particle rest offset data is mandatory.  
	@see PxParticleBaseFlag.ePER_PARTICLE_REST_OFFSET.

</member>
<member name="F:physx.PxParticleCreationData.flagBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="76">
\brief Particle flags.

PxParticleFlag.eVALID, PxParticleFlag.eCOLLISION_WITH_STATIC, PxParticleFlag.eCOLLISION_WITH_DYNAMIC,
PxParticleFlag.eCOLLISION_WITH_DRAIN, PxParticleFlag.eSPATIAL_DATA_STRUCTURE_OVERFLOW are all flags that 
can't be set on particle creation. They are written by the SDK exclusively.

Providing flag data is optional.
@see PxParticleFlag

</member>
<member name="M:physx.PxParticleCreationData.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="88">
\brief (Re)sets the structure to the default.	

</member>
<member name="M:physx.PxParticleCreationData.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="93">
\brief Returns true if the current settings are valid

</member>
<member name="M:physx.PxParticleCreationData.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlecreationdata.h" line="98">
\brief Constructor sets to default.

</member>
<member name="T:physx.PxParticleFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticleflag.h" line="25">
Particle flags are used for additional information on the particles.

</member>
<member name="F:eVALID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticleflag.h" line="32">
\brief Marks a valid particle. The particle data corresponding to these particle flags is valid, i.e. defines a particle, when set.
Particles that are not marked with PxParticleFlag::eVALID are ignored during simulation.

Application read only.

</member>
<member name="F:eCOLLISION_WITH_STATIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticleflag.h" line="40">
			\brief Marks a particle that has collided with a static actor shape.

			Application read only.

</member>
<member name="F:eCOLLISION_WITH_DYNAMIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticleflag.h" line="47">
			\brief Marks a particle that has collided with a dynamic actor shape.

			Application read only.

</member>
<member name="F:eCOLLISION_WITH_DRAIN" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticleflag.h" line="54">
\brief Marks a particle that has collided with a shape that has been flagged as a drain (See PxShapeFlag.ePARTICLE_DRAIN).

Application read only.
@see PxShapeFlag.ePARTICLE_DRAIN

</member>
<member name="F:eSPATIAL_DATA_STRUCTURE_OVERFLOW" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticleflag.h" line="62">
			\brief Marks a particle that had to be ignored for simulation, because the spatial data structure ran out of resources.

			Application read only.

</member>
<member name="T:physx.PxParticleReadDataFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="30">
Flags to configure PxParticleBase simulation output that can be read by the application. 
Disabling unneeded buffers saves memory and improves performance.

</member>
<member name="F:ePOSITION_BUFFER" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="38">
Enables reading particle positions from the SDK.
@see PxParticleReadData.positionBuffer

</member>
<member name="F:eVELOCITY_BUFFER" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="44">
Enables reading particle velocities from the SDK.
@see PxParticleReadData.velocityBuffer

</member>
<member name="F:eREST_OFFSET_BUFFER" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="50">
Enables reading per particle rest offsets from the SDK.
Per particle rest offsets are never changed by the simulation.
This option may only be used on particle systems that have 
PxParticleBaseFlag.ePER_PARTICLE_REST_OFFSET enabled.
@see PxParticleBaseFlag.ePER_PARTICLE_REST_OFFSET

</member>
<member name="F:eFLAGS_BUFFER" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="59">
Enables reading particle flags from the SDK.
@see PxParticleReadData.flagsBuffer

</member>
<member name="F:eCOLLISION_NORMAL_BUFFER" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="65">
Enables reading particle collision normals from the SDK.
@see PxParticleReadData.collisionNormalBuffer

</member>
<member name="F:eCOLLISION_VELOCITY_BUFFER" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="71">
Enables reading particle collision velocities from the SDK.
@see PxParticleReadData.collisionVelocity

</member>
<member name="F:eDENSITY_BUFFER" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="77">
Enables reading particle densities from the SDK. (PxParticleFluid only)
@see PxParticleFluidReadData.densityBuffer

</member>
<member name="D:physx.PxParticleReadDataFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="85">
\brief collection of set bits defined in PxParticleReadDataFlag.

@see PxParticleReadDataFlag

</member>
<member name="D:physx.PxParticleFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="93">
\brief collection of set bits defined in PxParticleFlag.

@see PxParticleFlag

</member>
<member name="T:physx.PxParticleReadData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="101">
\brief Data layout descriptor for reading particle data from the SDK.

PxParticleReadData is used to retrieve information about simulated particles. It can be accessed by calling PxParticleBase.lockParticleReadData().

Each particle is described by its position, velocity, a set of (PxParticleFlag) flags and information on collisions (collision normal).
The particle buffers are sparse, i.e. occupied particle indices will have PxParticleFlag.eVALID set in the corresponding entry of 
PxParticleReadData.flagsBuffer. Alternatively valid particles can be identified with the bitmap PxParticleReadData.validParticleBitmap.
If (and only if) the index range of valid particles PxParticleReadData.validParticleRange is greater 0, i.e. any particles are present, 
data can be read from the particle buffers. Additionally individual particle buffers can only be read if the corresponding 
PxParticleReadDataFlag in particleReadDataFlags is set.

The particle data buffer are defined in the range [0, PxParticleReadData.validParticleRange-1].
The bitmap words are defined in the range [0, (PxParticleReadData.validParticleRange-1) &gt;&gt; 5].

@see PxParticleBase::lockParticleReadData()

</member>
<member name="F:physx.PxParticleReadData.nbValidParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="122">
\brief Number of particles (only including particles with PxParticleFlag.eVALID set). 

</member>
<member name="F:physx.PxParticleReadData.validParticleRange" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="127">
\brief Index after the last valid particle (PxParticleFlag.eVALID set). Its 0 if there are no valid particles. 

</member>
<member name="F:physx.PxParticleReadData.validParticleBitmap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="132">
\brief Bitmap marking valid particle indices. The bitmap is defined between [0, (PxParticleReadData.validParticleRange-1) &gt;&gt; 5].
\note Might be NULL if PxParticleReadData.validParticleRange == 0. 

</member>
<member name="F:physx.PxParticleReadData.positionBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="138">
\brief Particle position data.

</member>
<member name="F:physx.PxParticleReadData.velocityBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="143">
\brief Particle velocity data.

</member>
<member name="F:physx.PxParticleReadData.restOffsetBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="148">
\brief Particle rest offset data.

</member>
<member name="F:physx.PxParticleReadData.flagsBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="153">
\brief Particle flags.

</member>
<member name="F:physx.PxParticleReadData.collisionNormalBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="158">
\brief Collision normals of colliding particles.
The collision normal buffer is only guaranteed to be valid after the particle 
system has been simulated. Otherwise collisionNormalBuffer.ptr() is NULL. This also 
applies to particle systems that are not assigned to a scene.

</member>
<member name="F:physx.PxParticleReadData.collisionVelocityBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="166">
\brief Velocities of particles relative to shapes they collide with.
The collision velocity buffer is only guaranteed to be valid after the particle 
system has been simulated. Otherwise collisionVelocityBuffer.ptr() is NULL. This also 
applies to particle systems that are not assigned to a scene.
The collision velocity is identical to the particle velocity if the particle is not colliding.

</member>
<member name="M:physx.PxParticleReadData.getDataAccessFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="175">
\brief Returns PxDataAccessFlag::eREADABLE, since PxParticleReadData is read only data
@see PxLockedData

</member>
<member name="M:physx.PxParticleReadData.unlock" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="181">
\brief Unlocks the data.
@see PxLockedData

</member>
<member name="M:physx.PxParticleReadData.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlereaddata.h" line="187">
\brief virtual destructor

</member>
<member name="T:physx.PxParticleBase" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="34">
\brief The particle base class represents the shared module for particle based simulation. This class can't be instantiated.

The particle base class manages a set of particles.  Particles can be created, released and updated directly through the API.
When a particle is created the user gets an index for it which can be used to address the particle until it is released again.

Particles collide with static and dynamic shapes.  They are also affected by the scene gravity and a user force, 
as well as global velocity damping.  When a particle collides, a particle flag is raised corresponding to the type of 
actor, static or dynamic, it collided with.  Additionally a shape can be flagged as a drain (See PxShapeFlag), in order to get a corresponding 
particle flag raised when a collision occurs.  This information can be used to delete particles.

@see PxParticleCreationData, PxParticleReadData, PxShapeFlag, PxParticleSystem, PxParticleFluid

</member>
<member name="M:physx.PxParticleBase.lockParticleReadData(physx.PxFlags&lt;physx.PxDataAccessFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="54">
@name Particle Access and Manipulation

	\brief Locks the particle data and provides the data descriptor for accessing the particles.
	After reading from the buffers the application needs to call PxParticleReadData::unlock() before any 
	SDK operation can access the buffers. Particularly the buffers need to be unlocked before calling 
	PxParticleBase::lockParticleReadData(), PxParticleBase::createParticles(), PxParticleBase::releaseParticles(),
	PxScene::fetchResults().

	\param flags If PxDataAccessFlag::eDEVICE is specified for GPU particles then pointers to GPU memory will be returned otherwise it will be ignored.
	\note PxDataAccessFlag::eWRITEABLE is not supported and will be ignored
	\note If using PxDataAccessFlag::eDEVICE, newly created particles will not become visible in the GPU buffers until a subsequent simulation step has completed
	@see PxParticleReadData

</member>
<member name="M:physx.PxParticleBase.lockParticleReadData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="72">
\brief Locks the particle read data and provides the data descriptor for accessing the particles
\note This method does the same as lockParticleReadData(PxDataAccessFlags::eREADABLE)
@see PxParticleReadData

</member>
<member name="M:physx.PxParticleBase.createParticles(physx.PxParticleCreationData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="79">
	\brief Creates new particles.
	
	The PxParticleCreationData descriptor is used to create new particles based on the provided PxParticleCreationData. 
	Providing particle indices and positions is mandatory.  Indices need to be consistent with the available particle slots within 
	the range [0, maxParticles-1].  The new particles can be immediately read from the application readable 
	particle data, PxParticleReadData. 
	
	\param creationData specifies particle attributes for the particles to be created. (all buffers set have to be consistent with numParticles). 
	\return whether the operation was successful.

	@see PxParticleCreationData, PxParticleReadData, PxParticlesExt.IndexPool

</member>
<member name="M:physx.PxParticleBase.releaseParticles(System.UInt32,physx.PxStrideIterator&lt;System.UInt32!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="94">
	\brief Releases particles.
	
	Particles corresponding to passed indices are released. Releasing a particle will immediately mark the particle in the 
	application readable particle data, PxParticleReadData, as being invalid, removing PxParticleFlag::eVALID.
	Passing duplicate indices is not allowed.

	\param numParticles Number of particles to be released.
	\param indexBuffer Structure describing indices of particles that should be deleted. (Has to be consistent with numParticles).

	@see PxParticleReadData

</member>
<member name="M:physx.PxParticleBase.releaseParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="108">
	\brief Releases all particles.

	Application readable particle data is updated accordingly.

</member>
<member name="M:physx.PxParticleBase.setPositions(System.UInt32,physx.PxStrideIterator&lt;System.UInt32!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxStrideIterator&lt;physx.PxVec3!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="115">
	\brief Sets particle positions.

	Directly sets the positions of particles. The supplied positions are used to change particles in the order of
	the indices listed in the index buffer. Duplicate indices are allowed. A position buffer of stride zero is allowed.
	Application readable particle data is updated accordingly.
	
	\param numParticles Number of particle updates.
	\param indexBuffer Structure describing indices of particles that should be updated. (Has to be consistent with numParticles).
	\param positionBuffer Structure describing positions for position updates. (Has to be consistent with numParticles).

</member>
<member name="M:physx.PxParticleBase.setVelocities(System.UInt32,physx.PxStrideIterator&lt;System.UInt32!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxStrideIterator&lt;physx.PxVec3!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="129">
	\brief Sets particle velocities.

	Directly sets the velocities of particles. The supplied velocities are used to change particles in the order of
	the indices listed in the index buffer. Duplicate indices are allowed. A velocity buffer of stride zero is allowed.
	Application readable particle data is updated accordingly.
	
	\param numParticles Number of particle updates.
	\param indexBuffer Structure describing indices of particles that should be updated. (Has to be consistent with numParticles).
	\param velocityBuffer Structure describing velocities for velocity updates. (Has to be consistent with numParticles).

</member>
<member name="M:physx.PxParticleBase.setRestOffsets(System.UInt32,physx.PxStrideIterator&lt;System.UInt32!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxStrideIterator&lt;System.Single!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="143">
	\brief Sets particle rest offsets.

	Directly sets the rest offsets of particles. The supplied rest offsets are used to change particles in the order of
	the indices listed in the index buffer. The provided offsets need to be in the range [0.0f, restOffset].
	Duplicate indices are allowed. A rest offset buffer of stride zero is allowed.
	Application readable particle data is updated accordingly.
	
	\param numParticles Number of particle updates.
	\param indexBuffer Structure describing indices of particles that should be updated. (Has to be consistent with numParticles).
	\param restOffsetBuffer Structure describing rest offsets for rest offset updates. (Has to be consistent with numParticles).
	
	@see PxParticleBaseFlag.ePER_PARTICLE_REST_OFFSET

</member>
<member name="M:physx.PxParticleBase.addForces(System.UInt32,physx.PxStrideIterator&lt;System.UInt32!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxStrideIterator&lt;physx.PxVec3!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxForceMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="161">
	\brief Set forces to be applied to the particles when the simulation starts.

	This call is ignored on particle system that aren't assigned to a scene.
	
	\param numParticles Number of particle updates.
	\param indexBuffer Structure describing indices of particles that should be updated. (Has to be consistent with numParticles).
	\param forceBuffer Structure describing values for particle updates depending on forceMode. (Has to be consistent with numParticles).
	\param forceMode Describes type of update.

</member>
<member name="M:physx.PxParticleBase.getDamping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="177">
@name ParticleBase Parameters

	\brief Returns the particle system damping.

	\return The particle system damping.

</member>
<member name="M:physx.PxParticleBase.setDamping(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="188">
	\brief Sets the particle system damping (must be nonnegative).

	\param damp The new particle system damping.

</member>
<member name="M:physx.PxParticleBase.getExternalAcceleration" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="195">
	\brief Returns the external acceleration applied to each particle at each time step.

	\return The external acceleration applied to particles.

</member>
<member name="M:physx.PxParticleBase.setExternalAcceleration(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="202">
	\brief Sets the external acceleration applied to each particle at each time step.

	\param acceleration External acceleration to apply to particles.

	@see getExternalAcceleration()

</member>
<member name="M:physx.PxParticleBase.getProjectionPlane(physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="211">
	\brief Returns the plane the particles are projected to.

	\param[out] normal Particle projection plane normal
	\param[out] distance Particle projection plane constant term

</member>
<member name="M:physx.PxParticleBase.setProjectionPlane(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="219">
	\brief Sets the plane the particles are projected to.

	Points p on the plane have to fulfill the equation:
	
	(normal.x * p.x)  +  (normal.y * p.y)  +  (normal.z * p.z)  +  d = 0

	\param[in] normal Particle projection plane normal
	\param[in] distance Particle projection plane constant term

</member>
<member name="M:physx.PxParticleBase.getParticleMass" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="233">
@name Collisions

	\brief Returns the mass of a particle. 

	\return Particle mass.

</member>
<member name="M:physx.PxParticleBase.setParticleMass(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="244">
	\brief Sets the mass of a particle. 

	\param mass The particle mass.

</member>
<member name="M:physx.PxParticleBase.getRestitution" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="251">
	\brief Returns the restitution used for collision with shapes.

	\return The restitution.

</member>
<member name="M:physx.PxParticleBase.setRestitution(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="258">
	\brief Sets the restitution used for collision with shapes.
	
	Must be between 0 and 1.

	\param rest The new restitution.

</member>
<member name="M:physx.PxParticleBase.getDynamicFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="267">
	\brief Returns the dynamic friction used for collision with shapes.

	\return The dynamic friction.

</member>
<member name="M:physx.PxParticleBase.setDynamicFriction(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="274">
	\brief Sets the dynamic friction used for collision with shapes.
	
	Must be between 0 and 1.

	\param friction The new dynamic friction

</member>
<member name="M:physx.PxParticleBase.getStaticFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="283">
	\brief Returns the static friction used for collision with shapes.

	\return The static friction.

</member>
<member name="M:physx.PxParticleBase.setStaticFriction(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="290">
\brief Sets the static friction used for collision with shapes.

Must be non-negative.

\param friction The new static friction

</member>
<member name="M:physx.PxParticleBase.setSimulationFilterData(physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="302">
@name Collision Filtering

	\brief Sets the user definable collision filter data.

	@see getSimulationFilterData()

</member>
<member name="M:physx.PxParticleBase.getSimulationFilterData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="313">
	\brief Retrieves the object's collision filter data.

	@see setSimulationFilterData()

</member>
<member name="M:physx.PxParticleBase.resetFiltering" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="320">
\deprecated
\brief Marks the object to reset interactions and re-run collision filters in the next simulation step.

\note This method has been deprecated. Please use #PxScene::resetFiltering() instead.

</member>
<member name="M:physx.PxParticleBase.setParticleBaseFlag(physx.PxParticleBaseFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="331">
	\brief Sets particle system flags.

	\param flag Member of #PxParticleBaseFlag.
	\param val New flag value.

</member>
<member name="M:physx.PxParticleBase.getParticleBaseFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="339">
	\brief Returns particle system flags.

	\return The current flag values.

</member>
<member name="M:physx.PxParticleBase.getMaxParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="348">
@name ParticleSystem Property Read Back

	\brief Returns the maximum number of particles for this particle system.

	\return Max number of particles for this particle system.

</member>
<member name="M:physx.PxParticleBase.getMaxMotionDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="359">
	\brief Returns the maximal motion distance (the particle can move the maximal distance of 
	getMaxMotionDistance() during one timestep).

	\return maximum motion distance.

</member>
<member name="M:physx.PxParticleBase.setMaxMotionDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="367">
	\brief Sets the maximal motion distance (the particle can move the maximal distance 
	 during one timestep). Immutable when the particle system is part of a scene.

	\param distance New Max motionDistance value.

</member>
<member name="M:physx.PxParticleBase.getRestOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="375">
	\brief Returns the distance between particles and collision geometry, which is maintained during simulation.

	\return rest offset.

</member>
<member name="M:physx.PxParticleBase.setRestOffset(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="382">
\brief Sets the distance between particles and collision geometry, which is maintained during simulation.
If per particle restOffsets are used, they need to be in the range [0.0f, restOffset]. Immutable when the
particle system is part of a scene.
\param restOffset New restOffset value.

</member>
<member name="M:physx.PxParticleBase.getContactOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="390">
	\brief Returns the distance at which contacts are generated between particles and collision geometry.

	\return contact offset.

</member>
<member name="M:physx.PxParticleBase.setContactOffset(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="397">
	\brief Sets the distance at which contacts are generated between particles and collision geometry.
	Immutable when the particle system is part of a scene.

	\param contactOffset New contactOffset value.

</member>
<member name="M:physx.PxParticleBase.getGridSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="405">
	\brief Returns the particle grid size used for internal spatial data structures.

	The actual grid size used might differ from the grid size set in the setGridSize(). 

	\return The grid size.

</member>
<member name="M:physx.PxParticleBase.setGridSize(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="414">
	\brief Sets the particle grid size used for internal spatial data structures.
	Immutable when the particle system is part of a scene.
	The actual grid size used might differ from the grid size set in the setGridSize(). 

	\param gridSize New gridSize value.

</member>
<member name="M:physx.PxParticleBase.getParticleReadDataFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="423">
\brief Returns particle read data flags.
\return The particle read data flags.
@see PxParticleReadDataFlags

</member>
<member name="M:physx.PxParticleBase.setParticleReadDataFlag(physx.PxParticleReadDataFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlebase.h" line="430">
\brief Sets particle read data flags.
\param flag Member of PxParticleReadDataFlag.
\param val New flag value.
@see PxParticleReadDataFlags

</member>
<member name="T:physx.PxParticleSystem" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlesystem.h" line="27">
\brief The particle system class represents the main module for particle based simulation.

This class inherits the properties of the PxParticleBase class.

The particle system class manages a set of particles.  Particles can be created, released and updated directly through the API.
When a particle is created the user gets an id for it which can be used to address the particle until it is released again.

Particles collide with static and dynamic shapes.  They are also affected by the scene gravity and a user force, 
as well as global velocity damping.  When a particle collides, a particle flag is raised corresponding to the type of 
actor, static or dynamic, it collided with.  Additionally a shape can be flagged as a drain (See PxShapeFlag), in order to get a corresponding 
particle flag raised when a collision occurs.  This information can be used to delete particles.

The particles of a particle system don't collide with each other.  In order to simulate particle-particle interactions use the 
subclass PxParticleFluid.

@see PxParticleBase, PxParticleReadData, PxPhysics.createParticleSystem

</member>
<member name="T:physx.PxParticleFluidReadData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluidreaddata.h" line="27">
\brief Data layout descriptor for reading fluid particle data from the SDK.

Additionally to PxParticleReadData, the density can be read from the SDK.
@see PxParticleReadData PxParticleFluid.lockParticleFluidReadData()

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxParticleFluidReadData.densityBuffer'. -->
<member name="M:physx.PxParticleFluidReadData.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluidreaddata.h" line="56">
\brief virtual destructor

</member>
<!-- Discarding badly formed XML document comment for member 'T:physx.PxParticleFluid'. -->
<member name="M:physx.PxParticleFluid.lockParticleFluidReadData(physx.PxFlags&lt;physx.PxDataAccessFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="57">
@name Particle Access and Manipulation

\brief Locks the particle data and provides the data descriptor for accessing the particles including fluid particle densities.
\note Only PxDataAccessFlag::eREADABLE and PxDataAccessFlag::eDEVICE are supported, PxDataAccessFlag::eWRITABLE will be ignored.
@see PxParticleFluidReadData
@see PxParticleBase::lockParticleReadData()

</member>
<member name="M:physx.PxParticleFluid.lockParticleFluidReadData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="69">
\brief Locks the particle data and provides the data descriptor for accessing the particles including fluid particle densities.
\note This is the same as calling lockParticleFluidReadData(PxDataAccessFlag::eREADABLE).
@see PxParticleFluidReadData
@see PxParticleBase::lockParticleReadData()

</member>
<member name="M:physx.PxParticleFluid.getStiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="81">
@name Particle Fluid Parameters

	\brief Returns the fluid stiffness.

	\return The fluid stiffness.

</member>
<member name="M:physx.PxParticleFluid.setStiffness(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="92">
	\brief Sets the fluid stiffness (must be positive).

	\param stiffness The new fluid stiffness.

</member>
<member name="M:physx.PxParticleFluid.getViscosity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="99">
	\brief Returns the fluid viscosity.

	\return The viscosity  of the fluid.

</member>
<member name="M:physx.PxParticleFluid.setViscosity(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="106">
	\brief Sets the fluid viscosity (must be positive).

	\param viscosity The new viscosity of the fluid.

</member>
<member name="M:physx.PxParticleFluid.getRestParticleDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="116">
@name Particle Fluid Property Read Back

	\brief Returns the typical distance of particles in the relaxed state of the fluid.

	\return Rest particle distance.

</member>
<member name="M:physx.PxParticleFluid.setRestParticleDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\particles\pxparticlefluid.h" line="130">
@name Particle Fluid Parameters

	\brief Sets the typical distance of particles in the relaxed state of the fluid.

	\param restParticleDistance The new restParticleDistance of the fluid.

</member>
<member name="T:physx.PxActiveTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="58">
\brief Data struct for use with Active Transform Notification.
Used with PxScene::getActiveTransforms().

@see PxScene

</member>
<member name="T:physx.PxDominanceGroupPair" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="71">
\brief Expresses the dominance relationship of a contact.
For the time being only three settings are permitted:

(1.0f, 1.0f), (0.0f, 1.0f), and (1.0f, 0.0f).

@see getDominanceGroup() PxDominanceGroup PxScene::setDominanceGroupPair()

</member>
<member name="D:physx.PxConstraintDominance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="87">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
</member>
<member name="T:physx.PxActorTypeFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="91">
\brief Identifies each type of actor for retrieving actors from a scene.

\note #PxArticulationLink objects are not supported. Use the #PxArticulation object to retrieve all its links.

@see PxScene::getActors(), PxScene::getNbActors()

</member>
<member name="F:eRIGID_STATIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="102">
\brief A static rigid body
@see PxRigidStatic

</member>
<member name="F:eRIGID_DYNAMIC" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="108">
\brief A dynamic rigid body
@see PxRigidDynamic

</member>
<member name="F:ePARTICLE_SYSTEM" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="115">
\brief A particle system
@see PxParticleSystem

</member>
<member name="F:ePARTICLE_FLUID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="121">
\brief A particle fluid
@see PxParticleFluid

</member>
<member name="F:eCLOTH" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="129">
\brief A cloth
@see PxCloth

</member>
<member name="D:physx.PxActorTypeFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="138">
\brief Collection of set bits defined in PxActorTypeFlag.

@see PxActorTypeFlag

</member>
<member name="D:physx.PxActorTypeSelectionFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="146">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
</member>
<member name="D:physx.PxActorTypeSelectionFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="149">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
</member>
<member name="T:physx.PxQueryCache" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="152">
\brief single hit cache for scene queries.

If a cache object is supplied to a scene query, the cached actor/shape pair is checked for intersection first.
\note Filters are not executed for the cached shape.
\note If intersection is found, the hit is treated as blocking.
\note Typically actor and shape from the last PxHitCallback.block query result is used as a cached actor/shape pair.
\note Using past touching hits as cache will produce incorrect behavior since the cached hit will always be treated as blocking.
\note Cache is only used if no touch buffer was provided, for single nearest blocking hit queries and queries using eANY_HIT flag.
\note if non-zero touch buffer was provided, cache will be ignored

\note It is the user's responsibility to ensure that the shape and actor are valid, so care must be taken
when deleting shapes to invalidate cached references.

The faceIndex field is an additional hint for a mesh or height field which is not currently used.

@see PxScene.raycast

</member>
<member name="M:physx.PxQueryCache.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="172">
\brief constructor sets to default 

</member>
<member name="M:physx.PxQueryCache.#ctor(physx.PxShape*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="177">
\brief constructor to set properties

</member>
<member name="T:physx.PxScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="187">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
 \brief A scene is a collection of bodies, particle systems and constraints which can interact.

 The scene simulates the behavior of these objects over time. Several scenes may exist 
 at the same time, but each body, particle system or constraint is specific to a scene 
 -- they may not be shared.

 @see PxSceneDesc PxPhysics.createScene() release()

</member>
<member name="M:physx.PxScene.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="205">
@name Basics

</member>
<member name="M:physx.PxScene.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="214">
	\brief Deletes the scene.

	Removes any actors,  particle systems, and constraint shaders from this scene
	(if the user hasn't already done so).

	Be sure	to not keep a reference to this object after calling release.
	Avoid release calls while the scene is simulating (in between simulate() and fetchResults() calls).
	
	@see PxPhysics.createScene() 

</member>
<member name="M:physx.PxScene.setFlag(physx.PxSceneFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="227">
	\brief Sets a scene flag. You can only set one flag at a time.

	\note Not all flags are mutable and changing some will result in an error. Please check #PxSceneFlag to see which flags can be changed.

	@see PxSceneFlag

</member>
<member name="M:physx.PxScene.getFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="236">
	\brief Get the scene flags.

	\return The scene flags. See #PxSceneFlag

	@see PxSceneFlag

</member>
<member name="M:physx.PxScene.setLimits(physx.PxSceneLimits!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="246">
	\brief Set new scene limits. 

	\note Increase the maximum capacity of various data structures in the scene. The new capacities will be 
	at least as large as required to deal with the objects currently in the scene. Further, these values 
	are for preallocation and do not represent hard limits.

	\param[in] limits Scene limits.
	@see PxSceneLimits

</member>
<member name="M:physx.PxScene.getLimits" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="258">
\brief Get current scene limits.
\return Current scene limits.
@see PxSceneLimits

</member>
<member name="M:physx.PxScene.getPhysics" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="266">
	\brief Call this method to retrieve the Physics SDK.

	\return The physics SDK this scene is associated with.

	@see PxPhysics

</member>
<member name="M:physx.PxScene.getTimestamp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="275">
	\brief Retrieves the scene's internal timestamp, increased each time a simulation step is completed.

	\return scene timestamp

</member>
<member name="M:physx.PxScene.addArticulation(physx.PxArticulation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="286">
@name Add/Remove Contained Objects

	\brief Adds an articulation to this scene.

	\note If the articulation is already assigned to a scene (see #PxArticulation::getScene), the call is ignored and an error is issued.

	\param[in] articulation Articulation to add to scene. See #PxArticulation

	@see PxArticulation

</member>
<member name="M:physx.PxScene.removeArticulation(physx.PxArticulation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="300">
	\brief Removes an articulation from this scene.

	\note If the articulation is not part of this scene (see #PxArticulation::getScene), the call is ignored and an error is issued. 
	
	\note If the articulation is in an aggregate it will be removed from the aggregate.

	\param[in] articulation Articulation to remove from scene. See #PxArticulation
	\param[in] wakeOnLostTouch Specifies whether touching objects from the previous frame should get woken up in the next frame. Only applies to PxArticulation and PxRigidActor types.

	@see PxArticulation, PxAggregate

</member>
<member name="M:physx.PxScene.addActor(physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="314">
	\brief Adds an actor to this scene.
	
	\note If the actor is already assigned to a scene (see #PxActor::getScene), the call is ignored and an error is issued.
	\note If the actor has an invalid constraint, in checked builds the call is ignored and an error is issued.

	\note You can not add individual articulation links (see #PxArticulationLink) to the scene. Use #addArticulation() instead.

	\note If the actor is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if
	it connects to another actor that is part of the scene already. 

	\param[in] actor Actor to add to scene.

	@see PxActor, PxConstraint::isValid()

</member>
<member name="M:physx.PxScene.addActors(physx.PxActor*!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="331">
	\brief Adds actors to this scene.	

	\note If one of the actors is already assigned to a scene (see #PxActor::getScene), the call is ignored and an error is issued.

	\note You can not add individual articulation links (see #PxArticulationLink) to the scene. Use #addArticulation() instead.

	\note If an actor in the array contains an invalid constraint, in checked builds the call is ignored and an error is issued.
	\note If an actor in the array is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if
	it connects to another actor that is part of the scene already.

	\note this method is optimized for high performance, and does not support buffering. It may not be called during simulation.

	\param[in] actors Array of actors to add to scene.
	\param[in] nbActors Number of actors in the array.

	@see PxActor, PxConstraint::isValid()

</member>
<member name="M:physx.PxScene.removeActor(physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="352">
	\brief Removes an actor from this scene.

	\note If the actor is not part of this scene (see #PxActor::getScene), the call is ignored and an error is issued.

	\note You can not remove individual articulation links (see #PxArticulationLink) from the scene. Use #removeArticulation() instead.

	\note If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically.

	\note If the actor is in an aggregate it will be removed from the aggregate.

	\param[in] actor Actor to remove from scene.
	\param[in] wakeOnLostTouch Specifies whether touching objects from the previous frame should get woken up in the next frame. Only applies to PxArticulation and PxRigidActor types.

	@see PxActor, PxAggregate

</member>
<member name="M:physx.PxScene.removeActors(physx.PxActor*!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="370">
	\brief Removes actors from this scene.

	\note If some actor is not part of this scene (see #PxActor::getScene), the actor remove is ignored and an error is issued.

	\note You can not remove individual articulation links (see #PxArticulationLink) from the scene. Use #removeArticulation() instead.

	\note If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically.

	\param[in] actors Array of actors to add to scene.
	\param[in] nbActors Number of actors in the array.
	\param[in] wakeOnLostTouch Specifies whether touching objects from the previous frame should get woken up in the next frame. Only applies to PxArticulation and PxRigidActor types.

	@see PxActor

</member>
<member name="M:physx.PxScene.addAggregate(physx.PxAggregate*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="387">
	\brief Adds an aggregate to this scene.
	
	\note If the aggregate is already assigned to a scene (see #PxAggregate::getScene), the call is ignored and an error is issued.
	\note If the aggregate contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.

	\note If the aggregate already contains actors, those actors are added to the scene as well.

	\param[in] aggregate Aggregate to add to scene.
	
	@see PxAggregate, PxConstraint::isValid()

</member>
<member name="M:physx.PxScene.removeAggregate(physx.PxAggregate*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="401">
	\brief Removes an aggregate from this scene.

	\note If the aggregate is not part of this scene (see #PxAggregate::getScene), the call is ignored and an error is issued.

	\note If the aggregate contains actors, those actors are removed from the scene as well.

	\param[in] aggregate Aggregate to remove from scene.
	\param[in] wakeOnLostTouch Specifies whether touching objects from the previous frame should get woken up in the next frame. Only applies to PxArticulation and PxRigidActor types.

	@see PxAggregate

</member>
<member name="M:physx.PxScene.addCollection(physx.PxCollection!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="415">
	\brief Adds objects in the collection to this scene.

	This function adds the following types of objects to this scene: PxActor, PxAggregate, PxArticulation. 
	This method is typically used after deserializing the collection in order to populate the scene with deserialized objects.

	\note If the collection contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.

	\param[in] collection Objects to add to this scene. See #PxCollection

	@see PxCollection, PxConstraint::isValid()

</member>
<member name="M:physx.PxScene.getNbActors(physx.PxFlags&lt;physx.PxActorTypeFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="431">
@name Contained Object Retrieval

	\brief Retrieve the number of actors of certain types in the scene.

	\param[in] types Combination of actor types.
	\return the number of actors.

	@see getActors()

</member>
<member name="M:physx.PxScene.getActors(physx.PxFlags&lt;physx.PxActorTypeFlag.Enum,System.UInt16&gt;,physx.PxActor**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="445">
	\brief Retrieve an array of all the actors of certain types in the scene.

	\param[in] types Combination of actor types to retrieve.
	\param[out] userBuffer The buffer to receive actor pointers.
	\param[in] bufferSize Size of provided user buffer.
	\param[in] startIndex Index of first actor pointer to be retrieved
	\return Number of actors written to the buffer.

	@see getNbActors()

</member>
<member name="M:physx.PxScene.getActiveTransforms(System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="458">
	\brief Queries the PxScene for a list of the PxActors whose transforms have been 
	updated during the previous simulation step

	Note: PxSceneFlag::eENABLE_ACTIVETRANSFORMS must be set.
	Multiclient behavior: Active transforms now return only the list of active actors owned by the specified client.

	\note Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored and NULL will be returned.

	\param[out] nbTransformsOut The number of transforms returned.
	\param[in] client The client whose actors the caller is interested in.

	\return A pointer to the list of PxActiveTransforms generated during the last call to fetchResults().

	@see PxActiveTransform

</member>
<member name="M:physx.PxScene.getNbArticulations" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="478">
	\brief Returns the number of articulations in the scene.

	\return the number of articulations in this scene.

	@see getArticulations()

</member>
<member name="M:physx.PxScene.getArticulations(physx.PxArticulation**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="487">
	\brief Retrieve all the articulations in the scene.

	\param[out] userBuffer The buffer to receive articulations pointers.
	\param[in] bufferSize Size of provided user buffer.
	\param[in] startIndex Index of first articulations pointer to be retrieved
	\return Number of articulations written to the buffer.

	@see getNbArticulations()

</member>
<member name="M:physx.PxScene.getNbConstraints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="499">
	\brief Returns the number of constraint shaders in the scene.

	\return the number of constraint shaders in this scene.

	@see getConstraints()

</member>
<member name="M:physx.PxScene.getConstraints(physx.PxConstraint**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="508">
	\brief Retrieve all the constraint shaders in the scene.

	\param[out] userBuffer The buffer to receive constraint shader pointers.
	\param[in] bufferSize Size of provided user buffer.
	\param[in] startIndex Index of first constraint pointer to be retrieved
	\return Number of constraint shaders written to the buffer.

	@see getNbConstraints()

</member>
<member name="M:physx.PxScene.getNbAggregates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="521">
	\brief Returns the number of aggregates in the scene.

	\return the number of aggregates in this scene.

	@see getAggregates()

</member>
<member name="M:physx.PxScene.getAggregates(physx.PxAggregate**,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="530">
	\brief Retrieve all the aggregates in the scene.

	\param[out] userBuffer The buffer to receive aggregates pointers.
	\param[in] bufferSize Size of provided user buffer.
	\param[in] startIndex Index of first aggregate pointer to be retrieved
	\return Number of aggregates written to the buffer.

	@see getNbAggregates()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxScene.setDominanceGroupPair(System.Byte,System.Byte,physx.PxDominanceGroupPair!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:physx.PxScene.getDominanceGroupPair(System.Byte,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="602">
	\brief Samples the dominance matrix.

	@see setDominanceGroupPair() PxDominanceGroup PxDominanceGroupPair PxActor::setDominanceGroup() PxActor::getDominanceGroup()

</member>
<member name="M:physx.PxScene.getCpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="612">
@name Dispatcher

	\brief Return the cpu dispatcher that was set in PxScene::PxCpuDispatcher when creating the scene with PxPhysics::createScene

	@see PxSceneDesc::PxCpuDispatcher, PxPhysics::createScene

</member>
<member name="M:physx.PxScene.getGpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="623">
	\brief Return the gpu dispatcher that was set in PxScene::PxGpuDispatcher when creating the scene with PxPhysics::createScene

	<b>Platform specific:</b> Applies to PC GPU only.

	@see PxSceneDesc::PxGpuDispatcher, PxPhysics::createScene

</member>
<member name="M:physx.PxScene.getSpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="632">
	\brief Return the spu dispatcher that was set in PxScene::PxSpuDispatcher when creating the scene with PxPhysics::createScene

	<b>Platform specific:</b> Applies to PS3 only.

	@see PxSceneDesc::PxSpuDispatcher, PxPhysics::createScene

</member>
<member name="M:physx.PxScene.createClient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="643">
@name Multiclient

	\brief Reserves a new client ID.
	
	PX_DEFAULT_CLIENT is always available as the default clientID.
	Additional clients are returned by this function. Clients cannot be released once created. 
	An error is reported when more than a supported number of clients (currently 128) are created. 

	@see PxClientBehaviorFlag PxClientID setClientBehaviorFlags() PxActor::setClientBehaviorFlags()

</member>
<member name="M:physx.PxScene.setClientBehaviorFlags(System.Byte,physx.PxFlags&lt;physx.PxClientBehaviorFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="657">
	\brief Sets behavior bits for a client.

	The behavior bits are a property of a client that determine when it receives callbacks.

	It is permissible to change the behavior for PX_DEFAULT_CLIENT with this call.
	Initially all created clients, as well as PX_DEFAULT_CLIENT have all bits set to 0.

	Note that in addition to setting a client to listen to a particular foreign actor event type, 
	the user must also configure actors to send that particular event type to foreign clients
	using PxActor::setClientBehaviorFlags().

	@see PxClientBehaviorFlag PxClientID createClient() getClientBehaviorFlags() PxActor::setClientBehaviorFlags()

</member>
<member name="M:physx.PxScene.getClientBehaviorFlags(System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="673">
	\brief Retrieves behavior bits for a client.

	@see PxClientBehaviorFlag PxClientID setClientBehaviorFlags() createClient()

</member>
<member name="M:physx.PxScene.setClothInterCollisionDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="686">
@name Cloth

	\brief Sets the minimum separation distance for cloth inter-collision.
	
	Particles closer than this distance that belong to different PxCloth objects 
	will be separated.
	
	\param[in] distance The minimum particle separation distance (default: 0.0).

	\note The PxCloth objects that interact can be controlled through the filter
	shader, @see PxSimulationFilterShader. Cloth objects with the PxClothFlag::eGPU
	set can only interact with other GPU simulated cloth objects.

</member>
<member name="M:physx.PxScene.getClothInterCollisionDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="703">
\brief Retrieves distance used for cloth inter-collision.
\return The distance used for cloth inter-collision.

</member>
<member name="M:physx.PxScene.setClothInterCollisionStiffness(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="709">
	\brief Sets the cloth inter-collision stiffness.
	
	Inter-collision stiffness controls how much two particles repel	each other 
	when they are closer than the inter-collision distance.

	\param [in] stiffness Fraction of distance residual to resolve per iteration (default: 1.0).

</member>
<member name="M:physx.PxScene.getClothInterCollisionStiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="718">
\brief Retrieves the stiffness coefficient used for cloth inter-collision.
\return The the stiffness coefficient used for cloth inter-collision.

</member>
<member name="M:physx.PxScene.setClothInterCollisionNbIterations(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="724">
	\brief Sets the number of inter-collision separation iterations to perform.

	The accuracy of cloth inter-collision may be improved by increasing the number
	of separation passes that are performed.

	\param[in] nbIterations The number of iterations to perform (default: 1).

</member>
<member name="M:physx.PxScene.getClothInterCollisionNbIterations" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="733">
\brief Retrieves the number of iterations used for cloth inter-collision.
\return The number of iterations used for cloth inter-collision.

</member>
<member name="M:physx.PxScene.setSimulationEventCallback(physx.PxSimulationEventCallback*,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="744">
@name Callbacks

	\brief Sets a user notify object which receives special simulation events when they occur.

	Multiclient behavior: unlike the PxSimulationEventCallback that can be specified in the PxSceneDesc, this method 
	lets the user associate additional callbacks with clients other than PX_DEFAULT_CLIENT. This way 
	each client can register its own callback class. Each callback function has a somewhat different
	way of determining which clients' callbacks will be called in a certain event. Refer to the documentation
	of particular callback functions inside PxSimulationEventCallback for this information.

	\note Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.

	\param[in] callback User notification callback. See #PxSimulationEventCallback.
	\param[in] client The client to be associated with this callback.

	@see PxSimulationEventCallback getSimulationEventCallback

</member>
<member name="M:physx.PxScene.getSimulationEventCallback(System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="766">
	\brief Retrieves the simulationEventCallback pointer set with setSimulationEventCallback().

	\param[in] client The client whose callback object is to be returned.
	\return The current user notify pointer. See #PxSimulationEventCallback.

	@see PxSimulationEventCallback setSimulationEventCallback()

</member>
<member name="M:physx.PxScene.setContactModifyCallback(physx.PxContactModifyCallback*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="777">
	\brief Sets a user callback object, which receives callbacks on all contacts generated for specified actors.

	\note Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.

	\param[in] callback Asynchronous user contact modification callback. See #PxContactModifyCallback.

</member>
<member name="M:physx.PxScene.setCCDContactModifyCallback(physx.PxCCDContactModifyCallback*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="786">
	\brief Sets a user callback object, which receives callbacks on all CCD contacts generated for specified actors.

	\note Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.

	\param[in] callback Asynchronous user contact modification callback. See #PxCCDContactModifyCallback.

</member>
<member name="M:physx.PxScene.getContactModifyCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="795">
	\brief Retrieves the PxContactModifyCallback pointer set with setContactModifyCallback().

	\return The current user contact modify callback pointer. See #PxContactModifyCallback.

	@see PxContactModifyCallback setContactModifyCallback()

</member>
<member name="M:physx.PxScene.getCCDContactModifyCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="805">
	\brief Retrieves the PxCCDContactModifyCallback pointer set with setContactModifyCallback().

	\return The current user contact modify callback pointer. See #PxContactModifyCallback.

	@see PxContactModifyCallback setContactModifyCallback()

</member>
<member name="M:physx.PxScene.setBroadPhaseCallback(physx.PxBroadPhaseCallback*,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="815">
	\brief Sets a broad-phase user callback object.

	Multiclient behavior: unlike the PxBroadPhaseCallback that can be specified in the PxSceneDesc, this method 
	lets the user associate additional callbacks with clients other than PX_DEFAULT_CLIENT. This way 
	each client can register its own callback class. Each callback function has a somewhat different
	way of determining which clients' callbacks will be called in a certain event. Refer to the documentation
	of particular callback functions inside PxBroadPhaseCallback for this information.

	\note Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.

	\param[in] callback	Asynchronous broad-phase callback. See #PxBroadPhaseCallback.
	\param[in] client	The client to be associated with this callback.

</member>
<member name="M:physx.PxScene.getBroadPhaseCallback(System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="831">
	\brief Retrieves the PxBroadPhaseCallback pointer set with setBroadPhaseCallback().

	\param[in] client The client whose callback object is to be returned.

	\return The current broad-phase callback pointer. See #PxBroadPhaseCallback.

	@see PxBroadPhaseCallback setBroadPhaseCallback()

</member>
<member name="M:physx.PxScene.getFilterShaderData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="845">
@name Collision Filtering

	\brief Gets the shared global filter data in use for this scene.

	\note The reference points to a copy of the original filter data specified in PxSceneDesc.filterShaderData.

	\return Shared filter data for filter shader.

	@see getFilterShaderDataSize() PxSceneDesc.filterShaderData PxSimulationFilterShader

</member>
<member name="M:physx.PxScene.getFilterShaderDataSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="860">
	\brief Gets the size of the shared global filter data (#PxSceneDesc.filterShaderData)

	\return Size of shared filter data [bytes].

	@see getFilterShaderData() PxSceneDesc.filterShaderDataSize PxSimulationFilterShader

</member>
<member name="M:physx.PxScene.getFilterShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="869">
	\brief Gets the custom collision filter shader in use for this scene.

	\return Filter shader class that defines the collision pair filtering.

	@see PxSceneDesc.filterShader PxSimulationFilterShader

</member>
<member name="M:physx.PxScene.getFilterCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="879">
	\brief Gets the custom collision filter callback in use for this scene.

	\return Filter callback class that defines the collision pair filtering.

	@see PxSceneDesc.filterCallback PxSimulationFilterCallback

</member>
<member name="M:physx.PxScene.resetFiltering(physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="889">
	\brief Marks the object to reset interactions and re-run collision filters in the next simulation step.
	
	This call forces the object to remove all existing collision interactions, to search anew for existing contact
	pairs and to run the collision filters again for found collision pairs.

	\note The operation is supported for PxParticleBase and PxRigidActor objects only.

	\note All persistent state of existing interactions will be lost and can not be retrieved even if the same collison pair
	is found again in the next step. This will mean, for example, that you will not get notified about persistent contact
	for such an interaction (see #PxPairFlag::eNOTIFY_TOUCH_PERSISTS), the contact pair will be interpreted as newly found instead.

	\note Lost touch contact reports will be sent for every collision pair which includes this shape, if they have
	been requested through #PxPairFlag::eNOTIFY_TOUCH_LOST or #PxPairFlag::eNOTIFY_THRESHOLD_FORCE_LOST.

	\note This is an expensive operation, don't use it if you don't have to.

	\note Can be used to retrieve collision pairs that were killed by the collision filters (see #PxFilterFlag::eKILL)

	\note It is invalid to use this method if the actor has not been added to a scene already.

	\note It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.

	<b>Sleeping:</b> Does wake up the actor.

	\param[in] actor The actor for which to re-evaluate interactions.

	@see PxSimulationFilterShader PxSimulationFilterCallback

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxScene.resetFiltering(physx.PxRigidActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxShape*!System.Runtime.CompilerServices.IsConst*,System.UInt32)'. -->
<member name="M:physx.PxScene.simulate(System.Single,physx.PxBaseTask*,System.Void*,System.UInt32,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="939">
@name Simulation

 	\brief Advances the simulation by an elapsedTime time.
	
	\note Large elapsedTime values can lead to instabilities. In such cases elapsedTime
	should be subdivided into smaller time intervals and simulate() should be called
	multiple times for each interval.

	Calls to simulate() should pair with calls to fetchResults():
 	Each fetchResults() invocation corresponds to exactly one simulate()
 	invocation; calling simulate() twice without an intervening fetchResults()
 	or fetchResults() twice without an intervening simulate() causes an error
 	condition.
 
 	scene-&gt;simulate();
 	...do some processing until physics is computed...
 	scene-&gt;fetchResults();
 	...now results of run may be retrieved.


	\param[in] elapsedTime Amount of time to advance simulation by. The parameter has to be larger than 0, else the resulting behavior will be undefined. <b>Range:</b> (0, PX_MAX_F32)
	\param[in] completionTask if non-NULL, this task will have its refcount incremented in simulate(), then
	decremented when the scene is ready to have fetchResults called. So the task will not run until the
	application also calls removeReference().
	\param[in] scratchMemBlock a memory region for physx to use for temporary data during simulation. This block may be reused by the application
	after fetchResults returns. Must be aligned on a 16-byte boundary
	\param[in] scratchMemBlockSize the size of the scratch memory block. Must be a multiple of 16K.
	\param[in] controlSimulation if true, the scene controls its PxTaskManager simulation state. Leave
    true unless the application is calling the PxTaskManager start/stopSimulation() methods itself.

	@see fetchResults() checkResults()

</member>
<member name="M:physx.PxScene.solve(System.Single,physx.PxBaseTask*,System.Void*,System.UInt32,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="977">
 	\brief Advances the simulation by an elapsedTime time.
	
	\note Not implemented in this release!

</member>
<member name="M:physx.PxScene.collide(System.Single,physx.PxBaseTask*,System.Void*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="985">
\brief Performs collision detection for the scene over elapsedTime

\note Not implemented in this release!

</member>
<member name="M:physx.PxScene.checkResults(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="993">
	\brief This checks to see if the simulation run has completed.

	This does not cause the data available for reading to be updated with the results of the simulation, it is simply a status check.
	The bool will allow it to either return immediately or block waiting for the condition to be met so that it can return true
	
	\param[in] block When set to true will block until the condition is met.
	\return True if the results are available.

	@see simulate() fetchResults()

</member>
<member name="M:physx.PxScene.fetchResults(System.Boolean,System.UInt32*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1006">
	This is the big brother to checkResults() it basically does the following:
	
	\code
	if ( checkResults(block) )
	{
		fire appropriate callbacks
		swap buffers
		return true
	}
	else
		return false

	\endcode

	\param[in] block When set to true will block until the condition is met.
	\param[out] errorState Used to retrieve hardware error codes. A non zero value indicates an error.
	\return True if the results have been fetched.

	@see simulate() checkResults()

</member>
<member name="M:physx.PxScene.flush(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1029">
\deprecated
\brief This method has been deprecated and will be removed in a future update. @see flushSimulation()

</member>
<member name="M:physx.PxScene.flushSimulation(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1035">
	\brief Clear internal buffers and free memory.

	This method can be used to clear buffers and free internal memory without having to destroy the scene. Can be useful if
	the physics data gets streamed in and a checkpoint with a clean state should be created.

	\note It is not allowed to call this method while the simulation is running. The call will fail.
	
	\param[in] sendPendingReports When set to true pending reports will be sent out before the buffers get cleaned up (for instance lost touch contact/trigger reports due to deleted objects).

</member>
<member name="M:physx.PxScene.setGravity(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1047">
	\brief Sets a constant gravity for the entire scene.

	<b>Sleeping:</b> Does <b>NOT</b> wake the actor up automatically.

	\param[in] vec A new gravity vector(e.g. PxVec3(0.0f,-9.8f,0.0f) ) <b>Range:</b> force vector

	@see PxSceneDesc.gravity getGravity()

</member>
<member name="M:physx.PxScene.getGravity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1058">
	\brief Retrieves the current gravity setting.

	\return The current gravity for the scene.

	@see setGravity() PxSceneDesc.gravity

</member>
<member name="M:physx.PxScene.setBounceThresholdVelocity(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1067">
	\brief Set the bounce threshold velocity.  Collision speeds below this threshold will not cause a bounce.

	@see PxSceneDesc::bounceThresholdVelocity, getBounceThresholdVelocity

</member>
<member name="M:physx.PxScene.getBounceThresholdVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1074">
	\brief Return the bounce threshold velocity.

	@see PxSceneDesc.bounceThresholdVelocity, setBounceThresholdVelocity

</member>
<member name="M:physx.PxScene.setCCDMaxPasses(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1082">
	\brief Sets the maximum number of CCD passes

	\param[in] ccdMaxPasses Maximum number of CCD passes

	@see PxSceneDesc.ccdMaxPasses getCCDMaxPasses()


</member>
<member name="M:physx.PxScene.getCCDMaxPasses" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1092">
	\brief Gets the maximum number of CCD passes.

	\return The maximum number of CCD passes.

	@see PxSceneDesc::ccdMaxPasses setCCDMaxPasses()


</member>
<member name="M:physx.PxScene.getContactCorrelationDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1102">
	\brief Return the value of PxSceneDesc::contactCorrelationDistance that was set when creating the scene with PxPhysics::createScene

	@see PxSceneDesc::contactCorrelationDistance,  PxPhysics::createScene

</member>
<member name="M:physx.PxScene.getFrictionOffsetThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1109">
	\brief Return the value of frictionOffsetThreshold that was set in PxSceneDesc when creating the scene with PxPhysics::createScene

	@see PxSceneDesc::frictionOffsetThreshold,  PxPhysics::createScene

</member>
<member name="M:physx.PxScene.getMeshContactMargin" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1116">
	\deprecated
	\brief Return the value of PxSceneDesc::meshContactMargin that was set when creating the scene with PxPhysics::createScene

	@see PxSceneDesc::meshContactMargin, PxPhysics::createScene

</member>
<member name="M:physx.PxScene.setFrictionType(physx.PxFrictionType.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1124">
\brief Set the friction model.
@see PxFrictionType, PxSceneDesc::frictionType

</member>
<member name="M:physx.PxScene.getFrictionType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1130">
\brief Return the friction model.
@see PxFrictionType, PxSceneDesc::frictionType

</member>
<member name="M:physx.PxScene.setVisualizationParameter(physx.PxVisualizationParameter.Enum,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1139">
@name Visualization and Statistics

	\brief Function that lets you set debug visualization parameters.

	Returns false if the value passed is out of range for usage specified by the enum.

	\param[in] param	Parameter to set. See #PxVisualizationParameter
	\param[in] value	The value to set, see #PxVisualizationParameter for allowable values. Setting to zero disables visualization for the specified property, setting to a positive value usually enables visualization and defines the scale factor.
	\return False if the parameter is out of range.

	@see getVisualizationParameter PxVisualizationParameter getRenderBuffer()

</member>
<member name="M:physx.PxScene.getVisualizationParameter(physx.PxVisualizationParameter.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1155">
	\brief Function that lets you query debug visualization parameters.

	\param[in] paramEnum The Parameter to retrieve.
	\return The value of the parameter.

	@see setVisualizationParameter PxVisualizationParameter

</member>
<member name="M:physx.PxScene.setVisualizationCullingBox(physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1166">
\brief Defines a box in world space to which visualization geometry will be (conservatively) culled

\param[in] box the box to which the geometry will be culled.
@see setVisualizationParameter getVisualizationCullingBox getRenderBuffer()

</member>
<member name="M:physx.PxScene.getVisualizationCullingBox" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1174">
	\brief Retrieves the visualization culling box.

	\return the box to which the geometry will be culled.
	@see setVisualizationParameter setVisualizationCullingBox 

</member>
<member name="M:physx.PxScene.getRenderBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1182">
	\brief Retrieves the render buffer.
	
	This will contain the results of any active visualization for this scene.

	\note Do not use this method while the simulation is running. Calls to this method while result in undefined behaviour.

	\return The render buffer.

	@see PxRenderBuffer

</member>
<member name="M:physx.PxScene.getSimulationStatistics(physx.PxSimulationStatistics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1195">
	\brief Call this method to retrieve statistics for the current simulation step.

	\note Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.

	\param[out] stats Used to retrieve statistics for the current simulation step.

	@see PxSimulationStatistics

</member>
<member name="M:physx.PxScene.getStaticStructure" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1210">
@name Scene Query

	\brief Return the value of PxSceneDesc::staticStructure that was set when creating the scene with PxPhysics::createScene

	@see PxSceneDesc::staticStructure, PxPhysics::createScene

</member>
<member name="M:physx.PxScene.getDynamicStructure" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1221">
	\brief Return the value of PxSceneDesc::dynamicStructure that was set when creating the scene with PxPhysics::createScene

	@see PxSceneDesc::dynamicStructure, PxPhysics::createScene

</member>
<member name="M:physx.PxScene.flushQueryUpdates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1228">
	\brief Flushes any changes in the simulation to the scene query representation.

	This method updates the state of the scene query representation to match changes in the scene state.

	By default, these changes are buffered until the next query is submitted. Calling this function will not change
	the results from scene queries, but can be used to ensure that a query will not perform update work in the course of 
	its execution.
	
	A thread performing updates will hold a write lock on the query structure, and thus stall other querying threads. In multithread
	scenarios it can be useful to explicitly schedule the period where this lock may be held for a significant period, so that
	subsequent queries issued from multiple threads will not block.

</member>
<member name="M:physx.PxScene.createBatchQuery(physx.PxBatchQueryDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1243">
	\brief Creates a BatchQuery object. 

	Scene queries like raycasts, overlap tests and sweeps are batched in this object and are then executed at once. See #PxBatchQuery.

	\param[in] desc The descriptor of scene query. Scene Queries need to register a callback. See #PxBatchQueryDesc.

	@see PxBatchQuery PxBatchQueryDesc

</member>
<member name="M:physx.PxScene.createVolumeCache(System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1254">
	\brief Creates a volume cache. See the Guide, "Scene Queries" section, "Volume Caching" subsection for more information.

	@see PxVolumeCache PxVolumeCache.release()

</member>
<member name="M:physx.PxScene.setDynamicTreeRebuildRateHint(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1261">
	\brief Sets the rebuild rate of the dynamic tree pruning structures.

	\param[in] dynamicTreeRebuildRateHint Rebuild rate of the dynamic tree pruning structures.

	@see PxSceneDesc.dynamicTreeRebuildRateHint getDynamicTreeRebuildRateHint() forceDynamicTreeRebuild()

</member>
<member name="M:physx.PxScene.getDynamicTreeRebuildRateHint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1270">
	\brief Retrieves the rebuild rate of the dynamic tree pruning structures.

	\return The rebuild rate of the dynamic tree pruning structures.

	@see PxSceneDesc.dynamicTreeRebuildRateHint setDynamicTreeRebuildRateHint() forceDynamicTreeRebuild()

</member>
<member name="M:physx.PxScene.forceDynamicTreeRebuild(System.Boolean,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1279">
	\brief Forces dynamic trees to be immediately rebuilt.

	\param[in] rebuildStaticStructure	True to rebuild the dynamic tree containing static objects
	\param[in] rebuildDynamicStructure	True to rebuild the dynamic tree containing dynamic objects

	@see PxSceneDesc.dynamicTreeRebuildRateHint setDynamicTreeRebuildRateHint() getDynamicTreeRebuildRateHint()

</member>
<member name="M:physx.PxScene.raycast(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxHitCallback&lt;physx.PxRaycastHit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1289">
	\brief Performs a raycast against objects in the scene, returns results in a PxRaycastBuffer object
	or via a custom user callback implementation inheriting from PxRaycastCallback.

	\note	Touching hits are not ordered.
	\note	Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in user guide article SceneQuery. User can ignore such objects by employing one of the provided filter mechanisms.

	\param[in] origin		Origin of the ray.
	\param[in] unitDir		Normalized direction of the ray.
	\param[in] distance		Length of the ray. Has to be in the [0, inf) range.
	\param[out] hitCall		Raycast hit buffer or callback object used to report raycast hits.
	\param[in] hitFlags		Specifies which properties per hit should be computed and returned via the hit callback.
	\param[in] filterData	Filtering data passed to the filer shader. See #PxQueryFilterData #PxBatchQueryPreFilterShader, #PxBatchQueryPostFilterShader
	\param[in] filterCall	Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to be blocking.
	\param[in] cache		Cached hit shape (optional). Ray is tested against cached shape first. If no hit is found the ray gets queried against the scene.
							Note: Filtering is not executed for a cached shape if supplied; instead, if a hit is found, it is assumed to be a blocking hit.
							Note: Using past touching hits as cache will produce incorrect behavior since the cached hit will always be treated as blocking.

	\return True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.

	@see PxRaycastCallback PxRaycastBuffer PxQueryFilterData PxQueryFilterCallback PxQueryCache PxRaycastHit PxQueryFlag PxQueryFlag::eANY_HIT

</member>
<member name="M:physx.PxScene.sweep(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxHitCallback&lt;physx.PxSweepHit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,Sy" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1317">
	\brief Performs a sweep test against objects in the scene, returns results in a PxSweepBuffer object
	or via a custom user callback implementation inheriting from PxSweepCallback.
	
	\note	Touching hits are not ordered.
	\note	If a shape from the scene is already overlapping with the query shape in its starting position,
			the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.

	\param[in] geometry		Geometry of object to sweep (supported types are: box, sphere, capsule, convex).
	\param[in] pose			Pose of the sweep object.
	\param[in] unitDir		Normalized direction of the sweep.
	\param[in] distance		Sweep distance. Needs to be in [0, inf) range and &gt;0 if eASSUME_NO_INITIAL_OVERLAP was specified. Will be clamped to PX_MAX_SWEEP_DISTANCE.
	\param[out] hitCall		Sweep hit buffer or callback object used to report sweep hits.
	\param[in] hitFlags		Specifies which properties per hit should be computed and returned via the hit callback.
	\param[in] filterData	Filtering data and simple logic.
	\param[in] filterCall	Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to be blocking.
	\param[in] cache		Cached hit shape (optional). Sweep is performed against cached shape first. If no hit is found the sweep gets queried against the scene.
							Note: Filtering is not executed for a cached shape if supplied; instead, if a hit is found, it is assumed to be a blocking hit.
							Note: Using past touching hits as cache will produce incorrect behavior since the cached hit will always be treated as blocking.
	\param[in] inflation	This parameter creates a skin around the swept geometry which increases its extents for sweeping. The sweep will register a hit as soon as the skin touches a shape, and will return the corresponding distance and normal.
							Note: ePRECISE_SWEEP doesn't support inflation. Therefore the sweep will be performed with zero inflation.	
	
	\return True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.
							

	@see PxSweepCallback PxSweepBuffer PxQueryFilterData PxQueryFilterCallback PxSweepHit PxQueryCache

</member>
<member name="M:physx.PxScene.overlap(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxHitCallback&lt;physx.PxOverlapHit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1350">
	\brief Performs an overlap test of a given geometry against objects in the scene, returns results in a PxOverlapBuffer object
	or via a custom user callback implementation inheriting from PxOverlapCallback.
	
	\note Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see #PxQueryHitType).

	\param[in] geometry		Geometry of object to check for overlap (supported types are: box, sphere, capsule, convex).
	\param[in] pose			Pose of the object.
	\param[out] hitCall		Overlap hit buffer or callback object used to report overlap hits.
	\param[in] filterData	Filtering data and simple logic. See #PxQueryFilterData #PxQueryFilterCallback
	\param[in] filterCall	Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to overlap.

	\return True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.

	\note eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.
	\note If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed.

	@see PxOverlapCallback PxOverlapBuffer PxHitFlags PxQueryFilterData PxQueryFilterCallback

</member>
<member name="M:physx.PxScene.raycastAny(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxQueryHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1376">
\deprecated 
</member>
<member name="M:physx.PxScene.raycastSingle(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxRaycastHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1392">
\deprecated 
</member>
<member name="M:physx.PxScene.raycastMultiple(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxRaycastHit*,System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1407">
\deprecated 
</member>
<member name="M:physx.PxScene.sweepAny(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxQueryHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,System.Byte,System.S" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1437">
\deprecated 
</member>
<member name="M:physx.PxScene.sweepSingle(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxSweepHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,System.Byte,Syste" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1458">
\deprecated 
</member>
<member name="M:physx.PxScene.sweepMultiple(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxSweepHit*,System.UInt32,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerSer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1476">
\deprecated 
</member>
<member name="M:physx.PxScene.overlapMultiple(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxOverlapHit*,System.UInt32,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1507">
\deprecated 
</member>
<member name="M:physx.PxScene.overlapAny(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxOverlapHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1536">
\deprecated 
</member>
<member name="M:physx.PxScene.getSceneQueryStaticTimestamp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1553">
	\brief Retrieves the scene's internal scene query timestamp, increased each time a change to the
	static scene query structure is performed.

	\return scene query static timestamp

</member>
<member name="M:physx.PxScene.getBroadPhaseType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1563">
@name Broad-phase

	\brief Returns broad-phase type.

	\return Broad-phase type

</member>
<member name="M:physx.PxScene.getBroadPhaseCaps(physx.PxBroadPhaseCaps*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1574">
	\brief Gets broad-phase caps.

	\param[out]	caps	Broad-phase caps
	\return True if success

</member>
<member name="M:physx.PxScene.getNbBroadPhaseRegions" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1582">
	\brief Returns number of regions currently registered in the broad-phase.

	\return Number of regions

</member>
<member name="M:physx.PxScene.getBroadPhaseRegions(physx.PxBroadPhaseRegionInfo*,System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1589">
	\brief Gets broad-phase regions.

	\param[out]	userBuffer	Returned broad-phase regions
	\param[in]	bufferSize	Size of userBuffer
	\param[in]	startIndex	Index of first desired region, in [0 ; getNbRegions()[
	\return Number of written out regions

</member>
<member name="M:physx.PxScene.addBroadPhaseRegion(physx.PxBroadPhaseRegion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1599">
	\brief Adds a new broad-phase region.

	Note that by default, objects already existing in the SDK that might touch this region will not be automatically
	added to the region. In other words the newly created region will be empty, and will only be populated with new
	objects when they are added to the simulation, or with already existing objects when they are updated.

	It is nonetheless possible to override this default behavior and let the SDK populate the new region automatically
	with already existing objects overlapping the incoming region. This has a cost though, and it should only be used
	when the game can not guarantee that all objects within the new region will be added to the simulation after the
	region itself.

	\param[in]	region			User-provided region data
	\param[in]	populateRegion	Automatically populate new region with already existing objects overlapping it
	\return Handle for newly created region, or 0xffffffff in case of failure.

</member>
<member name="M:physx.PxScene.removeBroadPhaseRegion(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1617">
	\brief Removes a new broad-phase region.

	If the region still contains objects, and if those objects do not overlap any region any more, they are not
	automatically removed from the simulation. Instead, the PxBroadPhaseCallback::onObjectOutOfBounds notification
	is used for each object. Users are responsible for removing the objects from the simulation if this is the
	desired behavior.

	If the handle is invalid, or if a valid handle is removed twice, an error message is sent to the error stream.

	\param[in]	handle	Region's handle, as returned by PxScene::addBroadPhaseRegion.
	\return True if success

</member>
<member name="M:physx.PxScene.getTaskManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1636">
@name Threads and Memory

	\brief Get the task manager associated with this scene

	\return the task manager associated with the scene

</member>
<member name="M:physx.PxScene.lockRead(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1648">
	\brief Lock the scene for reading from the calling thread.

	When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockRead() must be 
	called before any read calls are made on the scene.

	Multiple threads may read at the same time, no threads may read while a thread is writing.
	If a call to lockRead() is made while another thread is holding a write lock 
	then the calling thread will be blocked until the writing thread calls unlockWrite().

	\note Lock upgrading is *not* supported, that means it is an error to
	call lockRead() followed by lockWrite().

	\note Recursive locking is supported but each lockRead() call must be paired with an unlockRead().

	\param file String representing the calling file, for debug purposes
	\param line The source file line number, for debug purposes

</member>
<member name="M:physx.PxScene.unlockRead" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1668">
	\brief Unlock the scene from reading.

	\note Each unlockRead() must be paired with a lockRead() from the same thread.

</member>
<member name="M:physx.PxScene.lockWrite(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1675">
	\brief Lock the scene for writing from this thread.

	When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockWrite() must be 
	called before any write calls are made on the scene.

	Only one thread may write at a time and no threads may read while a thread is writing.
	If a call to lockWrite() is made and there are other threads reading then the 
	calling thread will be blocked until the readers complete.

	Writers have priority. If a thread is blocked waiting to write then subsequent calls to 
	lockRead() from other threads will be blocked until the writer completes.

	\note If multiple threads are waiting to write then the thread that is first
	granted access depends on OS scheduling.

	\note Recursive locking is supported but each lockWrite() call must be paired 
	with an unlockWrite().	

	\note If a thread has already locked the scene for writing then it may call
	lockRead().

	\param file String representing the calling file, for debug purposes
	\param line The source file line number, for debug purposes

</member>
<member name="M:physx.PxScene.unlockWrite" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1702">
	\brief Unlock the scene from writing.

	\note Each unlockWrite() must be paired with a lockWrite() from the same thread.

</member>
<member name="M:physx.PxScene.setNbContactDataBlocks(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1710">
	\brief set the cache blocks that can be used during simulate(). 
	
	Each frame the simulation requires memory to store contact, friction, and contact cache data. This memory is used in blocks of 16K.
	Each frame the blocks used by the previous frame are freed, and may be retrieved by the application using PxScene::flushSimulation()

	This call will force allocation of cache blocks if the numBlocks parameter is greater than the currently allocated number
	of blocks, and less than the max16KContactDataBlocks parameter specified at scene creation time.

	\param[in] numBlocks The number of blocks to allocate.	

	@see PxSceneDesc.nbContactDataBlocks PxSceneDesc.maxNbContactDataBlocks flushSimulation() getNbContactDataBlocksUsed getMaxNbContactDataBlocksUsed

</member>
<member name="M:physx.PxScene.getNbContactDataBlocksUsed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1726">
	\brief get the number of cache blocks currently used by the scene 

	This function may not be called while the scene is simulating

	\return the number of cache blocks currently used by the scene

	@see PxSceneDesc.nbContactDataBlocks PxSceneDesc.maxNbContactDataBlocks flushSimulation() setNbContactDataBlocks() getMaxNbContactDataBlocksUsed()

</member>
<member name="M:physx.PxScene.getMaxNbContactDataBlocksUsed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1737">
	\brief get the maximum number of cache blocks used by the scene 

	This function may not be called while the scene is simulating

	\return the maximum number of cache blocks everused by the scene

	@see PxSceneDesc.nbContactDataBlocks PxSceneDesc.maxNbContactDataBlocks flushSimulation() setNbContactDataBlocks() getNbContactDataBlocksUsed()

</member>
<member name="M:physx.PxScene.getContactReportStreamBufferSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1749">
	\brief Return the value of PxSceneDesc::contactReportStreamBufferSize that was set when creating the scene with PxPhysics::createScene

	@see PxSceneDesc::contactReportStreamBufferSize, PxPhysics::createScene

</member>
<member name="M:physx.PxScene.setSolverBatchSize(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1757">
	\brief Sets the number of actors required to spawn a separate rigid body solver thread.

	\param[in] solverBatchSize Number of actors required to spawn a separate rigid body solver thread.

	<b>Platform specific:</b> Not applicable on PS3.

	@see PxSceneDesc.solverBatchSize getSolverBatchSize()

</member>
<member name="M:physx.PxScene.getSolverBatchSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1768">
	\brief Retrieves the number of actors required to spawn a separate rigid body solver thread.

	\return Current number of actors required to spawn a separate rigid body solver thread.

	<b>Platform specific:</b> Not applicable on PS3.

	@see PxSceneDesc.solverBatchSize setSolverBatchSize()

</member>
<member name="M:physx.PxScene.getWakeCounterResetValue" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1782">
	\brief Returns the wake counter reset value.

	\return Wake counter reset value

	@see PxSceneDesc.wakeCounterResetValue

</member>
<member name="M:physx.PxScene.shiftOrigin(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscene.h" line="1791">
	\brief Shift the scene origin by the specified vector.

	The poses of all objects in the scene and the corresponding data structures will get adjusted to reflect the new origin location
	(the shift vector will get subtracted from all object positions).

	\note It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysX accordingly.

	\note Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.

	\note Make sure to propagate the origin shift to other dependent modules (for example, the character controller module etc.).

	\note This is an expensive operation and we recommend to use it only in the case where distance related precision issues may arise in areas far from the origin.

	\param[in] shift Translation vector to shift the origin by.

</member>
<member name="T:physx.PxSceneReadLock" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenelock.h" line="28">
\brief RAII wrapper for the PxScene read lock.

Use this class as follows to lock the scene for reading by the current thread 
for the duration of the enclosing scope:

	PxSceneReadLock lock(sceneRef);

\see PxScene::lockRead(), PxScene::unlockRead(), PxSceneFlag::eREQUIRE_RW_LOCK

</member>
<member name="M:physx.PxSceneReadLock.#ctor(physx.PxScene*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenelock.h" line="45">
\brief Constructor
\param scene The scene to lock for reading
\param file Optional string for debugging purposes
\param line Optional line number for debugging purposes

</member>
<member name="T:physx.PxSceneWriteLock" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenelock.h" line="67">
\brief RAII wrapper for the PxScene write lock.

Use this class as follows to lock the scene for writing by the current thread 
for the duration of the enclosing scope:

	PxSceneWriteLock lock(sceneRef);

\see PxScene::lockWrite(), PxScene::unlockWrite(), PxSceneFlag::eREQUIRE_RW_LOCK

</member>
<member name="M:physx.PxSceneWriteLock.#ctor(physx.PxScene*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxscenelock.h" line="84">
\brief Constructor
\param scene The scene to lock for writing
\param file Optional string for debugging purposes
\param line Optional line number for debugging purposes

</member>
<member name="M:physx.PxMemZero(System.Void*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmemory.h" line="31">
	\brief Sets the bytes of the provided buffer to zero.

	\param dest Pointer to block of memory to set zero.
	\param count Number of bytes to set to zero.

	\return Pointer to memory block (same as input)

</member>
<member name="M:physx.PxMemSet(System.Void*,System.Int32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmemory.h" line="44">
	\brief Sets the bytes of the provided buffer to the specified value.

	\param dest Pointer to block of memory to set to the specified value.
	\param c Value to set the bytes of the block of memory to.
	\param count Number of bytes to set to the specified value.

	\return Pointer to memory block (same as input)

</member>
<member name="M:physx.PxMemCopy(System.Void*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmemory.h" line="58">
	\brief Copies the bytes of one memory block to another. The memory blocks must not overlap.

	\note Use #PxMemMove if memory blocks overlap.

	\param dest Pointer to block of memory to copy to.
	\param src Pointer to block of memory to copy from.
	\param count Number of bytes to copy.

	\return Pointer to destination memory block

</member>
<member name="M:physx.PxMemMove(System.Void*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\foundation\pxmemory.h" line="74">
	\brief Copies the bytes of one memory block to another. The memory blocks can overlap.

	\note Use #PxMemCopy if memory blocks do not overlap.

	\param dest Pointer to block of memory to copy to.
	\param src Pointer to block of memory to copy from.
	\param count Number of bytes to copy.

	\return Pointer to destination memory block

</member>
<member name="T:physx.PxContactPairExtraDataType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="38">
\brief Extra data item types for contact pairs.

@see PxContactPairExtraDataItem.type

</member>
<member name="T:physx.PxContactPairExtraDataItem" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="55">
\brief Base class for items in the extra data stream of contact pairs

@see PxContactPairHeader.extraDataStream

</member>
<member name="F:physx.PxContactPairExtraDataItem.type" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="65">
\brief The type of the extra data stream item

</member>
<member name="T:physx.PxContactPairVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="72">
\brief Velocities of the contact pair rigid bodies

This struct is shared by multiple types of extra data items. The #type field allows to distinguish between them:
\li PxContactPairExtraDataType::ePRE_SOLVER_VELOCITY: see #PxPairFlag::ePRE_SOLVER_VELOCITY
\li PxContactPairExtraDataType::ePOST_SOLVER_VELOCITY: see #PxPairFlag::ePOST_SOLVER_VELOCITY

\note For static rigid bodies, the velocities will be set to zero.

@see PxContactPairHeader.extraDataStream

</member>
<member name="F:physx.PxContactPairVelocity.linearVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="88">
\brief The linear velocity of the rigid bodies

</member>
<member name="F:physx.PxContactPairVelocity.angularVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="93">
\brief The angular velocity of the rigid bodies

</member>
<member name="T:physx.PxContactPairPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="100">
\brief World space actor poses of the contact pair rigid bodies

@see PxContactPairHeader.extraDataStream PxPairFlag::eCONTACT_EVENT_POSE

</member>
<member name="F:physx.PxContactPairPose.globalPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="110">
\brief The world space pose of the rigid bodies

</member>
<member name="T:physx.PxContactPairIndex" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="117">
\brief Marker for the beginning of a new item set in the extra data stream.

If CCD with multiple passes is enabled, then a fast moving object might bounce on and off the same
object multiple times. Also, different shapes of the same actor might gain and lose contact with an other
object over multiple passes. This marker allows to seperate the extra data items for each collision case, as well as
distinguish the shape pair reports of different CCD passes.

Example:
Let us assume that an actor a0 with shapes s0_0 and s0_1 hits another actor a1 with shape s1.
First s0_0 will hit s1, then a0 will slightly rotate and s0_1 will hit s1 while s0_0 will lose contact with s1.
Furthermore, let us say that contact event pose information is requested as extra data.
The extra data stream will look like this:

PxContactPairIndexA | PxContactPairPoseA | PxContactPairIndexB | PxContactPairPoseB

The corresponding array of PxContactPair events (see #PxSimulationEventCallback.onContact()) will look like this:

PxContactPair(touch_found: s0_0, s1) | PxContactPair(touch_lost: s0_0, s1) | PxContactPair(touch_found: s0_1, s1)
 
The #index of PxContactPairIndexA will point to the first entry in the PxContactPair array, for PxContactPairIndexB,
#index will point to the third entry.

@see PxContactPairHeader.extraDataStream

</member>
<member name="F:physx.PxContactPairIndex.index" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="147">
\brief The next item set in the extra data stream refers to the contact pairs starting at #index in the reported PxContactPair array.

</member>
<member name="T:physx.PxContactPairExtraDataIterator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="154">
\brief A class to iterate over a contact pair extra data stream.

@see PxContactPairHeader.extraDataStream

</member>
<member name="M:physx.PxContactPairExtraDataIterator.#ctor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="161">
\brief Constructor
\param[in] stream Pointer to the start of the stream.
\param[in] size Size of the stream in bytes.

</member>
<member name="M:physx.PxContactPairExtraDataIterator.nextItemSet" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="172">
	\brief Advances the iterator to next set of extra data items.
	
	The contact pair extra data stream contains sets of items as requested by the corresponding #PxPairFlag flags
	#PxPairFlag::ePRE_SOLVER_VELOCITY, #PxPairFlag::ePOST_SOLVER_VELOCITY, #PxPairFlag::eCONTACT_EVENT_POSE. A set can contain one
	item of each plus the PxContactPairIndex item. This method parses the stream and points the iterator
	member variables to the corresponding items of the current set, if they are available. If CCD is not enabled,
	you should only get one set of items. If CCD with multiple passes is enabled, you might get more than one item
	set.

	\note Even though contact pair extra data is requested per shape pair, you will not get an item set per shape pair
	but one per actor pair. If, for example, an actor has two shapes and both collide with another actor, then
	there will only be one item set (since it applies to both shape pairs).
	
	\return True if there was another set of extra data items in the stream, else false.
	
	@see PxContactPairVelocity PxContactPairPose PxContactPairIndex

</member>
<member name="M:physx.PxContactPairExtraDataIterator.clearDataPtrs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="250">
\brief Internal helper

</member>
<member name="F:physx.PxContactPairExtraDataIterator.currPtr" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="261">
\brief Current pointer in the stream.

</member>
<member name="F:physx.PxContactPairExtraDataIterator.endPtr" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="266">
\brief Pointer to the end of the stream.

</member>
<member name="F:physx.PxContactPairExtraDataIterator.preSolverVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="271">
\brief Pointer to the current pre solver velocity item in the stream. NULL if there is none.

@see PxContactPairVelocity

</member>
<member name="F:physx.PxContactPairExtraDataIterator.postSolverVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="278">
\brief Pointer to the current post solver velocity item in the stream. NULL if there is none.

@see PxContactPairVelocity

</member>
<member name="F:physx.PxContactPairExtraDataIterator.eventPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="285">
\brief Pointer to the current contact event pose item in the stream. NULL if there is none.

@see PxContactPairPose

</member>
<member name="F:physx.PxContactPairExtraDataIterator.contactPairIndex" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="292">
\brief The contact pair index of the current item set in the stream.

@see PxContactPairIndex

</member>
<member name="T:physx.PxContactPairHeaderFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="301">
\brief Collection of flags providing information on contact report pairs.

@see PxContactPairHeader

</member>
<member name="D:physx.PxContactPairHeaderFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="318">
\brief Bitfield that contains a set of raised flags defined in PxContactPairHeaderFlag.

@see PxContactPairHeaderFlag

</member>
<member name="T:physx.PxContactPairHeader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="327">
\brief An Instance of this class is passed to PxSimulationEventCallback.onContact().

@see PxSimulationEventCallback.onContact()

</member>
<member name="F:physx.PxContactPairHeader.actors" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="337">
	\brief The two actors of the notification shape pairs.

	\note The actor pointers might reference deleted actors. This will be the case if PxPairFlag::eNOTIFY_TOUCH_LOST
		  or PxPairFlag::eNOTIFY_THRESHOLD_FORCE_LOST events were requested for the pair and one of the involved actors 
		  gets deleted or removed from the scene. Check the #flags member to see whether that is the case.
		  Do not dereference a pointer to a deleted actor. The pointer to a deleted actor is only provided 
		  such that user data structures which might depend on the pointer value can be updated.

	@see PxActor

</member>
<member name="F:physx.PxContactPairHeader.extraDataStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="350">
	\brief Stream containing extra data as requested in the PxPairFlag flags of the simulation filter.

	This pointer is only valid if any kind of extra data information has been requested for the contact report pair (see #PxPairFlag::ePOST_SOLVER_VELOCITY etc.),
	else it will be NULL.
	
	@see PxPairFlag

</member>
<member name="F:physx.PxContactPairHeader.extraDataStreamSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="360">
\brief Size of the extra data stream [bytes] 

</member>
<member name="F:physx.PxContactPairHeader.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="365">
	\brief Additional information on the contact report pair.

	@see PxContactPairHeaderFlag

</member>
<member name="T:physx.PxContactPairFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="374">
\brief Collection of flags providing information on contact report pairs.

@see PxContactPair

</member>
<member name="F:eREMOVED_SHAPE_0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="383">
\brief The shape with index 0 has been removed from the actor/scene.

</member>
<member name="F:eREMOVED_SHAPE_1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="388">
\brief The shape with index 1 has been removed from the actor/scene.

</member>
<member name="F:eDELETED_SHAPE_0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="393">
\deprecated use eREMOVED_SHAPE_0 instead

</member>
<member name="F:eDELETED_SHAPE_1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="398">
\deprecated use eREMOVED_SHAPE_1 instead

</member>
<member name="F:eACTOR_PAIR_HAS_FIRST_TOUCH" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="403">
		\brief First actor pair contact.

		The provided shape pair marks the first contact between the two actors, no other shape pair has been touching prior to the current simulation frame.

		\note: This info is only available if #PxPairFlag::eNOTIFY_TOUCH_FOUND has been declared for the pair.

</member>
<member name="F:eACTOR_PAIR_LOST_TOUCH" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="412">
		\brief All contact between the actor pair was lost.

		All contact between the two actors has been lost, no shape pairs remain touching after the current simulation frame.

</member>
<member name="F:eINTERNAL_HAS_FACE_INDICES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="419">
		\brief Internal flag, used by #PxContactPair.extractContacts()

		For meshes/heightfields the flag indicates that the contact points provide internal triangle index information.

</member>
<member name="F:eINTERNAL_HAS_IMPULSES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="426">
		\brief Internal flag, used by #PxContactPair.extractContacts()

		The applied contact impulses are provided for every contact point. 
		This is the case if #PxPairFlag::eSOLVE_CONTACT has been set for the pair.

</member>
<member name="F:eINTERNAL_CONTACTS_ARE_FLIPPED" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="434">
		\brief Internal flag, used by #PxContactPair.extractContacts()

		The provided contact point information is flipped with regards to the shapes of the contact pair. This mainly concerns the order of the internal triangle indices.

</member>
<member name="D:physx.PxContactPairFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="443">
\brief Bitfield that contains a set of raised flags defined in PxContactPairFlag.

@see PxContactPairFlag

</member>
<member name="T:physx.PxContactPairPoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="452">
\brief A contact point as used by contact notification

</member>
<member name="F:physx.PxContactPairPoint.position" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="457">
\brief The position of the contact point between the shapes, in world space. 

</member>
<member name="F:physx.PxContactPairPoint.separation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="462">
\brief The separation of the shapes at the contact point.  A negative separation denotes a penetration.

</member>
<member name="F:physx.PxContactPairPoint.normal" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="467">
\brief The normal of the contacting surfaces at the contact point. The normal direction points from the second shape to the first shape.

</member>
<member name="F:physx.PxContactPairPoint.internalFaceIndex0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="472">
\brief The surface index of shape 0 at the contact point.  This is used to identify the surface material.

</member>
<member name="F:physx.PxContactPairPoint.impulse" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="477">
\brief The impulse applied at the contact point, in world space. Divide by the simulation time step to get a force value.

</member>
<member name="F:physx.PxContactPairPoint.internalFaceIndex1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="482">
\brief The surface index of shape 1 at the contact point.  This is used to identify the surface material.

</member>
<member name="T:physx.PxContactPair" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="489">
\brief Contact report pair information.

Instances of this class are passed to PxSimulationEventCallback.onContact(). If contact reports have been requested for a pair of shapes (see #PxPairFlag),
then the corresponding contact information will be provided through this structure.

@see PxSimulationEventCallback.onContact()

</member>
<member name="F:physx.PxContactPair.shapes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="502">
	\brief The two shapes that make up the pair.

	\note The shape pointers might reference deleted shapes. This will be the case if #PxPairFlag::eNOTIFY_TOUCH_LOST
		  or #PxPairFlag::eNOTIFY_THRESHOLD_FORCE_LOST events were requested for the pair and one of the involved shapes 
		  gets deleted. Check the #flags member to see whether that is the case. Do not dereference a pointer to a 
		  deleted shape. The pointer to a deleted shape is only provided such that user data structures which might 
		  depend on the pointer value can be updated.

	@see PxShape

</member>
<member name="F:physx.PxContactPair.contactStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="515">
	\brief Contact stream containing contact point data

	This pointer is only valid if contact point information has been requested for the contact report pair (see #PxPairFlag::eNOTIFY_CONTACT_POINTS).
	Use #extractContacts() as a reference for the data layout of the stream.

</member>
<member name="F:physx.PxContactPair.requiredBufferSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="523">
\brief Size of the contact stream [bytes] including force buffer

</member>
<member name="F:physx.PxContactPair.contactCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="528">
\brief Number of contact points stored in the contact stream

</member>
<member name="F:physx.PxContactPair.contactStreamSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="533">
\brief Size of the contact stream [bytes] not including force buffer

</member>
<member name="F:physx.PxContactPair.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="539">
	\brief Additional information on the contact report pair.

	@see PxContactPairFlag

</member>
<member name="F:physx.PxContactPair.events" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="546">
	\brief Flags raised due to the contact.

	The events field is a combination of:

	<ul>
	<li>PxPairFlag::eNOTIFY_TOUCH_FOUND,</li>
	<li>PxPairFlag::eNOTIFY_TOUCH_PERSISTS,</li>
	<li>PxPairFlag::eNOTIFY_TOUCH_LOST,</li>
	<li>PxPairFlag::eNOTIFY_TOUCH_CCD,</li>
	<li>PxPairFlag::eNOTIFY_THRESHOLD_FORCE_FOUND,</li>
	<li>PxPairFlag::eNOTIFY_THRESHOLD_FORCE_PERSISTS,</li>
	<li>PxPairFlag::eNOTIFY_THRESHOLD_FORCE_LOST</li>
	</ul>

	See the documentation of #PxPairFlag for an explanation of each.

	\note eNOTIFY_TOUCH_CCD can get raised even if the pair did not request this event. However, in such a case it will only get
	raised in combination with one of the other flags to point out that the other event occured during a CCD pass.

	@see PxPairFlag

</member>
<member name="M:physx.PxContactPair.extractContacts(physx.PxContactPairPoint*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="572">
	\brief Extracts the contact points from the stream and stores them in a convenient format.
	
	\param[in] userBuffer Array of PxContactPairPoint structures to extract the contact points to. The number of contacts for a pair is defined by #contactCount
	\param[in] bufferSize Number of PxContactPairPoint structures the provided buffer can store.
	\return Number of contact points written to the buffer.

	@see PxContactPairPoint

</member>
<member name="M:physx.PxContactPair.bufferContacts(physx.PxContactPair*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="583">
	\brief Helper method to clone the contact pair and copy the contact data stream into a user buffer.
	
	The contact data stream is only accessible during the contact report callback. This helper function provides copy functionality
	to buffer the contact stream information such that it can get accessed at a later stage.

	\param[in] newPair The contact pair info will get copied to this instance. The contact data stream pointer of the copy will be redirected to the provided user buffer. Use NULL to skip the contact pair copy operation.
	\param[in] bufferMemory Memory block to store the contact data stream to. At most #requiredBufferSize bytes will get written to the buffer.

</member>
<member name="T:physx.PxTriggerPairFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="666">
\brief Collection of flags providing information on trigger report pairs.

@see PxTriggerPair

</member>
<member name="D:physx.PxTriggerPairFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="683">
\brief Bitfield that contains a set of raised flags defined in PxTriggerPairFlag.

@see PxTriggerPairFlag

</member>
<member name="T:physx.PxTriggerPair" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="692">
\brief Descriptor for a trigger pair.

An array of these structs gets passed to the PxSimulationEventCallback::onTrigger() report.

\note The shape pointers might reference deleted shapes. This will be the case if #PxPairFlag::eNOTIFY_TOUCH_LOST
      events were requested for the pair and one of the involved shapes gets deleted. Check the #flags member to see
	  whether that is the case. Do not dereference a pointer to a deleted shape. The pointer to a deleted shape is 
	  only provided such that user data structures which might depend on the pointer value can be updated.

@see PxSimulationEventCallback.onTrigger()

</member>
<member name="T:physx.PxConstraintInfo" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="717">
\brief Descriptor for a broken constraint.

An array of these structs gets passed to the PxSimulationEventCallback::onConstraintBreak() report.

@see PxConstraint PxSimulationEventCallback.onConstraintBreak()

</member>
<member name="T:physx.PxSimulationEventCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="735">
\brief An interface class that the user can implement in order to receive simulation events.

The events get sent during the call to either #PxScene::fetchResults() or #PxScene::flushSimulation() with sendPendingReports=true.

\note SDK state should not be modified from within the callbacks. In particular objects should not
be created or destroyed. If state modification is needed then the changes should be stored to a buffer
and performed after the simulation step.

<b>Threading:</b> It is not necessary to make this class thread safe as it will only be called in the context of the
user thread.

@see PxScene.setSimulationEventCallback() PxScene.getSimulationEventCallback()

</member>
<member name="M:physx.PxSimulationEventCallback.onConstraintBreak(physx.PxConstraintInfo*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="752">
	\brief This is called when a breakable constraint breaks.
	
	\note The user should not release the constraint shader inside this call!

	\note No event will get reported if the constraint breaks but gets deleted while the time step is still being simulated.

	\param[in] constraints - The constraints which have been broken.
	\param[in] count       - The number of constraints

	@see PxConstraint PxConstraintDesc.linearBreakForce PxConstraintDesc.angularBreakForce

</member>
<member name="M:physx.PxSimulationEventCallback.onWake(physx.PxActor**,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="766">
	\brief This is called with the actors which have just been woken up.

	\note Only supported by rigid bodies yet.
	\note Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.
	\note Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame
	will get reported. For example, let us assume actor A is awake, then A-&gt;putToSleep() gets called, then later A-&gt;wakeUp() gets called.
	At the next simulate/fetchResults() step only an onWake() event will get triggered because that was the last transition.
	\note If an actor gets newly added to a scene with properties such that it is awake and the sleep state does not get changed by 
	the user or simulation, then an onWake() event will get sent at the next simulate/fetchResults() step.

	\param[in] actors - The actors which just woke up.
	\param[in] count  - The number of actors

	@see PxScene.setSimulationEventCallback() PxSceneDesc.simulationEventCallback PxActorFlag PxActor.setActorFlag()

</member>
<member name="M:physx.PxSimulationEventCallback.onSleep(physx.PxActor**,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="784">
	\brief This is called with the actors which have just been put to sleep.

	\note Only supported by rigid bodies yet.
	\note Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.
	\note Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame
	will get reported. For example, let us assume actor A is asleep, then A-&gt;wakeUp() gets called, then later A-&gt;putToSleep() gets called.
	At the next simulate/fetchResults() step only an onSleep() event will get triggered because that was the last transition (assuming the simulation
	does not wake the actor up).
	\note If an actor gets newly added to a scene with properties such that it is asleep and the sleep state does not get changed by 
	the user or simulation, then an onSleep() event will get sent at the next simulate/fetchResults() step.

	\param[in] actors - The actors which have just been put to sleep.
	\param[in] count  - The number of actors

	@see PxScene.setSimulationEventCallback() PxSceneDesc.simulationEventCallback PxActorFlag PxActor.setActorFlag()

</member>
<member name="M:physx.PxSimulationEventCallback.onContact(physx.PxContactPairHeader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxContactPair!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="803">
	\brief This is called when certain contact events occur.

	The method will be called for a pair of actors if one of the colliding shape pairs requested contact notification.
	You request which events are reported using the filter shader/callback mechanism (see #PxSimulationFilterShader,
	#PxSimulationFilterCallback, #PxPairFlag).
	
	Do not keep references to the passed objects, as they will be 
	invalid after this function returns.

	\param[in] pairHeader Information on the two actors whose shapes triggered a contact report.
	\param[in] pairs The contact pairs of two actors for which contact reports have been requested. See #PxContactPair.
	\param[in] nbPairs The number of provided contact pairs.

	@see PxScene.setSimulationEventCallback() PxSceneDesc.simulationEventCallback PxContactPair PxPairFlag PxSimulationFilterShader PxSimulationFilterCallback

</member>
<member name="M:physx.PxSimulationEventCallback.onTrigger(physx.PxTriggerPair*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxsimulationeventcallback.h" line="821">
	\brief This is called with the current trigger pair events.

	Shapes which have been marked as triggers using PxShapeFlag::eTRIGGER_SHAPE will send events
	according to the pair flag specification in the filter shader (see #PxPairFlag, #PxSimulationFilterShader).

	\param[in] pairs - The trigger pairs which caused events.
	\param[in] count - The number of trigger pairs.

	@see PxScene.setSimulationEventCallback() PxSceneDesc.simulationEventCallback PxPairFlag PxSimulationFilterShader PxShapeFlag PxShape.setFlag()

</member>
<member name="T:physx.PxSpatialOverlapCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="37">
\brief Callback class for overlap queries against PxSpatialIndex

@see PxSpatialIndex

</member>
<member name="M:physx.PxSpatialOverlapCallback.onHit(physx.PxSpatialIndexItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="45">
	\brief callback method invoked when an overlap query hits an item in a PxSpatialIndex structure.

	\param[in] item the item that was hit.
	\return true if the query should continue, false if it should stop

</member>
<member name="T:physx.PxSpatialLocationCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="57">
\brief Callback class for raycast and sweep queries against PxSpatialIndex

@see PxSpatialIndex

</member>
<member name="M:physx.PxSpatialLocationCallback.onHit(physx.PxSpatialIndexItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="64">
	\brief callback method invoked when a sweep or raycast query hits an item in a PxSpatialIndex structure.

	\param[in]  item the item that was hit.
	\param[in]  distance the current maximum distance of the query.
	\param[out] shrunkDistance the updated maximum distance of the query. This must be no more than the current maximum distance.

	\return true if the query should continue, false if it should stop

	@see PxAgain

</member>
<member name="T:physx.PxSpatialIndex" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="82">
\brief provides direct access to PhysX' Spatial Query engine

This class allows bounding boxes to be inserted, and then queried using sweep, raycast and overlap
checks. 

It is not thread-safe and defers handling some updates until queries are invoked, so care must be taken when calling any methods in parallel. Specifically,
to call query methods (raycast, overlap, sweep) in parallel, first call flush() to force immediate update of internal structures.

@see PxCreateSpatialIndex

</member>
<member name="M:physx.PxSpatialIndex.insert(physx.PxSpatialIndexItem*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="98">
	\brief insert a bounding box into a spatial index

	\param[in] item the item to be inserted
	\param[in] bounds the bounds of the new item

</member>
<member name="M:physx.PxSpatialIndex.update(System.UInt32,physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="107">
	\brief update a bounding box in a spatial index

	\param[in] id the id of the item to be updated
	\param[in] bounds the new bounds of the item

</member>
<member name="M:physx.PxSpatialIndex.remove(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="116">
	\brief remove an item from a spatial index

	\param[in] id the id of the item to be removed

</member>
<member name="M:physx.PxSpatialIndex.overlap(physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSpatialOverlapCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="124">
	\brief make an overlap query against a spatial index

	\param[in] aabb the axis aligned bounding box for the query
	\param[in] callback the callback to invoke when an overlap is found

</member>
<member name="M:physx.PxSpatialIndex.raycast(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxSpatialLocationCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="133">
	\brief make a raycast query against a spatial index

	\param[in] origin the origin of the ray
	\param[in] unitDir a unit vector in the direction of the ray
	\param[in] maxDist the maximum distance to cast the ray
	\param[in] callback the callback to invoke when an item is hit by the ray

</member>
<member name="M:physx.PxSpatialIndex.sweep(physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxSpatialLocationCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="146">
	\brief make a sweep query against a spatial index

	\param[in] aabb the axis aligned bounding box to sweep
	\param[in] unitDir a unit vector in the direction of the sweep
	\param[in] maxDist the maximum distance to apply the sweep
	\param[in] callback the callback to invoke when an item is hit by the sweep

</member>
<member name="M:physx.PxSpatialIndex.flush" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="159">
	\brief force an immediate update of the internal structures of the index

	For reasons of efficiency an index structure may be lazily updated at the point of query if this method is not called. Once this method
	has been called, subsequent queries (sweeps, overlaps, raycasts) may be executed in parallel until the next write call to the index (insertion,
	removal, update, rebuild)

</member>
<member name="M:physx.PxSpatialIndex.rebuildFull" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="168">
\brief force a full optimized rebuild of the index. 

</member>
<member name="M:physx.PxSpatialIndex.setIncrementalRebuildRate(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="173">
	\brief set the incremental rebuild rate for the index. 
	
	The index builds gradually in the background each time a rebuild step is taken; this value determines the number of steps required to rebuild the index.
	
	See PxScene::setDynamicTreeRebuildRateHint() for more information.

	\param[in] rate the rebuild rate

	@see PxScene::setDynamicTreeRebuildRateHint()

</member>
<member name="M:physx.PxSpatialIndex.rebuildStep" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="186">
\brief take one step in rebuilding the tree. See setIncrementalRebuildRate()

</member>
<member name="M:physx.PxSpatialIndex.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="191">
\brief release this object

</member>
<member name="M:physx.PxCreateSpatialIndex" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxspatialindex.h" line="199">
\brief Creates a spatial index.

@see PxSpatialIndex

</member>
<member name="T:physx.PxVolumeCache" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="27">
\brief Volumetric cache for local collision geometry.

Provides a mechanism for caching objects within a specified volume and performing raycast, sweep, overlap and forEach queries on the cached objects.

@see PxScene.createVolumeCache()

</member>
<member name="T:physx.PxVolumeCache.Iterator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="37">
	\brief A callback wrapper class for use with PxVolumeCache::forEach function.

	Works in tandem with #forEach(). Used to return shapes overlapping with the cache volume (set using the last fill() call) to the user.

	@see PxVolumeCache::forEach

</member>
<member name="M:physx.PxVolumeCache.Iterator.processShapes(System.UInt32,physx.PxActorShape!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="46">
		\brief Reports cache contents to the user.

		\param[in] count			The number of shapes returned with this call.
		\param[in] actorShapePairs	Array of PxActorShape pairs.

		@see PxVolumeCache::forEach

</member>
<member name="M:physx.PxVolumeCache.Iterator.finalizeQuery" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="56">
		/brief Called after the last processShapes was called.

		@see PxVolumeCache::Iterator::processShapes

</member>
<member name="T:physx.PxVolumeCache.FillStatus" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="67">
	\brief describes fill() return status.

	@see PxVolumeCache.fill() 

</member>
<member name="F:FILL_OK" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="74">
		\brief Cache fill() operation was successful, the cache is valid and had enough capacity to store all the objects within the specified cacheVolume.


</member>
<member name="F:FILL_OVER_MAX_COUNT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="80">
		\brief Over specified cache capacity.

		Cache fill() was over max count specified in PxScene.createVolumeCache() or #setMaxNbStaticShapes() and #setMaxNbDynamicShapes().
		If this value is returned the cache will be in invalid state (no caching), but all the queries will still return correct results within the specified cache volume.

		@see PxScene.createVolumeCache() #setMaxNbStaticShapes() #setMaxNbDynamicShapes()

</member>
<member name="F:FILL_UNSUPPORTED_GEOMETRY_TYPE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="90">
		\brief Unsupported geometry type.

		The geometry type of cacheVolume parameter provided to #fill() is not supported. Supported types are sphere, box, capsule.


</member>
<member name="F:FILL_OUT_OF_MEMORY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="98">
		\brief Cache fill() ran out of temporary memory for intermediate results, try reducing the cache size.


</member>
<member name="M:physx.PxVolumeCache.fill(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="105">
	\brief Fills the cache with objects intersecting the specified cacheVolume.
	
	\param[in] cacheVolume		Geometry of the cached volume (supported types are: sphere, box, capsule).
	\param[in] pose				Pose of the cache volume.

	\return a #FillStatus enum.

	@see PxVolumeCache.FillStatus

</member>
<member name="M:physx.PxVolumeCache.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="117">
	\brief Checks if the cache is valid (not over specified max capacity, for both statics and dynamics) and up-to-date.
	
	\return True if the cache is valid and up-to-date. Cache can become out-of-date if any statics or dynamics are moved or added or deleted from the scene.

	@see PxVolumeCache.FillStatus

</member>
<member name="M:physx.PxVolumeCache.invalidate" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="126">
	\brief Invalidates the cache.
	
	Marks the cache as invalid. Subsequent query will attempt to refill the cache from the scene.


</member>
<member name="M:physx.PxVolumeCache.getCacheVolume(physx.PxGeometryHolder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="134">
	\brief Retrieves the last cached volume geometry.

	\return False if the cache wasn't previously filled. True otherwise with cacheVolume from the last fill() call returned in resultVolume and corresponding transform in resultPose.

	@see #fill()

</member>
<member name="M:physx.PxVolumeCache.getNbCachedShapes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="143">
	\brief Returns the total number of cached shapes

	\return The number of shapes stored in the cache (statics+dynamics). Returns -1 if the cache is invalid.

</member>
<member name="M:physx.PxVolumeCache.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="150">
	\brief Releases the cache object and its resources.

	@see PxScene.createVolumeCache

</member>
<member name="M:physx.PxVolumeCache.forEach(physx.PxVolumeCache.Iterator*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="157">
	\brief Iterates over the scene shapes overlapping with the cache volume.

	forEach will invoke PxVolumeCache::Iterator::processShapes virtual function, returning all overlapping shapes (possibly by issuing multiple callbacks) to the user. The size of reported blocks can change depending on internal SDK implementation. Any pointers to the contents of the buffer are only valid within the scope of a single processShapes() callback function.
	If forEach is invoked on an invalid cache (empty or out of date), this call will attempt to refill the cache within specified capacity. If the cache is over capacity, an attempt will be made to allocate a temp internal buffer, retrieve the results directly from the scene and return to the user via provided iterator.
	Results from forEach will be current for the last set cacheVolume provided in fill() even if the cache is invalid and refill fails. If the number of overlapping shapes is so high that the internal temporary allocation fails this call will produce an error and return.
	
	\param iter		Iterator callback. forEach() will invokes iter.shapes() function (possibly multiple times) to return blocks of actor+shape pairs overlapped with cacheVolume to the user.

</member>
<member name="M:physx.PxVolumeCache.setMaxNbStaticShapes(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="168">
	\brief Sets the limit on the maximum number of static shapes allowed to be stored in the cache.

	If the number of cached objects goes over this limit, the query functions (forEach/raycast/sweep/overlap) will fall back to scene queries.

	\param maxCount		Maximum number of static shapes cached.

</member>
<member name="M:physx.PxVolumeCache.setMaxNbDynamicShapes(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="177">
	\brief Sets the limit on the maximum number of dynamic shapes allowed to be stored in the cache.

	If the number of cached objects goes over this limit, the query functions (forEach/raycast/sweep/overlap) will fall back to scene queries.

	\param maxCount		Maximum number of dynamic shapes cached.

</member>
<member name="M:physx.PxVolumeCache.getMaxNbStaticShapes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="186">
\brief Returns the current maximum number of static cached shapes.

\return The max number of cached statics.

</member>
<member name="M:physx.PxVolumeCache.getMaxNbDynamicShapes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="193">
	\brief Returns the current maximum number of dynamic cached shapes.

	\return The max number of cached dynamics.

</member>
<member name="M:physx.PxVolumeCache.raycast(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxHitCallback&lt;physx.PxRaycastHit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="200">
	\brief Raycast against objects in the cache, returning results via PxRaycastCallback callback or PxRaycastBuffer object
	or a custom user callback implementation.
	
	Returns whether any rigid actor is hit along the ray.

	\note Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in user guide article SceneQuery. User can ignore such objects by employing one of the provided filter mechanisms.

	\param[in] origin		Origin of the ray.
	\param[in] unitDir		Normalized direction of the ray.
	\param[in] distance		Length of the ray. Needs to be larger than 0.
	\param[out] hitCall		Raycast hit callback or hit buffer object.
	\param[in] hitFlags		Specifies which properties per hit should be computed and returned via the hit callback.
	\param[in] filterData	Filtering data and simple logic.
	\param[in] filterCall	Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to be blocking.
	\return True if a blocking hit was found or any hit was found in case PxQueryFlag::eANY_HIT flag was used.

	@see PxRaycastCallback PxRaycastBuffer PxQueryFilterData PxQueryFilterCallback PxQueryCache PxRaycastHit PxQueryFlag PxQueryFlag::eANY_HIT

</member>
<member name="M:physx.PxVolumeCache.sweep(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxHitCallback&lt;physx.PxSweepHit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="224">
	\brief Sweep against objects in the cache, returning results via PxRaycastCallback callback or PxRaycastBuffer object
	or a custom user callback implementation.
	
	Returns whether any rigid actor is hit along the sweep path.

	\param[in] geometry		Geometry of object to sweep (supported types are: box, sphere, capsule, convex).
	\param[in] pose			Pose of the sweep object.
	\param[in] unitDir		Normalized direction of the sweep.
	\param[in] distance		Sweep distance. Needs to be larger than 0. Will be clamped to PX_MAX_SWEEP_DISTANCE.
	\param[out] hitCall		Sweep hit callback or hit buffer object.
	\param[in] hitFlags		Specifies which properties per hit should be computed and returned via the hit callback.
	\param[in] filterData	Filtering data and simple logic.
	\param[in] filterCall	Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to be blocking.
	\param[in] inflation	This parameter creates a skin around the swept geometry which increases its extents for sweeping. The sweep will register a hit as soon as the skin touches a shape, and will return the corresponding distance and normal.
	\return True if a blocking hit was found or any hit was found in case PxQueryFlag::eANY_HIT flag was specified.

	@see PxSweepCallback PxSweepBuffer PxQueryFilterData PxQueryFilterCallback PxSweepHit PxQueryCache PxHitFlags

</member>
<member name="M:physx.PxVolumeCache.overlap(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxHitCallback&lt;physx.PxOverlapHit&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\pxvolumecache.h" line="250">
	\brief Test overlap between a geometry and objects in the cache.
	
	\note Filtering: Overlap tests do not distinguish between touching and blocking hit types (see #PxQueryHitType). Both get written to the hit buffer.

	\param[in] geometry			Geometry of object to check for overlap (supported types are: box, sphere, capsule, convex).
	\param[in] pose				Pose of the object.
	\param[out] hitCall			Overlap hit callback or hit buffer object.
	\param[in] filterData		Filtering data and simple logic.
	\param[in] filterCall		Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to overlap.
	\return True if a blocking hit was found or any hit was found in case PxQueryFlag::eANY_HIT flag was specified.

	@see PxOverlapCallback PxOverlapBuffer PxQueryFilterData PxQueryFilterCallback

</member>
<member name="T:physx.PxObstacle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="32">
	\brief Base class for obstacles.

	@see PxBoxObstacle PxCapsuleObstacle PxObstacleContext

</member>
<member name="T:physx.PxBoxObstacle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="58">
	\brief A box obstacle.

	@see PxObstacle PxCapsuleObstacle PxObstacleContext

</member>
<member name="T:physx.PxCapsuleObstacle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="74">
	\brief A capsule obstacle.

	@see PxBoxObstacle PxObstacle PxObstacleContext

</member>
<member name="T:physx.PxObstacleContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="94">
	\brief Context class for obstacles.

	An obstacle context class contains and manages a set of user-defined obstacles.

	@see PxBoxObstacle PxCapsuleObstacle PxObstacle

</member>
<member name="M:physx.PxObstacleContext.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="107">
\brief Releases the context.

</member>
<member name="M:physx.PxObstacleContext.getControllerManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="112">
		\brief Retrieves the controller manager associated with this context.

		\return The associated controller manager

</member>
<member name="M:physx.PxObstacleContext.addObstacle(physx.PxObstacle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="119">
		\brief Adds an obstacle to the context.

		\param	[in]	obstacle	Obstacle data for the new obstacle. The data gets copied.

		\return Handle for newly-added obstacle

</member>
<member name="M:physx.PxObstacleContext.removeObstacle(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="128">
		\brief Removes an obstacle from the context.

		\param	[in]	handle	Handle for the obstacle object that needs to be removed.

		\return True if success

</member>
<member name="M:physx.PxObstacleContext.updateObstacle(System.UInt32,physx.PxObstacle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="137">
		\brief Updates data for an existing obstacle.

		\param	[in]	handle		Handle for the obstacle object that needs to be updated.
		\param	[in]	obstacle	New obstacle data

		\return True if success

</member>
<member name="M:physx.PxObstacleContext.getNbObstacles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="147">
		\brief Retrieves number of obstacles in the context.

		\return Number of obstacles in the context

</member>
<member name="M:physx.PxObstacleContext.getObstacle(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="154">
		\brief Retrieves desired obstacle.

		\param	[in]	i			Obstacle index

		\return Desired obstacle

</member>
<member name="M:physx.PxObstacleContext.getObstacleByHandle(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerobstacles.h" line="163">
		\brief Retrieves desired obstacle by given handle.

		\param	[in]	handle			Obstacle handle

		\return Desired obstacle

</member>
<member name="T:physx.PxControllerShapeType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="33">
\brief The type of controller, eg box, sphere or capsule.

</member>
<member name="F:eBOX" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="40">
		\brief A box controller.

		@see PxBoxController PxBoxControllerDesc

</member>
<member name="F:eCAPSULE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="47">
		\brief A capsule controller

		@see PxCapsuleController PxCapsuleControllerDesc

</member>
<member name="T:physx.PxControllerNonWalkableMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="69">
\brief specifies how a CCT interacts with non-walkable parts.

This is only used when slopeLimit is non zero. It is currently enabled for static actors only, and not supported for spheres or capsules.

</member>
<member name="D:physx.PxCCTNonWalkableMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="84">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
</member>
<member name="T:physx.PxControllerCollisionFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="87">
\brief specifies which sides a character is colliding with.

</member>
<member name="D:physx.PxControllerCollisionFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="100">
\brief Bitfield that contains a set of raised flags defined in PxControllerCollisionFlag.

@see PxControllerCollisionFlag

</member>
<member name="D:physx.PxControllerFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="108">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
</member>
<member name="D:physx.PxControllerFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="110">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
</member>
<member name="T:physx.PxControllerState" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="114">
\brief Describes a controller's internal state.

</member>
<member name="T:physx.PxControllerStats" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="129">
\brief Describes a controller's internal statistics.

</member>
<member name="T:physx.PxControllerHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="140">
\brief Describes a generic CCT hit.

</member>
<member name="D:physx.PxCCTHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="151">
\deprecated Deprecated definition for backwards compatibility with PhysX 3.2 
</member>
<member name="T:physx.PxControllerShapeHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="154">
\brief Describes a hit between a CCT and a shape. Passed to onShapeHit()

@see PxUserControllerHitReport.onShapeHit()

</member>
<member name="T:physx.PxControllersHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="166">
\brief Describes a hit between a CCT and another CCT. Passed to onControllerHit().

@see PxUserControllerHitReport.onControllerHit()

</member>
<member name="T:physx.PxControllerObstacleHit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="176">
\brief Describes a hit between a CCT and a user-defined obstacle. Passed to onObstacleHit().

@see PxUserControllerHitReport.onObstacleHit() PxObstacleContext

</member>
<member name="T:physx.PxUserControllerHitReport" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="186">
\brief User callback class for character controller events.

\note Character controller hit reports are only generated when move is called.

@see PxControllerDesc.callback

</member>
<member name="M:physx.PxUserControllerHitReport.onShapeHit(physx.PxControllerShapeHit!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="197">
	\brief Called when current controller hits a shape.

	This is called when the CCT moves and hits a shape. This will not be called when a moving shape hits a non-moving CCT.

	\param[in] hit Provides information about the hit.

	@see PxControllerShapeHit

</member>
<member name="M:physx.PxUserControllerHitReport.onControllerHit(physx.PxControllersHit!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="208">
	\brief Called when current controller hits another controller.

	\param[in] hit Provides information about the hit.

	@see PxControllersHit

</member>
<member name="M:physx.PxUserControllerHitReport.onObstacleHit(physx.PxControllerObstacleHit!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="217">
	\brief Called when current controller hits a user-defined obstacle.

	\param[in] hit Provides information about the hit.

	@see PxControllerObstacleHit PxObstacleContext

</member>
<member name="T:physx.PxControllerFilterCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="231">
\brief Dedicated filtering callback for CCT vs CCT.

This controls collisions between CCTs (one CCT vs anoter CCT).

To make each CCT collide against all other CCTs, just return true - or simply avoid defining a callback.
To make each CCT freely go through all other CCTs, just return false.
Otherwise create a custom filtering logic in this callback.

@see PxControllerFilters

</member>
<member name="M:physx.PxControllerFilterCallback.filter(physx.PxController!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxController!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="247">
	\brief Filtering method for CCT-vs-CCT.

	\param[in] a	First CCT
	\param[in] b	Second CCT
	\return true to keep the pair, false to filter it out

</member>
<member name="T:physx.PxControllerFilters" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="257">
\brief Filtering data for "move" call.

This class contains all filtering-related parameters for the PxController::move() call.

Collisions between a CCT and the world are filtered using the mFilterData, mFilterCallback and mFilterFlags
members. These parameters are internally passed to PxScene::overlap() to find objects touched by the CCT.
Please refer to the PxScene::overlap() documentation for details.

Collisions between a CCT and another CCT are filtered using the mCCTFilterCallback member. If this filter
callback is not defined, none of the CCT-vs-CCT collisions are filtered, and each CCT will collide against
all other CCTs.

\note PxQueryFlag::eANY_HIT and PxQueryFlag::eNO_BLOCK are ignored in mFilterFlags.

@see PxController.move() PxControllerFilterCallback

</member>
<member name="T:physx.PxControllerDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="305">
\brief Descriptor class for a character controller.

@see PxBoxController PxCapsuleController

</member>
<member name="M:physx.PxControllerDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="333">
	\brief returns true if the current settings are valid

	\return True if the descriptor is valid.

</member>
<member name="M:physx.PxControllerDesc.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="340">
	\brief Returns the character controller type

	\return The controllers type.

	@see PxControllerType PxCapsuleControllerDesc PxBoxControllerDesc

</member>
<member name="F:physx.PxControllerDesc.position" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="349">
	\brief The position of the character

	\note The character's initial position must be such that it does not overlap the static geometry.

	<b>Default:</b> Zero

</member>
<member name="F:physx.PxControllerDesc.upDirection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="358">
	\brief Specifies the 'up' direction

	In order to provide stepping functionality the SDK must be informed about the up direction.

	<b>Default:</b> (0, 1, 0)


</member>
<member name="F:physx.PxControllerDesc.slopeLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="368">
	\brief The maximum slope which the character can walk up.

	In general it is desirable to limit where the character can walk, in particular it is unrealistic
	for the character to be able to climb arbitary slopes.

	The limit is expressed as the cosine of desired limit angle. A value of 0 disables this feature.

	\warning It is currently enabled for static actors only (not for dynamic/kinematic actors), and not supported for spheres or capsules.

	<b>Default:</b> 0.707

	@see upDirection invisibleWallHeight maxJumpHeight

</member>
<member name="F:physx.PxControllerDesc.invisibleWallHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="384">
	\brief Height of invisible walls created around non-walkable triangles

	The library can automatically create invisible walls around non-walkable triangles defined
	by the 'slopeLimit' parameter. This defines the height of those walls. If it is 0.0, then
	no extra triangles are created.

	<b>Default:</b> 0.0

	@see upDirection slopeLimit maxJumpHeight

</member>
<member name="F:physx.PxControllerDesc.maxJumpHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="397">
	\brief Maximum height a jumping character can reach

	This is only used if invisible walls are created ('invisibleWallHeight' is non zero).

	When a character jumps, the non-walkable triangles he might fly over are not found
	by the collision queries (since the character's bounding volume does not touch them).
	Thus those non-walkable triangles do not create invisible walls, and it is possible
	for a jumping character to land on a non-walkable triangle, while he wouldn't have
	reached that place by just walking.

	The 'maxJumpHeight' variable is used to extend the size of the collision volume
	downward. This way, all the non-walkable triangles are properly found by the collision
	queries and it becomes impossible to 'jump over' invisible walls.

	If the character in your game can not jump, it is safe to use 0.0 here. Otherwise it
	is best to keep this value as small as possible, since a larger collision volume
	means more triangles to process.

	<b>Default:</b> 0.0

	@see upDirection slopeLimit invisibleWallHeight

</member>
<member name="F:physx.PxControllerDesc.contactOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="422">
	\brief The contact offset used by the controller.

	Specifies a skin around the object within which contacts will be generated.
	Use it to avoid numerical precision issues.

	This is dependant on the scale of the users world, but should be a small, positive 
	non zero value.

	<b>Default:</b> 0.1

</member>
<member name="F:physx.PxControllerDesc.stepOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="435">
	\brief Defines the maximum height of an obstacle which the character can climb.

	A small value will mean that the character gets stuck and cannot walk up stairs etc, 
	a value which is too large will mean that the character can climb over unrealistically 
	high obstacles.

	<b>Default:</b> 0.5

	@see upDirection 

</member>
<member name="F:physx.PxControllerDesc.density" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="448">
	\brief Density of underlying kinematic actor

	The CCT creates a PhysX's kinematic actor under the hood. This controls its density.

	<b>Default:</b> 10.0

</member>
<member name="F:physx.PxControllerDesc.scaleCoeff" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="457">
	\brief Scale coefficient for underlying kinematic actor

	The CCT creates a PhysX's kinematic actor under the hood. This controls its scale factor.
	This should be a number a bit smaller than 1.0.

	<b>Default:</b> 0.8

</member>
<member name="F:physx.PxControllerDesc.volumeGrowth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="467">
	\brief Cached volume growth

	Amount of space around the controller we cache to improve performance. This is a scale factor
	that should be higher than 1.0f but not too big, ideally lower than 2.0f.

	<b>Default:</b> 1.5

</member>
<member name="F:physx.PxControllerDesc.reportCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="477">
	\brief Specifies a user report callback.

	This report callback is called when the character collides with shapes and other characters.

	Setting this to NULL disables the callback.

	<b>Default:</b> NULL

	@see PxUserControllerHitReport

</member>
<member name="F:physx.PxControllerDesc.behaviorCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="491">
	\brief Specifies a user behavior callback.

	This behavior callback is called to customize the controller's behavior w.r.t. touched shapes.

	Setting this to NULL disables the callback.

	<b>Default:</b> NULL

	@see PxControllerBehaviorCallback

</member>
<member name="F:physx.PxControllerDesc.nonWalkableMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="504">
	\brief The non-walkable mode controls if a character controller slides or not on a non-walkable part.

	This is only used when slopeLimit is non zero.

	<b>Default:</b> PxControllerNonWalkableMode::ePREVENT_CLIMBING

	@see PxControllerNonWalkableMode

</member>
<member name="F:physx.PxControllerDesc.material" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="515">
	\brief The material for the actor associated with the controller.
	
	The controller internally creates a rigid body actor. This parameter specifies the material of the actor.

	<b>Default:</b> NULL

	@see PxMaterial

</member>
<member name="F:physx.PxControllerDesc.userData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="526">
	\brief User specified data associated with the controller.

	<b>Default:</b> NULL

</member>
<member name="M:physx.PxControllerDesc.#ctor(physx.PxControllerShapeType.Enum)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="536">
\brief constructor sets to default.

</member>
<member name="M:physx.PxControllerDesc.#ctor(physx.PxControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="542">
\brief copy constructor.

</member>
<member name="M:physx.PxControllerDesc.op_Assign(physx.PxControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="547">
\brief assignment operator.

</member>
<member name="T:physx.PxController" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="636">
\brief Base class for character controllers.

@see PxCapsuleController PxBoxController

</member>
<member name="M:physx.PxController.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="658">
	\brief Return the type of controller

	@see PxControllerType

</member>
<member name="M:physx.PxController.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="665">
\brief Releases the controller.

</member>
<member name="M:physx.PxController.move(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,physx.PxControllerFilters!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxObstacleContext!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="670">
	\brief Moves the character using a "collide-and-slide" algorithm.

	\param[in] disp	Displacement vector
	\param[in] minDist The minimum travelled distance to consider. If travelled distance is smaller, the character doesn't move.
	This is used to stop the recursive motion algorithm when remaining distance to travel is small.
	\param[in] elapsedTime Time elapsed since last call
	\param[in] filters User-defined filters for this move
	\param[in] obstacles Potential additional obstacles the CCT should collide with.
	\return Collision flags, collection of ::PxControllerCollisionFlags

</member>
<member name="M:physx.PxController.setPosition(physx.PxExtendedVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="683">
	\brief Sets controller's position.

	The position controlled by this function is the center of the collision shape.

	\warning This is a 'teleport' function, it doesn't check for collisions.
	\warning The character's position must be such that it does not overlap the static geometry.

	To move the character under normal conditions use the #move() function.

	\param[in] position The new (center) positon for the controller.
	\return Currently always returns true.

	@see PxControllerDesc.position getPosition() getFootPosition() setFootPosition() move()

</member>
<member name="M:physx.PxController.getPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="700">
	\brief Retrieve the raw position of the controller.

	The position retrieved by this function is the center of the collision shape. To retrieve the bottom position of the shape,
	a.k.a. the foot position, use the getFootPosition() function.

	The position is updated by calls to move(). Calling this method without calling
	move() will return the last position or the initial position of the controller.

	\return The controller's center position

	@see PxControllerDesc.position setPosition() getFootPosition() setFootPosition() move()

</member>
<member name="M:physx.PxController.setFootPosition(physx.PxExtendedVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="715">
	\brief Set controller's foot position.

	The position controlled by this function is the bottom of the collision shape, a.k.a. the foot position.

	\note The foot position takes the contact offset into account

	\warning This is a 'teleport' function, it doesn't check for collisions.

	To move the character under normal conditions use the #move() function.

	\param[in] position The new (bottom) positon for the controller.
	\return Currently always returns true.

	@see PxControllerDesc.position setPosition() getPosition() getFootPosition() move()

</member>
<member name="M:physx.PxController.getFootPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="733">
	\brief Retrieve the "foot" position of the controller, i.e. the position of the bottom of the CCT's shape.

	\note The foot position takes the contact offset into account

	\return The controller's foot position

	@see PxControllerDesc.position setPosition() getPosition() setFootPosition() move()

</member>
<member name="M:physx.PxController.getActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="744">
	\brief Get the rigid body actor associated with this controller (see PhysX documentation). 
	The behavior upon manually altering this actor is undefined, you should primarily 
	use it for reading const properties.

	\return the actor associated with the controller.

</member>
<member name="M:physx.PxController.setStepOffset(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="753">
	\brief The step height.

	\param[in] offset The new step offset for the controller.

	@see PxControllerDesc.stepOffset

</member>
<member name="M:physx.PxController.getStepOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="762">
	\brief Retrieve the step height.

	\return The step offset for the controller.

	@see setStepOffset()

</member>
<member name="M:physx.PxController.setNonWalkableMode(physx.PxControllerNonWalkableMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="771">
	\brief Sets the non-walkable mode for the CCT.

	\param[in] flag The new value of the non-walkable mode.

	\see PxControllerNonWalkableMode

</member>
<member name="M:physx.PxController.getNonWalkableMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="780">
	\brief Retrieves the non-walkable mode for the CCT.

	\return The current non-walkable mode.

	\see PxControllerNonWalkableMode

</member>
<member name="M:physx.PxController.getContactOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="789">
	\brief Retrieve the contact offset.

	\return The contact offset for the controller.

	@see PxControllerDesc.contactOffset

</member>
<member name="M:physx.PxController.setContactOffset(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="798">
	\brief Sets the contact offset.

	\param[in] offset	The contact offset for the controller.

	@see PxControllerDesc.contactOffset

</member>
<member name="M:physx.PxController.getUpDirection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="807">
	\brief Retrieve the 'up' direction.

	\return The up direction for the controller.

	@see PxControllerDesc.upDirection

</member>
<member name="M:physx.PxController.setUpDirection(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="816">
	\brief Sets the 'up' direction.

	\param[in] up The up direction for the controller.

	@see PxControllerDesc.upDirection

</member>
<member name="M:physx.PxController.getSlopeLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="825">
	\brief Retrieve the slope limit.

	\return The slope limit for the controller.

	@see PxControllerDesc.slopeLimit

</member>
<member name="M:physx.PxController.setSlopeLimit(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="834">
	\brief Sets the slope limit.

	\note	This feature can not be enabled at runtime, i.e. if the slope limit is zero when creating the CCT
	(which disables the feature) then changing the slope limit at runtime will not have any effect, and the call
	will be ignored.

	\param[in]	slopeLimit	The slope limit for the controller.

	@see PxControllerDesc.slopeLimit

</member>
<member name="M:physx.PxController.invalidateCache" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="847">
	\brief Flushes internal geometry cache.
	
	The character controller uses caching in order to speed up collision testing. The cache is
	automatically flushed when a change to static objects is detected in the scene. For example when a
	static shape is added, updated, or removed from the scene, the cache is automatically invalidated.
	
	However there may be situations that cannot be automatically detected, and those require manual
	invalidation of the cache. Currently the user must call this when the filtering behavior changes (the
	PxControllerFilters parameter of the PxController::move call).  While the controller in principle 
	could detect a change in these parameters, it cannot detect a change in the behavior of the filtering 
	function.

	@see PxController.move

</member>
<member name="M:physx.PxController.getScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="864">
	\brief Retrieve the scene associated with the controller.

	\return The physics scene

</member>
<member name="M:physx.PxController.getUserData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="871">
	\brief Returns the user data associated with this controller.

	\return The user pointer associated with the controller.

	@see PxControllerDesc.userData

</member>
<member name="M:physx.PxController.setUserData(System.Void*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="880">
	\brief Sets the user data associated with this controller.

	\param[in] userData The user pointer associated with the controller.

	@see PxControllerDesc.userData

</member>
<member name="M:physx.PxController.getState(physx.PxControllerState*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="889">
	\brief Returns information about the controller's internal state.

	\param[out] state The controller's internal state

	@see PxControllerState

</member>
<member name="M:physx.PxController.getStats(physx.PxControllerStats*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="898">
	\brief Returns the controller's internal statistics.

	\param[out] stats The controller's internal statistics

	@see PxControllerStats

</member>
<member name="M:physx.PxController.resize(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontroller.h" line="907">
	\brief Resizes the controller.

	This function attempts to resize the controller to a given size, while making sure the bottom
	position of the controller remains constant. In other words the function modifies both the
	height and the (center) position of the controller. This is a helper function that can be used
	to implement a 'crouch' functionality for example.

	\param[in] height Desired controller's height

</member>
<member name="T:physx.PxBoxControllerDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="28">
\brief Descriptor for a box character controller.

@see PxBoxController PxControllerDesc

</member>
<member name="M:physx.PxBoxControllerDesc.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="36">
\brief constructor sets to default.

</member>
<member name="M:physx.PxBoxControllerDesc.#ctor(physx.PxBoxControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="42">
\brief copy constructor.

</member>
<member name="M:physx.PxBoxControllerDesc.op_Assign(physx.PxBoxControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="47">
\brief assignment operator.

</member>
<member name="M:physx.PxBoxControllerDesc.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="52">
\brief (re)sets the structure to the default.

</member>
<member name="M:physx.PxBoxControllerDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="57">
	\brief returns true if the current settings are valid

	\return True if the descriptor is valid.

</member>
<member name="F:physx.PxBoxControllerDesc.halfHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="64">
	\brief Half height

	<b>Default:</b> 1.0

</member>
<member name="F:physx.PxBoxControllerDesc.halfSideExtent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="71">
	\brief Half side extent

	<b>Default:</b> 0.5

</member>
<member name="F:physx.PxBoxControllerDesc.halfForwardExtent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="78">
	\brief Half forward extent

	<b>Default:</b> 0.5

</member>
<member name="T:physx.PxBoxController" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="131">
\brief Box character controller.

@see PxBoxControllerDesc PxController

</member>
<member name="M:physx.PxBoxController.getHalfHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="140">
	\brief Gets controller's half height.

	\return The half height of the controller.

	@see PxBoxControllerDesc.halfHeight setHalfHeight()

</member>
<member name="M:physx.PxBoxController.getHalfSideExtent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="149">
	\brief Gets controller's half side extent.

	\return The half side extent of the controller.

	@see PxBoxControllerDesc.halfSideExtent setHalfSideExtent()

</member>
<member name="M:physx.PxBoxController.getHalfForwardExtent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="158">
	\brief Gets controller's half forward extent.

	\return The half forward extent of the controller.

	@see PxBoxControllerDesc.halfForwardExtent setHalfForwardExtent()

</member>
<member name="M:physx.PxBoxController.setHalfHeight(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="167">
	\brief Sets controller's half height.

	\warning this doesn't check for collisions.

	\param[in] halfHeight The new half height for the controller.
	\return Currently always true.

	@see PxBoxControllerDesc.halfHeight getHalfHeight()

</member>
<member name="M:physx.PxBoxController.setHalfSideExtent(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="179">
	\brief Sets controller's half side extent.

	\warning this doesn't check for collisions.

	\param[in] halfSideExtent The new half side extent for the controller.
	\return Currently always true.

	@see PxBoxControllerDesc.halfSideExtent getHalfSideExtent()

</member>
<member name="M:physx.PxBoxController.setHalfForwardExtent(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxboxcontroller.h" line="191">
	\brief Sets controller's half forward extent.

	\warning this doesn't check for collisions.

	\param[in] halfForwardExtent The new half forward extent for the controller.
	\return Currently always true.

	@see PxBoxControllerDesc.halfForwardExtent getHalfForwardExtent()

</member>
<member name="T:physx.PxCapsuleControllerDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="39">
\brief A descriptor for a capsule character controller.

@see PxCapsuleController PxControllerDesc

</member>
<member name="M:physx.PxCapsuleControllerDesc.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="47">
\brief constructor sets to default.

</member>
<member name="M:physx.PxCapsuleControllerDesc.#ctor(physx.PxCapsuleControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="53">
\brief copy constructor.

</member>
<member name="M:physx.PxCapsuleControllerDesc.op_Assign(physx.PxCapsuleControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="58">
\brief assignment operator.

</member>
<member name="M:physx.PxCapsuleControllerDesc.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="63">
\brief (re)sets the structure to the default.

</member>
<member name="M:physx.PxCapsuleControllerDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="67">
	\brief returns true if the current settings are valid

	\return True if the descriptor is valid.

</member>
<member name="F:physx.PxCapsuleControllerDesc.radius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="74">
	\brief The radius of the capsule

	<b>Default:</b> 0.0

	@see PxCapsuleController

</member>
<member name="F:physx.PxCapsuleControllerDesc.height" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="83">
	\brief The height of the controller

	<b>Default:</b> 0.0

	@see PxCapsuleController

</member>
<member name="F:physx.PxCapsuleControllerDesc.climbingMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="92">
	\brief The climbing mode

	<b>Default:</b> PxCapsuleClimbingMode::eEASY

	@see PxCapsuleController

</member>
<!-- Discarding badly formed XML document comment for member 'T:physx.PxCapsuleController'. -->
<member name="M:physx.PxCapsuleController.getRadius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="164">
	\brief Gets controller's radius.

	\return The radius of the controller.

	@see PxCapsuleControllerDesc.radius setRadius()

</member>
<member name="M:physx.PxCapsuleController.setRadius(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="173">
	\brief Sets controller's radius.

	\warning this doesn't check for collisions.

	\param[in] radius The new radius for the controller.
	\return Currently always true.

	@see PxCapsuleControllerDesc.radius getRadius()

</member>
<member name="M:physx.PxCapsuleController.getHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="185">
	\brief Gets controller's height.

	\return The height of the capsule controller.

	@see PxCapsuleControllerDesc.height setHeight()

</member>
<member name="M:physx.PxCapsuleController.setHeight(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="194">
	\brief Resets controller's height.

	\warning this doesn't check for collisions.

	\param[in] height The new height for the controller.
	\return Currently always true.

	@see PxCapsuleControllerDesc.height getHeight()

</member>
<member name="M:physx.PxCapsuleController.getClimbingMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="206">
	\brief Gets controller's climbing mode.

	\return The capsule controller's climbing mode.

	@see PxCapsuleControllerDesc.climbingMode setClimbingMode()

</member>
<member name="M:physx.PxCapsuleController.setClimbingMode(physx.PxCapsuleClimbingMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcapsulecontroller.h" line="215">
	\brief Sets controller's climbing mode.

	\param[in] mode The capsule controller's climbing mode.

	@see PxCapsuleControllerDesc.climbingMode getClimbingMode()

</member>
<member name="T:physx.PxControllerBehaviorFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerbehavior.h" line="31">
\brief specifies controller behavior

</member>
<member name="D:physx.PxControllerBehaviorFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerbehavior.h" line="44">
	\brief Bitfield that contains a set of raised flags defined in PxControllerBehaviorFlag.

	@see PxControllerBehaviorFlag

</member>
<member name="T:physx.PxControllerBehaviorCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerbehavior.h" line="52">
	\brief User behavior callback.

	This behavior callback is called to customize the controller's behavior w.r.t. touched shapes.

</member>
<member name="M:physx.PxControllerBehaviorCallback.getBehaviorFlags(physx.PxShape!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerbehavior.h" line="87">
		\brief Retrieve behavior flags for a shape.

		When the CCT touches a shape, the CCT's behavior w.r.t. this shape can be customized by users.
		This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.

		\note See comments about deprecated functions at the start of this class

		\param[in] shape	The shape the CCT is currently touching
		\param[in] actor	The actor owning the shape

		\return Desired behavior flags for the given shape

		@see PxControllerBehaviorFlag

</member>
<member name="M:physx.PxControllerBehaviorCallback.getBehaviorFlags(physx.PxController!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerbehavior.h" line="104">
		\brief Retrieve behavior flags for a controller.

		When the CCT touches a controller, the CCT's behavior w.r.t. this controller can be customized by users.
		This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.

		\note The flag PxControllerBehaviorFlag::eCCT_CAN_RIDE_ON_OBJECT is not supported.
		\note See comments about deprecated functions at the start of this class

		\param[in] controller	The controller the CCT is currently touching

		\return Desired behavior flags for the given controller

		@see PxControllerBehaviorFlag

</member>
<member name="M:physx.PxControllerBehaviorCallback.getBehaviorFlags(physx.PxObstacle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollerbehavior.h" line="121">
		\brief Retrieve behavior flags for an obstacle.

		When the CCT touches an obstacle, the CCT's behavior w.r.t. this obstacle can be customized by users.
		This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.

		\note See comments about deprecated functions at the start of this class

		\param[in] obstacle		The obstacle the CCT is currently touching

		\return Desired behavior flags for the given obstacle

		@see PxControllerBehaviorFlag

</member>
<member name="T:physx.PxControllerDebugRenderFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="40">
\brief specifies debug-rendering flags

</member>
<member name="D:physx.PxControllerDebugRenderFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="56">
\brief Bitfield that contains a set of raised flags defined in PxControllerDebugRenderFlag.

@see PxControllerDebugRenderFlag

</member>
<member name="T:physx.PxControllerManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="65">
\brief Manages an array of character controllers.

@see PxController PxBoxController PxCapsuleController

</member>
<member name="M:physx.PxControllerManager.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="73">
	\brief Releases the controller manager.

	\note This will release all associated controllers and obstacle contexts.

	\note This function is required to be called to release foundation usage.


</member>
<member name="M:physx.PxControllerManager.getScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="83">
	\brief Returns the scene the manager is adding the controllers to.

	\return The associated physics scene.

</member>
<member name="M:physx.PxControllerManager.getNbControllers" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="90">
	\brief Returns the number of controllers that are being managed.

	\return The number of controllers.

</member>
<member name="M:physx.PxControllerManager.getController(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="97">
	\brief Retrieve one of the controllers in the manager.

	\param index the index of the controller to return
	\return The controller with the specified index.

</member>
<member name="M:physx.PxControllerManager.createController(physx.PxControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="105">
	\brief Creates a new character controller.

	\param[in] desc The controllers descriptor
	\return The new controller

	@see PxController PxController.release() PxControllerDesc

</member>
<member name="M:physx.PxControllerManager.createController(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxScene*,physx.PxControllerDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="115">
\deprecated 
</member>
<member name="M:physx.PxControllerManager.purgeControllers" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="123">
\brief Releases all the controllers that are being managed.

</member>
<member name="M:physx.PxControllerManager.getRenderBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="128">
	\brief Retrieves debug data.

	\return The render buffer filled with debug-render data

	@see PxControllerManager.setDebugRenderingFlags()

</member>
<member name="M:physx.PxControllerManager.setDebugRenderingFlags(physx.PxFlags&lt;physx.PxControllerDebugRenderFlag.Enum,System.UInt32&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="137">
	\brief Sets debug rendering flags

	\param[in] flags The debug rendering flags (combination of PxControllerDebugRenderFlags)

	@see PxControllerManager.getRenderBuffer() PxControllerDebugRenderFlags

</member>
<member name="M:physx.PxControllerManager.getNbObstacleContexts" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="146">
	\brief Returns the number of obstacle contexts that are being managed.

	\return The number of obstacle contexts.

</member>
<member name="M:physx.PxControllerManager.getObstacleContext(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="153">
	\brief Retrieve one of the obstacle contexts in the manager.

	\param index The index of the obstacle context to retrieve.
	\return The obstacle context with the specified index.

</member>
<member name="M:physx.PxControllerManager.createObstacleContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="161">
	\brief Creates an obstacle context.

	\return New obstacle context

	@see PxObstacleContext

</member>
<member name="M:physx.PxControllerManager.computeInteractions(System.Single,physx.PxControllerFilterCallback*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="170">
	\brief Computes character-character interactions.

	This function is an optional helper to properly resolve interactions between characters, in case they overlap (which can happen for gameplay reasons, etc).

	You should call this once per frame, before your PxController::move() calls. The function will not move the characters directly, but it will
	compute overlap information for each character that will be used in the next move() call.
	
	You need to provide a proper time value here so that interactions are resolved in a way that do not depend on the framerate.

	If you only have one character in the scene, or if you can guarantee your characters will never overlap, then you do not need to call this function.

	\note Releasing the manager will automatically release all the associated obstacle contexts.

	\param[in] elapsedTime	Elapsed time since last call
	\param[in] cctFilterCb	Filtering callback for CCT-vs-CCT interactions

</member>
<member name="M:physx.PxControllerManager.setTessellation(System.Boolean,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="189">
	\brief Enables or disables runtime tessellation.

	Large triangles can create accuracy issues in the sweep code, which in turn can lead to characters not sliding smoothly
	against geometries, or even penetrating them. This feature allows one to reduce those issues by tessellating large
	triangles at runtime, before performing sweeps against them. The amount of tessellation is controlled by the 'maxEdgeLength' parameter.
	Any triangle with at least one edge length greater than the maxEdgeLength will get recursively tessellated, until resulting triangles are small enough.

	This features only applies to triangle meshes, convex meshes, heightfields and boxes.

	\param[in] flag				True/false to enable/disable runtime tessellation.
	\param[in] maxEdgeLength	Max edge length allowed before tessellation kicks in.

</member>
<member name="M:physx.PxControllerManager.setOverlapRecoveryModule(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="204">
	\brief Enables or disables the overlap recovery module.

	The overlap recovery module can be used to depenetrate CCTs from static objects when an overlap is detected. This can happen
	in three main cases:
		- when the CCT is directly spawned or teleported in another object
		- when the CCT algorithm fails due to limited FPU accuracy
		- when the "up vector" is modified, making the rotated CCT shape overlap surrounding objects

	When activated, the CCT module will automatically try to resolve the penetration, and move the CCT to a safe place where it does
	not overlap other objects anymore. This only concerns static objects, dynamic objects are ignored by the recovery module.

	When the recovery module is not activated, it is possible for the CCTs to go through static objects. By default, the recovery
	module is enabled.

	The recovery module currently works with all geometries except heightfields.

	\param[in] flag				True/false to enable/disable overlap recovery module.

</member>
<member name="M:physx.PxControllerManager.setPreciseSweeps(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="225">
	\brief Enables or disables the precise sweeps.

	Precise sweeps are more accurate, but also potentially slower than regular sweeps.

	By default, precise sweeps are enabled.

	\param[in] flag				True/false to enable/disable precise sweeps.

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxControllerManager.setPreventVerticalSlidingAgainstCeiling(System.Boolean)'. -->
<member name="M:physx.PxControllerManager.shiftOrigin(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\characterkinematic\pxcontrollermanager.h" line="251">
	\brief Shift the origin of the character controllers and obstacle objects by the specified vector.

	The positions of all character controllers, obstacle objects and the corresponding data structures will get adjusted to reflect the shifted origin location
	(the shift vector will get subtracted from all character controller and obstacle object positions).

	\note It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysXCharacterKinematic accordingly.

	\note This call will not automatically shift the PhysX scene and its objects. You need to call PxScene::shiftOrigin() seperately to keep the systems in sync.

	\param[in] shift Translation vector to shift the origin by.

</member>
<member name="T:physx.PxClothCollisionSphere" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothcollisiondata.h" line="28">
\brief Sphere representation used for cloth-sphere and cloth-capsule collision.
\details Cloth can collide with spheres and capsules.  Each capsule is represented by
a pair of spheres with possibly different radii.

</member>
<member name="M:physx.PxClothCollisionSphere.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothcollisiondata.h" line="38">
\brief Default constructor, performs no initialization.

</member>
<member name="T:physx.PxClothCollisionPlane" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothcollisiondata.h" line="46">
\brief Plane representation used for cloth-convex collision.
\details Cloth can collide with convexes.  Each convex is represented by
a mask of the planes that make up the convex.

</member>
<member name="M:physx.PxClothCollisionPlane.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothcollisiondata.h" line="56">
\brief Default constructor, performs no initialization.

</member>
<member name="T:physx.PxClothCollisionTriangle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothcollisiondata.h" line="64">
\brief Triangle representation used for cloth-mesh collision.

</member>
<member name="M:physx.PxClothCollisionTriangle.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothcollisiondata.h" line="73">
\brief Default constructor, performs no initialization.

</member>
<member name="T:physx.PxClothStretchConfig" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="35">
\brief Solver configuration parameters for the vertical and horizontal stretch phase types.
\see PxCloth.setStretchConfig()
\see PxClothFabric for information on actual phase data in cloth fabric

</member>
<member name="F:physx.PxClothStretchConfig.stiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="42">
\brief Stiffness of the stretch constraints.
\details Defines for the constraint edges how much of the distance error between current length
and rest length to correct per stiffness period (see PxCloth::setStiffnessFrequency).
A value of 0 means no correction, a value of 1 corrects to rest length.
The default is 1.

</member>
<member name="F:physx.PxClothStretchConfig.stiffnessMultiplier" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="51">
\brief Stiffness multiplier of the cloth solver under certain limits.
\details The valid range is [0, 1], the default multiplier is 1.0.
\see stretchLimit

</member>
<member name="F:physx.PxClothStretchConfig.compressionLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="58">
\brief Limit to control when stiffnessMultiplier has to be applied.
\details stiffnessMultiplier multiplies the normal stiffness if the ratio 
between constraint edge length and rest length lies in the [compressionLimit, 1] range.
The valid range is [0, 1], the default limit is 1.0.

</member>
<member name="F:physx.PxClothStretchConfig.stretchLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="66">
\brief Limit to control when stiffnessMultiplier has to be applied.
\details stiffnessMultiplier multiplies the normal stiffness if the ratio 
between constraint edge length and rest length lies in the [1, stretchLimit] range.
The valid range is [1, PX_MAX_F32), the default limit is 1.0.

</member>
<member name="M:physx.PxClothStretchConfig.#ctor(System.Single,System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="74">
\brief Constructor initializes to default values.

</member>
<member name="T:physx.PxClothTetherConfig" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="86">
\brief Solver configuration parameters for the tether phases.
\see PxCloth.setTetherConfig()
\see PxClothFabric for information on actual tether constraints in cloth fabric.

</member>
<member name="F:physx.PxClothTetherConfig.stiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="93">
\brief Stiffness of the tether constraints.
\details Defines for the tether constraints how much of the error between current 
distance and tether length to correct per stiffness period (see PxCloth::setStiffnessFrequency).
A value of 0 means no correction, a value of 1 corrects to rest length.
The default stiffness is 1.0.

</member>
<member name="F:physx.PxClothTetherConfig.stretchLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="102">
\brief Scale of tether lengths when applying tether constraints.
\details The limit distance of a tether constraint is computed
as the product of stretchLimit and the tether length. 
The default limit is 1.0.

</member>
<member name="M:physx.PxClothTetherConfig.#ctor(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="110">
\brief Constructor sets to default.

</member>
<member name="T:physx.PxClothMotionConstraintConfig" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="118">
\brief Solver configuration parameters for the tether phases.
\see PxCloth.setTetherConfig()
\see PxClothFabric for information on actual tether constraints in cloth fabric.

</member>
<member name="F:physx.PxClothMotionConstraintConfig.scale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="125">
\brief Scale of motion constraint radii.
\details The motion constraint radius is computed
as constraint.radius * config.scale + config.bias. 
The default scale is 1.0.

</member>
<member name="F:physx.PxClothMotionConstraintConfig.bias" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="133">
\brief Bias of motion constraint radii.
\details The motion constraint radius is computed
as constraint.radius * config.scale + config.bias. 
The default bias is 0.0.

</member>
<member name="F:physx.PxClothMotionConstraintConfig.stiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="141">
\brief Stiffness of the motion constraints.
\details Defines for the motion constraints how much of the error between current 
distance and constraint radius to correct per stiffness period (see PxCloth::setStiffnessFrequency).
A value of 0 means no correction, a value of 1 corrects to rest length.
The default stiffness is 1.

</member>
<member name="M:physx.PxClothMotionConstraintConfig.#ctor(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="150">
\brief Constructor sets to default.

</member>
<member name="T:physx.PxCloth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="158">
\brief Set of connected particles tailored towards simulating character cloth.
\details A cloth object consists of the following components:
\arg A set of particles that sample the cloth. The sampling does not need to be regular.
Particles are simulated in local space, which allows tuning the effect of changes to the global pose on the particles.
\arg Distance, bending, shearing, and tether constraints between particles. 
These are stored in a PxClothFabric instance which can be shared across cloth instances.
\arg Spheres, capsules, convexes, and triangle collision shapes. 
These shapes are all treated separately to the main PhysX rigid body scene.
\arg Virtual particles can be used to improve collision at a finer scale than the cloth sampling.
\arg Motion and separation constraints are used to limit the particle movement within or outside of a sphere.

@see PxPhysics.createCloth

</member>
<member name="M:physx.PxCloth.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="175">
\brief Deletes the cloth.
Do not keep a reference to the deleted instance.

</member>
<member name="M:physx.PxCloth.getFabric" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="181">
\brief Returns a pointer to the corresponding cloth fabric.
\return The associated cloth fabric.

</member>
<member name="M:physx.PxCloth.getWorldBounds(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="187">
\brief Returns world space bounding box.
\param[in] inflation  Scale factor for computed world bounds. Box extents are multiplied by this value.
\return Particle bounds in global coordinates.

</member>
<member name="M:physx.PxCloth.getNbParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="194">
\brief Returns the number of particles.
\return Number of particles.

</member>
<member name="M:physx.PxCloth.lockParticleData(physx.PxFlags&lt;physx.PxDataAccessFlag.Enum,System.Byte&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="200">
	\brief Acquires access to the cloth particle data.
	\details This function returns a pointer to a PxClothParticleData instance providing access to the 
	PxClothParticle array of the current and previous iteration. The user is responsible for calling
	PxClothParticleData::unlock() after reading or updating the data. In case the lock has been 
	requested using PxDataAccessFlag::eWRITABLE, the unlock() call copies the arrays pointed to by
	PxClothParticleData::particles/previousParticles back to the internal particle buffer.
	Updating the data when a read-only lock has been requested results in undefined behavior.
	Requesting multiple concurrent read-only locks is supported, but no other lock may be active
	when requesting a write lock.
	
	If PxDataAccessFlag::eDEVICE is set in flags then the returned pointers will be to GPU 
	device memory, this can be used for direct interop with graphics APIs. Note that these pointers
	should only be considered valid until PxClothParticleData::unlock() is called and should not
	be stored. PxDataAccessFlag::eDEVICE implies read and write access, and changing the 
	particles/previousParticles members results in undefined behavior.

	\param flags Specifies if particle data is read or written.
	\return PxClothParticleData pointer which provides access to positions and weight.

</member>
<member name="M:physx.PxCloth.lockParticleData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="221">
\brief Acquires read access to the cloth particle data.
\return PxClothParticleData pointer which provides access to positions and weight.
\note This function is equivalent to lockParticleData(PxDataAccessFlag::eREADABLE).

</member>
<member name="M:physx.PxCloth.setParticles(physx.PxClothParticle!System.Runtime.CompilerServices.IsConst*,physx.PxClothParticle!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="228">
\brief Updates cloth particle location or inverse weight for current and previous particle state.
\param [in] currentParticles The particle data for the current particle state or NULL if the state should not be changed.
\param [in] previousParticles The particle data for the previous particle state or NULL if the state should not be changed.
\note The invWeight stored in \a previousParticles is the new particle inverse mass, or zero for a static particle. 
However, if invWeight stored in \a currentParticles is non-zero, it is still used once for the next particle integration and fabric solve.
\note If <b>currentParticles</b> or <b>previousParticles</b> are non-NULL then they must be the length specified by getNbParticles().
\note This can be used to teleport particles (use same positions for current and previous).
\see PxClothParticle

</member>
<member name="M:physx.PxCloth.setClothFlag(physx.PxClothFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="240">
\brief Sets cloth flags (e.g. use GPU for simulation, enable CCD, collide against scene).
\param [in] flag Mask of which flags to set.
\param [in] value Value to set flags to.

</member>
<member name="M:physx.PxCloth.setClothFlags(physx.PxFlags&lt;physx.PxClothFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="246">
\brief Set all cloth flags
\param [in] inFlags Bit mask of flag values

</member>
<member name="M:physx.PxCloth.getClothFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="251">
\brief Returns cloth flags.
\return Cloth flags.

</member>
<member name="M:physx.PxCloth.setTargetPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="257">
@name Integration
	 *  Functions related to particle integration.

@{
\brief Sets pose that the cloth should move to by the end of the next simulate() call. 
\details This function will move the cloth in world space. The resulting
simulation may reflect inertia effect as a result of pose acceleration.
\param [in] pose Target pose at the end of the next simulate() call.
\see setGlobalPose() to move cloth without inertia effect.

</member>
<member name="M:physx.PxCloth.setGlobalPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="270">
\brief Sets current pose of the cloth without affecting inertia.
\details Use this to reset the pose (e.g. teleporting).
\param [in] pose New global pose.
\note No pose interpolation is performed.
\note Inertia is not preserved.
\see setTargetPose() for inertia preserving method.

</member>
<member name="M:physx.PxCloth.getGlobalPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="279">
\brief Returns global pose.
\return Global pose as specified by the last setGlobalPose() or setTargetPose() call.

</member>
<member name="M:physx.PxCloth.setSolverFrequency(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="285">
\brief Sets the solver frequency parameter.
\details Solver frequency specifies how often the simulation step is computed per second. 
For example, a value of 60 represents one simulation step per frame
in a 60fps scene.  A value of 120 will represent two simulation steps per frame, etc.
\param [in] frequency Solver frequency per second (default: 60.0).

</member>
<member name="M:physx.PxCloth.getSolverFrequency" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="293">
\brief Returns solver frequency.
\return Solver frequency.

</member>
<member name="M:physx.PxCloth.getPreviousTimeStep" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="299">
\brief Returns previous time step size.
\details Time between sampling of previous and current particle positions for computing particle velocity.
\return Previous time step size.

</member>
<member name="M:physx.PxCloth.setStiffnessFrequency(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="306">
\brief Sets the stiffness frequency parameter.
\details The stiffness frequency controls the power-law nonlinearity of all rate of change parameters
(stretch stiffness, shear stiffness, bending stiffness, tether stiffness, self-collision 
stiffness, motion constraint stiffness, damp coefficient, linear and angular drag coefficients). 
Increasing the frequency avoids numerical cancellation for values near zero or one, but increases the 
non-linearity of the parameter. It is not recommended to change this parameter after cloth initialization.
For example, the portion of edge overstretch removed per second is 
equal to the stretch stiffness raised to the power of the stiffness frequency.
\param [in] frequency Stiffness frequency per second (default: 10.0).

</member>
<member name="M:physx.PxCloth.getStiffnessFrequency" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="318">
\brief Returns stiffness frequency.
\return Stiffness frequency.
\see setStiffnessFrequency() for details.

</member>
<member name="M:physx.PxCloth.setLinearInertiaScale(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="325">
\brief Sets the acceleration scale factor to adjust inertia effect from global pose changes.
\param [in] scale New scale factor between 0.0 (no inertia) and 1.0 (full inertia) (default: 1.0).
\note The scale is specified independently for each local coordinate axis.
\note A value of 0.0 disables all inertia effects of translations applied through setTargetPos().
\see setTargetPose() 

</member>
<member name="M:physx.PxCloth.getLinearInertiaScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="333">
\brief Returns linear acceleration scale parameter.
\return Linear acceleration scale parameter.

</member>
<member name="M:physx.PxCloth.setAngularInertiaScale(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="338">
\brief Sets the acceleration scale factor to adjust inertia effect from global pose changes.
\param [in] scale New scale factor between 0.0 (no inertia) and 1.0 (full inertia) (default: 1.0).
\note The scale is specified independently for each local rotation axis.
\note A value of 0.0 disables all inertia effects of rotations applied through setTargetPos().
\see setTargetPose() 

</member>
<member name="M:physx.PxCloth.getAngularInertiaScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="346">
\brief Returns angular acceleration scale parameter.
\return Angular acceleration scale parameter.

</member>
<member name="M:physx.PxCloth.setCentrifugalInertiaScale(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="351">
\brief Sets the acceleration scale factor to adjust inertia effect from global pose changes.
\param [in] scale New scale factor between 0.0 (no centrifugal force) and 1.0 (full centrifugal force) (default: 1.0).
\note The scale is specified independently for each local rotation axis.
\note A value of 0.0 disables all centrifugal forces of rotations applied through setTargetPos().
\see setTargetPose() 

</member>
<member name="M:physx.PxCloth.getCentrifugalInertiaScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="359">
\brief Returns centrifugal acceleration scale parameter.
\return Centrifugal acceleration scale parameter.

</member>
<member name="M:physx.PxCloth.setInertiaScale(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="364">
\brief Same as <code>setLinearInertiaScale(PxVec3(scale)); 
setAngularInertiaScale(PxVec3(scale)); getCentrifugalInertiaScale(PxVec3(scale)); </code>

</member>
<member name="M:physx.PxCloth.setDampingCoefficient(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="370">
\brief Sets the damping coefficient.
\details The damping coefficient is the portion of local particle velocity 
that is canceled per stiffness period (see PxCloth::setStiffnessFrequency).
\note The scale is specified independently for each local space axis.
\param [in] dampingCoefficient New damping coefficient between 0.0 and 1.0 (default: 0.0).

</member>
<member name="M:physx.PxCloth.getDampingCoefficient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="378">
\brief Returns the damping coefficient.
\return Damping coefficient.

</member>
<member name="M:physx.PxCloth.setLinearDragCoefficient(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="384">
\brief Sets the linear drag coefficient.
\details The linear drag coefficient is the portion of the pose translation 
that is applied to each particle per stiffness period (see PxCloth::setStiffnessFrequency).
\note The scale is specified independently for each local space axis.
\param [in] dragCoefficient New linear drag coefficient between 0.0f and 1.0 (default: 0.0).
\note The drag coefficient shouldn't be set higher than the damping coefficient.

</member>
<member name="M:physx.PxCloth.getLinearDragCoefficient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="393">
\brief Returns the linear drag coefficient.
\return Linear drag coefficient.

</member>
<member name="M:physx.PxCloth.setAngularDragCoefficient(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="398">
\brief Sets the angular drag coefficient.
\details The angular drag coefficient is the portion of the pose rotation 
that is applied to each particle per stiffness period (see PxCloth::setStiffnessFrequency).
\note The scale is specified independently for each local rotation axis.
\param [in] dragCoefficient New angular drag coefficient between 0.0f and 1.0 (default: 0.0).
\note The drag coefficient shouldn't be set higher than the damping coefficient.

</member>
<member name="M:physx.PxCloth.getAngularDragCoefficient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="407">
\brief Returns the angular drag coefficient.
\return Angular drag coefficient.

</member>
<member name="M:physx.PxCloth.setDragCoefficient(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="412">
\brief Same as <code>setLinearDragCoefficient(PxVec3(coefficient)); 
setAngularDragCoefficient(PxVec3(coefficient));</code>

</member>
<member name="M:physx.PxCloth.setExternalAcceleration(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="418">
\brief Sets external particle accelerations.
\param [in] acceleration New acceleration in global coordinates (default: 0.0).
\note Use this to implement simple wind etc.

</member>
<member name="M:physx.PxCloth.getExternalAcceleration" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="424">
\brief Returns external acceleration.
\return External acceleration in global coordinates.

</member>
<member name="M:physx.PxCloth.setParticleAccelerations(physx.PxVec4!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="430">
    \brief Updates particle accelerations, w component is ignored.
	\param [in] particleAccelerations New particle accelerations.
	\note The <b>particleAccelerations</b> must either be null to disable accelerations, 
	or be the same length as the number of particles, see getNbParticles().

</member>
<member name="M:physx.PxCloth.getParticleAccelerations(physx.PxVec4*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="437">
\brief Copies particle accelerations to the user provided buffer.
\param [out] particleAccelerationsBuffer Destination buffer, must be at least getNbParticleAccelerations().
\return true if the copy was successful.

</member>
<member name="M:physx.PxCloth.getNbParticleAccelerations" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="443">
\brief Returns the number of particle accelerations.
\return Number of particle accelerations (same as getNbParticles() if enabled, 0 otherwise).

</member>
<member name="M:physx.PxCloth.setMotionConstraints(physx.PxClothParticleMotionConstraint!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="449">
@}
@name Constraints
	 *  Functions related to particle and distance constaints.

@{
\brief Updates motion constraints (position and radius of the constraint sphere).
\param [in] motionConstraints motion constraints at the end of the next simulate() call.
\note The <b>motionConstraints</b> must either be null to disable motion constraints, 
or be the same length as the number of particles, see getNbParticles().
\see clearInterpolation()

</member>
<member name="M:physx.PxCloth.getMotionConstraints(physx.PxClothParticleMotionConstraint*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="464">
\brief Copies motion constraints to the user provided buffer.
\param [out] motionConstraintsBuffer Destination buffer, must be at least getNbMotionConstraints().
\return True if the copy was successful.

</member>
<member name="M:physx.PxCloth.getNbMotionConstraints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="470">
\brief Returns the number of motion constraints.
\return Number of motion constraints (same as getNbParticles() if enabled, 0 otherwise).

</member>
<member name="M:physx.PxCloth.setMotionConstraintConfig(physx.PxClothMotionConstraintConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="475">
\brief Specifies motion constraint scale, bias, and stiffness.
\param [in] config Motion constraints solver parameters.

</member>
<member name="M:physx.PxCloth.getMotionConstraintConfig" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="480">
\brief Reads back scale and bias factor for motion constraints.
\see setMotionConstraintConfig()

</member>
<member name="M:physx.PxCloth.setSeparationConstraints(physx.PxClothParticleSeparationConstraint!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="486">
\brief Updates separation constraints (position and radius of the constraint sphere).
\param [in] separationConstraints separation constraints at the end of the next simulate() call.
\note The <b>separationConstraints</b> must either be null to disable separation constraints, 
or be the same length as the number of particles, see getNbParticles().
\see clearInterpolation()

</member>
<member name="M:physx.PxCloth.getSeparationConstraints(physx.PxClothParticleSeparationConstraint*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="494">
\brief Copies separation constraints to the user provided buffer.
\param [out] separationConstraintsBuffer Destination buffer, must be at least getNbSeparationConstraints().
\return True if the copy was successful.

</member>
<member name="M:physx.PxCloth.getNbSeparationConstraints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="500">
\brief Returns the number of separation constraints.
\return Number of separation constraints (same as getNbParticles() if enabled, 0 otherwise).

</member>
<member name="M:physx.PxCloth.clearInterpolation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="506">
\brief Assign current to previous positions for collision shapes, motion constraints, and separation constraints.
\details This allows to prevent false interpolation after leaping to an animation frame, for example.
After calling clearInterpolation(), the current positions will be used without interpolation.
New positions can be set afterwards to interpolate to by the end of the next frame.

</member>
<member name="M:physx.PxCloth.setStretchConfig(physx.PxClothFabricPhaseType.Enum,physx.PxClothStretchConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="514">
\brief Sets the solver parameters for the vertical solver phases.
\param [in] config Stretch solver parameters.
\param [in] type Type of phases to set config for.

</member>
<member name="M:physx.PxCloth.getStretchConfig(physx.PxClothFabricPhaseType.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="520">
\brief Returns the solver parameters for one of the phase types.
\param [in] type Type of phases to return the config for.
\return Vertical solver parameters.

</member>
<member name="M:physx.PxCloth.setTetherConfig(physx.PxClothTetherConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="526">
\brief Sets the stiffness parameters for the tether constraints.
\param [in] config Tether constraints solver parameters.

</member>
<member name="M:physx.PxCloth.getTetherConfig" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="531">
\brief Returns the stiffness parameters for the tether constraints.
\return Tether solver parameters.

</member>
<member name="M:physx.PxCloth.addCollisionSphere(physx.PxClothCollisionSphere!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="537">
@}
@name Collision
	 *  Functions related to particle collision.

@{
\brief Adds a new collision sphere.
\param [in] sphere New collision sphere.
\note A maximum of 32 spheres are supported.

</member>
<member name="M:physx.PxCloth.removeCollisionSphere(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="550">
\brief Removes collision sphere.
\param [in] index Index of sphere to remove.
\note The indices of spheres added after \c index are decremented by 1.
\note Capsules made from the sphere to be removed are removed as well.

</member>
<member name="M:physx.PxCloth.setCollisionSpheres(physx.PxClothCollisionSphere!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="557">
\brief Updates location and radii of collision spheres.
\param [in] spheresBuffer New sphere positions and radii by the end of the next simulate() call.
\param [in] count New number of collision spheres.
\note You can also use this function to change the number of collision spheres.
\note A maximum of 32 spheres are supported.
\see clearInterpolation()

</member>
<member name="M:physx.PxCloth.getNbCollisionSpheres" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="566">
\brief Returns the number of collision spheres.
\return Number of collision spheres.

</member>
<member name="M:physx.PxCloth.addCollisionCapsule(System.UInt32,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="572">
\brief Adds a new collision capsule. 
\details A collision capsule is defined as the bounding volume of two spheres.
\param [in] first Index of first sphere.
\param [in] second Index of second sphere.
\note A maximum of 32 capsules are supported.
\note Spheres referenced by a capsule need to be defined 
before simulating the scene, see addCollisionSphere/setCollisionSpheres.

</member>
<member name="M:physx.PxCloth.removeCollisionCapsule(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="582">
\brief Removes a collision capsule.
\param [in] index Index of capsule to remove.
\note The indices of capsules added after \c index are decremented by 1.

</member>
<member name="M:physx.PxCloth.getNbCollisionCapsules" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="588">
\brief Returns the number of collision capsules.
\return Number of collision capsules.

</member>
<member name="M:physx.PxCloth.addCollisionPlane(physx.PxClothCollisionPlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="594">
\brief Adds a collision plane.
\param [in] plane New collision plane.
\note Planes are not used for collision until they are added to a convex object, see addCollisionConvex().
\note A maximum of 32 planes are supported.

</member>
<member name="M:physx.PxCloth.removeCollisionPlane(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="601">
\brief Removes a collision plane.
\param [in] index Index of plane to remove.
\note The indices of planes added after \c index are decremented by 1.
\note Convexes that reference the plane will have the plane removed from their mask.
If after removal a convex consists of zero planes, it will also be removed.

</member>
<member name="M:physx.PxCloth.setCollisionPlanes(physx.PxClothCollisionPlane!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="609">
\brief Updates positions of collision planes.
\param [in] planesBuffer New plane positions by the end of the next simulate() call.
\param [in] count New number of collision planes.
\note You can also use this function to change the number of collision planes.
\note A maximum of 32 planes are supported.
\see clearInterpolation()

</member>
<member name="M:physx.PxCloth.getNbCollisionPlanes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="618">
\brief Returns the number of collision planes.
\return Number of collision planes.

</member>
<member name="M:physx.PxCloth.addCollisionConvex(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="624">
\brief Adds a new collision convex.
\details A collision convex is defined as the intersection of planes.
\param [in] mask The bitmask of the planes that make up the convex.
\note Planes referenced by a collision convex need to be defined 
before simulating the scene, see addCollisionPlane/setCollisionPlanes.

</member>
<member name="M:physx.PxCloth.removeCollisionConvex(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="632">
\brief Removes a collision convex.
\param [in] index Index of convex to remove.
\note The indices of convexes added after \c index are decremented by 1.
\note Planes referenced by this convex will not be removed.

</member>
<member name="M:physx.PxCloth.getNbCollisionConvexes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="639">
\brief Returns the number of collision convexes.
\return Number of collision convexes.

</member>
<member name="M:physx.PxCloth.addCollisionTriangle(physx.PxClothCollisionTriangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="645">
\brief Adds a new collision triangle.
\param [in] triangle New collision triangle.
\note GPU cloth is limited to 500 triangles per instance.

</member>
<member name="M:physx.PxCloth.removeCollisionTriangle(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="651">
\brief Removes a collision triangle. 
\param [in] index Index of triangle to remove.
\note The indices of triangles added after \c index are decremented by 1.

</member>
<member name="M:physx.PxCloth.setCollisionTriangles(physx.PxClothCollisionTriangle!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="657">
\brief Updates positions of collision triangles.
\param [in] trianglesBuffer New triangle positions by the end of the next simulate() call.
\param [in] count New number of collision triangles.
\note You can also use this function to change the number of collision triangles.
\note GPU cloth is limited to 500 triangles per instance.
\see clearInterpolation()

</member>
<member name="M:physx.PxCloth.getNbCollisionTriangles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="666">
\brief Returns the number of collision triangles.
\return Number of collision triangles.

</member>
<member name="M:physx.PxCloth.getCollisionData(physx.PxClothCollisionSphere*,System.UInt32*,physx.PxClothCollisionPlane*,System.UInt32*,physx.PxClothCollisionTriangle*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="672">
\brief Retrieves the collision shapes. 
\details Returns collision spheres, capsules, convexes, and triangles that were added through 
the addCollision*() methods and modified through the setCollision*() methods.
\param [out] spheresBuffer Spheres destination buffer, must be NULL or the same length as getNbCollisionSpheres().
\param [out] capsulesBuffer Capsules destination buffer, must be NULL or the same length as 2*getNbCollisionCapsules().
\param [out] planesBuffer Planes destination buffer, must be NULL or the same length as getNbCollisionPlanes().
\param [out] convexesBuffer Convexes destination buffer, must be NULL or the same length as getNbCollisionConvexes().
\param [out] trianglesBuffer Triangles destination buffer, must be NULL or the same length as getNbCollisionTriangles().
\note Returns the positions at the end of the next simulate() call as specified by the setCollision*() methods.

</member>
<member name="M:physx.PxCloth.setVirtualParticles(System.UInt32,System.UInt32!System.Runtime.CompilerServices.IsConst*,System.UInt32,physx.PxVec3!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="686">
\brief Assigns virtual particles.
\details Virtual particles provide more robust and accurate collision handling against collision spheres and capsules.
More virtual particles will generally increase the accuracy of collision handling, and thus
a sufficient number of virtual particles can mimic triangle-based collision handling.\n
Virtual particles are specified as barycentric interpolation of real particles:
The position of a virtual particle is w0 * P0 + w1 * P1 + w2 * P2, where P0, P1, P2 real particle positions.
The barycentric weights w0, w1, w2 are stored in a separate table so they can be shared across multiple virtual particles.
\param [in] numVirtualParticles total number of virtual particles.
\param [in] indices Each virtual particle has four indices, the first three for real particle indices, and the last
for the weight table index.  Thus, the length of <b>indices</b> needs to be 4*numVirtualParticles.
\param [in] numWeights total number of unique weights triples.
\param [in] weights array for barycentric weights.
\note Virtual particles only incur a runtime cost during the collision stage. Still, it is advisable to 
only use virtual particles for areas where high collision accuracy is desired. (e.g. sleeve around elbow).

</member>
<member name="M:physx.PxCloth.getNbVirtualParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="703">
\brief Returns the number of virtual particles.
\return Number of virtual particles.

</member>
<member name="M:physx.PxCloth.getVirtualParticles(System.UInt32*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="708">
\brief Copies index array of virtual particles to the user provided buffer.
\param [out] indicesBuffer Destination buffer, must be at least 4*getNbVirtualParticles().
\see setVirtualParticles()

</member>
<member name="M:physx.PxCloth.getNbVirtualParticleWeights" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="714">
\brief Returns the number of the virtual particle weights.
\return Number of virtual particle weights.

</member>
<member name="M:physx.PxCloth.getVirtualParticleWeights(physx.PxVec3*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="719">
\brief Copies weight table of virtual particles to the user provided buffer.
\param [out] weightsBuffer Destination buffer, must be at least getNbVirtualParticleWeights().

</member>
<member name="M:physx.PxCloth.setFrictionCoefficient(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="725">
\brief Sets the collision friction coefficient.
\param [in] frictionCoefficient New friction coefficient between 0.0 and 1.0 (default: 0.0).
\note Currently only spheres and capsules impose friction on the colliding particles.

</member>
<member name="M:physx.PxCloth.getFrictionCoefficient" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="731">
    \brief Returns the friction coefficient.
	\return Friction coefficient.

</member>
<member name="M:physx.PxCloth.setCollisionMassScale(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="737">
\brief Sets the collision mass scaling coefficient.
\details During collision it is possible to artificially increase the
mass of a colliding particle, this has an effect comparable to making 
constraints	attached to the particle stiffer and can help reduce stretching
and interpenetration around collision shapes. 
\param [in] scalingCoefficient Unitless multiplier that can take on values &gt; 1 (default: 0.0).

</member>
<member name="M:physx.PxCloth.getCollisionMassScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="746">
\brief Returns the mass-scaling coefficient.
\return Mass-scaling coefficient.

</member>
<member name="M:physx.PxCloth.setSelfCollisionDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="752">
@}
@name Self-Collision
	 *  Functions related to particle against particle collision.

@{
\brief Sets the self collision distance.
\details A value larger than 0.0 enables particle versus particle collision.
\param [in] distance Minimum distance at which two particles repel each other (default: 0.0).

</member>
<member name="M:physx.PxCloth.getSelfCollisionDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="765">
\brief Returns the self-collision distance.
\return Self-collision distance.

</member>
<member name="M:physx.PxCloth.setSelfCollisionStiffness(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="770">
\brief Sets the self collision stiffness.
\details Self-collision stiffness controls how much two particles repel 
each other when they are closer than the self-collision distance. 
\param [in] stiffness Fraction of distance residual to resolve per iteration (default: 1.0).

</member>
<member name="M:physx.PxCloth.getSelfCollisionStiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="777">
\brief Returns the self-collision stiffness.
\return Self-collision stiffness.

</member>
<member name="M:physx.PxCloth.setSelfCollisionIndices(System.UInt32!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="783">
\brief Sets a subset of cloth particles which participate in self-collision.
\details If non-null the cloth self-collision will consider a subset of particles
instead of all the particles. This can be used to improve self-collision performance
or to increase the minimum distance between two self-colliding particles 
(and therefore the maximum sensible self-collision distance).
\param [in] indices array of particle indices which participate in self-collision.
\param [in] nbIndices number of particle indices, or 0 to use all particles for self-collision.
\note These indices will also be used if cloth inter-collision is enabled.

</member>
<member name="M:physx.PxCloth.getSelfCollisionIndices(System.UInt32*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="794">
\brief Copies array of particles participating in self-collision to the user provided buffer.
\param [out] indices Destination buffer, must be at least getNbSelfCollisionIndices() in length.
\return true if the copy was successful.	

</member>
<member name="M:physx.PxCloth.getNbSelfCollisionIndices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="801">
\brief Returns the number of particles participating in self-collision.
\return Size of particle subset participating in self-collision, or 0 if all particles are used.

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxCloth.setRestPositions(physx.PxVec4!System.Runtime.CompilerServices.IsConst*)'. -->
<member name="M:physx.PxCloth.getRestPositions(physx.PxVec4*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="819">
\brief Copies array of rest positions to the user provided buffer.
\param [out] restPositions Destination buffer, must be at least getNbParticles() in length.
\return true if the copy was successful.

</member>
<member name="M:physx.PxCloth.getNbRestPositions" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="825">
\brief Returns the number of rest positions.
\return Number of rest positions (same as getNbParticles() if enabled, 0 otherwise).

</member>
<member name="M:physx.PxCloth.setSimulationFilterData(physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="831">
@}
@name Inter-Collision
	 *  Functions related to collision between cloth instances.

@{
\brief Sets the user definable collision filter data.
\param data The data that will be returned in the PxScene filter shader callback.
\note To disable collision on a cloth actor it is sufficient to set the
filter data to some non-zero value (if using the SDK's default filter shader).
@see PxSimulationFilterShader PxFilterData

</member>
<member name="M:physx.PxCloth.getSimulationFilterData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="847">
\brief Retrieves the object's collision filter data.
\return Associated filter data
@see setSimulationFilterData() PxFilterData

</member>
<member name="M:physx.PxCloth.setContactOffset(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="854">
@}
@name Scene-Collision
	 *  Functions related to collision against scene objects.

@{
\brief Sets the width by which the cloth bounding box is increased to find nearby scene collision shapes.
\details The cloth particles collide against shapes in the scene that intersect the cloth bounding box enlarged by 
the contact offset (if the eSCENE_COLLISION flag is set). <b>Default:</b> 0.0f
\param[in] offset <b>Range:</b> [0, PX_MAX_F32)
@see getContactOffset setRestOffset

</member>
<member name="M:physx.PxCloth.getContactOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="870">
\brief Returns cloth contact offset.
@see setContactOffset

</member>
<member name="M:physx.PxCloth.setRestOffset(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="876">
\brief Sets the minimum distance between colliding cloth particles and scene shapes.
\details Cloth particles colliding against shapes in the scene get no closer to the shape's surface 
than specified by the rest offset (if the eSCENE_COLLISION flag is set). <b>Default:</b> 0.0f
\param[in] offset <b>Range:</b> [0, PX_MAX_F32)
@see getRestOffset setContactOffset

</member>
<member name="M:physx.PxCloth.getRestOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="885">
\brief Returns cloth rest offset.
@see setRestOffset

</member>
<member name="M:physx.PxCloth.setSleepLinearVelocity(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="891">
@}
@name Sleeping
	 *  Functions related to sleeping.

@{
\brief Sets the velocity threshold for putting cloth in sleep state.
\details If none of the particles moves faster (in local space)
than the threshold for a while, the cloth will be put in
sleep state and simulation will be skipped.
\param [in] threshold Velocity threshold (default: 0.0f)

</member>
<member name="M:physx.PxCloth.getSleepLinearVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="906">
\brief Returns the velocity threshold for putting cloth in sleep state.
\return Velocity threshold for putting cloth in sleep state.

</member>
<member name="M:physx.PxCloth.setWakeCounter(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="911">
\brief Sets the wake counter for the cloth.
\details The wake counter value determines how long all particles need to	move less than the velocity threshold until the cloth 
is put to sleep (see #setSleepLinearVelocity()).
\note Passing in a positive value will wake the cloth up automatically.
<b>Default:</b> 0.395 (which corresponds to 20 frames for a time step of 0.02)
\param[in] wakeCounterValue Wake counter value. <b>Range:</b> [0, PX_MAX_F32)
@see isSleeping() getWakeCounter()

</member>
<member name="M:physx.PxCloth.getWakeCounter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="921">
\brief Returns the wake counter of the cloth.
\return The wake counter of the cloth.
@see isSleeping() setWakeCounter()

</member>
<member name="M:physx.PxCloth.wakeUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="927">
\brief Forces cloth to wake up from sleep state.
\note This will set the wake counter of the cloth to the value specified in #PxSceneDesc::wakeCounterResetValue.
\note It is invalid to use this method if the cloth has not been added to a scene already.
@see isSleeping() putToSleep()

</member>
<member name="M:physx.PxCloth.putToSleep" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="934">
\brief Forces cloth to be put in sleep state.
\note It is invalid to use this method if the cloth has not been added to a scene already.

</member>
<member name="M:physx.PxCloth.isSleeping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="939">
\brief Returns true if cloth is in sleep state
\note It is invalid to use this method if the cloth has not been added to a scene already.
\return True if cloth is in sleep state.

</member>
<member name="M:physx.PxCloth.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxcloth.h" line="946">
@}
</member>
<member name="T:physx.PxClothParticleData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothparticledata.h" line="34">
\brief Data layout descriptor for reading cloth data from the SDK.
@see PxCloth.lockParticleData()

</member>
<member name="F:physx.PxClothParticleData.particles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothparticledata.h" line="41">
\brief Particle position and mass data.
@see PxCloth.getNbParticles()

</member>
<member name="F:physx.PxClothParticleData.previousParticles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cloth\pxclothparticledata.h" line="47">
\brief Particle position and mass data from the second last iteration.
\details Can be used together with #particles and #PxCloth.getPreviousTimeStep() to compute particle velocities.

</member>
<member name="T:physx.PxConvexFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="30">
\brief Flags which describe the format and behavior of a convex mesh.

</member>
<member name="F:eFLIPNORMALS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="37">
		\brief Used to flip the normals if the winding order is reversed.

		The PhysX libraries assume that the face normal of a triangle with vertices [a,b,c] can be computed as:
		edge1 = b-a
		edge2 = c-a
		face_normal = edge1 x edge2.

		Note: this is the same as counterclockwise winding in a right handed graphics coordinate system.

		If that does not match the winding order for your triangles, raise this flag.

		Deprecated as triangles will not be accepted in future releases as input for convex mesh descriptor.

</member>
<member name="F:e16_BIT_INDICES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="53">
Denotes the use of 16-bit vertex indices in PxConvexMeshDesc::triangles or PxConvexMeshDesc::polygons.
(otherwise, 32-bit indices are assumed)
@see #PxConvexMeshDesc.triangles

</member>
<member name="F:eCOMPUTE_CONVEX" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="60">
Automatically recomputes the hull from the vertices. If this flag is not set, you must provide the entire geometry manually.

</member>
<member name="F:eINFLATE_CONVEX" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="65">
		\brief Inflates the convex object according to skin width. If the convex hull computation fails, use this flag to increase robustness.

		\note This flag is only used in combination with eCOMPUTE_CONVEX.

		@see PxCookingParams

</member>
<member name="F:eCHECK_ZERO_AREA_TRIANGLES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="74">
		\brief Checks and removes almost zero-area triangles during convex hull computation. 
		The rejected area size is specified in PxCookingParams::areaTestEpsilon

		\note This flag is only used in combination with eCOMPUTE_CONVEX.

		\note If this flag is used in combination with eINFLATE_CONVEX, the newly added triangles 
		by the inflation algorithm are not checked (size of the triangles depends on PxCooking::skinWidth).  

		@see PxCookingParams PxCookingParams::areaTestEpsilon

</member>
<member name="D:physx.PxConvexFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="89">
\brief collection of set bits defined in PxConvexFlag.

@see PxConvexFlag

</member>
<member name="T:physx.PxConvexMeshDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="100">
\brief Descriptor class for #PxConvexMesh.
\note The number of vertices and the number of convex polygons in a cooked convex mesh is limited to 256.

@see PxConvexMesh PxConvexMeshGeometry PxShape PxPhysics.createConvexMesh()


</member>
<member name="F:physx.PxConvexMeshDesc.points" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="111">
	\brief Vertex positions data in PxBoundedData format.

	<b>Default:</b> NULL

</member>
<member name="F:physx.PxConvexMeshDesc.triangles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="118">
	\deprecated
	\brief Triangle indices data in PxBoundedData format.	
	<p><pre>These are triplets of 0 based indices:
	vert0 vert1 vert2
	vert0 vert1 vert2
	vert0 vert1 vert2
	...</pre></p>

	<p>Where vertex is either a 32 or 16 bit unsigned integer. There are numTriangles*3 indices.</p>

	<p>This function is deprecated in favor of creating hulls from polygons directly. 
	To obtain polygons from your triangles use computeHullPolygons.</p>

	<b>Default:</b> NULL

	@see PxConvexFlag::e16_BIT_INDICES

</member>
<member name="F:physx.PxConvexMeshDesc.polygons" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="138">
	\brief Polygons data in PxBoundedData format.
	<p>Pointer to first polygon. </p>

	<b>Default:</b> NULL	

	@see PxHullPolygon

</member>
<member name="F:physx.PxConvexMeshDesc.indices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="148">
	\brief Polygon indices data in PxBoundedData format.
	<p>Pointer to first index.</p>

	<b>Default:</b> NULL	

	<p>This is declared as a void pointer because it is actually either an PxU16 or a PxU32 pointer.</p>

	@see PxHullPolygon PxConvexFlag::e16_BIT_INDICES

</member>
<member name="F:physx.PxConvexMeshDesc.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="160">
	\brief Flags bits, combined from values of the enum ::PxConvexFlag

	<b>Default:</b> 0

</member>
<member name="F:physx.PxConvexMeshDesc.vertexLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="167">
	\brief Limits the number of vertices of the result convex mesh. Hard maximum limit is 256 and minimum limit is 4. 

	Please note, that if a vertex limit is used together with the inflation flag, beveling sharp edges in the inflation code
	may cause the limit to be exceeded.

	<b>Default:</b> 256

</member>
<member name="M:physx.PxConvexMeshDesc.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="177">
\brief constructor sets to default.

</member>
<member name="M:physx.PxConvexMeshDesc.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="181">
\brief (re)sets the structure to the default.	

</member>
<member name="M:physx.PxConvexMeshDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxconvexmeshdesc.h" line="185">
	\brief Returns true if the descriptor is valid.

	\return True if the current settings are valid

</member>
<member name="T:physx.PxTriangleMeshDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxtrianglemeshdesc.h" line="28">
\brief Descriptor class for #PxTriangleMesh.

Note that this class is derived from PxSimpleTriangleMesh which contains the members that describe the basic mesh.
The mesh data is *copied* when an PxTriangleMesh object is created from this descriptor. After the call the
user may discard the triangle data.

@see PxTriangleMesh PxTriangleMeshGeometry PxShape

</member>
<member name="F:physx.PxTriangleMeshDesc.materialIndices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxtrianglemeshdesc.h" line="41">
	Optional pointer to first material index, or NULL. There are PxSimpleTriangleMesh::numTriangles indices in total.
	Caller may add materialIndexStride bytes to the pointer to access the next triangle.

	When a triangle mesh collides with another object, a material is required at the collision point.
	If materialIndices is NULL, then the material of the PxShape instance is used.
	Otherwise, if the point of contact is on a triangle with index i, then the material index is determined as: 
	PxMaterialTableIndex	index = *(PxMaterialTableIndex *)(((PxU8*)materialIndices) + materialIndexStride * i);

	If the contact point falls on a vertex or an edge, a triangle adjacent to the vertex or edge is selected, and its index
	used to look up a material. The selection is arbitrary but consistent over time. 

	<b>Default:</b> NULL

	@see materialIndexStride

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxTriangleMeshDesc.convexEdgeThreshold'. -->
<member name="M:physx.PxTriangleMeshDesc.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxtrianglemeshdesc.h" line="69">
\brief Constructor sets to default.

</member>
<member name="M:physx.PxTriangleMeshDesc.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxtrianglemeshdesc.h" line="74">
\brief (re)sets the structure to the default.	

</member>
<member name="M:physx.PxTriangleMeshDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxtrianglemeshdesc.h" line="79">
\brief Returns true if the descriptor is valid.
\return true if the current settings are valid

</member>
<member name="T:physx.PxConvexMeshCookingResult" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="47">
\brief Result from convex cooking.

</member>
<member name="F:eSUCCESS" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="54">
\brief Convex mesh cooking succeeded.

</member>
<member name="F:eZERO_AREA_TEST_FAILED" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="59">
		\brief Convex mesh cooking failed, algorithm couldn't find 4 initial vertices without a small triangle.

		@see PxCookingParams::areaTestEpsilon PxConvexFlag::eCHECK_ZERO_AREA_TRIANGLES

</member>
<member name="F:eFAILURE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="66">
\brief Something unrecoverable happened. Check the error stream to find out what.

</member>
<member name="T:physx.PxMeshPreprocessingFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="73">

\brief Enum for the set of mesh pre-processing parameters.


</member>
<member name="F:eWELD_VERTICES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="83">
\brief When set, mesh welding is performed. See PxCookingParams::meshWeldTolerance. Clean mesh must be enabled.

</member>
<member name="F:eREMOVE_UNREFERENCED_VERTICES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="88">
\brief When set, unreferenced vertices are removed during clean mesh. Clean mesh must be enabledt.

</member>
<member name="F:eREMOVE_DUPLICATED_TRIANGLES" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="93">
\brief When set, duplicit vertices are removed during clean mesh. Clean mesh must be enabled.

</member>
<member name="F:eDISABLE_CLEAN_MESH" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="98">
		\brief When set, mesh cleaning is disabled. This makes cooking faster.

		When clean mesh is not performed, mesh welding is also not performed. 

		It is recommended to use only meshes that passed during validateTriangleMesh. 


</member>
<member name="F:eDISABLE_ACTIVE_EDGES_PRECOMPUTE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="108">
\brief When set, active edges are set for each triangle edge. This makes cooking faster but slow up contact generation.

</member>
<!-- Discarding badly formed XML document comment for member 'F:eFORCE_32BIT_INDICES'. -->
<member name="T:physx.PxMeshCookingHint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="124">
\brief Enumeration for mesh cooking hints. 
</member>
<member name="T:physx.PxCookingParams" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="134">

\brief Structure describing parameters affecting mesh cooking.

@see PxSetCookingParams() PxGetCookingParams()

</member>
<member name="F:physx.PxCookingParams.targetPlatform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="142">
	\brief Target platform

	Should be set to the platform which you intend to load the cooked mesh data on. This allows
	the SDK to optimize the mesh data in an appropriate way for the platform and make sure that
	endianness issues are accounted for correctly.

	<b>Default value:</b> Same as the platform on which the SDK is running.

</member>
<member name="F:physx.PxCookingParams.skinWidth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="153">
	\brief Skin width for convexes.

	Specifies the amount to inflate the convex mesh when the PxConvexFlag::eINFLATE_CONVEX is used.

	The value is used for moving planes outward, and beveling sharp edges. This helps the hull generator
	code produce more stable convexes for collision detection. Please note that the resulting hull will
	increase its size, so contact generation may produce noticeable separation between shapes. The separation
	distance can be reduced by decreasing the contactOffset and restOffset.  See the user's manual on
	'Shapes - Tuning Shape Collision Behavior' for details.

	Change the value if the produced hulls are too thin or improper for your usage. Increasing the value
	too much will result in incorrect hull size and a large separation between shapes.

	<b>Default value:</b> 0.025f*PxTolerancesScale.length

	<b>Range:</b> (0.0f, PX_MAX_F32)

</member>
<member name="F:physx.PxCookingParams.areaTestEpsilon" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="173">
	\brief Zero-size area epsilon used in convex hull computation.

	If the area of a triangle of the hull is below this value, the triangle will be rejected. This test
	is done only if PxConvexFlag::eCHECK_ZERO_AREA_TRIANGLES is used.

	@see PxConvexFlag::eCHECK_ZERO_AREA_TRIANGLES

	<b>Default value:</b> 0.06f*PxTolerancesScale.length*PxTolerancesScale.length

	<b>Range:</b> (0.0f, PX_MAX_F32)

</member>
<member name="F:physx.PxCookingParams.suppressTriangleMeshRemapTable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="187">
	\brief When true, the face remap table is not created.  This saves a significant amount of memory, but the SDK will
		not be able to provide the remap information for internal mesh triangles returned by collisions, 
		sweeps or raycasts hits.

	<b>Default value:</b> false

</member>
<member name="F:physx.PxCookingParams.buildTriangleAdjacencies" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="196">
	\brief When true, the triangle adjacency information is created. You can get the adjacency triangles
	for a given triangle from getTriangle.

	<b>Default value:</b> false

</member>
<member name="F:physx.PxCookingParams.scale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="204">
	\brief Tolerance scale is used to check if cooked triangles are not too huge. This check will help with simulation stability.

	\note The PxTolerancesScale values have to match the values used when creating a PxPhysics or PxScene instance.

	@see PxTolerancesScale

</member>
<member name="F:physx.PxCookingParams.meshPreprocessParams" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="213">
	\brief Mesh pre-processing parameters. Used to control options like whether the mesh cooking performs vertex welding before cooking.

	<b>Default value:</b> 0

</member>
<member name="F:physx.PxCookingParams.meshCookingHint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="220">
	\brief Mesh cooking hint. Used to specify mesh hierarchy construction preference.

	<b>Default value:</b> PxMeshCookingHint::eSIM_PERFORMANCE

</member>
<member name="F:physx.PxCookingParams.meshWeldTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="227">
	\brief Mesh weld tolerance. If mesh welding is enabled, this controls the distance at which vertices are welded.
	If mesh welding is not enabled, this value defines the acceptance distance for mesh validation. Provided no two vertices are within this distance, the mesh is considered to be
	clean. If not, a warning will be emitted. Having a clean, welded mesh is required to achieve the best possible performance.

	The default vertex welding uses a snap-to-grid approach. This approach effectively truncates each vertex to integer values using meshWeldTolerance.
	Once these snapped vertices are produced, all vertices that snap to a given vertex on the grid are remapped to reference a single vertex. Following this,
	all triangles' indices are remapped to reference this subset of clean vertices. It should be noted that	the vertices that we do not alter the
	position of the vertices; the snap-to-grid is only performed to identify nearby vertices.

	The mesh validation approach also uses the same snap-to-grid approach to identify nearby vertices. If more than one vertex snaps to a given grid coordinate,
	we ensure that the distance between the vertices is at least meshWeldTolerance. If this is not the case, a warning is emitted.

	<b>Default value:</b> 0.0

</member>
<member name="F:physx.PxCookingParams.meshSizePerformanceTradeOff" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="244">
	\brief Controls the trade-off between mesh size and runtime performance.

	Using a value of 1.0 will produce a larger cooked mesh with generally higher runtime performance,
	using 0.0 will produce a smaller cooked mesh, with generally lower runtime performance.

	Values outside of [0,1] range will be clamped and cause a warning when any mesh gets cooked.

	<b>Default value:</b> 0.55
	<b>Range:</b> [0.0f, 1.0f]

</member>
<member name="M:physx.PxCooking.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="287">
	\brief Closes this instance of the interface.

	This function should be called to cleanly shut down the Cooking library before application exit.

	\note This function is required to be called to release foundation usage.


</member>
<member name="M:physx.PxCooking.setParams(physx.PxCookingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="297">
	\brief Sets cooking parameters

	\param[in] params Cooking parameters

	@see getParams()

</member>
<member name="M:physx.PxCooking.getParams" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="306">
	\brief Gets cooking parameters

	\return Current cooking parameters.

	@see PxCookingParams setParams()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxCooking.platformMismatch'. -->
<member name="M:physx.PxCooking.cookTriangleMesh(physx.PxTriangleMeshDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="322">
	\brief Cooks a triangle mesh. The results are written to the stream.

	To create a triangle mesh object it is necessary to first 'cook' the mesh data into
	a form which allows the SDK to perform efficient collision detection.

	cookTriangleMesh() allows a mesh description to be cooked into a binary stream
	suitable for loading and performing collision detection at runtime.

	Example

	\include PxCookTriangleMesh_Example.cpp

	\param[in] desc The triangle mesh descriptor to read the mesh from.
	\param[in] stream User stream to output the cooked data.
	\return true on success

	@see cookConvexMesh() setParams() PxPhysics.createTriangleMesh()

</member>
<member name="M:physx.PxCooking.createTriangleMesh(physx.PxTriangleMeshDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxPhysicsInsertionCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="343">
	\brief Cooks and creates a triangle mesh and inserts it into PxPhysics.

	\param[in] desc The triangle mesh descriptor to read the mesh from.
	\param[in] insertionCallback The insertion interface from PxPhysics.
	\return PxTriangleMesh pointer on success	

	@see cookConvexMesh() setParams() PxPhysics.createTriangleMesh() PxPhysicsInsertionCallback

</member>
<member name="M:physx.PxCooking.validateTriangleMesh(physx.PxTriangleMeshDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="354">
	\brief Verifies if the triangle mesh is valid. Prints an error message for each inconsistency found.

	The following conditions are true for a valid triangle mesh:
	1. There are no duplicate vertices (within specified vertexWeldTolerance. See PxCookingParams::meshWeldTolerance)
    2. There are no large triangles (within specified PxTolerancesScale.)

	\param[in] desc The triangle mesh descriptor to read the mesh from.

	\return true if all the validity conditions hold, false otherwise.

	@see cookTriangleMesh()

</member>
<member name="M:physx.PxCooking.cookConvexMesh(physx.PxConvexMeshDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxConvexMeshCookingResult.Enum*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="369">
	\brief Cooks a convex mesh. The results are written to the stream.

	To create a triangle mesh object it is necessary to first 'cook' the mesh data into
	a form which allows the SDK to perform efficient collision detection.

	cookConvexMesh() allows a mesh description to be cooked into a binary stream
	suitable for loading and performing collision detection at runtime.

	Example

	\include PxCookConvexMesh_Example.cpp

	\note The number of vertices and the number of convex polygons in a cooked convex mesh is limited to 256.
	\note If those limits are exceeded in either the user-provided data or the final cooked mesh, an error is reported.
	\note If the number of polygons exceed, using the #PxConvexFlag::eINFLATE_CONVEX can help you to obtain a valid convex.

	\param[in] desc The convex mesh descriptor to read the mesh from.
	\param[in] stream User stream to output the cooked data.
	\param[out] condition Result from convex mesh cooking.
	\return true on success

	@see cookTriangleMesh() setParams() PxConvexMeshCookingResult::Enum

</member>
<member name="M:physx.PxCooking.computeHullPolygons(physx.PxSimpleTriangleMesh!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxAllocatorCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxHullPolygon**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="395">
	\brief Computed hull polygons from given vertices and triangles. Polygons are needed for PxConvexMeshDesc rather than triangles.

	Please note that the resulting polygons may have different number of vertices. Some vertices may be removed. 
	The output vertices, indices and polygons must be used to construct a hull.

	The provided PxAllocatorCallback does allocate the out array's. It is the user responsibility to deallocated those
	array's.

	\param[in] mesh Simple triangle mesh containing vertices and triangles used to compute polygons.
	\param[in] inCallback Memory allocator for out array allocations.
	\param[out] nbVerts Number of vertices used by polygons.
	\param[out] vertices Vertices array used by polygons.
	\param[out] nbIndices Number of indices used by polygons.
	\param[out] indices Indices array used by polygons.
	\param[out] nbPolygons Number of created polygons.
	\param[out] hullPolygons Polygons array.
	\return true on success

	@see cookConvexMesh() PxConvexFlags PxConvexMeshDesc PxSimpleTriangleMesh

</member>
<member name="M:physx.PxCooking.cookHeightField(physx.PxHeightFieldDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="419">
	\brief Cooks a heightfield. The results are written to the stream.

	To create a heightfield object there is an option to precompute some of calculations done while loading the heightfield data.

	cookHeightField() allows a heightfield description to be cooked into a binary stream
	suitable for loading and performing collision detection at runtime.

	\param[in] desc The heightfield descriptor to read the HF from.
	\param[in] stream User stream to output the cooked data.
	\return true on success

	@see PxPhysics.createHeightField()

</member>
<member name="M:physx.PxCooking.createHeightField(physx.PxHeightFieldDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxPhysicsInsertionCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="435">
	\brief Cooks and creates a heightfield mesh and inserts it into PxPhysics.

	\param[in] desc The heightfield descriptor to read the HF from.
	\param[in] insertionCallback The insertion interface from PxPhysics.
	\return PxHeightField pointer on success

	@see cookConvexMesh() setParams() PxPhysics.createTriangleMesh() PxPhysicsInsertionCallback

</member>
<member name="M:PxCreateCooking(System.UInt32,physx.PxFoundation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCookingParams!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\cooking\pxcooking.h" line="455">
\brief Create an instance of the cooking interface.

Note that the foundation object is handled as an application-wide singleton in statically linked executables
and a DLL-wide singleton in dynamically linked executables. Therefore, if you are using the runtime SDK in the
same executable as cooking, you should pass the Physics's copy of foundation (acquired with
PxPhysics::getFoundation()) to the cooker. This will also ensure correct handling of memory for objects
passed from the cooker to the SDK.

To use cooking in standalone mode, create an instance of the Foundation object with PxCreateCookingFoundation.
You should pass the same foundation object to all instances of the cooking interface.

\param[in] version the SDK version number
\param[in] foundation the foundation object associated with this instance of the cooking interface.
\param[in] params the parameters for this instance of the cooking interface
\return true on success.

</member>
<member name="D:PxFileHandle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultstreams.h" line="16">
\addtogroup extensions
  @{

</member>
<member name="T:physx.PxDefaultMemoryOutputStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultstreams.h" line="36">
\brief default implementation of a memory write stream

@see PxOutputStream

</member>
<member name="T:physx.PxDefaultMemoryInputData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultstreams.h" line="63">
\brief default implementation of a memory read stream

@see PxInputData

</member>
<member name="T:physx.PxDefaultFileOutputStream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultstreams.h" line="87">
\brief default implementation of a file write stream

@see PxOutputStream

</member>
<member name="T:physx.PxDefaultFileInputData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultstreams.h" line="106">
\brief default implementation of a file read stream

@see PxInputData

</member>
<member name="T:physx.PxJointConcreteType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="35">
\brief an enumeration of PhysX' built-in joint types

@see PxJoint

</member>
<member name="D:physx.PxJointType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="54">
\brief legacy joint type enumeration. DEPRECATED. Use PxJointConcreteType 

@see PxJointConcreteType PxJoint::getType()

</member>
<member name="T:physx.PxJointActorIndex" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="70">
\brief an enumeration for specifying one or other of the actors referenced by a joint

@see PxJoint

</member>
<member name="T:physx.PxJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="86">
\brief a base interface providing common functionality for PhysX joints

</member>
<member name="M:physx.PxJoint.setActors(physx.PxRigidActor*,physx.PxRigidActor*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="100">
	\brief Set the actors for this joint. 
	
	An actor may be NULL to indicate the world frame. At most one of the actors may be NULL.

	\param[in] actor0 the first actor.
	\param[in] actor1 the second actor

	@see getActors()

</member>
<member name="M:physx.PxJoint.getActors(physx.PxRigidActor**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="113">
	\brief Get the actors for this joint. 
	
	\param[out] actor0 the first actor.
	\param[out] actor1 the second actor

	@see setActors()

</member>
<member name="M:physx.PxJoint.setLocalPose(physx.PxJointActorIndex.Enum,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="124">
	\brief Set the joint local pose for an actor. 
	
	This is the relative pose which locates the joint frame relative to the actor.

	\param[in] actor 0 for the first actor, 1 for the second actor.
	\param[in] localPose the local pose for the actor this joint

	@see getLocalPose()

</member>
<member name="M:physx.PxJoint.getLocalPose(physx.PxJointActorIndex.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="137">
	\brief get the joint local pose for an actor. 
	
	\param[in] actor 0 for the first actor, 1 for the second actor.

	return the local pose for this joint

	@see setLocalPose()

</member>
<member name="M:physx.PxJoint.getRelativeTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="150">
	\brief get the relative pose for this joint

	This function returns the pose of the joint frame of actor1 relative to actor0


</member>
<member name="M:physx.PxJoint.getRelativeLinearVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="159">
	\brief get the relative linear velocity of the joint

	This function returns the linear velocity of the origin of the constraint frame of actor1, relative to the origin of the constraint
	frame of actor0. The value is returned in the constraint frame of actor0

</member>
<member name="M:physx.PxJoint.getRelativeAngularVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="168">
	\brief get the relative angular velocity of the joint

	This function returns the angular velocity of  actor1 relative to actor0. The value is returned in the constraint frame of actor0

</member>
<member name="M:physx.PxJoint.setBreakForce(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="177">
	\brief set the break force for this joint. 
	
	if the constraint force or torque on the joint exceeds the specified values, the joint will break, 
	at which point it will not constrain the two actors and the flag PxConstraintFlag::eBROKEN will be set. The
	force and torque are measured in the joint frame of the first actor

	\param[in] force the maximum force the joint can apply before breaking
	\param[in] torque the maximum torque the joint can apply before breaking


</member>
<member name="M:physx.PxJoint.getBreakForce(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="191">
	\brief get the break force for this joint. 
	
	\param[out] force the maximum force the joint can apply before breaking
	\param[out] torque the maximum torque the joint can apply before breaking

	@see setBreakForce() 

</member>
<member name="M:physx.PxJoint.setConstraintFlags(physx.PxFlags&lt;physx.PxConstraintFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="201">
	\brief set the constraint flags for this joint. 
	
	\param[in] flags the constraint flags

	@see PxConstraintFlag

</member>
<member name="M:physx.PxJoint.setConstraintFlag(physx.PxConstraintFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="210">
	\brief set a constraint flags for this joint to a specified value. 
	
	\param[in] flag the constraint flag
	\param[in] value the value to which to set the flag

	@see PxConstraintFlag

</member>
<member name="M:physx.PxJoint.getConstraintFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="221">
	\brief get the constraint flags for this joint. 
	
	\return the constraint flags

	@see PxConstraintFlag

</member>
<member name="M:physx.PxJoint.setInvMassScale0(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="232">
	\brief set the inverse mass scale for actor0.

	\param[in] invMassScale the scale to apply to the inverse mass of actor 0 for resolving this constraint

	@see getInvMassScale0

</member>
<member name="M:physx.PxJoint.getInvMassScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="241">
	\brief get the inverse mass scale for actor0.

	\return inverse mass scale for actor0

	@see setInvMassScale0

</member>
<member name="M:physx.PxJoint.setInvInertiaScale0(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="251">
	\brief set the inverse inertia scale for actor0.

	\param[in] invInertiaScale the scale to apply to the inverse inertia of actor0 for resolving this constraint

	@see getInvMassScale0

</member>
<member name="M:physx.PxJoint.getInvInertiaScale0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="261">
	\brief get the inverse inertia scale for actor0.

	\return inverse inertia scale for actor0

	@see setInvInertiaScale0

</member>
<member name="M:physx.PxJoint.setInvMassScale1(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="271">
	\brief set the inverse mass scale for actor1.

	\param[in] invMassScale the scale to apply to the inverse mass of actor 1 for resolving this constraint

	@see getInvMassScale1

</member>
<member name="M:physx.PxJoint.getInvMassScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="280">
	\brief get the inverse mass scale for actor1.

	\return inverse mass scale for actor1

	@see setInvMassScale1

</member>
<member name="M:physx.PxJoint.setInvInertiaScale1(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="290">
	\brief set the inverse inertia scale for actor1.

	\param[in] invInertiaScale the scale to apply to the inverse inertia of actor1 for resolving this constraint

	@see getInvInertiaScale1

</member>
<member name="M:physx.PxJoint.getInvInertiaScale1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="300">
	\brief get the inverse inertia scale for actor1.

	\return inverse inertia scale for actor1

	@see setInvInertiaScale1

</member>
<member name="M:physx.PxJoint.getConstraint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="310">
	\brief Retrieves the PxConstraint corresponding to this joint.
	
	This can be used to determine, among other things, the force applied at the joint.

	\return the constraint

</member>
<member name="M:physx.PxJoint.setName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="320">
	\brief Sets a name string for the object that can be retrieved with getName().
	
	This is for debugging and is not used by the SDK. The string is not copied by the SDK, 
	only the pointer is stored.

	\param[in] name String to set the objects name to.

	@see getName()

</member>
<member name="M:physx.PxJoint.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="333">
	\brief Retrieves the name string set with setName().

	\return Name string associated with object.

	@see setName()

</member>
<member name="M:physx.PxJoint.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="343">
	\brief Deletes the joint.

	\note This call does not wake up the connected rigid bodies.

</member>
<member name="M:physx.PxJoint.getScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="353">
	\brief Retrieves the scene which this joint belongs to.

	\return Owner Scene. NULL if not part of a scene.

	@see PxScene

</member>
<member name="M:physx.PxJoint.getBinaryMetaData(physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="366">
\brief Put class meta data in stream, used for serialization

</member>
<member name="M:physx.PxJoint.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="373">
	\deprecated
	\brief Deprecated method to retrieves the type of this joint. Please use getConcreteType()

	\return the joint type

	@see PxJointType PxBase::getConcreteType()

</member>
<member name="M:physx.PxJoint.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="389">
\brief Constructor

</member>
<member name="M:physx.PxJoint.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="394">
\brief Deserialization constructor

</member>
<member name="M:physx.PxJoint.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjoint.h" line="399">
\brief Returns whether a given type name matches with the type of this instance

</member>
<!-- Discarding badly formed XML document comment for member 'M:PxSetJointGlobalFrame(physx.PxJoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*,physx.PxVec3!System.Runtime.CompilerServices.IsConst*)'. -->
<member name="M:physx.PxDistanceJointCreate(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="29">
\brief Create a distance Joint.

 \param[in] physics the physics SDK
 \param[in] actor0 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame0 the position and orientation of the joint relative to actor0
 \param[in] actor1 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame1 the position and orientation of the joint relative to actor1 

@see PxDistanceJoint

</member>
<member name="T:physx.PxDistanceJointFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="46">
\brief flags for configuring the drive of a PxDistanceJoint

@see PxDistanceJoint

</member>
<member name="T:physx.PxDistanceJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="65">
\brief a joint that maintains an upper or lower bound (or both) on the distance between two points on different objects

@see PxDistanceJointCreate PxJoint

</member>
<member name="M:physx.PxDistanceJoint.getDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="75">
\brief Return the current distance of the joint

</member>
<member name="M:physx.PxDistanceJoint.setMinDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="81">
	\brief Set the allowed minimum distance for the joint.

	The minimum	distance must be no more than the maximum distance

	<b>Default</b> 0.0f
	<b>Range</b> [0, PX_MAX_F32)

	\param[in] distance the minimum distance

	@see PxDistanceJoint::minDistance, PxDistanceJointFlag::eMIN_DISTANCE_ENABLED getMinDistance()

</member>
<member name="M:physx.PxDistanceJoint.getMinDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="96">
	\brief Get the allowed minimum distance for the joint.

	\return the allowed minimum distance

	@see PxDistanceJoint::minDistance, PxDistanceJointFlag::eMIN_DISTANCE_ENABLED setMinDistance()

</member>
<member name="M:physx.PxDistanceJoint.setMaxDistance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="107">
	\brief Set the allowed maximum distance for the joint.

	The maximum	distance must be no less than the minimum distance. 

	<b>Default</b> 0.0f
	<b>Range</b> [0, PX_MAX_F32)

	\param[in] distance the maximum distance

	@see PxDistanceJoint::maxDistance, PxDistanceJointFlag::eMAX_DISTANCE_ENABLED getMinDistance()

</member>
<member name="M:physx.PxDistanceJoint.getMaxDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="122">
	\brief Get the allowed maximum distance for the joint.

	\return the allowed maximum distance

	@see PxDistanceJoint::maxDistance, PxDistanceJointFlag::eMAX_DISTANCE_ENABLED setMaxDistance()

</member>
<member name="M:physx.PxDistanceJoint.setTolerance(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="133">
	\brief Set the error tolerance of the joint.

	\param[in] tolerance the distance beyond the allowed range at which the joint becomes active

	@see PxDistanceJoint::tolerance, getTolerance()

</member>
<member name="M:physx.PxDistanceJoint.getTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="144">
	\brief Get the error tolerance of the joint.

	\brief the distance beyond the joint's [min, max] range before the joint becomes active.

	<b>Default</b> 0.25f * PxTolerancesScale::length
	<b>Range</b> (0, PX_MAX_F32)

	This value should be used to ensure that if the minimum distance is zero and the 
	spring function is in use, the rest length of the spring is non-zero. 

	@see PxDistanceJoint::tolerance, setTolerance()

</member>
<member name="M:physx.PxDistanceJoint.setStiffness(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="159">
	\brief Set the strength of the joint spring.

	The spring is used if enabled, and the distance exceeds the range [min-error, max+error].

	<b>Default</b> 0.0f
	<b>Range</b> [0, PX_MAX_F32)

	\param[in] stiffness the spring strength of the joint

	@see PxDistanceJointFlag::eSPRING_ENABLED getStiffness()

</member>
<member name="M:physx.PxDistanceJoint.getStiffness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="174">
	\brief Get the strength of the joint spring.

	\return stiffness the spring strength of the joint

	@see PxDistanceJointFlag::eSPRING_ENABLED setStiffness()

</member>
<member name="M:physx.PxDistanceJoint.setDamping(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="185">
	\brief Set the damping of the joint spring.

	The spring is used if enabled, and the distance exceeds the range [min-error, max+error].

	<b>Default</b> 0.0f
	<b>Range</b> [0, PX_MAX_F32)

	\param[in] damping the degree of damping of the joint spring of the joint

	@see PxDistanceJointFlag::eSPRING_ENABLED setDamping()

</member>
<member name="M:physx.PxDistanceJoint.getDamping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="201">
	\brief Get the damping of the joint spring.

	\return the degree of damping of the joint spring of the joint

	@see PxDistanceJointFlag::eSPRING_ENABLED setDamping()

</member>
<member name="M:physx.PxDistanceJoint.setDistanceJointFlags(physx.PxFlags&lt;physx.PxDistanceJointFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="211">
	\brief Set the flags specific to the Distance Joint.

	<b>Default</b> PxDistanceJointFlag::eMAX_DISTANCE_ENABLED

	\param[in] flags The joint flags.

	@see PxDistanceJointFlag setFlag() getFlags()

</member>
<member name="M:physx.PxDistanceJoint.setDistanceJointFlag(physx.PxDistanceJointFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="224">
	\brief Set a single flag specific to a Distance Joint to true or false.

	\param[in] flag The flag to set or clear.
	\param[in] value the value to which to set the flag

	@see PxDistanceJointFlag, getFlags() setFlags()

</member>
<member name="M:physx.PxDistanceJoint.getDistanceJointFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="235">
	\brief Get the flags specific to the Distance Joint.

	\return the joint flags

	@see PxDistanceJoint::flags, PxDistanceJointFlag setFlag() setFlags()

</member>
<member name="M:physx.PxDistanceJoint.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="245">
\brief Returns string name of PxDistanceJoint, used for serialization

</member>
<member name="M:physx.PxDistanceJoint.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="254">
\brief Constructor

</member>
<member name="M:physx.PxDistanceJoint.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="259">
\brief Deserialization constructor

</member>
<member name="M:physx.PxDistanceJoint.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="264">
\brief Returns whether a given type name matches with the type of this instance

</member>
<member name="T:_heapinfo" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdistancejoint.h" line="276">
@} 
\addtogroup extensions
  @{

\addtogroup extensions
  @{

</member>
<member name="T:physx.PxDefaultAllocator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultallocator.h" line="90">
\brief default implementation of the allocator interface required by the SDK

</member>
<member name="T:physx.PxConstraintExtIDs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxconstraintext.h" line="25">
\brief Unique identifiers for extensions classes which implement a constraint based on PxConstraint.

\note Users which want to create their own custom constraint types should choose an ID larger or equal to eNEXT_FREE_ID
and not eINVALID_ID.

@see PxConstraint PxSimulationEventCallback.onConstraintBreak()

</member>
<member name="M:physx.PxFixedJointCreate(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="29">
\brief Create a fixed joint.

 \param[in] physics the physics SDK
 \param[in] actor0 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame0 the position and orientation of the joint relative to actor0
 \param[in] actor1 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame1 the position and orientation of the joint relative to actor1 

@see PxFixedJoint

</member>
<member name="T:physx.PxFixedJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="46">
 \brief A fixed joint permits no relative movement between two bodies. ie the bodies are glued together.

 \image html fixedJoint.png

 @see PxFixedJointCreate() PxJoint

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxFixedJoint.setProjectionLinearTolerance(System.Single)'. -->
<member name="M:physx.PxFixedJoint.getProjectionLinearTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="79">
	\brief Get the linear tolerance threshold for projection.

	\return the linear tolerance threshold

	@see setProjectionLinearTolerance() PxJoint::setConstraintFlag()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxFixedJoint.setProjectionAngularTolerance(System.Single)'. -->
<member name="M:physx.PxFixedJoint.getProjectionAngularTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="110">
	\brief Get the angular tolerance threshold for projection.

	\return the angular tolerance threshold in radians

	@see setProjectionAngularTolerance() 

</member>
<member name="M:physx.PxFixedJoint.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="120">
\brief Returns string name of PxFixedJoint, used for serialization

</member>
<member name="M:physx.PxFixedJoint.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="129">
\brief Constructor

</member>
<member name="M:physx.PxFixedJoint.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="134">
\brief Deserialization constructor

</member>
<member name="M:physx.PxFixedJoint.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxfixedjoint.h" line="139">
\brief Returns whether a given type name matches with the type of this instance

</member>
<member name="T:physx.PxJointLimitParameters" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="30">
\brief Describes the parameters for a joint limit. 

Limits are enabled or disabled by setting flags or other configuration parameters joints, see the
documentation for specific joint types for details.

@see 

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointLimitParameters.restitution'. -->
<member name="F:physx.PxJointLimitParameters.bounceThreshold" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="70">
determines the minimum impact velocity which will cause the joint to bounce

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointLimitParameters.stiffness'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointLimitParameters.damping'. -->
<member name="F:physx.PxJointLimitParameters.contactDistance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="91">
	\brief the distance inside the limit value at which the limit will be considered to be active by the
	solver.  As this value is made larger, the limit becomes active more quickly. It thus becomes less 
	likely to violate the extents of the limit, but more expensive.
	
	The contact distance should be less than the limit angle or distance, and in the case of a pair limit,
	less than half the distance between the upper and lower bounds. Exceeding this value will result in
	the limit being active all the time.

	Making this value too small can result in jitter around the limit.

	<b>Default:</b> depends on the joint

	@see PxPhysics::getTolerancesScale()

</member>
<member name="M:physx.PxJointLimitParameters.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="120">
	\brief Returns true if the current settings are valid.

	\return true if the current settings are valid

</member>
<member name="T:physx.PxJointLinearLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="144">
\brief Describes a one-sided linear limit.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointLinearLimit.value'. -->
<member name="M:physx.PxJointLinearLimit.#ctor(physx.PxTolerancesScale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="164">
	\brief construct a linear hard limit

	\param[in] scale a PxTolerancesScale struct. Should be the same as used when creating the PxPhysics object.
	\param[in] extent the extent of the limit
	\param[in] contactDist the distance from the limit at which it becomes active. Default is 0.01f scaled by the tolerance length scale

	@see PxJointLimitParameters PxTolerancesScale

</member>
<member name="M:physx.PxJointLinearLimit.#ctor(System.Single,physx.PxSpring!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="181">
	\brief construct a linear soft limit 

	\param[in] extent the extent of the limit
	\param[in] spring the stiffness and damping parameters for the limit spring

	@see PxJointLimitParameters PxTolerancesScale

</member>
<member name="M:physx.PxJointLinearLimit.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="199">
	\brief Returns true if the limit is valid

	\return true if the current settings are valid

</member>
<member name="T:physx.PxJointLinearLimitPair" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="213">
\brief Describes a two-sided limit.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointLinearLimitPair.upper'. -->
<member name="M:physx.PxJointLinearLimitPair.#ctor(physx.PxTolerancesScale!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="237">
	\brief Construct a linear hard limit pair. The lower distance value must be less than the upper distance value. 

	\param[in] scale a PxTolerancesScale struct. Should be the same as used when creating the PxPhysics object.
	\param[in] lowerLimit the lower distance of the limit
	\param[in] upperLimit the upper distance of the limit
	\param[in] contactDist the distance from the limit at which it becomes active. Default is the lesser of 0.01f scaled by the tolerance length scale, and 0.49 * (upperLimit - lowerLimit)

	@see PxJointLimitParameters PxTolerancesScale

</member>
<member name="M:physx.PxJointLinearLimitPair.#ctor(System.Single,System.Single,physx.PxSpring!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="257">
	\brief construct a linear soft limit pair

	\param[in] lowerLimit the lower distance of the limit
	\param[in] upperLimit the upper distance of the limit
	\param[in] spring the stiffness and damping parameters of the limit spring

	@see PxJointLimitParameters PxTolerancesScale

</member>
<member name="M:physx.PxJointLinearLimitPair.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="276">
	\brief Returns true if the limit is valid.

	\return true if the current settings are valid

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointAngularLimitPair.upper'. -->
<member name="M:physx.PxJointAngularLimitPair.#ctor(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="310">
	\brief construct an angular hard limit pair. 
	
	The lower value must be less than the upper value. 

	\param[in] lowerLimit the lower angle of the limit
	\param[in] upperLimit the upper angle of the limit
	\param[in] contactDist the distance from the limit at which it becomes active. Default is the lesser of 0.1 radians, and 0.49 * (upperLimit - lowerLimit)

	@see PxJointLimitParameters

</member>
<member name="M:physx.PxJointAngularLimitPair.#ctor(System.Single,System.Single,physx.PxSpring!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="331">
	\brief construct an angular soft limit pair. 
	
	The lower value must be less than the upper value. 

	\param[in] lowerLimit the lower angle of the limit
	\param[in] upperLimit the upper angle of the limit
	\param[in] spring the stiffness and damping of the limit spring

	@see PxJointLimitParameters

</member>
<member name="M:physx.PxJointAngularLimitPair.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="352">
	\brief Returns true if the limit is valid.

	\return true if the current settings are valid

</member>
<member name="T:physx.PxJointLimitCone" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="367">
\brief Describes an elliptical conical joint limit. Note that very small or highly elliptical limit cones may 
result in jitter.

@see PxD6Joint PxSphericalJoint

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointLimitCone.yAngle'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxJointLimitCone.zAngle'. -->
<member name="M:physx.PxJointLimitCone.#ctor(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="402">
	\brief Construct a cone hard limit. 

	\param[in] yLimitAngle the limit angle from the Y-axis of the constraint frame
	\param[in] zLimitAngle the limit angle from the Z-axis of the constraint frame
	\param[in] contactDist the distance from the limit at which it becomes active. 	Default is the lesser of 0.1 radians, and 0.49 * the lower of the limit angles

	@see PxJointLimitParameters

</member>
<member name="M:physx.PxJointLimitCone.#ctor(System.Single,System.Single,physx.PxSpring!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="422">
	\brief Construct a cone soft limit. 

	\param[in] yLimitAngle the limit angle from the Y-axis of the constraint frame
	\param[in] zLimitAngle the limit angle from the Z-axis of the constraint frame
	\param[in] spring the stiffness and damping of the limit spring

	@see PxJointLimitParameters

</member>
<member name="M:physx.PxJointLimitCone.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxjointlimit.h" line="441">
	\brief Returns true if the limit is valid.

	\return true if the current settings are valid

</member>
<member name="M:physx.PxPrismaticJointCreate(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="30">
\brief Create a prismatic joint.

 \param[in] physics the physics SDK
 \param[in] actor0 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame0 the position and orientation of the joint relative to actor0
 \param[in] actor1 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame1 the position and orientation of the joint relative to actor1 

@see PxPrismaticJoint

</member>
<member name="T:physx.PxPrismaticJointFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="47">
\brief Flags specific to the prismatic joint.

@see PxPrismaticJoint

</member>
<member name="T:physx.PxPrismaticJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="65">
 \brief A prismatic joint permits relative translational movement between two bodies along
 an axis, but no relative rotational movement.

 the axis on each body is defined as the line containing the origin of the joint frame and
 extending along the x-axis of that frame

 \image html prismJoint.png

 @see PxPrismaticJointCreate() PxJoint

</member>
<member name="M:physx.PxPrismaticJoint.getPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="82">
\brief returns the displacement of the joint along its axis.

</member>
<member name="M:physx.PxPrismaticJoint.getVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="88">
\brief returns the velocity of the joint along its axis

</member>
<member name="M:physx.PxPrismaticJoint.setLimit(physx.PxJointLinearLimitPair!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="93">
	\brief sets the joint limit  parameters.

	The limit range is [-PX_MAX_F32, PX_MAX_F32], but note that the width of the limit (upper-lower) must also be
	a valid float.

	@see PxJointLinearLimitPair getLimit()

</member>
<member name="M:physx.PxPrismaticJoint.getLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="103">
	\brief gets the joint limit  parameters.

	@see PxJointLinearLimit getLimit()

</member>
<member name="M:physx.PxPrismaticJoint.setPrismaticJointFlags(physx.PxFlags&lt;physx.PxPrismaticJointFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="111">
	\brief Set the flags specific to the Prismatic Joint.

	<b>Default</b> PxPrismaticJointFlags(0)

	\param[in] flags The joint flags.

	@see PxPrismaticJointFlag setFlag() getFlags()

</member>
<member name="M:physx.PxPrismaticJoint.setPrismaticJointFlag(physx.PxPrismaticJointFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="123">
	\brief Set a single flag specific to a Prismatic Joint to true or false.

	\param[in] flag The flag to set or clear.
	\param[in] value the value to which to set the flag

	@see PxPrismaticJointFlag, getFlags() setFlags()

</member>
<member name="M:physx.PxPrismaticJoint.getPrismaticJointFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="134">
	\brief Get the flags specific to the Prismatic Joint.

	\return the joint flags

	@see PxPrismaticJoint::flags, PxPrismaticJointFlag setFlag() setFlags()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxPrismaticJoint.setProjectionLinearTolerance(System.Single)'. -->
<member name="M:physx.PxPrismaticJoint.getProjectionLinearTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="165">
	\brief Get the linear tolerance threshold for projection.

	\return the linear tolerance threshold in radians

	@see setProjectionLinearTolerance()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxPrismaticJoint.setProjectionAngularTolerance(System.Single)'. -->
<member name="M:physx.PxPrismaticJoint.getProjectionAngularTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="196">
	\brief Get the angular tolerance threshold for projection.

	@see getProjectionAngularTolerance()

</member>
<member name="M:physx.PxPrismaticJoint.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="203">
\brief Returns string name of PxPrismaticJoint, used for serialization

</member>
<member name="M:physx.PxPrismaticJoint.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="211">
\brief Constructor

</member>
<member name="M:physx.PxPrismaticJoint.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="216">
\brief Deserialization constructor

</member>
<member name="M:physx.PxPrismaticJoint.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxprismaticjoint.h" line="221">
\brief Returns whether a given type name matches with the type of this instance

</member>
<member name="M:physx.PxRevoluteJointCreate(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="30">
\brief Create a revolute joint.

 \param[in] physics the physics SDK
 \param[in] actor0 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame0 the position and orientation of the joint relative to actor0
 \param[in] actor1 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame1 the position and orientation of the joint relative to actor1 

@see PxRevoluteJoint

</member>
<member name="T:physx.PxRevoluteJointFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="47">
\brief Flags specific to the Revolute Joint.

@see PxRevoluteJoint

</member>
<member name="T:physx.PxRevoluteJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="67">

\brief A joint which behaves in a similar way to a hinge or axle.

 A hinge joint removes all but a single rotational degree of freedom from two objects.
 The axis along which the two bodies may rotate is specified with a point and a direction
 vector.

 The position of the hinge on each body is specified by the origin of the body's joint frame.
 The axis of the hinge is specified as the direction of the x-axis in the body's joint frame.
 
 \image html revoluteJoint.png

 A revolute joint can be given a motor, so that it can apply a force to rotate the attached actors.
 It may also be given a limit, to restrict the revolute motion to within a certain range. In
 addition, the bodies may be projected together if the distance or angle between them exceeds
 a given threshold.
 
 Projection, drive and limits are activated by setting the appropriate flags on the joint.

 @see PxRevoluteJointCreate() PxJoint

</member>
<member name="M:physx.PxRevoluteJoint.getAngle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="94">
\brief return the angle of the joint, in the range (-Pi, Pi]

</member>
<member name="M:physx.PxRevoluteJoint.getVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="100">
\brief return the velocity of the joint

</member>
<member name="M:physx.PxRevoluteJoint.setLimit(physx.PxJointAngularLimitPair!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="105">
	\brief set the joint limit parameters. 

	The limit is activated using the flag PxRevoluteJointFlag::eLIMIT_ENABLED

	The limit angle range is (-2*PI, 2*PI) and the extent of the limit must be strictly less than 2*PI

	\param[in] limits The joint limit parameters. 


	@see PxJointAngularLimitPair getLimit()

</member>
<member name="M:physx.PxRevoluteJoint.getLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="120">
	\brief get the joint limit parameters.

	\return the joint limit parameters

	@see PxJointAngularLimitPair setLimit()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxRevoluteJoint.setDriveVelocity(System.Single)'. -->
<member name="M:physx.PxRevoluteJoint.getDriveVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="152">
	\brief gets the target velocity for the drive model.

	\return the drive target velocity

	@see setDriveVelocity()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxRevoluteJoint.setDriveForceLimit(System.Single)'. -->
<member name="M:physx.PxRevoluteJoint.getDriveForceLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="176">
	\brief gets the maximum torque the drive can exert.
	
	\return the torque limit

	@see setDriveVelocity()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxRevoluteJoint.setDriveGearRatio(System.Single)'. -->
<member name="M:physx.PxRevoluteJoint.getDriveGearRatio" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="201">
	\brief gets the gear ratio.
	
	\return the drive gear ratio

	@see setDriveGearRatio()

</member>
<member name="M:physx.PxRevoluteJoint.setRevoluteJointFlags(physx.PxFlags&lt;physx.PxRevoluteJointFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="211">
	\brief sets the flags specific to the Revolute Joint.

	<b>Default</b> PxRevoluteJointFlags(0)

	\param[in] flags The joint flags.

	@see PxRevoluteJointFlag setFlag() getFlags()

</member>
<member name="M:physx.PxRevoluteJoint.setRevoluteJointFlag(physx.PxRevoluteJointFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="223">
	\brief sets a single flag specific to a Revolute Joint.

	\param[in] flag The flag to set or clear.
	\param[in] value the value to which to set the flag

	@see PxRevoluteJointFlag, getFlags() setFlags()

</member>
<member name="M:physx.PxRevoluteJoint.getRevoluteJointFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="234">
	\brief gets the flags specific to the Revolute Joint.

	\return the joint flags

	@see PxRevoluteJoint::flags, PxRevoluteJointFlag setFlag() setFlags()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxRevoluteJoint.setProjectionLinearTolerance(System.Single)'. -->
<member name="M:physx.PxRevoluteJoint.getProjectionLinearTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="266">
	\brief Get the linear tolerance threshold for projection.

	\return the linear tolerance threshold

	@see setProjectionLinearTolerance()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxRevoluteJoint.setProjectionAngularTolerance(System.Single)'. -->
<member name="M:physx.PxRevoluteJoint.getProjectionAngularTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="297">
	\brief gets the angular tolerance threshold for projection.

	\return the angular tolerance threshold in radians

	@see setProjectionAngularTolerance()

</member>
<member name="M:physx.PxRevoluteJoint.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="307">
\brief Returns string name of PxRevoluteJoint, used for serialization

</member>
<member name="M:physx.PxRevoluteJoint.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="316">
\brief Constructor

</member>
<member name="M:physx.PxRevoluteJoint.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="321">
\brief Deserialization constructor

</member>
<member name="M:physx.PxRevoluteJoint.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrevolutejoint.h" line="326">
\brief Returns whether a given type name matches with the type of this instance

</member>
<member name="M:physx.PxSphericalJointCreate(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="30">
\brief Create a spherical joint.

 \param[in] physics the physics SDK
 \param[in] actor0 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame0 the position and orientation of the joint relative to actor0
 \param[in] actor1 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame1 the position and orientation of the joint relative to actor1 

@see PxSphericalJoint

</member>
<member name="T:physx.PxSphericalJointFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="47">
\brief Flags specific to the spherical joint.

@see PxSphericalJoint

</member>
<member name="T:physx.PxSphericalJoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="63">
\brief A joint which behaves in a similar way to a ball and socket.

 A spherical joint removes all linear degrees of freedom from two objects.

 The position of the joint on each actor is specified by the origin of the body's joint frame.
 
 A spherical joint may have a cone limit, to restrict the motion to within a certain range. In
 addition, the bodies may be projected together if the distance between them exceeds a given threshold.
 
 Projection, drive and limits are activated by setting the appropriate flags on the joint.

 @see PxRevoluteJointCreate() PxJoint

</member>
<member name="M:physx.PxSphericalJoint.getLimitCone" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="83">
	\brief Set the limit cone.

	If enabled, the limit cone will constrain the angular movement of the joint to lie
	within an elliptical cone.

	\return the limit cone

	@see PxJointLimitCone setLimit() 

</member>
<member name="M:physx.PxSphericalJoint.setLimitCone(physx.PxJointLimitCone!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="96">
	\brief Get the limit cone.

	\param[in] limit the limit cone

	@see PxJointLimitCone getLimit() 

</member>
<member name="M:physx.PxSphericalJoint.setSphericalJointFlags(physx.PxFlags&lt;physx.PxSphericalJointFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="106">
	\brief Set the flags specific to the Spherical Joint.

	<b>Default</b> PxSphericalJointFlags(0)

	\param[in] flags The joint flags.

	@see PxSphericalJointFlag setFlag() getFlags()

</member>
<member name="M:physx.PxSphericalJoint.setSphericalJointFlag(physx.PxSphericalJointFlag.Enum,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="118">
	\brief Set a single flag specific to a Spherical Joint to true or false.

	\param[in] flag The flag to set or clear.
	\param[in] value the value to which to set the flag

	@see PxSphericalJointFlag, getFlags() setFlags()

</member>
<member name="M:physx.PxSphericalJoint.getSphericalJointFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="129">
	\brief Get the flags specific to the Spherical Joint.

	\return the joint flags

	@see PxSphericalJoint::flags, PxSphericalJointFlag setFlag() setFlags()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxSphericalJoint.setProjectionLinearTolerance(System.Single)'. -->
<member name="M:physx.PxSphericalJoint.getProjectionLinearTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="161">
	\brief Get the linear tolerance threshold for projection.

	\return the linear tolerance threshold

	@see setProjectionLinearTolerance()

</member>
<member name="M:physx.PxSphericalJoint.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="171">
\brief Returns string name of PxSphericalJoint, used for serialization

</member>
<member name="M:physx.PxSphericalJoint.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="180">
\brief Constructor

</member>
<member name="M:physx.PxSphericalJoint.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="185">
\brief Deserialization constructor

</member>
<member name="M:physx.PxSphericalJoint.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsphericaljoint.h" line="190">
\brief Returns whether a given type name matches with the type of this instance

</member>
<member name="M:physx.PxD6JointCreate(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor*,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="31">
\brief Create a D6 joint.

 \param[in] physics the physics SDK
 \param[in] actor0 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame0 the position and orientation of the joint relative to actor0
 \param[in] actor1 an actor to which the joint is attached. NULL may be used to attach the joint to a specific point in the world frame
 \param[in] localFrame1 the position and orientation of the joint relative to actor1 

@see PxD6Joint

</member>
<member name="T:physx.PxD6Axis" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="50">
\brief Used to specify one of the degrees of freedom of  a D6 joint.

@see PxD6Joint

</member>
<member name="T:physx.PxD6Motion" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="71">
\brief Used to specify the range of motions allowed for a degree of freedom in a D6 joint.

@see PxD6Joint

</member>
<member name="T:physx.PxD6Drive" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="87">
\brief Used to specify which axes of a D6 joint are driven. 

Each drive is an implicit force-limited damped spring:

force = spring * (target position - position) + damping * (targetVelocity - velocity)

Alternatively, the spring may be configured to generate a specified acceleration instead of a force.

A linear axis is affected by drive only if the corresponding drive flag is set. There are two possible models
for angular drive: swing/twist, which may be used to drive one or more angular degrees of freedom, or slerp,
which may only be used to drive all three angular degrees simultaneously.

@see PxD6Joint

</member>
<member name="T:physx.PxD6JointDriveFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="117">
\brief flags for configuring the drive model of a PxD6Joint

@see PxD6JointDrive PxD6Joint

</member>
<member name="T:physx.PxD6JointDrive" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="134">
\brief parameters for configuring the drive model of a PxD6Joint

@see PxD6Joint

</member>
<member name="M:physx.PxD6JointDrive.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="154">
\brief default constructor for PxD6JointDrive.

</member>
<member name="M:physx.PxD6JointDrive.#ctor(System.Single,System.Single,System.Single,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="160">
	\brief constructor a PxD6JointDrive.

	\param[in] driveStiffness the stiffness of the drive spring.
	\param[in] driveDamping the damping of the drive spring
	\param[in] driveForceLimit the maximum impulse or force that can be exerted by the drive
	\param[in] isAcceleration whether the drive is an acceleration drive or a force drive

</member>
<member name="M:physx.PxD6JointDrive.isValid" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="176">
\brief returns true if the drive is valid

</member>
<member name="T:physx.PxD6Joint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="189">
 \brief A D6 joint is a general constraint between two actors.
 
 It allows the application to individually define the linear and rotational degrees of freedom, 
 and also to configure a variety of limits and driven degrees of freedom.

 By default all degrees of freedom are locked. So to create a prismatic joint with free motion 
 along the x-axis:

 \code	
    ...
    joint-&gt;setMotion(PxD6Axis::eX, PxD6JointMotion::eFREE);
     ...
 \endcode

 Or a Revolute joint with motion free allowed around the x-axis:

 \code
    ... 
	joint-&gt;setMotion(PxD6Axis::eTWIST, PxD6JointMotion::eFREE);
    ...
 \endcode

 Degrees of freedom may also be set to limited instead of locked. There is a single limit value
 for all linear degrees of freedom, which may act as a linear, circular, or spherical limit depending
 on which degrees of freedom are limited.

 If the twist degree of freedom is limited, is supports upper and lower limits. The two swing degrees
 of freedom are limited with a cone limit.
@see PxD6JointCreate() PxJoint 

</member>
<member name="M:physx.PxD6Joint.setMotion(physx.PxD6Axis.Enum,physx.PxD6Motion.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="225">
	\brief Set the motion type around the specified axis.

	Each axis may independently specify that the degree of freedom is locked (blocking relative movement
	along or around this axis), limited by the corresponding limit, or free.

	\param[in] axis the axis around which motion is specified
	\param[in] type the motion type around the specified axis

	<b>Default:</b> all degrees of freedom are locked

	@see getMotion() PxD6Axis PxD6Motion


</member>
<member name="M:physx.PxD6Joint.getMotion(physx.PxD6Axis.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="241">
	\brief Get the motion type around the specified axis.

	@see setMotion() PxD6Axis PxD6Motion

	\param[in] axis the degree of freedom around which the motion type is specified
	\return the motion type around the specified axis


</member>
<member name="M:physx.PxD6Joint.getTwist" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="253">
\brief get the twist angle of the joint

</member>
<member name="M:physx.PxD6Joint.getSwingYAngle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="259">
\brief get the swing angle of the joint from the Y axis

</member>
<member name="M:physx.PxD6Joint.getSwingZAngle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="265">
\brief get the swing angle of the joint from the Z axis

</member>
<member name="M:physx.PxD6Joint.setLinearLimit(physx.PxJointLinearLimit!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="272">
	\brief Set the linear limit for the joint. 

	A single limit constraints all linear limited degrees of freedom, forming a linear, circular 
	or spherical constraint on motion depending on the number of limited degrees.

	\param[in] limit the linear limit structure

	@see getLinearLimit() 

</member>
<member name="M:physx.PxD6Joint.getLinearLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="284">
	\brief Get the linear limit for the joint. 

	\return the linear limit structure

	@see setLinearLimit() PxJointLinearLimit

</member>
<member name="M:physx.PxD6Joint.setTwistLimit(physx.PxJointAngularLimitPair!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="295">
	\brief Set the twist limit for the joint. 

	The twist limit controls the range of motion around the twist axis. 

	The limit angle range is (-2*PI, 2*PI) and the extent of the limit must be strictly less than 2*PI

	\param[in] limit the twist limit structure

	@see getTwistLimit() PxJointAngularLimitPair

</member>
<member name="M:physx.PxD6Joint.getTwistLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="309">
	\brief Get the twist limit for the joint. 

	\return the twist limit structure

	@see setTwistLimit() PxJointAngularLimitPair

</member>
<member name="M:physx.PxD6Joint.setSwingLimit(physx.PxJointLimitCone!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="318">
	\brief Set the swing cone limit for the joint. 

	\brief The cone limit is used if either or both swing axes are limited. The extents are 
	symmetrical and measured in the frame of the parent. If only one swing degree of freedom 
	is limited, the corresponding value from the cone limit defines the limit range.

	\param[in] limit the cone limit structure

	@see getLimitCone() PxJointLimitCone 

</member>
<member name="M:physx.PxD6Joint.getSwingLimit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="331">
	\brief Get the cone limit for the joint. 

	\return the swing limit structure

	@see setLimitCone() PxJointLimitCone

</member>
<member name="M:physx.PxD6Joint.setDrive(physx.PxD6Drive.Enum,physx.PxD6JointDrive!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="340">
	\brief Set the drive parameters for the specified drive type.

	\param[in] index the type of drive being specified
	\param[in] drive the drive parameters

	@see getDrive() PxD6JointDrive

	<b>Default</b> The default drive spring and damping values are zero, the force limit is zero, and no flags are set.


</member>
<member name="M:physx.PxD6Joint.getDrive(physx.PxD6Drive.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="353">
	\brief Get the drive parameters for the specified drive type. 

	\param[in] index the specified drive type

	@see setDrive() PxD6JointDrive

</member>
<member name="M:physx.PxD6Joint.setDrivePosition(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="362">
	\brief Set the drive goal pose 

	The goal is relative to the constraint frame of actor[0]

	<b>Default</b> the identity transform

	\param[in] pose The goal drive pose if positional drive is in use. 

	@see setDrivePosition()

</member>
<member name="M:physx.PxD6Joint.getDrivePosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="375">
	\brief Get the drive goal pose.

	@see getDrivePosition()

</member>
<member name="M:physx.PxD6Joint.setDriveVelocity(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="384">
	\brief Set the target goal velocity for drive.

	The velocity is measured in the constraint frame of actor[0]

	\param[in] linear The goal velocity for linear drive
	\param[in] angular The goal velocity for angular drive

	@see getDriveVelocity()

</member>
<member name="M:physx.PxD6Joint.getDriveVelocity(physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="398">
	\brief Get the target goal velocity for joint drive.

	\param[in] linear The goal velocity for linear drive
	\param[in] angular The goal velocity for angular drive

	@see setDriveVelocity()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxD6Joint.setProjectionLinearTolerance(System.Single)'. -->
<member name="M:physx.PxD6Joint.getProjectionLinearTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="433">
	\brief Get the linear tolerance threshold for projection.

	\return the linear tolerance threshold

	@see setProjectionLinearTolerance()

</member>
<!-- Discarding badly formed XML document comment for member 'M:physx.PxD6Joint.setProjectionAngularTolerance(System.Single)'. -->
<member name="M:physx.PxD6Joint.getProjectionAngularTolerance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="464">
	\brief Get the angular tolerance threshold for projection.

	\return tolerance the angular tolerance threshold in radians

	@see setProjectionAngularTolerance()

</member>
<member name="M:physx.PxD6Joint.getConcreteTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="474">
\brief Returns string name of PxD6Joint, used for serialization

</member>
<member name="M:physx.PxD6Joint.#ctor(System.UInt16,physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="484">
\brief Constructor

</member>
<member name="M:physx.PxD6Joint.#ctor(physx.PxFlags&lt;physx.PxBaseFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="489">
\brief Deserialization constructor

</member>
<member name="M:physx.PxD6Joint.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxd6joint.h" line="494">
\brief Returns whether a given type name matches with the type of this instance

</member>
<member name="T:physx.PxGroupsMask" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="31">
\brief 64-bit mask used for collision filtering.

The collision filtering equation for 2 objects o0 and o1 is:

<pre> (G0 op0 K0) op2 (G1 op1 K1) == b </pre>

with

<ul>
<li> G0 = PxGroupsMask for object o0. See PxSetGroupsMask </li>
<li> G1 = PxGroupsMask for object o1. See PxSetGroupsMask </li>
<li> K0 = filtering constant 0. See PxSetFilterConstants </li>
<li> K1 = filtering constant 1. See PxSetFilterConstants </li>
<li> b = filtering boolean. See PxSetFilterBool </li>
<li> op0, op1, op2 = filtering operations. See PxSetFilterOps </li>
</ul>

If the filtering equation is true, collision detection is enabled.

@see PxSetFilterOps()

</member>
<member name="T:physx.PxFilterOp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="62">
\brief Collision filtering operations.

@see PxGroupsMask

</member>
<member name="M:physx.PxDefaultSimulationFilterShader(System.UInt32,physx.PxFilterData,System.UInt32,physx.PxFilterData,physx.PxFlags&lt;physx.PxPairFlag.Enum,System.UInt16&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="81">
\brief Implementation of a simple filter shader that emulates PhysX 2.8.x filtering

This shader provides the following logic:
\li If one of the two filter objects is a trigger, the pair is acccepted and #PxPairFlag::eTRIGGER_DEFAULT will be used for trigger reports
\li Else, if the filter mask logic (see further below) discards the pair it will be suppressed (#PxFilterFlag::eSUPPRESS)
\li Else, the pair gets accepted and collision response gets enabled (#PxPairFlag::eCONTACT_DEFAULT)

Filter mask logic:
Given the two #PxFilterData structures fd0 and fd1 of two collision objects, the pair passes the filter if the following
conditions are met:

	1) Collision groups of the pair are enabled
	2) Collision filtering equation is satisfied

@see PxSimulationFilterShader

</member>
<member name="M:physx.PxGetGroupCollisionFlag(System.UInt16!System.Runtime.CompilerServices.IsConst,System.UInt16!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="108">
	\brief Determines if collision detection is performed between a pair of groups

	\note Collision group is an integer between 0 and 31.

	\param[in] group1 First Group
	\param[in] group2 Second Group

	\return True if the groups could collide

	@see PxSetGroupCollisionFlag

</member>
<member name="M:physx.PxSetGroupCollisionFlag(System.UInt16!System.Runtime.CompilerServices.IsConst,System.UInt16!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="122">
	\brief Specifies if collision should be performed by a pair of groups

	\note Collision group is an integer between 0 and 31.

	\param[in] group1 First Group
	\param[in] group2 Second Group
	\param[in] enable True to enable collision between the groups

	@see PxGetGroupCollisionFlag

</member>
<member name="M:physx.PxGetGroup(physx.PxActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="135">
	\brief Retrieves the value set with PxSetGroup()

	\note Collision group is an integer between 0 and 31.

	\param[in] actor The actor

	\return The collision group this actor belongs to

	@see PxSetGroup

</member>
<member name="M:physx.PxSetGroup(physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="148">
	\brief Sets which collision group this actor is part of

	\note Collision group is an integer between 0 and 31.

	\param[in] actor The actor
	\param[in] collisionGroup Collision group this actor belongs to

	@see PxGetGroup

</member>
<member name="M:physx.PxGetFilterOps(physx.PxFilterOp.Enum*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFilterOp.Enum*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFilterOp.Enum*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="160">
\brief Retrieves filtering operation. See comments for PxGroupsMask

\param[out] op0 First filter operator.
\param[out] op1 Second filter operator.
\param[out] op2 Third filter operator.

\return the filter operations requested

@see PxSetFilterOps PxSetFilterBool PxSetFilterConstants

</member>
<member name="M:physx.PxSetFilterOps(physx.PxFilterOp.Enum!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFilterOp.Enum!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFilterOp.Enum!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="173">
\brief Setups filtering operations. See comments for PxGroupsMask

\param[in] op0 Filter op 0.
\param[in] op1 Filter op 1.
\param[in] op2 Filter op 2.

@see PxSetFilterBool PxSetFilterConstants

</member>
<member name="M:physx.PxGetFilterBool" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="184">
\brief Retrieves filtering's boolean value. See comments for PxGroupsMask

\return flag Boolean value for filter.

@see PxSetFilterBool PxSetFilterConstants

</member>
<member name="M:physx.PxSetFilterBool(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="193">
\brief Setups filtering's boolean value. See comments for PxGroupsMask

\param[in] enable Boolean value for filter.

@see PxSetFilterOps PxSsetFilterConstants

</member>
<member name="M:physx.PxGetFilterConstants(physx.PxGroupsMask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGroupsMask*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="202">
\brief Gets filtering constant K0 and K1. See comments for PxGroupsMask

\return the filtering constants, as a mask. See #PxGroupsMask.

@see PxSetFilterOps PxSetFilterBool PxSetFilterConstants

</member>
<member name="M:physx.PxSetFilterConstants(physx.PxGroupsMask!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGroupsMask!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="211">
\brief Setups filtering's K0 and K1 value. See comments for PxGroupsMask

\param[in] c0 The new group mask. See #PxGroupsMask.
\param[in] c1 The new group mask. See #PxGroupsMask.

@see PxSetFilterOps PxSetFilterBool PxGetFilterConstants

</member>
<member name="M:physx.PxGetGroupsMask(physx.PxActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="221">
\brief Gets 64-bit mask used for collision filtering. See comments for PxGroupsMask

\param[in] actor The actor

\return The group mask for the actor.

@see PxSetGroupsMask()

</member>
<member name="M:physx.PxSetGroupsMask(physx.PxActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGroupsMask!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultsimulationfiltershader.h" line="232">
\brief Sets 64-bit mask used for collision filtering. See comments for PxGroupsMask

\param[in] actor The actor
\param[in] mask The group mask to set for the actor.

@see PxGetGroupsMask()

</member>
<member name="T:physx.PxDefaultErrorCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaulterrorcallback.h" line="24">
	\brief default implementation of the error callback

	This class is provided in order to enable the SDK to be started with the minimum of user code. Typically an application
	will use its own error callback, and log the error to file or otherwise make it visible. Warnings and error messages from
	the SDK are usually indicative that changes are required in order for PhysX to function correctly, and should not be ignored.

</member>
<member name="T:physx.PxRigidBodyExt" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="35">
\brief utility functions for use with PxRigidBody and subclasses

@see PxRigidBody PxRigidDynamic PxArticulationLink

</member>
<member name="M:physx.PxRigidBodyExt.updateMassAndInertia(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32,physx.PxVec3!System.Runtime.CompilerServices.IsConst*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="44">
	\brief Computation of mass properties for a rigid body actor

	To simulate a dynamic rigid actor, the SDK needs a mass and an inertia tensor. 

	This method offers functionality to compute the necessary mass and inertia properties based on the shapes declared in
	the PxRigidBody descriptor and some additionally specified parameters. For each shape, the shape geometry, 
	the shape positioning within the actor and the specified shape density are used to compute the body's mass and 
	inertia properties.

	<ul>
	<li>Shapes without PxShapeFlag::eSIMULATION_SHAPE set are ignored unless includeNonSimShapes is true.</li>
	<li>Shapes with plane, triangle mesh or heightfield geometry and PxShapeFlag::eSIMULATION_SHAPE set are not allowed for PxRigidBody collision.</li>
	</ul>

	This method will set the mass, center of mass, and inertia tensor 

	if no collision shapes are found, the inertia tensor is set to (1,1,1) and the mass to 1

	if massLocalPose is non-NULL, the rigid body's center of mass parameter  will be set 
	to the user provided value (massLocalPose) and the inertia tensor will be resolved at that point.

	\note If all shapes of the actor have the same density then the overloaded method updateMassAndInertia() with a single density parameter can be used instead.

	\param[in,out] body The rigid body.
	\param[in] shapeDensities The per shape densities. There must be one entry for each shape which has the PxShapeFlag::eSIMULATION_SHAPE set (or for all shapes if includeNonSimShapes is set to true). Other shapes are ignored. The density values must be greater than 0.
	\param[in] shapeDensityCount The number of provided density values.
	\param[in] massLocalPose The center of mass relative to the actor frame.  If set to null then (0,0,0) is assumed.
	\param[in] includeNonSimShapes True if all kind of shapes (PxShapeFlag::eSCENE_QUERY_SHAPE, PxShapeFlag::eTRIGGER_SHAPE, PxShapeFlag::ePARTICLE_DRAIN) should be taken into account.
	\return Boolean. True on success else false.

	@see PxRigidBody::setMassLocalPose PxRigidBody::setMassSpaceInertia PxRigidBody::setMass

</member>
<member name="M:physx.PxRigidBodyExt.updateMassAndInertia(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxVec3!System.Runtime.CompilerServices.IsConst*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="80">
	\brief Computation of mass properties for a rigid body actor

	See previous method for details.

	\param[in,out] body The rigid body.
	\param[in] density The density of the body. Used to compute the mass of the body. The density must be greater than 0. 
	\param[in] massLocalPose The center of mass relative to the actor frame.  If set to null then (0,0,0) is assumed.
	\param[in] includeNonSimShapes True if all kind of shapes (PxShapeFlag::eSCENE_QUERY_SHAPE, PxShapeFlag::eTRIGGER_SHAPE, PxShapeFlag::ePARTICLE_DRAIN) should be taken into account.
	\return Boolean. True on success else false.

	@see PxRigidBody::setMassLocalPose PxRigidBody::setMassSpaceInertia PxRigidBody::setMass

</member>
<member name="M:physx.PxRigidBodyExt.setMassAndUpdateInertia(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32,physx.PxVec3!System.Runtime.CompilerServices.IsConst*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="96">
	\brief Computation of mass properties for a rigid body actor

	This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the sum of all user-supplied
	shape mass values, and the inertia and center of mass are computed according to the rigid body's shapes and the per shape mass input values.

	If no collision shapes are found, the inertia tensor is set to (1,1,1)

	\note If a single mass value should be used for the actor as a whole then the overloaded method setMassAndUpdateInertia() with a single mass parameter can be used instead.

	@see updateMassAndInertia for more details.

	\param[in,out] body The the rigid body for which to set the mass and centre of mass local pose properties.
	\param[in] shapeMasses The per shape mass values. There must be one entry for each shape which has the PxShapeFlag::eSIMULATION_SHAPE set. Other shapes are ignored. The mass values must be greater than 0.
	\param[in] shapeMassCount The number of provided mass values.
	\param[in] massLocalPose The center of mass relative to the actor frame. If set to null then (0,0,0) is assumed.
	\param[in] includeNonSimShapes True if all kind of shapes (PxShapeFlag::eSCENE_QUERY_SHAPE, PxShapeFlag::eTRIGGER_SHAPE, PxShapeFlag::ePARTICLE_DRAIN) should be taken into account.
	\return Boolean. True on success else false.

	@see PxRigidBody::setCMassLocalPose PxRigidBody::setMassSpaceInertia PxRigidBody::setMass

</member>
<member name="M:physx.PxRigidBodyExt.setMassAndUpdateInertia(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxVec3!System.Runtime.CompilerServices.IsConst*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="120">
	\brief Computation of mass properties for a rigid body actor

	This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the user-supplied
	value, and the inertia and center of mass are computed according to the rigid body's shapes and the input mass.

	If no collision shapes are found, the inertia tensor is set to (1,1,1)

	@see updateMassAndInertia for more details.

	\param[in,out] body The the rigid body for which to set the mass and centre of mass local pose properties.
	\param[in] mass The mass of the body. Must be greater than 0.
	\param[in] massLocalPose The center of mass relative to the actor frame. If set to null then (0,0,0) is assumed.
	\param[in] includeNonSimShapes True if all kind of shapes (PxShapeFlag::eSCENE_QUERY_SHAPE, PxShapeFlag::eTRIGGER_SHAPE, PxShapeFlag::ePARTICLE_DRAIN) should be taken into account.
	\return Boolean. True on success else false.

	@see PxRigidBody::setCMassLocalPose PxRigidBody::setMassSpaceInertia PxRigidBody::setMass

</member>
<member name="M:physx.PxRigidBodyExt.addForceAtPos(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxForceMode.Enum,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="141">
	\brief Applies a force (or impulse) defined in the global coordinate frame, acting at a particular 
	point in global coordinates, to the actor. 

	Note that if the force does not act along the center of mass of the actor, this
	will also add the corresponding torque. Because forces are reset at the end of every timestep, 
	you can maintain a total external force on an object by calling this once every frame.

	\note if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
	articulation

	::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the 
	force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
	given point.

	<b>Sleeping:</b> This call wakes the actor if it is sleeping and the wakeup parameter is true (default).

	\param[in] body The rigid body to apply the force to.
	\param[in] force Force/impulse to add, defined in the global frame. <b>Range:</b> force vector
	\param[in] pos Position in the global frame to add the force at. <b>Range:</b> position vector
	\param[in] mode The mode to use when applying the force/impulse(see #PxForceMode). 
	\param[in] wakeup Specify if the call should wake up the actor.

	@see PxForceMode 
	@see addForceAtLocalPos() addLocalForceAtPos() addLocalForceAtLocalPos()

</member>
<member name="M:physx.PxRigidBodyExt.addForceAtLocalPos(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxForceMode.Enum,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="169">
	\brief Applies a force (or impulse) defined in the global coordinate frame, acting at a particular 
	point in local coordinates, to the actor. 

	Note that if the force does not act along the center of mass of the actor, this
	will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a
	total external force on an object by calling this once every frame.

	\note if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
	articulation

	::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the 
	force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
	given point.

	<b>Sleeping:</b> This call wakes the actor if it is sleeping and the wakeup parameter is true (default).

	\param[in] body The rigid body to apply the force to.
	\param[in] force Force/impulse to add, defined in the global frame. <b>Range:</b> force vector
	\param[in] pos Position in the local frame to add the force at. <b>Range:</b> position vector
	\param[in] mode The mode to use when applying the force/impulse(see #PxForceMode). 
	\param[in] wakeup Specify if the call should wake up the actor.

	@see PxForceMode 
	@see addForceAtPos() addLocalForceAtPos() addLocalForceAtLocalPos()

</member>
<member name="M:physx.PxRigidBodyExt.addLocalForceAtPos(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxForceMode.Enum,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="197">
	\brief Applies a force (or impulse) defined in the actor local coordinate frame, acting at a 
	particular point in global coordinates, to the actor. 

	Note that if the force does not act along the center of mass of the actor, this
	will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a
	total external force on an object by calling this once every frame.

	\note if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
	articulation

	::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the 
	force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
	given point.

	<b>Sleeping:</b> This call wakes the actor if it is sleeping and the wakeup parameter is true (default).

	\param[in] body The rigid body to apply the force to.
	\param[in] force Force/impulse to add, defined in the local frame. <b>Range:</b> force vector
	\param[in] pos Position in the global frame to add the force at. <b>Range:</b> position vector
	\param[in] mode The mode to use when applying the force/impulse(see #PxForceMode). 
	\param[in] wakeup Specify if the call should wake up the actor.

	@see PxForceMode 
	@see addForceAtPos() addForceAtLocalPos() addLocalForceAtLocalPos()

</member>
<member name="M:physx.PxRigidBodyExt.addLocalForceAtLocalPos(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxForceMode.Enum,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="225">
	\brief Applies a force (or impulse) defined in the actor local coordinate frame, acting at a 
	particular point in local coordinates, to the actor. 

	Note that if the force does not act along the center of mass of the actor, this
	will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a
	total external force on an object by calling this once every frame.

	\note if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
	articulation

	::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the 
	force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
	given point.

	<b>Sleeping:</b> This call wakes the actor if it is sleeping and the wakeup parameter is true (default).

	\param[in] body The rigid body to apply the force to.
	\param[in] force Force/impulse to add, defined in the local frame. <b>Range:</b> force vector
	\param[in] pos Position in the local frame to add the force at. <b>Range:</b> position vector
	\param[in] mode The mode to use when applying the force/impulse(see #PxForceMode). 
	\param[in] wakeup Specify if the call should wake up the actor.

	@see PxForceMode 
	@see addForceAtPos() addForceAtLocalPos() addLocalForceAtPos()

</member>
<member name="M:physx.PxRigidBodyExt.getVelocityAtPos(physx.PxRigidBody!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="253">
	\brief Computes the velocity of a point given in world coordinates if it were attached to the 
	specified body and moving with it.

	\param[in] body The rigid body the point is attached to.
	\param[in] pos Position we wish to determine the velocity for, defined in the global frame. <b>Range:</b> position vector
	\return The velocity of point in the global frame.

	@see getLocalPointVelocity()

</member>
<member name="M:physx.PxRigidBodyExt.getLocalVelocityAtLocalPos(physx.PxRigidBody!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="265">
	\brief Computes the velocity of a point given in local coordinates if it were attached to the 
	specified body and moving with it.

	\param[in] body The rigid body the point is attached to.
	\param[in] pos Position we wish to determine the velocity for, defined in the local frame. <b>Range:</b> position vector
	\return The velocity of point in the local frame.

	@see getLocalPointVelocity()

</member>
<member name="M:physx.PxRigidBodyExt.getVelocityAtOffset(physx.PxRigidBody!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="277">
	\brief Computes the velocity of a point (offset from the origin of the body) given in world coordinates if it were attached to the 
	specified body and moving with it.

	\param[in] body The rigid body the point is attached to.
	\param[in] pos Position (offset from the origin of the body) we wish to determine the velocity for, defined in the global frame. <b>Range:</b> position vector
	\return The velocity of point (offset from the origin of the body) in the global frame.

	@see getLocalPointVelocity()

</member>
<member name="M:physx.PxRigidBodyExt.linearSweepSingle(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxScene*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxSweepHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterCallback*,physx.PxQueryCache!System.Runtime.CompilerServices.IsConst*,System.Single!S" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="290">
	\brief Performs a linear sweep through space with the body's geometry objects.

	\note Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.
	\note If eTOUCH is returned from the filter callback, it will trigger an error and the hit will be discarded.

	The function sweeps all shapes attached to a given rigid body through space and reports the nearest
	object in the scene which intersects any of of the shapes swept paths.
	Information about the closest intersection is written to a #PxSweepHit structure.

	\param[in] body The rigid body to sweep.
	\param[in] scene The scene object to process the query.
	\param[in] unitDir Normalized direction of the sweep.
	\param[in] distance Sweep distance. Needs to be larger than 0.
	\param[in] outputFlags Specifies which properties should be written to the hit information.
	\param[out] closestHit Closest hit result.
	\param[out] shapeIndex Index of the body shape that caused the closest hit.
	\param[in] filterData If any word in filterData.data is non-zero then filterData.data will be used for filtering,
							otherwise shape-&gt;getQueryFilterData() will be used instead.
	\param[in] filterCall Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to be blocking.
	\param[in] cache		Cached hit shape (optional). Ray is tested against cached shape first then against the scene.
							Note: Filtering is not executed for a cached shape if supplied; instead, if a hit is found, it is assumed to be a blocking hit.
	\param[in] inflation	This parameter creates a skin around the swept geometry which increases its extents for sweeping. The sweep will register a hit as soon as the skin touches a shape, and will return the corresponding distance and normal.

	\return True if a blocking hit was found.

	@see PxScene PxQueryFlags PxFilterData PxBatchQueryPreFilterShader PxBatchQueryPostFilterShader PxSweepHit

</member>
<member name="M:physx.PxRigidBodyExt.linearSweepMultiple(physx.PxRigidBody*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxScene*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,physx.PxSweepHit*,System.UInt32*,System.UInt32,physx.PxSweepHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQueryFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplic" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="327">
	\brief Performs a linear sweep through space with the body's geometry objects, returning all overlaps.

	\note Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.

	This function sweeps all shapes attached to a given rigid body through space and reports all
	objects in the scene that intersect any of the shapes' swept paths until there are no more objects to report
	or a blocking hit is encountered.

	\param[in] body The rigid body to sweep.
	\param[in] scene The scene object to process the query.
	\param[in] unitDir Normalized direction of the sweep.
	\param[in] distance Sweep distance. Needs to be larger than 0.
	\param[in] outputFlags		Specifies which properties should be written to the hit information.
	\param[out] touchHitBuffer	Raycast hit information buffer. If the buffer overflows, an arbitrary subset of touch hits
								is returned (typically the query should be restarted with a larger buffer).
	\param[out] touchHitShapeIndices After the query is completed, touchHitShapeIndices[i] will contain the body index that caused the hit stored in hitBuffer[i]
	\param[in] touchHitBufferSize	Size of both touch hit buffers in elements.
	\param[out] block	Closest blocking hit is returned via this reference.
	\param[out] blockingShapeIndex	Set to -1 if if a blocking hit was not found, otherwise set to closest blocking hit shape index. The touching hits are reported separately in hitBuffer.
	\param[out] overflow	Set to true if touchHitBuffer didn't have enough space for all results. Touch hits will be incomplete if overflow occurred. Possible solution is to restart the query with a larger buffer.
	\param[in] filterData	If any word in filterData.data is non-zero then filterData.data will be used for filtering,
							otherwise shape-&gt;getQueryFilterData() will be used instead.
	\param[in] filterCall	Custom filtering logic (optional). Only used if the corresponding #PxQueryFlag flags are set. If NULL, all hits are assumed to be blocking.
	\param[in] cache		Cached hit shape (optional). Ray is tested against cached shape first then against the scene.
							Note: Filtering is not executed for a cached shape if supplied; instead, if a hit is found, it is assumed to be a blocking hit.
	\param[in] inflation	This parameter creates a skin around the swept geometry which increases its extents for sweeping. The sweep will register a hit as soon as the skin touches a shape, and will return the corresponding distance and normal.

	\return the number of touching hits. If overflow is set to true, the results are incomplete. In case of overflow there are also no guarantees that all touching hits returned are closer than the blocking hit.

	@see PxScene PxQueryFlags PxFilterData PxBatchQueryPreFilterShader PxBatchQueryPostFilterShader PxSweepHit

</member>
<member name="M:physx.PxRigidBodyExt.computeVelocityDeltaFromImpulse(physx.PxRigidBody!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="369">
	\brief Compute the change to linear and angular velocity that would occur if an impulsive force and torque were to be applied to a specified rigid body. 
	
	The rigid body is left unaffected unless a subsequent independent call is executed that actually applies the computed changes to velocity and angular velocity.

	\note if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account.

	@see PxRigidBody::getLinearVelocity, PxRigidBody::setLinearVelocity,  PxRigidBody::getAngularVelocity, PxRigidBody::setAngularVelocity 

	\param[in] body The body under consideration.
	\param[in] impulsiveForce The impulsive force that would be applied to the specified rigid body.
	\param[in] impulsiveTorque The impulsive torque that would be applied to the specified rigid body.
	\param[out] deltaLinearVelocity The change in linear velocity that would arise if impulsiveForce was to be applied to the specified rigid body.
	\param[out] deltaAngularVelocity The change in angular velocity that would arise if impulsiveTorque was to be applied to the specified rigid body.

</member>
<member name="M:physx.PxRigidBodyExt.computeVelocityDeltaFromImpulse(physx.PxRigidBody!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="386">
	\brief Computes the linear and angular velocity change vectors for a given impulse at a world space position taking a mass and inertia scale into account

	This function is useful for extracting the respective linear and angular velocity changes from a contact or joint when the mass/inertia ratios have been adjusted.

	\note if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account.

	\param[in] body The rigid body
	\param[in] globalPose The body's world space transform
	\param[in] point The point in world space where the impulse is applied
	\param[in] impulse The impulse vector in world space
	\param[in] invMassScale The inverse mass scale
	\param[in] invInertiaScale The inverse inertia scale
	\param[out] deltaLinearVelocity The linear velocity change
	\param[out] deltaAngularVelocity The angular velocity change

</member>
<member name="M:physx.PxRigidBodyExt.computeLinearAngularImpulse(physx.PxRigidBody!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrigidbodyext.h" line="406">
	\brief Computes the linear and angular impulse vectors for a given impulse at a world space position taking a mass and inertia scale into account

	This function is useful for extracting the respective linear and angular impulses from a contact or joint when the mass/inertia ratios have been adjusted.

	\param[in] body The rigid body
	\param[in] globalPose The body's world space transform
	\param[in] point The point in world space where the impulse is applied
	\param[in] impulse The impulse vector in world space
	\param[in] invMassScale The inverse mass scale
	\param[in] invInertiaScale The inverse inertia scale
	\param[out] linearImpulse The linear impulse
	\param[out] angularImpulse The angular impulse

</member>
<member name="T:physx.PxShapeExt" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxshapeext.h" line="32">
\brief utility functions for use with PxShape

@see PxShape

</member>
<member name="M:physx.PxShapeExt.getGlobalPose(physx.PxShape!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxshapeext.h" line="41">
	\brief Retrieves the world space pose of the shape.

	\param[in] shape The shape for which to get the global pose.
	\param[in] actor The actor to which the shape is attached

	\return Global pose of shape.

</member>
<member name="M:physx.PxShapeExt.raycast(physx.PxShape!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;,System.UInt32,physx.PxRaycastHit*,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxshapeext.h" line="54">
	\brief Raycast test against the shape.

	\param[in] shape the shape
	\param[in] actor the actor to which the shape is attached
	\param[in] rayOrigin The origin of the ray to test the geometry object against
	\param[in] rayDir The direction of the ray to test the geometry object against
	\param[in] maxDist Maximum ray length
	\param[in] hitFlags Specify which properties per hit should be computed and written to result hit array. Combination of #PxHitFlag flags
	\param[in] maxHits max number of returned hits = size of 'rayHits' buffer
	\param[out] rayHits Raycast hits information
	\param[in] anyHit Set to false if the closest hit point should be computed, else the query aborts as soon as any valid hit point is found.
	\return Number of hits between the ray and the shape

	@see PxRaycastHit PxTransform

</member>
<member name="M:physx.PxShapeExt.overlap(physx.PxShape!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxshapeext.h" line="78">
	\brief Test overlap between the shape and a geometry object

	\param[in] shape the shape
	\param[in] actor the actor to which the shape is attached
	\param[in] otherGeom The other geometry object to test overlap with
	\param[in] otherGeomPose Pose of the other geometry object
	\return True if the shape overlaps the geometry object

	@see PxGeometry PxTransform

</member>
<member name="M:physx.PxShapeExt.sweep(physx.PxShape!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSweepHit*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFlags&lt;physx.PxHitFlag.Enum,System.UInt16&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxshapeext.h" line="95">
	\brief Sweep a geometry object against the shape.

	Currently only box, sphere, capsule and convex mesh shapes are supported, i.e. the swept geometry object must be one of those types.

	\param[in] shape the shape
	\param[in] actor the actor to which the shape is attached
	\param[in] unitDir Normalized direction along which the geometry object should be swept.
	\param[in] distance Sweep distance. Needs to be larger than 0.
	\param[in] otherGeom The geometry object to sweep against the shape
	\param[in] otherGeomPose Pose of the geometry object
	\param[out] sweepHit The sweep hit information. Only valid if this method returns true.
	\param[in] hitFlags Specify which properties per hit should be computed and written to result hit array. Combination of #PxHitFlag flags
	\return True if the swept geometry object hits the shape

	@see PxGeometry PxTransform PxSweepHit

</member>
<member name="M:physx.PxShapeExt.getWorldBounds(physx.PxShape!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxshapeext.h" line="120">
	\brief Retrieves the axis aligned bounding box enclosing the shape.

	\return The shape's bounding box.

	\param[in] shape the shape
	\param[in] actor the actor to which the shape is attached
	\param[in] inflation  Scale factor for computed world bounds. Box extents are multiplied by this value.

	@see PxBounds3

</member>
<member name="M:physx.PxParticleExt.buildBoundsHash(System.UInt32*,physx.PxParticleExt.ParticleBounds*,physx.PxStrideIterator&lt;physx.PxVec3!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="40">
	\brief Computes particle bounds by sorting particle positions into a spatial hash grid.

	Given a strided array of particle positions, this function partitions the particles into 
	subsets of nearby particles by mapping the particle positions onto a 3-dimensional grid
	and creating ParticleBounds data structures for each occupied grid cell. 
	
	Each returned ParticleBounds data structure can be used to determine the indices of the particles
	belonging to the same grid cell. Particle indices of one grid cell are returned as contiguous 
	blocks in the sortedParticleIndices buffer and can be found within the range
	[firstParticle, firstParticle + numParticles - 1]. Each returned ParticleBounds further contains
	an AABB "bounds" that tightly fits all particle positions within the grid cell.

	The number of created ParticleBounds can be retrieved via the return value.	The user can cap the 
	maximum amount of generated ParticleBounds via the maxBounds parameter. Particles that would cause
	this maximum to be exceeded will be skipped over and will not be part of any returned ParticleBounds. 
	(Note that this also hold when maxBounds is equal to hashSize. Thus, in the worst case, if no particle 
	should ever be skipped over by the algorithm "hashSize" must be at least equal to numParticles)

	The user is responsible for allocating the output buffers sortedParticleIndices 
	(for at least numParticles entries) and particleBounds (for at least maxBounds entries).

	The size of a cubical grid cell can be tuned by setting the gridSpacing parameter. 
	
	The user supplied hashSize must be a power of two.

	\param[out] sortedParticleIndices Pointer to user allocated array of size numParticles where the sorted particle indices will be written to.
	\param[out] particleBounds Pointer to user allocated array of size maxBounds where the ParticleBounds will be written to.
	\param[in] positionBuffer Strided data of input particle positions.
	\param[in] validParticleRange Range of valid particles within validParticleBitmap. (See PxParticleReadData.validParticleRange).
	\param[in] validParticleBitmap  Bitmap specifying valid slots in positionBuffer. (See PxParticleReadData.validParticleBitmap).
	\param[in] hashSize Hash size used internally by the hashing algorithm. Must be a power of two.
	\param[in] maxBounds Maximum number of bounds to be returned. Must be smaller or equal than hashSize.
	\param[in] gridSpacing Side length of each cubical grid cell.
	\return PxU32. Number of ParticleBounds data structures written to the particleBounds buffer. Smaller or equal than maxBounds.


</member>
<member name="T:physx.PxParticleExt.IndexPool" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="86">
	\brief Class to manage particle indices.
	Extension particle index management can be useful if no application side particle index allocation 
	functionality is available.  An PxParticleExt::IndexPool instance is meant to be used for one 
	PxParticleSystem/PxParticleFluid instance.
	The instance can be created with PxParticleExt::createIndexPool().

	@see PxParticleExt::createIndexPool()

</member>
<member name="M:physx.PxParticleExt.IndexPool.allocateIndices(System.UInt32,physx.PxStrideIterator&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="98">
\brief Allocates a requested number of indices if possible.
\param[in] num Number of indices that should be allocated.
\param[out] indexBuffer Strided data to which allocated indices are written.
\return PxU32. Number of indices that where allocated by the operation. 

</member>
<member name="M:physx.PxParticleExt.IndexPool.freeIndices(System.UInt32,physx.PxStrideIterator&lt;System.UInt32!System.Runtime.CompilerServices.IsConst&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="106">
\brief Deallocates a requested number of indices.
\param[in] num Number of indices that should be freed.
\param[in] indexBuffer Strided data describing the indices that need to be freed. It's a requirement 
to specify unique indices, that where previously allocated by PxParticlesExt::allocateIndices()

</member>
<member name="M:physx.PxParticleExt.IndexPool.freeIndices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="114">
\brief Deallocates all previously allocated indices.

</member>
<member name="M:physx.PxParticleExt.IndexPool.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="119">
\brief Releases IndexPool instance.

</member>
<member name="M:physx.PxParticleExt.IndexPool.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="124">
\brief virtual destructor

</member>
<member name="M:physx.PxParticleExt.createIndexPool(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="130">
\brief Creates a PxParticlesExt::IndexPool instance.
\param[in] maxParticles Maximum number of available indices.

</member>
<member name="M:physx.PxParticleExt.createIndexPool(System.UInt32,System.UInt32,System.UInt32!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxparticleext.h" line="136">
\brief Creates a PxParticlesExt::IndexPool instance initialized with a preallocated set of indices specified with a bitmap.
\param[in] maxParticles Maximum number of available indices.
\param[in] validParticleRange Range of indices represented in validParticleBitmap. (See PxParticleReadData.validParticleRange).
\param[in] validParticleBitmap Bitmap specifying the valid particle indices that should be preallocated. (See PxParticleReadData.validParticleBitmap).

</member>
<member name="T:physx.PxMeshOverlapUtil" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="32">
	\brief Utility class to find mesh triangles touched by a specified geometry object.

	This class is a helper calling PxMeshQuery::findOverlapTriangleMesh or PxMeshQuery::findOverlapHeightField under the hood,
	while taking care of necessary memory management issues.

	PxMeshQuery::findOverlapTriangleMesh and PxMeshQuery::findOverlapHeightField are the "raw" functions operating on user-provided fixed-size
	buffers. These functions abort with an error code in case of buffer overflow. PxMeshOverlapUtil is a convenient helper function checking
	this error code, and resizing buffers appropriately, until the desired call succeeds.
	
	Returned triangle indices are stored within the class, and can be used with PxMeshQuery::getTriangle() to retrieve the triangle properties.

</member>
<member name="M:physx.PxMeshOverlapUtil.findOverlap(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTriangleMeshGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="49">
	\brief Find the mesh triangles which touch the specified geometry object.

	\param[in] geom The geometry object to test for mesh triangle overlaps. Supported geometries are #PxSphereGeometry, #PxCapsuleGeometry and #PxBoxGeometry
	\param[in] geomPose Pose of the geometry object
	\param[in] meshGeom The triangle mesh geometry to check overlap against
	\param[in] meshPose Pose of the triangle mesh
	\return Number of overlaps found. Triangle indices can then be accessed through the #getResults() function.

	@see PxGeometry PxTransform PxTriangleMeshGeometry PxMeshQuery::findOverlapTriangleMesh

</member>
<member name="M:physx.PxMeshOverlapUtil.findOverlap(physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxHeightFieldGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="62">
	\brief Find the height field triangles which touch the specified geometry object.

	\param[in] geom The geometry object to test for height field overlaps. Supported geometries are #PxSphereGeometry, #PxCapsuleGeometry and #PxBoxGeometry. The sphere and capsule queries are currently conservative estimates.
	\param[in] geomPose Pose of the geometry object
	\param[in] hfGeom The height field geometry to check overlap against
	\param[in] hfPose Pose of the height field
	\return Number of overlaps found. Triangle indices can then be accessed through the #getResults() function.

	@see PxGeometry PxTransform PxHeightFieldGeometry PxMeshQuery::findOverlapHeightField

</member>
<member name="M:physx.PxMeshOverlapUtil.getResults" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="75">
\brief Retrieves array of triangle indices after a findOverlap call.
\return Indices of touched triangles

</member>
<member name="M:physx.PxMeshOverlapUtil.getNbResults" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="81">
\brief Retrieves number of triangle indices after a findOverlap call.
\return Number of touched triangles

</member>
<member name="D:physx.PxFindOverlapTriangleMeshUtil" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="94">
\brief DEPRECATED typedef for backward compatibility with PhysX 3.2. 
</member>
<member name="M:physx.PxComputeMeshPenetration(System.UInt32,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTriangleMeshGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="98">
	\brief Computes an approximate minimum translational distance (MTD) between a geometry object and a mesh.

	This iterative function computes an approximate vector that can be used to depenetrate a geom object
	from a triangle mesh. Returned depenetration vector should be applied to 'geom', to get out of the mesh.

	The function works best when the amount of overlap between the geom object and the mesh is small. If the
	geom object's center goes inside the mesh, backface culling usually kicks in, no overlap is detected,
	and the function does not compute an MTD vector.

	The function early exits if no overlap is detected after a depenetration attempt. This means that if
	maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has
	been successful. Usually N = 4 gives good results.

	\param[in] maxIter Max number of iterations before returning.
	\param[in] geom The geometry object
	\param[in] geomPose Pose for the geometry object
	\param[in] meshGeom The mesh geometry
	\param[in] meshPose Pose for the mesh
	\param[out] nb Number of depenetrations attempts performed during the call. 0 means no overlap has been detected.

	\return Approximate depenetration vector

	@see PxGeometry PxTransform PxTriangleMeshGeometry

</member>
<member name="M:physx.PxComputeHeightFieldPenetration(System.UInt32,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxHeightFieldGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxtrianglemeshext.h" line="125">
	\brief Computes an approximate minimum translational distance (MTD) between a geometry object and a heightfield.

	This iterative function computes an approximate vector that can be used to depenetrate a geom object
	from a heightfield. Returned depenetration vector should be applied to 'geom', to get out of the heightfield.

	The function works best when the amount of overlap between the geom object and the mesh is small. If the
	geom object's center goes inside the heightfield, backface culling usually kicks in, no overlap is detected,
	and the function does not compute an MTD vector.

	The function early exits if no overlap is detected after a depenetration attempt. This means that if
	maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has
	been successful. Usually N = 4 gives good results.

	\param[in] maxIter Max number of iterations before returning.
	\param[in] geom The geometry object
	\param[in] geomPose Pose for the geometry object
	\param[in] heightFieldGeom The heightfield geometry
	\param[in] heightFieldPose Pose for the heightfield
	\param[out] nb Number of depenetrations attempts performed during the call. 0 means no overlap has been detected.

	\return Approximate depenetration vector

	@see PxGeometry PxTransform PxHeightFieldGeometry

</member>
<member name="T:physx.PxSerialization" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="46">
\brief Utility functions for serialization

@see PxCollection, PxSerializationRegistry

</member>
<member name="T:physx.PxSerialization.PxXmlMiscParameter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="54">
	\brief Additional PxScene and PxPhysics options stored in XML serialized data.

	The PxXmlMiscParameter parameter can be serialized and deserialized along with PxCollection instances (XML only).
	This is for application use only and has no impact on how objects are serialized or deserialized. 
	@see PxSerialization::createCollectionFromXml, PxSerialization::serializeCollectionToXml

</member>
<member name="F:physx.PxSerialization.PxXmlMiscParameter.upVector" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="63">
\brief Up vector for the scene reference coordinate system.

</member>
<member name="F:physx.PxSerialization.PxXmlMiscParameter.scale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="68">
\brief Tolerances scale to be used for the scene.

</member>
<member name="M:physx.PxSerialization.isSerializable(physx.PxCollection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="77">
	\brief Returns whether the collection is serializable with the externalReferences collection.

	Some definitions to explain whether a collection can be serialized or not:

	For definitions of <b>requires</b> and <b>complete</b> see #PxSerialization::complete

	A serializable object is <b>subordinate</b> if it cannot be serialized on it's own
	The following objects are subordinate:
	- articulation links
	- articulation joints
	- joints

	A collection C can be serialized with external references collection D iff
	- C is complete relative to D (no dangling references)
	- Every object in D required by an object in C has a valid ID (no unnamed references)
	- Every subordinate object in C is required by another object in C (no orphans)

	\param[in] collection Collection to be checked
	\param[in] sr PxSerializationRegistry instance with information about registered classes.
	\param[in] externalReferences the external References collection
	\return  Whether the collection is serializable
	@see PxSerialization::complete, PxSerialization::serializeCollectionToBinary, PxSerialization::serializeCollectionToXml, PxSerializationRegistry

</member>
<member name="M:physx.PxSerialization.complete(physx.PxCollection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection!System.Runtime.CompilerServices.IsConst*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="103">
	\brief Adds to a collection all objects such that it can be successfully serialized.
	
	A collection C is complete relative to an other collection D if every object required by C is either in C or D.
	This function adds objects to a collection, such that it becomes complete with respect to the exceptFor collection.
	Completeness is needed for serialization. See #PxSerialization::serializeCollectionToBinary, 
	#PxSerialization::serializeCollectionToXml.

	Sdk objects require other sdk object according to the following rules: 
	 - joints require their actors and constraint
	 - rigid actors require their shapes
	 - shapes require their material(s) and mesh (triangle mesh, convex mesh or height field), if any
	 - articulations require their links and joints
	 - aggregates require their actors
	 - cloth actors require their cloth fabric

	If followJoints is specified another rule is added:
	 - actors require their joints
	
	Specifying followJoints will make whole jointed actor chains being added to the collection. Following chains 
	is interrupted whenever a object in exceptFor is encountered.

	\param[in,out] collection Collection which is completed
	\param[in] sr PxSerializationRegistry instance with information about registered classes.
	\param[in] exceptFor Optional exemption collection
	\param[in] followJoints Specifies whether joints should be added for jointed actors
	@see PxCollection, PxSerialization::serializeCollectionToBinary, PxSerialization::serializeCollectionToXml, PxSerializationRegistry

</member>
<member name="M:physx.PxSerialization.createSerialObjectIds(physx.PxCollection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt64!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="133">
	\brief Creates PxSerialObjectId values for unnamed objects in a collection.

	Creates PxSerialObjectId names for unnamed objects in a collection starting at a base value and incrementing, 
	skipping values that are already assigned to objects in the collection.

	\param[in,out] collection Collection for which names are created
	\param[in] base Start address for PxSerialObjectId names
	@see PxCollection

</member>
<member name="M:physx.PxSerialization.createCollectionFromXml(physx.PxInputData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCooking*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection!System.Runtime.CompilerServices.IsConst*,physx.PxStringTable*,physx.PxSerialization.PxXmlMiscParameter*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="145">
	\brief Creates a PxCollection from XML data.

	\param inputData The input data containing the XML collection.
	\param cooking PxCooking instance used for sdk object instantiation.
	\param sr PxSerializationRegistry instance with information about registered classes.
	\param externalRefs PxCollection used to resolve external references.
	\param stringTable PxStringTable instance used for storing object names.
	\param outArgs Optional parameters of physics and scene deserialized from XML. See #PxSerialization::PxXmlMiscParameter
	\return a pointer to a PxCollection if successful or NULL if it failed.

	@see PxCollection, PxSerializationRegistry, PxInputData, PxStringTable, PxCooking, PxSerialization::PxXmlMiscParameter

</member>
<member name="M:physx.PxSerialization.createCollectionFromBinary(System.Void*,physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="160">
	\brief Deserializes a PxCollection from memory.

	Creates a collection from memory. If the collection has external dependencies another collection 
	can be provided to resolve these.

	The memory block provided has to be 128 bytes aligned and contain a contiguous serialized collection as written
	by PxSerialization::serializeCollectionToBinary. The contained binary data needs to be compatible with the current binary format version
	which is defined by "PX_PHYSICS_VERSION_MAJOR.PX_PHYSICS_VERSION_MINOR.PX_PHYSICS_VERSION_BUGFIX-PX_BINARY_SERIAL_VERSION".
	For a list of compatible sdk releases refer to the documentation of PX_BINARY_SERIAL_VERSION.

	\param[in] memBlock Pointer to memory block containing the serialized collection
	\param[in] sr PxSerializationRegistry instance with information about registered classes.
	\param[in] externalRefs Collection to resolve external dependencies

	@see PxCollection, PxSerialization::complete, PxSerialization::serializeCollectionToBinary, PxSerializationRegistry, PX_BINARY_SERIAL_VERSION

</member>
<member name="M:physx.PxSerialization.serializeCollectionToXml(physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCooking*,physx.PxCollection!System.Runtime.CompilerServices.IsConst*,physx.PxSerialization.PxXmlMiscParameter*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="179">
	\brief Serializes a physics collection to an XML output stream.

	The collection to be serialized needs to be complete @see PxSerialization.complete.
	Optionally the XML may contain meshes in binary cooked format for fast loading. It does this when providing a valid non-null PxCooking pointer.

	\note Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior. 

	\param outputStream Stream to save collection to.
	\param collection PxCollection instance which is serialized. The collection needs to be complete with respect to the externalRefs collection.
	\param sr PxSerializationRegistry instance with information about registered classes.
	\param cooking Optional pointer to cooking instance. If provided, cooked mesh data is cached for fast loading.
	\param externalRefs Collection containing external references.
	\param inArgs Optional parameters of physics and scene serialized to XML along with the collection. See #PxSerialization::PxXmlMiscParameter
	\return true if the collection is successfully serialized.

	@see PxCollection, PxOutputStream, PxSerializationRegistry, PxCooking, PxSerialization::PxXmlMiscParameter

</member>
<member name="M:physx.PxSerialization.serializeCollectionToBinary(physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection!System.Runtime.CompilerServices.IsConst*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="199">
	\brief Serializes a collection to a binary stream.

	Serializes a collection to a stream. In order to resolve external dependencies the externalReferences collection has to be provided. 
	Optionally names of objects that where set for example with #PxActor::setName are serialized along with the objects.

	The collection can be successfully serialized if isSerializable(collection) returns true. See #isSerializable.

	The implementation of the output stream needs to fulfill the requirements on the memory block input taken by
	PxSerialization::createCollectionFromBinary.

	\note Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior. 

	\param[out] outputStream into which the collection is serialized
	\param[in] collection Collection to be serialized
	\param[in] sr PxSerializationRegistry instance with information about registered classes.
	\param[in] externalRefs Collection used to resolve external dependencies
	\param[in] exportNames Specifies whether object names are serialized
	\return Whether serialization was successful

	@see PxCollection, PxOutputStream, PxSerialization::complete, PxSerialization::createCollectionFromBinary, PxSerializationRegistry

</member>
<member name="M:physx.PxSerialization.dumpBinaryMetaData(physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="223">
	\brief Dumps the binary meta-data to a stream.

	A meta-data file contains information about the SDK's internal classes and about custom user types ready 
	for serialization. Such a file is needed to convert binary-serialized data from one platform to another (re-targeting). 
	The converter needs meta-data files for the source and target platforms to perform conversions.

	Custom user types can be supported with PxSerializationRegistry::registerBinaryMetaDataCallback (see the guide for more information). 
	
	\param[out] outputStream Stream to write meta data to	
	\param[in] sr PxSerializationRegistry instance with information about registered classes used for conversion.
	
	@see PxOutputStream, PxSerializationRegistry

</member>
<member name="M:physx.PxSerialization.createBinaryConverter" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="239">
\brief Creates binary converter for re-targeting binary-serialized data.

\return Binary converter instance.

</member>
<member name="M:physx.PxSerialization.createBinaryConverter(physx.PxSerializationRegistry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="246">
	\deprecated
	\brief Creates binary converter for re-targeting binary-serialized data.
	
	\return Binary converter instance.

	@see PxSerializationRegistry

</member>
<member name="M:physx.PxSerialization.createSerializationRegistry(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxserialization.h" line="256">
	\brief Creates an application managed registry for serialization.
	
	\param[in] physics Physics SDK to generate create serialization registry
	
	\return PxSerializationRegistry instance.

	@see PxSerializationRegistry

</member>
<member name="T:physx.PxVisualDebuggerConnectionFlag" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="41">
	This class has a direct mapping to the PVD::TConnectionType datatype.  It is redefined here
	because not all classes including this header have the PVDSDK in their include path.


</member>
<member name="F:eDEBUG" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="50">
\brief Send debugging information to PVD.  

This information is the actual object data
of the rigid statics, shapes, articulations, etc.  Sending this information has
a noticeable impact on performance and thus this flag should not be set
if you want an accurate performance profile.

</member>
<member name="F:ePROFILE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="59">
			\brief Send profile information to PVD.

			This information populates PVD's profile view.  It has (at this time) negligible cost
			compared to Debug information and makes PVD *much* more useful so it is quite
			highly recommended.

			This flag works together with a PxCreatePhysics parameter,
			profileZoneManager.  Using both of them together allows SDK to send profile
			events to PVD.  

</member>
<member name="F:eMEMORY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="71">
			\brief Send memory information to PVD.

			The PVD sdk side hooks into the Foundation memory controller and listens to 
			allocation/deallocation events.  This has a noticable hit on the first frame,
			however, this data is somewhat compressed and the PhysX SDK doesn't allocate much
			once it hits a steady state.  This information also has a fairly negligible
			impact and thus is also highly recommended.

			This flag works together with a PxCreatePhysics parameter,
			trackOutstandingAllocations.  Using both of them together allows users to have
			an accurate view of the overall memory usage of the simulation at the cost of
			a hashtable lookup per allocation/deallocation.  Again, PhysX makes a best effort
			attempt not to allocate or deallocate during simulation so this hashtable lookup
			tends to have no effect past the first frame.  
			
			Sending memory information without tracking outstanding allocations means that 
			PVD will accurate information about the state of the memory system before the 
			actual connection happened.

</member>
<member name="T:physx.PxVisualDebuggerExt" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="98">
class that contains all the data relevant for updating and visualizing extensions like joints in PVD

</member>
<member name="M:physx.PxVisualDebuggerExt.createConnection(physx.debugger.comm.PvdConnectionManager*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32,physx.PxFlags&lt;physx.PxVisualDebuggerConnectionFlag.Enum,System.UInt32&gt;)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="105">
		Connect to pvd using a network socket.  This blocks for at most inTimeoutInMilliseconds
		before returning a new connection (or nothing).  PVD needs to be started before this call
		is made.

		\note Since this call increment the reference count of PvdConnection,
		please call PvdConnection::release() after this funtion is called. 
		
		\param inMgr The manager to use to host the connection.
		\param inHost Host in x.x.x.x network notation
		\param inPort Port to connect to.  The default is 5425.
		\param inTimeoutInMilliseconds How long to block waiting for a new connection
		\param inConnectionType The type information you want sent over the connection.

</member>
<member name="M:physx.PxVisualDebuggerExt.createConnection(physx.debugger.comm.PvdConnectionManager*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,physx.PxFlags&lt;physx.PxVisualDebuggerConnectionFlag.Enum,System.UInt32&gt;)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="126">
		Connect to pvd, writing out the connection data to a file stream.  You can then parse this data later
		with PVDUI.

		\note Since this call increment the reference count of PvdConnection,
		please call PvdConnection::release() after this funtion is called. 

		\param inMgr The manager to use to host the connection.
		\param filename The filename to write connection data.
		\param inConnectionType The type information you want sent over the connection.

</member>
<member name="M:physx.PxVisualDebuggerExt.getDefaultConnectionFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="142">
get the default connection flags

	\return the default connection flags: debug data and profiling

</member>
<member name="M:physx.PxVisualDebuggerExt.getAllConnectionFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxvisualdebuggerext.h" line="149">
get all connection flags

	\return all visual debugger connection flags: debug data, profiling and memory

</member>
<member name="T:physx.PxStringTableExt" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxstringtableext.h" line="24">
\brief a factory class for creating PxStringTable with a specific allocator.

@see PxStringTable 

</member>
<member name="T:physx.PxDefaultCpuDispatcher" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultcpudispatcher.h" line="28">
\brief A default implementation for a CPU task dispatcher.

@see PxDefaultCpuDispatcherCreate() PxCpuDispatcher

</member>
<member name="M:physx.PxDefaultCpuDispatcher.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultcpudispatcher.h" line="36">
	\brief Deletes the dispatcher.
	
	Do not keep a reference to the deleted instance.

	@see PxDefaultCpuDispatcherCreate()

</member>
<member name="M:physx.PxDefaultCpuDispatcher.setRunProfiled(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultcpudispatcher.h" line="45">
	\brief Enables profiling at task level.

	\note By default enabled only in profiling builds.
	
	\param[in] runProfiled True if tasks should be profiled.

</member>
<member name="M:physx.PxDefaultCpuDispatcher.getRunProfiled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultcpudispatcher.h" line="54">
	\brief Checks if profiling is enabled at task level.

	\return True if tasks should be profiled.

</member>
<member name="M:physx.PxDefaultCpuDispatcherCreate(System.UInt32,System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultcpudispatcher.h" line="63">
\brief Create default dispatcher, extensions SDK needs to be initialized first.

\param[in] numThreads Number of worker threads the dispatcher should use.
\param[in] affinityMasks Array with affinity mask for each thread. If not defined, default masks will be used.

\note numThreads may be zero in which case no worker thread are initialized and
simulation tasks will be executed on the thread that calls PxScene::simulate()

@see PxDefaultCpuDispatcher

</member>
<member name="M:PxBuildSmoothNormals(System.UInt32,System.UInt32,physx.PxVec3!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*,physx.PxVec3*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultcpudispatcher.h" line="80">
@} 
\addtogroup extensions
  @{

\brief Builds smooth vertex normals over a mesh.

- "smooth" because smoothing groups are not supported here
- takes angles into account for correct cube normals computation

To use 32bit indices pass a pointer in dFaces and set wFaces to zero. Alternatively pass a pointer to 
wFaces and set dFaces to zero.

\param[in] nbTris Number of triangles
\param[in] nbVerts Number of vertices
\param[in] verts Array of vertices
\param[in] dFaces Array of dword triangle indices, or null
\param[in] wFaces Array of word triangle indices, or null
\param[out] normals Array of computed normals (assumes nbVerts vectors)
\param[in] flip Flips the normals or not
\return True on success.

</member>
<member name="M:physx.PxCreateDynamic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="38">
\brief simple method to create a PxRigidDynamic actor with a single PxShape. 

	\param[in] sdk the PxPhysics object
	\param[in] transform the global pose of the new object
	\param[in] geometry the geometry of the new object's shape, which must be a sphere, capsule, box or convex
	\param[in] material the material for the new object's shape
	\param[in] density the density of the new object. Must be greater than zero.
	\param[in] shapeOffset an optional offset for the new shape, defaults to identity

	\return a new dynamic actor with the PxRigidBodyFlag, or NULL if it could 
	not be constructed

	@see PxRigidDynamic PxShapeFlag

</member>
<member name="M:physx.PxCreateDynamic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxShape*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="61">
\brief simple method to create a PxRigidDynamic actor with a single PxShape. 

	\param[in] sdk the PxPhysics object
	\param[in] transform the transform of the new object
	\param[in] shape the shape of the new object
	\param[in] density the density of the new object. Must be greater than zero.

	\return a new dynamic actor with the PxRigidBodyFlag, or NULL if it could 
	not be constructed

	@see PxRigidDynamic PxShapeFlag

</member>
<member name="M:physx.PxCreateKinematic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="80">
\brief simple method to create a kinematic PxRigidDynamic actor with a single PxShape. 

	\param[in] sdk the PxPhysics object
	\param[in] transform the global pose of the new object
	\param[in] geometry the geometry of the new object's shape
	\param[in] material the material for the new object's shape
	\param[in] density the density of the new object. Must be greater than zero if the object is to participate in simulation.
	\param[in] shapeOffset an optional offset for the new shape, defaults to identity

	\note unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However, 
	kinematics of other geometry types may not participate in simulation collision and may be used only for
	triggers or scene queries of moving objects under animation control. In this case the density parameter
	will be ignored and the created shape will be set up as a scene query only shape (see #PxShapeFlag::eSCENE_QUERY_SHAPE)

	\return a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could 
	not be constructed

	@see PxRigidDynamic PxShapeFlag

</member>
<member name="M:physx.PxCreateKinematic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxShape*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="108">
\brief simple method to create a kinematic PxRigidDynamic actor with a single PxShape. 

	\param[in] sdk the PxPhysics object
	\param[in] transform the global pose of the new object
	\param[in] density the density of the new object. Must be greater than zero if the object is to participate in simulation.
	\param[in] shape the shape of the new object

	\note unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However, 
	kinematics of other geometry types may not participate in simulation collision and may be used only for
	triggers or scene queries of moving objects under animation control. In this case the density parameter
	will be ignored and the created shape will be set up as a scene query only shape (see #PxShapeFlag::eSCENE_QUERY_SHAPE)

	\return a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could 
	not be constructed

	@see PxRigidDynamic PxShapeFlag

</member>
<member name="M:physx.PxCreateStatic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxGeometry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="132">
\brief simple method to create a PxRigidStatic actor with a single PxShape. 

	\param[in] sdk the PxPhysics object
	\param[in] transform the global pose of the new object
	\param[in] geometry the geometry of the new object's shape
	\param[in] material the material for the new object's shape
	\param[in] shapeOffset an optional offset for the new shape, defaults to identity

	\return a new static actor, or NULL if it could not be constructed

	@see PxRigidStatic

</member>
<member name="M:physx.PxCreateStatic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxShape*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="152">
\brief simple method to create a PxRigidStatic actor with a single PxShape. 

	\param[in] sdk the PxPhysics object
	\param[in] transform the global pose of the new object
	\param[in] shape the new object's shape

	\return a new static actor, or NULL if it could not be constructed

	@see PxRigidStatic

</member>
<member name="M:physx.PxCloneStatic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidActor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="168">
\brief create a static body by copying attributes from another rigid actor

The function clones a PxRigidDynamic as a PxRigidStatic. A uniform scale is applied. The following properties are copied:
- shapes
- actor flags 
- owner client and client behavior bits

The following are not copied and retain their default values:
- name
- joints or observers
- aggregate or scene membership
- user data

\note Transforms are not copied with bit-exact accuracy.

\param[in] physicsSDK - the physics SDK used to allocate the rigid static
\param[in] actor the rigid actor from which to take the attributes.
\param[in] transform the transform of the new static.

\return the newly-created rigid static


</member>
<member name="M:physx.PxCloneDynamic(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRigidDynamic!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="197">
\brief create a dynamic body by copying attributes from an existing body

The following properties are copied:
- shapes
- actor flags and rigidDynamic flags
- mass, moment of inertia, and center of mass frame
- linear and angular velocity
- linear and angular damping
- maximum angular velocity
- position and velocity solver iterations
- sleep threshold
- contact report threshold
- dominance group
- owner client and client behavior bits

The following are not copied and retain their default values:
- name
- joints or observers
- aggregate or scene membership
- sleep timer
- user data

\note Transforms are not copied with bit-exact accuracy.

\param[in] physicsSDK PxPhysics - the physics SDK used to allocate the rigid static
\param[in] body the rigid dynamic to clone.
\param[in] transform the transform of the new dynamic

\return the newly-created rigid static


</member>
<member name="M:physx.PxCreatePlane(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxPlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMaterial*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="235">
\brief create a plane actor. The plane equation is n.x + d = 0

	\param[in] sdk the PxPhysics object
	\param[in] plane a plane of the form n.x + d = 0
	\param[in] material the material for the new object's shape

	\return a new static actor, or NULL if it could not be constructed

	@see PxRigidStatic

</member>
<member name="M:physx.PxScaleRigidActor(physx.PxRigidActor*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxsimplefactory.h" line="251">
\brief scale a rigid actor by a uniform scale

The geometry and relative positions of the actor are multiplied by the given scale value. If the actor is a rigid body or an
articulation link and the scaleMassProps value is true, the mass properties are scaled assuming the density is constant: the 
center of mass is linearly scaled, the mass is multiplied by the cube of the scale, and the inertia tensor by the fifth power of the scale. 

\param[in] actor a rigid actor
\param[in] scale the scale by which to multiply the actor
\param[in] scaleMassProps whether to scale the mass properties

</member>
<member name="T:physx.PxClothMeshDesc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="28">
\brief Descriptor class for a cloth mesh.

@see PxCooking.cookClothMesh()


</member>
<member name="F:physx.PxClothMeshDesc.points" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="38">
\brief Pointer to first vertex point.

</member>
<member name="F:physx.PxClothMeshDesc.invMasses" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="43">
\brief Determines whether particle is simulated or static.
A positive value denotes that the particle is being simulated, zero denotes a static particle.
This data is used to generate tether and zero stretch constraints.
If invMasses.data is null, all particles are assumed to be simulated 
and no tether and zero stretch constraints are being generated.

</member>
<member name="F:physx.PxClothMeshDesc.triangles" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="52">
	\brief Pointer to the first triangle.

	These are triplets of 0 based indices:
	vert0 vert1 vert2
	vert0 vert1 vert2
	vert0 vert1 vert2
	...

	where vert* is either a 32 or 16 bit unsigned integer. There are a total of 3*count indices.
	The stride determines the byte offset to the next index triple.
	
	This is declared as a void pointer because it is actually either an PxU16 or a PxU32 pointer.

</member>
<member name="F:physx.PxClothMeshDesc.quads" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="68">
	\brief Pointer to the first quad.

	These are quadruples of 0 based indices:
	vert0 vert1 vert2 vert3
	vert0 vert1 vert2 vert3
	vert0 vert1 vert2 vert3
	...

	where vert* is either a 32 or 16 bit unsigned integer. There are a total of 4*count indices.
	The stride determines the byte offset to the next index quadruple.

	This is declared as a void pointer because it is actually either an PxU16 or a PxU32 pointer.

</member>
<member name="F:physx.PxClothMeshDesc.flags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="84">
\brief Flags bits, combined from values of the enum ::PxMeshFlag

</member>
<member name="M:physx.PxClothMeshDesc.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="89">
\brief constructor sets to default.

</member>
<member name="M:physx.PxClothMeshDesc.setToDefault" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="93">
\brief (re)sets the structure to the default.	

</member>
<member name="M:physx.PxClothMeshDesc.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshdesc.h" line="97">
\brief Returns true if the descriptor is valid.
\return True if the current settings are valid

</member>
<member name="M:physx.PxClothFabricCooker.#ctor(physx.PxClothMeshDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothfabriccooker.h" line="37">
\brief Cooks a triangle mesh to a PxClothFabricDesc.
\param desc The cloth mesh descriptor on which the generation of the cooked mesh depends.
\param gravity A normalized vector which specifies the direction of gravity. 
This information allows the cooker to generate a fabric with higher quality simulation behavior.
\param useGeodesicTether A flag to indicate whether to compute geodesic distance for tether constraints.
\note The geodesic option for tether only works for manifold input.  For non-manifold input, a simple Euclidean distance will be used.
For more detailed cooker status for such cases, try running PxClothGeodesicTetherCooker directly.

</member>
<member name="M:physx.PxClothFabricCooker.getDescriptor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothfabriccooker.h" line="49">
\brief Returns the fabric descriptor to create the fabric. 
</member>
<member name="M:physx.PxClothFabricCooker.save(physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothfabriccooker.h" line="51">
\brief Saves the fabric data to a platform and version dependent stream. 
</member>
<member name="M:physx.PxClothFabricCreate(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxClothMeshDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothfabriccooker.h" line="58">
\brief Cooks a triangle mesh to a PxClothFabric.

\param physics The physics instance.
\param desc The cloth mesh descriptor on which the generation of the cooked mesh depends.
\param gravity A normalized vector which specifies the direction of gravity. 
This information allows the cooker to generate a fabric with higher quality simulation behavior.
\param useGeodesicTether A flag to indicate whether to compute geodesic distance for tether constraints.
\return The created cloth fabric, or NULL if creation failed.

</member>
<member name="M:physx.PxBroadPhaseExt.createRegionsFromWorldBounds(physx.PxBounds3*,physx.PxBounds3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxbroadphaseext.h" line="32">
	\brief Creates regions for PxSceneDesc, from a global box.

	This helper simply subdivides the given global box into a 2D grid of smaller boxes. Each one of those smaller boxes
	is a region of interest for the broadphase. There are nbSubdiv*nbSubdiv regions in the 2D grid. The function does not
	subdivide along the given up axis.

	This is the simplest setup one can use with PxBroadPhaseType::eMBP. A more sophisticated setup would try to cover
	the game world with a non-uniform set of regions (i.e. not just a grid).

	\param[out]	regions			Regions computed from the input global box
	\param[in]	globalBounds	World-space box covering the game world
	\param[in]	nbSubdiv		Grid subdivision level. The function will create nbSubdiv*nbSubdiv regions.
	\param[in]	upAxis			Up axis (0 for X, 1 for Y, 2 for Z).
	\return		number of regions written out to the 'regions' array

	@see PxSceneDesc PxBroadPhaseType

</member>
<member name="M:physx.PxClothMeshQuadifier.#ctor(physx.PxClothMeshDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshquadifier.h" line="30">
\brief Convert triangles of PxClothMeshDesc to quads.
\details In PxCloth, quad dominant mesh representations are preferable to pre-triangulated versions.
In cases where the mesh has been already triangulated, this class provides a meachanism to
convert (quadify) some triangles back to quad representations.
\see PxClothFabricCooker
\param desc The cloth mesh descriptor prepared for cooking

</member>
<member name="M:physx.PxClothMeshQuadifier.getDescriptor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxclothmeshquadifier.h" line="41">
\brief Returns a mesh descriptor with some triangle pairs converted to quads.
\note The returned descriptor is valid only within the lifespan of PxClothMeshQuadifier class.

</member>
<member name="M:PxInitExtensions(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxextensionsapi.h" line="71">
\brief Initialize the PhysXExtensions library. 

This should be called before calling any functions or methods in extensions which may require allocation. 
\note This function does not need to be called before creating a PxDefaultAllocator object.

\param physics a PxPhysics object

@see PxCloseExtensions PxFoundation PxPhysics

</member>
<member name="M:PxCloseExtensions" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxextensionsapi.h" line="83">
\brief Shut down the PhysXExtensions library. 

This function should be called to cleanly shut down the PhysXExtensions library before application exit. 

\note This function is required to be called to release foundation usage.

@see PxInitExtensions

</member>
<member name="T:physx.PxBufferedProfilerEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="26">
	\brief Event structure for buffered profiler callback. 

	\note This structure is used also for CUDA events, therefore some 
	members are not defined in case of a CUDA event.

	@see physx::PxBufferedProfilerCallback

</member>
<member name="T:physx.PxBufferedProfilerCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="49">
	\brief A profiler callback that is called when the event buffer of a PxProfileZone fills up or is flushed.

	@see physx::PxProfileZone physx::PxProfileZoneManager physx::PxProfileZone

</member>
<member name="F:physx.PxBufferedProfilerCallback.CROSS_THREAD_ID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="57">
\brief Fixed ID for cross thread events.		

</member>
<member name="M:physx.PxBufferedProfilerCallback.onEvent(physx.PxBufferedProfilerEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="62">
		\brief Reports a start-stop event.		

		\param[out] event the reported event.

		@see PxBufferedProfilerEvent

</member>
<member name="T:physx.PxDefaultBufferedProfiler" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="77">
	\brief Default implementation for profile event handler.

	The profile event handler listens for events from one or more profile zones, specified at creation time. It forwards those events
	to one or more callbacks.

	Events will be reported when internal event buffers fill up. Calling flushEvents() result
	 in any unreported events being reported immediately.

	@see PxDefaultBufferedProfilerCreate physx::PxProfileZone physx::PxProfileZoneMananger 

</member>
<member name="M:physx.PxDefaultBufferedProfiler.flushEvents" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="91">
		\brief Flush all the event buffers to ensure that event callbacks see all events that have been issued.

		@see PxBufferedProfilerCallback

</member>
<member name="M:physx.PxDefaultBufferedProfiler.getProfileZoneManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="98">
\brief Get the profile zone manager.

</member>
<member name="M:physx.PxDefaultBufferedProfiler.addBufferedProfilerCallback(physx.PxBufferedProfilerCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="103">
		\brief add an event callback.

		\param[in] cb the callback to add.

</member>
<member name="M:physx.PxDefaultBufferedProfiler.removeBufferedProfilerCallback(physx.PxBufferedProfilerCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="110">
		\brief remove an event callback.

		\param[in] cb the event callback to remove.

</member>
<member name="M:physx.PxDefaultBufferedProfiler.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="117">
\brief Release the PxDefaultBufferedProfiler.

</member>
<member name="M:physx.PxDefaultBufferedProfilerCreate(physx.PxFoundation*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxdefaultbufferedprofiler.h" line="127">
	\brief Create default PxDefaultBufferedProfiler.

	Create a default buffered profiler.

	\param[in] foundation PxFoundation used for PxProfileZoneManager creation.
	\param[in] profileZoneNames Space-separated names of PxProfileZones for which events should be reported to the callback.

	\note Example usage: PxDefaultBufferedProfilerCreate(*gFoundation, "PhysXSDK PxTaskManager");
	\note List of PhysX SDK profile zone names: PhysXSDK, PxTaskManager, PxGpuDispatcher (for CUDA GPU events)

	@see PxDefaultBufferedProfiler physx::PxProfileZoneManager physx::PxProfileZone

</member>
<member name="T:physx.PxBinaryConverter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxbinaryconverter.h" line="41">
\brief Binary converter for serialized streams.

The binary converter class is targeted at converting binary streams from authoring platforms, 
such as windows, osx or linux to any game runtime platform supported by PhysX. Particularly 
it is currently not supported to run the converter on a platforms that has an endian mismatch 
with the platform corresponding to the source binary file and source meta data. 

If you want to use multiple threads for batch conversions, please create one instance
of this class for each thread.

@see PxSerialization.createBinaryConverter

</member>
<member name="M:physx.PxBinaryConverter.release" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxbinaryconverter.h" line="58">
\brief Releases binary converter

</member>
<member name="M:physx.PxBinaryConverter.setReportMode(physx.PxConverterReportMode.Enum)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxbinaryconverter.h" line="63">
	\brief Sets desired report mode.

	\param[in] mode	Report mode

</member>
<member name="M:physx.PxBinaryConverter.setMetaData(physx.PxInputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxInputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxbinaryconverter.h" line="70">
	\brief Setups source and target meta-data streams

	The source meta data provided needs to have the same endianness as the platform the converter is run on.
	The meta data needs to be set before calling the conversion method.

	\param[in] srcMetaData	Source platform's meta-data stream
	\param[in] dstMetaData	Target platform's meta-data stream

	\return True if success

</member>
<member name="M:physx.PxBinaryConverter.convert(physx.PxInputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,physx.PxOutputStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxbinaryconverter.h" line="83">
	\brief Converts binary stream from source platform to target platform

	The converter needs to be configured with source and destination meta data before calling the conversion method. 
	The source meta data needs to correspond to the same platform as the source binary data.

	\param[in] srcStream	Source stream
	\param[in] srcSize		Number of bytes to convert
	\param[in] targetStream	Target stream

	\return True if success

</member>
<member name="T:physx.PxRepXObject" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxsimpletype.h" line="32">
\brief Helper class containing the mapping of id to object, and type name.

</member>
<member name="F:physx.PxRepXObject.typeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxsimpletype.h" line="37">
\brief Identifies the extension meant to handle this object.
@see PxTypeInfo, PX_DEFINE_TYPEINFO, PxRepXSerializer

</member>
<member name="F:physx.PxRepXObject.serializable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxsimpletype.h" line="43">
\brief Pointer to the serializable this was created from

</member>
<member name="F:physx.PxRepXObject.id" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxsimpletype.h" line="48">
\brief Id given to this object at some point

</member>
<member name="T:physx.PxRepXInstantiationArgs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxsimpletype.h" line="61">
	\brief Arguments required to instantiate a serializable object from RepX.

	Extra arguments can be added to the object map under special ids.

	@see PxRepXSerializer::objectToFile, PxRepXSerializer::fileToObject

</member>
<member name="T:physx.PxRepXSerializer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxserializer.h" line="31">
	\brief Serializer interface for RepX (Xml) serialization.

	In order to serialize a class to RepX both a PxSerializer and
	a PxRepXSerializer implementation are needed. 

	A repx Serializer provides the ability to capture a live
	object to a descriptor or static state and the ability to
	write that state out to a file.  Objects allocated
	by the Serializer using the allocator are freed when the
	collection itself is freed.
	SnRepXCoreSerializers.cpp implements a set of Serializers
	for the core PhysX types.

	\note Implementing a PxRepXSerializer is currently not practical without including the internal PhysXExtension header "SnRepXSerializerImpl.h". 

	@see PxSerializer, PX_NEW_REPX_SERIALIZER, PxSerializationRegistry::registerRepXSerializer

</member>
<member name="M:physx.PxRepXSerializer.getTypeName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxserializer.h" line="55">
\brief The type this Serializer is meant to operate on.
@see PxRepXObject::typeName

</member>
<member name="M:physx.PxRepXSerializer.objectToFile(physx.PxRepXObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection*,physx.XmlWriter*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.MemoryBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRepXInstantiationArgs*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxserializer.h" line="61">
\brief Convert from a RepX object to a key-value pair hierarchy

\param[in] inLiveObject The object to convert to the passed in descriptor.
\param[in] inCollection The collection to use to find ids of references of this object.
\param[in] inWriter Interface to write data to.
\param[in] inTempBuffer used to for temporary allocations.
\param[in] inArgs The arguments used in create resources and objects.

</member>
<member name="M:physx.PxRepXSerializer.fileToObject(physx.XmlReader*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.XmlMemoryAllocator*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxRepXInstantiationArgs*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxCollection*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxserializer.h" line="72">
\brief Convert from a descriptor to a live object.  Must be an object of this Serializer type.

\param[in] inReader The inverse of the writer, a key-value pair database.
\param[in] inAllocator An allocator to use for temporary allocations.  These will be freed after instantiation completes.
\param[in] inArgs The arguments used in create resources and objects.
\param[in] inCollection The collection used to find references.

\return The new live object.  It can be an invalid object if the instantiation cannot take place.

</member>
<member name="M:physx.createRepXObject(physx.PxBase!System.Runtime.CompilerServices.IsConst*,System.UInt64!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\extensions\pxrepxserializer.h" line="95">
\brief Inline helper function to create PxRepXObject from a PxBase instance.

</member>
<member name="M:physx.PxInitVehicleSDK(physx.PxPhysics*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxSerializationRegistry*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclesdk.h" line="30">
\brief Initialize the PhysXVehicle library. 

Call this before using any of the vehicle functions.

\param physics The PxPhysics instance.
\param serializationRegistry PxSerializationRegistry instance, if NULL vehicle serialization is not supported.

\note This function must be called after PxFoundation and PxPhysics instances have been created.
\note If a PxSerializationRegistry instance is specified then PhysXVehicle is also dependent on PhysXExtensions.

@see PxCloseVehicleSDK

</member>
<member name="M:physx.PxCloseVehicleSDK(physx.PxSerializationRegistry*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclesdk.h" line="46">
\brief Shut down the PhysXVehicle library. 

Call this function as part of the physx shutdown process.

\param serializationRegistry PxSerializationRegistry instance, if non-NULL must be the same as passed into PxInitVehicleSDK.

\note This function must be called prior to shutdown of PxFoundation and PxPhysics.
\note If the PxSerializationRegistry instance is specified this function must additionally be called prior to shutdown of PhysXExtensions.

@see PxInitVehicleSDK

</member>
<member name="T:physx.PxVehicleTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclesdk.h" line="61">
\brief This number is the maximum number of wheels allowed for a vehicle.

\brief Compiler setting to enable recording of telemetry data

@see PxVehicleUpdateSingleVehicleAndStoreTelemetryData, PxVehicleTelemetryData

@see PxVehicleDrive4W, PxVehicleDriveTank, PxVehicleDriveNW, PxVehicleNoDrive, PxVehicleWheels::getVehicleType

</member>
<member name="T:physx.PxVehicleConcreteType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclesdk.h" line="94">
\brief An enumeration of concrete vehicle classes inheriting from PxBase.
\note This enum can be used to identify a vehicle object stored in a PxCollection.
@see PxBase, PxTypeInfo, PxBase::getConcreteType

</member>
<member name="M:physx.PxVehicleSetBasisVectors(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclesdk.h" line="111">
\brief Set the basis vectors of the vehicle simulation 

Default values PxVec3(0,1,0), PxVec3(0,0,1)

Call this function before using PxVehicleUpdates unless the default values are correct.

</member>
<member name="T:physx.PxVehicleUpdateMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclesdk.h" line="121">
@see PxVehicleSetUpdateMode

</member>
<member name="M:physx.PxVehicleSetUpdateMode(physx.PxVehicleUpdateMode.Enum)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclesdk.h" line="134">
\brief Set the effect of PxVehicleUpdates to be either to modify each vehicle's rigid body actor

with an acceleration to be applied in the next PhysX SDK update or as an immediate velocity modification.

Default behavior is immediate velocity modification.

Call this function before using PxVehicleUpdates for the first time if the default is not the desired behavior.

@see PxVehicleUpdates

</member>
<member name="F:physx.PxVehicleChassisData.mMOI" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="44">
\brief Moment of inertia of vehicle rigid body actor.

\note Specified in kilograms metres-squared (kg m^2).

</member>
<member name="F:physx.PxVehicleChassisData.mMass" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="51">
\brief Mass of vehicle rigid body actor.

\note Specified in kilograms (kg).

</member>
<member name="F:physx.PxVehicleChassisData.mCMOffset" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="58">
	\brief Center of mass offset of vehicle rigid body actor.

	\note Specified in metres (m).

</member>
<member name="F:physx.PxVehicleEngineData.mTorqueCurve" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="100">
\brief Graph of normalized torque (torque/mPeakTorque) against normalized engine speed ( engineRotationSpeed / mMaxOmega ).

\note The normalized engine speed is the x-axis of the graph, while the normalized torque is the y-axis of the graph.

</member>
<member name="F:physx.PxVehicleEngineData.mMOI" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="107">
\brief Moment of inertia of the engine around the axis of rotation.

\note Specified in kilograms metres-squared (kg m^2)

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleEngineData.mPeakTorque'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleEngineData.mMaxOmega'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleEngineData.mDampingRateFullThrottle'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleEngineData.mDampingRateZeroThrottleClutchEngaged'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleEngineData.mDampingRateZeroThrottleClutchDisengaged'. -->
<member name="M:physx.PxVehicleEngineData.getRecipMOI" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="186">
\brief Return value of mRecipMOI(=1.0f/mMOI) that is automatically set by PxVehicleDriveSimData::setEngineData

</member>
<member name="M:physx.PxVehicleEngineData.getRecipMaxOmega" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="191">
\brief Return value of mRecipMaxOmega( = 1.0f / mMaxOmega ) that is automatically set by PxVehicleDriveSimData::setEngineData

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleEngineData.mRecipMOI'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleEngineData.mRecipMaxOmega'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGearsData.mRatios'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGearsData.mFinalRatio'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGearsData.mNbRatios'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGearsData.mSwitchTime'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleAutoBoxData.mUpRatios'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleAutoBoxData.mDownRatios'. -->
<member name="M:physx.PxVehicleAutoBoxData.setLatency(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="370">
	\brief Set the latency time of the autobox.
	
	\note Latency time is the minimum time that must pass between each gear change that is initiated by the autobox.
	The auto-box will only attempt to initiate another gear change up or down if the simulation time that has passed since the most recent
	automated gear change is greater than the specified latency.
	
	\note Specified in seconds (s).

	@see getLatency

</member>
<member name="M:physx.PxVehicleAutoBoxData.getLatency" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="386">
	\brief Get the latency time of the autobox.
	
	\note Specified in seconds (s).

	@see setLatency

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleDifferential4WData.mFrontRearSplit'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleDifferential4WData.mFrontLeftRightSplit'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleDifferential4WData.mRearLeftRightSplit'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleDifferential4WData.mCentreBias'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleDifferential4WData.mFrontBias'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleDifferential4WData.mRearBias'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleDifferential4WData.mType'. -->
<member name="M:physx.PxVehicleDifferentialNWData.setDrivenWheel(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="533">
\brief Set a specific wheel to be driven or non-driven by the differential.

\note The available drive torque will be split equally between all driven wheels.
Zero torque will be applied to non-driven wheels.
The default state of each wheel is to be uncoupled to the differential.

</member>
<member name="M:physx.PxVehicleDifferentialNWData.getIsDrivenWheel(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="542">
\brief Test if a specific wheel has been configured as a driven or non-driven wheel.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleAckermannGeometryData.mAccuracy'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleAckermannGeometryData.mFrontWidth'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleAckermannGeometryData.mRearWidth'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleAckermannGeometryData.mAxleSeparation'. -->
<member name="T:physx.PxVehicleClutchAccuracyMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="635">
\brief Choose between a potentially more expensive but more accurate solution to the clutch model or a potentially cheaper but less accurate solution.
@see PxVehicleClutchData

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleClutchData.mStrength'. -->
<member name="F:physx.PxVehicleClutchData.mAccuracyMode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="681">
	\brief The engine and wheel rotation speeds that are coupled through the clutch can be updated by choosing
	one of two modes: eESTIMATE and eBEST_POSSIBLE.

	\note If eESTIMATE is chosen the vehicle sdk will update the wheel and engine rotation speeds 
	with estimated values to the implemented clutch model.  

	\note If eBEST_POSSIBLE is chosen the vehicle sdk will compute the best possible 
	solution (within floating point tolerance) to the implemented clutch model. 
	This is the recommended mode.

	\note The clutch model remains the same if either eESTIMATE or eBEST_POSSIBLE is chosen but the accuracy and 
	computational cost of the solution to the model can be tuned as required.

</member>
<member name="F:physx.PxVehicleClutchData.mEstimateIterations" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="697">
	\brief Tune the mathematical accuracy and computational cost of the computed estimate to the wheel and 
	engine rotation speeds if eESTIMATE is chosen.

	\note As mEstimateIterations increases the computational cost of the clutch also increases and the solution 
	approaches the solution that would be computed if eBEST_POSSIBLE was chosen instead.

	\note This has no effect if eBEST_POSSIBLE is chosen as the accuracy mode.

	\note A value of zero is not allowed if eESTIMATE is chosen as the accuracy mode.

</member>
<member name="T:physx.PxVehicleTireLoadFilterData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="724">
\brief Tire load variation can be strongly dependent on the time-step so it is a good idea to filter it 
to give less jerky handling behavior. 

\note The x-axis of the graph is normalized tire load, while the y-axis is the filtered normalized tire load.

\note The normalized load is the force acting downwards on the tire divided by the force experienced by the tire when the car is at rest on the ground.

\note The rest load is approximately the product of the value of gravitational acceleration and PxVehicleSuspensionData::mSprungMass.

\note The minimum possible normalized load is zero.

\note There are two points on the graph: (mMinNormalisedLoad, mMinNormalisedFilteredLoad) and (mMaxNormalisedLoad, mMaxFilteredNormalisedLoad).

\note Normalized loads less than mMinNormalisedLoad have filtered normalized load = mMinNormalisedFilteredLoad.

\note Normalized loads greater than mMaxNormalisedLoad have filtered normalized load = mMaxFilteredNormalisedLoad.

\note Normalized loads in-between are linearly interpolated between mMinNormalisedFilteredLoad and mMaxFilteredNormalisedLoad.

\note The tire load applied as input to the tire force computation is the filtered normalized load multiplied by the rest load.

</member>
<member name="F:physx.PxVehicleTireLoadFilterData.mMinNormalisedLoad" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="761">
\brief Graph point (mMinNormalisedLoad,mMinFilteredNormalisedLoad)

</member>
<member name="F:physx.PxVehicleTireLoadFilterData.mMinFilteredNormalisedLoad" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="766">
\brief Graph point (mMinNormalisedLoad,mMinFilteredNormalisedLoad)

</member>
<member name="F:physx.PxVehicleTireLoadFilterData.mMaxNormalisedLoad" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="771">
\brief Graph point (mMaxNormalisedLoad,mMaxFilteredNormalisedLoad)

</member>
<member name="F:physx.PxVehicleTireLoadFilterData.mMaxFilteredNormalisedLoad" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="776">
\brief Graph point (mMaxNormalisedLoad,mMaxFilteredNormalisedLoad)

</member>
<member name="F:physx.PxVehicleTireLoadFilterData.mDenominator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="785">
\brief Not necessary to set this value.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mRadius'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mWidth'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mMass'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mMOI'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mDampingRate'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mMaxBrakeTorque'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mMaxHandBrakeTorque'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mMaxSteer'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mToeAngle'. -->
<member name="M:physx.PxVehicleWheelData.getRecipRadius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="904">
\brief Return value equal to 1.0f/mRadius

@see PxVehicleWheelsSimData::setWheelData

</member>
<member name="M:physx.PxVehicleWheelData.getRecipMOI" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="911">
\brief Return value equal to 1.0f/mRecipMOI

@see PxVehicleWheelsSimData::setWheelData

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mRecipRadius'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelData.mRecipMOI'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mSpringStrength'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mSpringDamperRate'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mMaxCompression'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mMaxDroop'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mSprungMass'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mCamberAtRest'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mCamberAtMaxCompression'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleSuspensionData.mCamberAtMaxDroop'. -->
<!-- Discarding badly formed XML document comment for member 'M:physx.PxVehicleSuspensionData.getRecipMaxCompression'. -->
<!-- Discarding badly formed XML document comment for member 'M:physx.PxVehicleSuspensionData.getRecipMaxDroop'. -->
<member name="M:physx.PxVehicleSuspensionData.setMassAndPreserveNaturalFrequency(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1085">
\brief Set a new sprung mass for the suspension and modify the spring strength so that the natural frequency
of the spring is preserved.
\param[in] newSprungMass is the new mass that the suspension spring will support.

</member>
<member name="F:physx.PxVehicleSuspensionData.mRecipMaxCompression" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1101">
\brief Cached value of 1.0f/mMaxCompression

\note Not necessary to set this value because it is set by PxVehicleWheelsSimData::setSuspensionData

</member>
<member name="F:physx.PxVehicleSuspensionData.mRecipMaxDroop" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1108">
\brief Cached value of 1.0f/mMaxDroop

\note Not necessary to set this value because it is set by PxVehicleWheelsSimData::setSuspensionData

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleTireData.mLatStiffX'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleTireData.mLatStiffY'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleTireData.mLongitudinalStiffnessPerUnitGravity'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleTireData.mCamberStiffnessPerUnitGravity'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleTireData.mFrictionVsSlipGraph'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleTireData.mType'. -->
<member name="M:physx.PxVehicleTireData.getRecipLongitudinalStiffnessPerUnitGravity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1243">
\brief Return Cached value of 1.0/mLongitudinalStiffnessPerUnitGravity

@see PxVehicleWheelsSimData::setTireData

</member>
<member name="M:physx.PxVehicleTireData.getFrictionVsSlipGraphRecipx1Minusx0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1250">
\brief Return Cached value of 1.0f/(mFrictionVsSlipGraph[1][0]-mFrictionVsSlipGraph[0][0])

@see PxVehicleWheelsSimData::setTireData

</member>
<member name="M:physx.PxVehicleTireData.getFrictionVsSlipGraphRecipx2Minusx1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1257">
\brief Return Cached value of 1.0f/(mFrictionVsSlipGraph[2][0]-mFrictionVsSlipGraph[1][0])

@see PxVehicleWheelsSimData::setTireData

</member>
<member name="F:physx.PxVehicleTireData.mRecipLongitudinalStiffnessPerUnitGravity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1266">
	\brief Cached value of 1.0/mLongitudinalStiffnessPerUnitGravity.
	
	\note Not necessary to set this value because it is set by PxVehicleWheelsSimData::setTireData

	@see PxVehicleWheelsSimData::setTireData

</member>
<member name="F:physx.PxVehicleTireData.mFrictionVsSlipGraphRecipx1Minusx0" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1275">
\brief Cached value of 1.0f/(mFrictionVsSlipGraph[1][0]-mFrictionVsSlipGraph[0][0])

\note Not necessary to set this value because it is set by PxVehicleWheelsSimData::setTireData

@see PxVehicleWheelsSimData::setTireData

</member>
<member name="F:physx.PxVehicleTireData.mFrictionVsSlipGraphRecipx2Minusx1" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclecomponents.h" line="1284">
	\brief Cached value of 1.0f/(mFrictionVsSlipGraph[2][0]-mFrictionVsSlipGraph[1][0])
	
	\note Not necessary to set this value because it is set by PxVehicleWheelsSimData::setTireData

	@see PxVehicleWheelsSimData::setTireData

</member>
<member name="D:physx.PxVehicleComputeTireForce" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleshaders.h" line="26">
\brief Prototype of shader function that is used to compute wheel torque and tire forces.
\param[in]  shaderData is the shader data for the tire being processed.  The shader data describes the tire data in the format required by the tire model that is implemented by the shader function.
\param[in]  tireFriction is the value of friction for the contact between the tire and the ground.
\param[in]  longSlip is the value of longitudinal slip experienced by the tire.
\param[in]  latSlip is the value of lateral slip experienced by the tire.
\param[in]  camber is the camber angle of the tire in radians.
\param[in]  wheelOmega is the rotational speed of the wheel.
\param[in]  wheelRadius is the distance from the tire surface to the center of the wheel.
\param[in]  recipWheelRadius is the reciprocal of wheelRadius.
\param[in]  restTireLoad is the load force experienced by the tire when the vehicle is at rest.
\param[in]  normalisedTireLoad is a pre-computed value equal to the load force on the tire divided by restTireLoad.
\param[in]  tireLoad is the load force currently experienced by the tire (= restTireLoad*normalisedTireLoad)
\param[in]  gravity is the magnitude of gravitational acceleration.
\param[in]  recipGravity is the reciprocal of the magnitude of gravitational acceleration.
\param[out] wheelTorque is the torque that is to be applied to the wheel around the wheel's axle.
\param[out] tireLongForceMag is the magnitude of the longitudinal tire force to be applied to the vehicle's rigid body.
\param[out] tireLatForceMag is the magnitude of the lateral tire force to be applied to the vehicle's rigid body.
\param[out] tireAlignMoment is the aligning moment of the tire that is to be applied to the vehicle's rigid body (not currently used).
@see PxVehicleWheelsDynData::setTireForceShaderFunction,  PxVehicleWheelsDynData::setTireForceShaderData

</member>
<member name="T:physx.PxVehicleWheelsSimData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="39">
\brief Data structure describing configuration data of a vehicle with up to 20 wheels.

</member>
<member name="M:physx.PxVehicleWheelsSimData.allocate(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="59">
\brief Allocate a PxVehicleWheelsSimData instance for with nbWheels.
@see free

</member>
<member name="M:physx.PxVehicleWheelsSimData.setChassisMass(System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="65">
	\brief Setup with mass information that can be applied to the default values of the suspensions, wheels, and tires
	set in their respective constructors.

	\param chassisMass is the mass of the chassis.

	\note This function assumes that the suspensions equally share the load of the chassis mass.  It also
	assumes that the suspension will have a particular natural frequency and damping ratio that is typical
	of a standard car.  If either of these assumptions is broken then each suspension will need to 
	be individually configured with custom strength, damping rate, and sprung mass.

	@see allocate

</member>
<member name="M:physx.PxVehicleWheelsSimData.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="80">
\brief Free a PxVehicleWheelsSimData instance 
@see allocate

</member>
<member name="M:physx.PxVehicleWheelsSimData.op_Assign(physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="86">
\brief Copy wheel simulation data.
\note The number of wheels on both instances of PxVehicleWheelsSimData must match.

</member>
<member name="M:physx.PxVehicleWheelsSimData.copy(physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="92">
\brief Copy the data of a single wheel unit (wheel, suspension, tire) from srcWheel of src to trgWheel.
\param[in] src is the data to be copied.
\param[in] srcWheel is the wheel whose data will be copied from src.
\param[in] trgWheel is the wheel that will be assigned the copied data.

</member>
<member name="M:physx.PxVehicleWheelsSimData.getNbWheels" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="100">
\brief Return the number of wheels 
@see allocate

</member>
<member name="M:physx.PxVehicleWheelsSimData.getSuspensionData(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="106">
\brief Return the suspension data of the idth wheel

</member>
<member name="M:physx.PxVehicleWheelsSimData.getWheelData(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="111">
\brief Return the wheel data of the idth wheel

</member>
<member name="M:physx.PxVehicleWheelsSimData.getTireData(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="116">
\brief Return the tire data of the idth wheel

</member>
<member name="M:physx.PxVehicleWheelsSimData.getSuspTravelDirection(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="121">
\brief Return the direction of travel of the suspension of the idth wheel

</member>
<member name="M:physx.PxVehicleWheelsSimData.getSuspForceAppPointOffset(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="126">
\brief Return the application point of the suspension force of the suspension of the idth wheel as an offset from the rigid body center of mass.
\note Specified relative to the center of mass of the rigid body

</member>
<member name="M:physx.PxVehicleWheelsSimData.getTireForceAppPointOffset(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="132">
\brief Return the application point of the tire force of the tire of the idth wheel as an offset from the rigid body center of mass.
\note Specified relative to the centre of mass of the rigid body

</member>
<member name="M:physx.PxVehicleWheelsSimData.getWheelCentreOffset(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="138">
\brief Return the offset from the rigid body centre of mass to the centre of the idth wheel.

</member>
<member name="M:physx.PxVehicleWheelsSimData.getWheelShapeMapping(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="143">
	\brief Return the wheel mapping for the ith wheel.  
	
	\note The return value is the element in the array of 
	shapes of the vehicle's PxRigidDynamic that corresponds to the ith wheel.  A return value of -1 means
	that the wheel is not mapped to a PxShape.

	@see PxRigidActor.getShapes

</member>
<member name="M:physx.PxVehicleWheelsSimData.getSceneQueryFilterData(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="154">
\brief Return the scene query filter data used by the specified suspension line

</member>
<member name="M:physx.PxVehicleWheelsSimData.getTireLoadFilterData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="159">
\brief Return the data that describes the filtering of the tire load to produce smoother handling at large time-steps.

</member>
<member name="M:physx.PxVehicleWheelsSimData.setSuspensionData(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleSuspensionData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="167">
\brief Set the suspension data of the idth wheel
\param[in] id is the wheel index.
\param[in] susp is the suspension data to be applied.

</member>
<member name="M:physx.PxVehicleWheelsSimData.setWheelData(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleWheelData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="174">
\brief Set the wheel data of the idth wheel
\param[in] id is the wheel index.
\param[in] wheel is the wheel data to be applied.

</member>
<member name="M:physx.PxVehicleWheelsSimData.setTireData(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleTireData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="181">
\brief Set the tire data of the idth wheel
\param[in] id is the wheel index.
\param[in] tire is the tire data to be applied.

</member>
<member name="M:physx.PxVehicleWheelsSimData.setSuspTravelDirection(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="188">
\brief Set the direction of travel of the suspension of the idth wheel
\param[in] id is the wheel index
\param[in] dir is the suspension travel direction to be applied.

</member>
<member name="M:physx.PxVehicleWheelsSimData.setSuspForceAppPointOffset(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="195">
\brief Set the application point of the suspension force of the suspension of the idth wheel.
\param[in] id is the wheel index
\param[in] offset is the offset from the rigid body center of mass to the application point of the suspension force.
\note Specified relative to the centre of mass of the rigid body

</member>
<member name="M:physx.PxVehicleWheelsSimData.setTireForceAppPointOffset(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="203">
\brief Set the application point of the tire force of the tire of the idth wheel.
\param[in] id is the wheel index
\param[in] offset is the offset from the rigid body center of mass to the application point of the tire force.
\note Specified relative to the centre of mass of the rigid body

</member>
<member name="M:physx.PxVehicleWheelsSimData.setWheelCentreOffset(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="211">
\brief Set the offset from the rigid body centre of mass to the centre of the idth wheel.
\param[in] id is the wheel index
\param[in] offset is the offset from the rigid body center of mass to the center of the wheel at rest.
\note Specified relative to the centre of mass of the rigid body

</member>
<member name="M:physx.PxVehicleWheelsSimData.setWheelShapeMapping(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="219">
	\brief Set mapping between wheel id and position of corresponding wheel shape in the list of actor shapes.
	
	\note This mapping is used to pose the correct wheel shapes with the latest wheel rotation angle, steer angle, and suspension travel
	while allowing arbitrary ordering of the wheel shapes in the actor's list of shapes.
	
	\note Use setWheelShapeMapping(i,-1) to register that there is no wheel shape corresponding to the ith wheel
	
	\note Set setWheelShapeMapping(i,k) to register that the ith wheel corresponds to the kth shape in the actor's list of shapes.
	
	\note The default values correspond to setWheelShapeMapping(i,i) for all wheels.
	
	\note Calling this function will also pose the relevant PxShape at the rest position of the wheel.

	\param wheelId is the wheel index

	\param shapeId is the shape index.
	
	@see PxVehicleUpdates, PxVehicleDrive4W::setup, PxVehicleDriveTank::setup, PxVehicleNoDrive::setup, setSceneQueryFilterData, PxRigidActor::getShapes

</member>
<member name="M:physx.PxVehicleWheelsSimData.setSceneQueryFilterData(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="241">
\brief Set the scene query filter data that will be used for raycasts along the travel
direction of the specified suspension. The default value is PxFilterData(0,0,0,0)
\param suspId is the wheel index
\param sqFilterData is the raycast filter data for the suspension raycast.
@see setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleWheelsSimData.setTireLoadFilterData(physx.PxVehicleTireLoadFilterData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="250">
\brief Set the data that describes the filtering of the tire load to produce smoother handling at large timesteps.
\param tireLoadFilter is the smoothing function data.

</member>
<member name="M:physx.PxVehicleWheelsSimData.disableWheel(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="256">
	\brief Disable a wheel so that zero suspension forces and zero tire forces are applied to the rigid body from this wheel.

	\note If the vehicle has a differential (PxVehicleNW/PxVehicle4W) then the differential (PxVehicleDifferentialNWData/PxVehicleDifferential4WData)
	needs to be configured so that no drive torque is delivered to the disabled wheel.
	
	\note If the vehicle is of type PxVehicleNoDrive then zero drive torque must be applied to the disabled wheel.
	
	\note For tanks (PxVehicleDriveTank) any drive torque that could be delivered to the wheel through the tank differential will be 
	re-directed to the remaining enabled wheels.

	@see enableWheel
	@see PxVehicleDifferentialNWData::setDrivenWheel
	@see PxVehicleDifferential4WData::mFrontLeftRightSplit, PxVehicleDifferential4WData::mRearLeftRightSplit, PxVehicleDifferential4WData::mType
	@see PxVehicleNoDrive::setDriveTorque
	@see PxVehicle4WEnable3WTadpoleMode, PxVehicle4WEnable3WDeltaMode

	\note If a PxShape is associated with the disabled wheel then the association must be broken by calling setWheelShapeMapping(wheelId, -1). 
	@see setWheelShapeMapping

	\note A wheel that is disabled must also simultaneously be given zero wheel rotation speed.
	@see PxVehicleWheelsDynData::setWheelRotationSpeed

	\note Care must be taken with the sprung mass supported by the remaining enabled wheels.  Depending on the desired effect, the mass of the rigid body 
	might need to be distributed among the remaining enabled wheels and suspensions.

	\param[in] wheel is the wheel index.

</member>
<member name="M:physx.PxVehicleWheelsSimData.enableWheel(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="286">
\brief Enable a wheel so that suspension forces and tire forces are applied to the rigid body.
All wheels are enabled by default and remain enabled until they are disabled.
\param[in] wheel is the wheel index.
@see disableWheel

</member>
<member name="M:physx.PxVehicleWheelsSimData.getIsWheelDisabled(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="294">
\brief Test if a wheel has been disabled.
\param[in] wheel is the wheel index.

</member>
<member name="M:physx.PxVehicleWheelsSimData.setSubStepCount(System.Single!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="300">
	\brief Set the number of vehicle sub-steps that will be performed when the vehicle's longitudinal 
	speed is below and above a threshold longitudinal speed.
	
	\note More sub-steps provides better stability but with greater computational cost.
	
	\note Typically, vehicles require more sub-steps at very low forward speeds.
	
	\note The threshold longitudinal speed has a default value of 5 metres per second.  If metres are not the chosen scale
	then setSubStepCount will need to be called with an equivalent or modified value in the adopted scale.
	
	\note The sub-step count below the threshold longitudinal speed has a default of 3.
	
	\note The sub-step count above the threshold longitudinal speed has a default of 1.
	
	\note Each sub-step has time advancement equal to the time-step passed to PxVhicleUpdates divided by the number of required sub-steps.
	
	\note The contact planes of the most recent suspension line raycast are reused across all sub-steps.
	
	\note Each sub-step computes tire and suspension forces and then advances a velocity, angular velocity and transform.
	
	\note At the end of all sub-steps the vehicle actor is given the velocity and angular velocity that would move the actor from its start transform prior
	to the first sub-step to the transform computed at the end of the last substep, assuming it doesn't collide with anything along the way in the next PhysX SDK update.
	
	\note The global pose of the actor is left unchanged throughout the sub-steps.

	\param[in] thresholdLongitudinalSpeed is a threshold speed that is used to categorize vehicle speed as low speed or high speed.
	\param[in] lowForwardSpeedSubStepCount is the number of sub-steps performed in PxVehicleUpates for vehicles that have longitudinal speed lower than thresholdLongitudinalSpeed.
	\param[in] highForwardSpeedSubStepCount is the number of sub-steps performed in PxVehicleUpdates for vehicles that have longitudinal speed graeter than thresholdLongitudinalSpeed.

</member>
<member name="M:physx.PxVehicleWheelsSimData.setMinLongSlipDenominator(System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="332">
	\brief Set the minimum denominator used in the longitudinal slip calculation.

	\note The longitudinal slip has a theoretical value of (w*r - vz)/|vz|, where w is the angular speed of the wheel; r is the radius of the wheel; 
	and vz is the component of rigid body velocity (computed at the wheel base) that lies along the longitudinal wheel direction. The term |vz|
	normalizes the slip, while preserving the sign of the longitudinal tire slip.   The difficulty here is that when |vz| approaches zero the 
	longitudinal slip approaches infinity. A solution to this problem is to replace the denominator (|vz|) with a value that never falls below a chosen threshold. 
	The longitudinal slip is then calculated with (w*r - vz)/PxMax(|vz|, minLongSlipDenominator).

	\note The default value is 4 metres per second.  If metres are not the chosen scale	then setSubStepCount will need to be called with an equivalent or 
	modified value in the adopted scale.

	\note Adjust this value upwards if a vehicle has difficulty coming to rest.

	\note Decreasing the timestep (or increasing the number of sub-steps at low longitudinal speed with setSubStepCount) should allow stable stable 
	behavior with smaller values of minLongSlipDenominator.

</member>
<member name="F:physx.PxVehicleWheelsSimData.mNormalisedLoadFilter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="353">
\brief Graph to filter normalised load
@see setTireLoadFilterData, getTireLoadFilterData

</member>
<member name="F:physx.PxVehicleWheelsSimData.mWheels4SimData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="359">
\brief Wheels data organised in blocks of 4 wheels.

</member>
<member name="F:physx.PxVehicleWheelsSimData.mNbWheels4" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="364">
\brief Number of blocks of 4 wheels.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelsSimData.mNbActiveWheels'. -->
<member name="F:physx.PxVehicleWheelsSimData.mActiveWheelsBitmapBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="374">
\brief Which of the mNbActiveWheels are active or disabled?
The default is that all mNbActiveWheels wheels are active.

</member>
<member name="F:physx.PxVehicleWheelsSimData.mThresholdLongitudinalSpeed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="380">
\brief Threshold longitudinal speed used to decide whether to use 
mLowForwardSpeedSubStepCount or mHighForwardSpeedSubStepCount as the 
number of sub-steps that will be peformed.

</member>
<member name="F:physx.PxVehicleWheelsSimData.mLowForwardSpeedSubStepCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="387">
\brief Number of sub-steps that will be performed if the longitudinal speed
of the vehicle is smaller than mThresholdLongitudinalSpeed.

</member>
<member name="F:physx.PxVehicleWheelsSimData.mHighForwardSpeedSubStepCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="393">
\brief Number of sub-steps that will be performed if the longitudinal speed
of the vehicle is greater than or equal to mThresholdLongitudinalSpeed.

</member>
<member name="F:physx.PxVehicleWheelsSimData.mMinLongSlipDenominator" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="399">
\brief Minimum long slip denominator

</member>
<member name="M:physx.PxVehicleWheelsSimData.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="409">
\brief Test if wheel simulation data has been setup with legal values.

</member>
<member name="T:physx.PxVehicleWheelsDynData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="445">
\brief Data structure with instanced dynamics data for wheels

</member>
<member name="M:physx.PxVehicleWheelsDynData.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="466">
\brief Set all wheels to their rest state.
@see setup

</member>
<member name="M:physx.PxVehicleWheelsDynData.setTireForceShaderFunction(=FUNC:System.Void(System.Void!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst," decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="472">
\brief Set the tire force shader function
\param[in] tireForceShaderFn is the shader function that will be used to compute tire forces.

</member>
<member name="M:physx.PxVehicleWheelsDynData.setTireForceShaderData(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Void!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="478">
\brief Set the tire force shader data for a specific tire
\param[in] tireId is the wheel index
\param[in] tireForceShaderData is the data describing the tire.

</member>
<member name="M:physx.PxVehicleWheelsDynData.getTireForceShaderData(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="485">
\brief Get the tire force shader data for a specific tire

</member>
<member name="M:physx.PxVehicleWheelsDynData.setWheelRotationSpeed(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="490">
\brief Set the wheel rotation speed (radians per second) about the rolling axis for the specified wheel.
\param[in] wheelIdx is the wheel index
\param[in] speed is the rotation speed to be applied to the wheel.

</member>
<member name="M:physx.PxVehicleWheelsDynData.getWheelRotationSpeed(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="497">
\brief Return the rotation speed about the rolling axis of a specified wheel .

</member>
<member name="M:physx.PxVehicleWheelsDynData.setWheelRotationAngle(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="502">
\brief Set the wheel rotation angle (radians) about the rolling axis of the specified wheel.
\param[in] wheelIdx is the wheel index
\param[in] angle is the rotation angle to be applied to the wheel.

</member>
<member name="M:physx.PxVehicleWheelsDynData.getWheelRotationAngle(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="509">
\brief Return the rotation angle about the rolling axis for the the specified wheel.

</member>
<member name="M:physx.PxVehicleWheelsDynData.setUserData(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="514">
\brief Set the user data pointer for the specified wheel
It has a default value of NULL.
\param[in] tireIdx is the wheel index
\param[in] userData is the data to be associated with the wheel.

</member>
<member name="M:physx.PxVehicleWheelsDynData.getUserData(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="522">
\brief Get the user data pointer that was set for the specified wheel

</member>
<member name="M:physx.PxVehicleWheelsDynData.copy(physx.PxVehicleWheelsDynData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="527">
\brief Copy the dynamics data of a single wheel unit (wheel, suspension, tire) from srcWheel of src to trgWheel.
\param[in] src is the data to be copied.
\param[in] srcWheel is the wheel whose data will be copied from src.
\param[in] trgWheel is the wheel that will be assigned the copied data.

</member>
<member name="F:physx.PxVehicleWheelsDynData.mWheels4DynData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="537">
\brief Dynamics data arranged in blocks of 4 wheels.

</member>
<member name="M:physx.PxVehicleWheelsDynData.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="542">
\brief Test if wheel dynamics data have legal values.

</member>
<member name="F:physx.PxVehicleWheelsDynData.mTireForceCalculators" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="547">
\brief Shader data and function for tire force calculations.

</member>
<member name="F:physx.PxVehicleWheelsDynData.mUserDatas" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="552">
\brief A userData pointer can be stored for each wheel.
@see setUserData, getUserData

</member>
<member name="F:physx.PxVehicleWheelsDynData.mNbWheels4" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="558">
\brief Number of blocks of 4 wheels.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleWheelsDynData.mNbActiveWheels'. -->
<member name="T:physx.PxVehicleWheels" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="581">
\brief Data structure with instanced dynamics data and configuration data of a vehicle with just wheels
@see PxVehicleDrive, PxVehicleDrive4W, PxVehicleDriveTank

</member>
<member name="M:physx.PxVehicleWheels.getVehicleType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="598">
\brief Return the type of vehicle 
@see PxVehicleTypes

</member>
<member name="M:physx.PxVehicleWheels.getRigidDynamicActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="604">
\brief Get non-const ptr to PxRigidDynamic instance that is the vehicle's physx representation

</member>
<member name="M:physx.PxVehicleWheels.getRigidDynamicActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="609">
\brief Get const ptr to PxRigidDynamic instance that is the vehicle's physx representation

</member>
<member name="M:physx.PxVehicleWheels.computeForwardSpeed" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="614">
\brief Compute the rigid body velocity component along the forward vector of the rigid body transform.
@see PxVehicleSetBasisVectors

</member>
<member name="M:physx.PxVehicleWheels.computeSidewaysSpeed" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="620">
\brief Compute the rigid body velocity component along the right vector of the rigid body transform.
@see PxVehicleSetBasisVectors

</member>
<member name="F:physx.PxVehicleWheels.mWheelsSimData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="626">
\brief Data describing the setup of all the wheels/suspensions/tires.

</member>
<member name="F:physx.PxVehicleWheels.mWheelsDynData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="631">
\brief Data describing the dynamic state of all wheels/suspension/tires.

</member>
<member name="M:physx.PxVehicleWheels.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="638">
\brief Set all wheels to their rest state

</member>
<member name="M:physx.PxVehicleWheels.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="643">
\brief Test that all configuration and instanced dynamics data is valid.

</member>
<member name="M:physx.PxVehicleWheels.computeByteSize(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="648">
@see PxVehicleDrive4W::allocate, PxVehicleDriveTank::allocate

</member>
<member name="M:physx.PxVehicleWheels.patchupPointers(physx.PxVehicleWheels*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="653">
@see PxVehicleDrive4W::allocate, PxVehicleDriveTank::allocate

</member>
<member name="M:physx.PxVehicleWheels.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="658">
\brief Deallocate a PxVehicleWheels instance.
@see PxVehicleDrive4W::free, PxVehicleDriveTank::free

</member>
<member name="M:physx.PxVehicleWheels.setup(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="664">
@see PxVehicleDrive4W::setup, PxVehicleDriveTank::setup

</member>
<member name="F:physx.PxVehicleWheels.mActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="672">
\brief The rigid body actor that represents the vehicle in the PhysX SDK.

</member>
<member name="F:physx.PxVehicleWheels.mNbNonDrivenWheels" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="679">
\brief Count the number of constraint connectors that have hit their callback when deleting a vehicle.
Can only delete the vehicle's memory when all constraint connectors have hit their callback.

</member>
<member name="F:physx.PxVehicleWheels.mType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclewheels.h" line="689">
\brief Vehicle type (eVehicleDriveTypes)

</member>
<member name="T:physx.PxVehicleDriveSimData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="36">
\brief Data structure describing non-wheel configuration data of a vehicle that has engine, gears, clutch, and auto-box.
@see PxVehicleWheelsSimData for wheels configuration data.

</member>
<member name="M:physx.PxVehicleDriveSimData.getEngineData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="52">
\brief Return the engine data

</member>
<member name="M:physx.PxVehicleDriveSimData.setEngineData(physx.PxVehicleEngineData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="60">
\brief Set the engine data
\param[in] engine - the data stored in engine is copied to the vehicle's engine.

</member>
<member name="M:physx.PxVehicleDriveSimData.getGearsData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="66">
\brief Return the gears data

</member>
<member name="M:physx.PxVehicleDriveSimData.setGearsData(physx.PxVehicleGearsData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="74">
\brief Set the gears data
\param[in] gears - the data stored in gears is copied to the vehicle's gears.

</member>
<member name="M:physx.PxVehicleDriveSimData.getClutchData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="80">
\brief Return the clutch data

</member>
<member name="M:physx.PxVehicleDriveSimData.setClutchData(physx.PxVehicleClutchData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="88">
\brief Set the clutch data
\param[in] clutch - the data stored in clutch is copied to the vehicle's clutch.

</member>
<member name="M:physx.PxVehicleDriveSimData.getAutoBoxData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="94">
\brief Return the autobox data

</member>
<member name="M:physx.PxVehicleDriveSimData.setAutoBoxData(physx.PxVehicleAutoBoxData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="102">
\brief Set the autobox data
\param[in] autobox - the data stored in autobox is copied to the vehicle's autobox.

</member>
<member name="M:physx.PxVehicleDriveSimData.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="133">
\brief Test that a PxVehicleDriveSimData instance has been configured with legal data.
Call only after setting all components with setEngineData,setGearsData,setClutchData,setAutoBoxData
@see PxVehicleDrive4W::setup, PxVehicleDriveTank::setup

</member>
<member name="T:physx.PxVehicleDriveDynData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="151">
\brief Data structure with instanced dynamics data for vehicle with engine, clutch, gears, autobox
@see PxVehicleWheelsDynData for wheels dynamics data.

</member>
<member name="M:physx.PxVehicleDriveDynData.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="166">
\brief Set all dynamics data to zero to bring the vehicle to rest.

</member>
<member name="M:physx.PxVehicleDriveDynData.setAnalogInput(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="171">
\brief Set an analog control value to drive the vehicle.
\param[in] type describes the type of analog control being modified
\param[in] analogVal is the new value of the specific analog control.
@see PxVehicleDrive4WControl, PxVehicleDriveNWControl, PxVehicleDriveTankControl

</member>
<member name="M:physx.PxVehicleDriveDynData.getAnalogInput(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="179">
\brief Get the analog control value that has been applied to the vehicle.
\return The value of the specified analog control value.
@see PxVehicleDrive4WControl, PxVehicleDriveNWControl, PxVehicleDriveTankControl

</member>
<member name="M:physx.PxVehicleDriveDynData.setGearUp(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="186">
	\brief Inform the vehicle that the gear-up button has been pressed.

	\param[in] digitalVal is the state of the gear-up button.
	
	\note If digitalVal is true the vehicle will attempt to initiate a gear change at the next call to PxVehicleUpdates.

	\note The value of mGearUpPressed is not reset by PxVehicleUpdates

</member>
<member name="M:physx.PxVehicleDriveDynData.setGearDown(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="200">
	\brief Set that the gear-down button has been pressed.

	\param[in] digitalVal is the state of the gear-down button.

	\note If digitalVal is true the vehicle will attempt to initiate a gear change at the next call to PxVehicleUpdates.

	\note The value of mGearDownPressed is not reset by PxVehicleUpdates

</member>
<member name="M:physx.PxVehicleDriveDynData.getGearUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="214">
\brief Check if the gear-up button has been pressed
\return The state of the gear-up button.

</member>
<member name="M:physx.PxVehicleDriveDynData.getGearDown" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="223">
\brief Check if the gear-down button has been pressed
\return The state of the gear-down button.

</member>
<member name="M:physx.PxVehicleDriveDynData.setUseAutoGears(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="232">
\brief Set the flag that will be used to select auto-gears
If useAutoGears is true the auto-box will be active.
\param[in] useAutoGears is the active state of the auto-box.

</member>
<member name="M:physx.PxVehicleDriveDynData.getUseAutoGears" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="242">
\brief Get the flag status that is used to select auto-gears
\return The active status of the auto-box.

</member>
<member name="M:physx.PxVehicleDriveDynData.toggleAutoGears" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="251">
\brief Toggle the auto-gears flag
If useAutoGears is true the auto-box will be active.

</member>
<member name="M:physx.PxVehicleDriveDynData.setCurrentGear(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="260">
	\brief Set the current gear.

	\param[in] currentGear is the vehicle's gear.

	\note If the target gear is different from the current gear the vehicle will 
	attempt to start a gear change from the current gear that has just been set 
	towards the target gear at the next call to PxVehicleUpdates.

	@see setTargetGear, PxVehicleGearsData

</member>
<member name="M:physx.PxVehicleDriveDynData.getCurrentGear" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="276">
	\brief Get the current gear.

	\return The vehicle's current gear.

	@see getTargetGear, PxVehicleGearsData

</member>
<member name="M:physx.PxVehicleDriveDynData.setTargetGear(System.UInt32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="288">
	\brief Set the target gear.

	\param[in] targetGear is the vehicle's target gear.

	\note If the target gear is different from the current gear the vehicle will 
	attempt to start a gear change towards the target gear at the next call to 
	PxVehicleUpdates.

	@see PxVehicleGearsData

</member>
<member name="M:physx.PxVehicleDriveDynData.getTargetGear" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="304">
	\brief Get the target gear.

	\return The vehicle's target gear.

	@see setTargetGear, PxVehicleGearsData

</member>
<member name="M:physx.PxVehicleDriveDynData.startGearChange(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="316">
	\brief Start a gear change to a target gear. 
	
	\param[in] targetGear is the gear the vehicle will begin a transition towards.

	\note The gear change will begin at the next call to PxVehicleUpadates.

	@see PxVehicleGearsData

</member>
<member name="M:physx.PxVehicleDriveDynData.forceGearChange(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="330">
	\brief Force an immediate gear change to a target gear

	\param[in] targetGear is the gear the vehicle will be given immediately.

	@see PxVehicleGearsData

</member>
<member name="M:physx.PxVehicleDriveDynData.setEngineRotationSpeed(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="343">
	\brief Set the rotation speed of the engine (radians per second)

	\param[in] speed is the rotational speed (radians per second) to apply to the engine.

</member>
<member name="M:physx.PxVehicleDriveDynData.getEngineRotationSpeed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="353">
	\brief Return the rotation speed of the engine (radians per second)

	\return The rotational speed (radians per second) of the engine.

</member>
<member name="M:physx.PxVehicleDriveDynData.getGearSwitchTime" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="363">
	\brief Return the time that has passed since the current gear change was initiated.
	
	\return The time that has passed since the current gear change was initiated. 

	\note If no gear change is in process the gear switch time will be zero.

	@see PxVehicleGearsData.mSwitchTime

</member>
<member name="M:physx.PxVehicleDriveDynData.getAutoBoxSwitchTime" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="377">
	\brief Return the time that has passed since the autobox last initiated a gear change.

	\return  The time that has passed since the autobox last initiated a gear change.

	@see PxVehicleAutoBoxData::setLatency, PxVehicleAutoBoxData::getLatency

</member>
<member name="F:physx.PxVehicleDriveDynData.mControlAnalogVals" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="389">
\brief All dynamic data values are public for fast access.

\brief Analog control values used by vehicle simulation. 
@see setAnalogInput, getAnalogInput, PxVehicleDrive4WControl, PxVehicleDriveNWControl, PxVehicleDriveTankControl

</member>
<member name="F:physx.PxVehicleDriveDynData.mUseAutoGears" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="400">
\brief Auto-gear flag used by vehicle simulation.  Set true to enable the autobox, false to disable the autobox.
@see setUseAutoGears, setUseAutoGears, toggleAutoGears, PxVehicleAutoBoxData

</member>
<member name="F:physx.PxVehicleDriveDynData.mGearUpPressed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="406">
	\brief Gear-up digital control value used by vehicle simulation.  
	
	\note If true a gear change will be initiated towards currentGear+1 (or to first gear if in reverse).

	@see setDigitalInput, getDigitalInput

</member>
<member name="F:physx.PxVehicleDriveDynData.mGearDownPressed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="415">
	\brief Gear-down digital control value used by vehicle simulation.  
	
	\note If true a gear change will be initiated towards currentGear-1 (or to reverse if in first).

	@see setDigitalInput, getDigitalInput

</member>
<member name="F:physx.PxVehicleDriveDynData.mCurrentGear" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="424">
\brief Current gear 
@see startGearChange, forceGearChange, getCurrentGear, PxVehicleGearsData

</member>
<member name="F:physx.PxVehicleDriveDynData.mTargetGear" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="430">
\brief Target gear (different from current gear if a gear change is underway) 
@see startGearChange, forceGearChange, getTargetGear, PxVehicleGearsData

</member>
<member name="F:physx.PxVehicleDriveDynData.mEnginespeed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="436">
\brief Rotation speed of engine
@see setToRestState, getEngineRotationSpeed

</member>
<member name="F:physx.PxVehicleDriveDynData.mGearSwitchTime" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="442">
\brief Reported time that has passed since gear change started.
@see setToRestState, startGearChange, PxVehicleGearsData::mSwitchTime

</member>
<member name="F:physx.PxVehicleDriveDynData.mAutoBoxSwitchTime" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="448">
\brief Reported time that has passed since last autobox gearup/geardown decision.
@see setToRestState, PxVehicleAutoBoxData::setLatency

</member>
<member name="M:physx.PxVehicleDriveDynData.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="457">
\brief Test that a PxVehicleDriveDynData instance has legal values.
@see setToRestState

</member>
<member name="T:physx.PxVehicleDrive" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="476">
\brief A complete vehicle with instance dynamics data and configuration data for wheels and engine,clutch,gears,autobox.
@see PxVehicleDrive4W, PxVehicleDriveTank

</member>
<member name="F:physx.PxVehicleDrive.mDriveDynData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="492">
\brief Dynamics data of vehicle instance.
@see setup

</member>
<member name="M:physx.PxVehicleDrive.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="500">
\brief Test that all instanced dynamics data and configuration data have legal values.

</member>
<member name="M:physx.PxVehicleDrive.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="505">
\brief Set vehicle to rest.

</member>
<member name="M:physx.PxVehicleDrive.computeByteSize(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="510">
@see PxVehicleDrive4W::allocate, PxVehicleDriveTank::allocate

</member>
<member name="M:physx.PxVehicleDrive.patchupPointers(physx.PxVehicleDrive*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="515">
@see PxVehicleDrive4W::allocate, PxVehicleDriveTank::allocate

</member>
<member name="M:physx.PxVehicleDrive.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="520">
\brief Deallocate a PxVehicle4WDrive instance.
@see PxVehicleDrive4W::free, PxVehicleDriveTank::free

</member>
<member name="M:physx.PxVehicleDrive.setup(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive.h" line="526">
@see PxVehicleDrive4W::setup, PxVehicleDriveTank::setup

</member>
<member name="T:physx.PxVehicleDriveSimData4W" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="38">
\brief Data structure describing the drive model components of a vehicle with up to 4 driven wheels and up to 16 un-driven wheels.
The drive model incorporates engine, clutch, gears, autobox, differential, and Ackermann steer correction.
@see PxVehicleDriveSimData

</member>
<member name="M:physx.PxVehicleDriveSimData4W.getDiffData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="60">
\brief Return the data describing the differential.
@see PxVehicleDifferential4WData

</member>
<member name="M:physx.PxVehicleDriveSimData4W.getAckermannGeometryData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="69">
\brief Return the data describing the Ackermann steer-correction.
@see PxVehicleAckermannGeometryData

</member>
<member name="M:physx.PxVehicleDriveSimData4W.setDiffData(physx.PxVehicleDifferential4WData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="78">
\brief Set the data describing the differential.
@see PxVehicleDifferential4WData

</member>
<member name="M:physx.PxVehicleDriveSimData4W.setAckermannGeometryData(physx.PxVehicleAckermannGeometryData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="84">
\brief Set the data describing the Ackermann steer-correction.
@see PxVehicleAckermannGeometryData

</member>
<member name="F:physx.PxVehicleDriveSimData4W.mDiff" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="92">
\brief Differential simulation data
@see setDiffData, getDiffData

</member>
<member name="F:physx.PxVehicleDriveSimData4W.mAckermannGeometry" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="98">
\brief Data for ackermann steer angle computation.
@see setAckermannGeometryData, getAckermannGeometryData

</member>
<member name="M:physx.PxVehicleDriveSimData4W.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="104">
\brief Test if the 4W-drive simulation data has been setup with legal data.
\brief Call only after setting all components.
@see setEnginedata, setClutchData, setGearsData, setAutoboxData, setDiffData, setAckermannGeometryData 

</member>
<member name="T:physx.PxVehicleDrive4WWheelOrder" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="121">
\brief The ordering of the driven and steered wheels of a PxVehicleDrive4W.

@see PxVehicleWheelsSimData, PxVehicleWheelsDynData

</member>
<member name="T:physx.PxVehicleDrive4WControl" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="138">
\brief The control inputs for a PxVehicleDrive4W.

@see PxVehicleDriveDynData::setAnalogInput, PxVehicleDriveDynData::getAnalogInput

</member>
<member name="T:physx.PxVehicleDrive4W" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="157">
\brief Data structure with instanced dynamics data and configuration data of a vehicle with up to 4 driven wheels and up to 16 non-driven wheels.

</member>
<member name="M:physx.PxVehicleDrive4W.allocate(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="171">
	\brief Allocate a PxVehicleDrive4W instance for a 4WDrive vehicle with nbWheels (= 4 + number of un-driven wheels)

	\param[in] nbWheels is the number of vehicle wheels  (= 4 + number of un-driven wheels)

	\return The instantiated vehicle.

	@see free, setup

</member>
<member name="M:physx.PxVehicleDrive4W.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="182">
\brief Deallocate a PxVehicleDrive4W instance.
@see allocate

</member>
<member name="M:physx.PxVehicleDrive4W.setup(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimData4W!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="188">
\brief Set up a vehicle using simulation data for the wheels and drive model.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the vehicle.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the vehicle in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the vehicle. The vehicle instance takes a copy of this data.
\param[in] driveData describes the properties of the vehicle's drive model (gears/engine/clutch/differential/autobox).  The vehicle instance takes a copy of this data.
\param[in] nbNonDrivenWheels is the number of wheels on the vehicle that cannot be connected to the differential (= numWheels - 4).
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheelsSimData::setWheelShapeMapping.
\note wheelsData must contain data for at least 4 wheels.  Unwanted wheels can be disabled with PxVehicleWheelsSimData::disableWheel after calling setup.
@see allocate, free, setToRestState, PxVehicleWheelsSimData::setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleDrive4W.create(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimData4W!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="204">
\brief Allocate and set up a vehicle using simulation data for the wheels and drive model.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the vehicle.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the vehicle in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the vehicle. The vehicle instance takes a copy of this data.
\param[in] driveData describes the properties of the vehicle's drive model (gears/engine/clutch/differential/autobox).  The vehicle instance takes a copy of this data.
\param[in] nbNonDrivenWheels is the number of wheels on the vehicle that cannot be connected to the differential (= numWheels - 4).
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheelsSimData::setWheelShapeMapping.
\note wheelsData must contain data for at least 4 wheels.  Unwanted wheels can be disabled with PxVehicleWheelsSimData::disableWheel after calling setup.
\return The instantiated vehicle.
@see allocate, free, setToRestState, PxVehicleWheelsSimData::setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleDrive4W.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="221">
\brief Set a vehicle to its rest state.  Aside from the rigid body transform, this will set the vehicle and rigid body 
to the state they were in immediately after setup or create.
\note Calling setToRestState invalidates the cached raycast hit planes under each wheel meaning that suspension line
raycasts need to be performed at least once with PxVehicleSuspensionRaycasts before calling PxVehicleUpdates. 
@see setup, create, PxVehicleSuspensionRaycasts, PxVehicleUpdates

</member>
<member name="F:physx.PxVehicleDrive4W.mDriveSimData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="230">
\brief Simulation data that describes the configuration of the vehicle's drive model.
@see setup, create

</member>
<member name="M:physx.PxVehicleDrive4W.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrive4w.h" line="238">
\brief Test if the instanced dynamics and configuration data has legal values.

</member>
<member name="T:physx.PxVehicleDriveTankWheelOrder" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="38">
\brief The ordering of the wheels of a PxVehicleDriveTank.

@see PxVehicleWheelsSimData, PxVehicleWheelsDynData

</member>
<member name="T:physx.PxVehicleDriveTankControl" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="71">
\brief The control inputs for a PxVehicleDriveTank.

\note The values of eANALOG_INPUT_THRUST_LEFT and eANALOG_INPUT_THRUST_RIGHT determine how much 
of the total available drive torque is diverted to the left and right wheels.  These entries in the 
enumerated list represent the state of the left and right control sticks of a tank. The total available 
drive torque available is controlled by eANALOG_INPUT_ACCEL, which represents the state of the acceleration
pedal and controls how much torque will be applied to the engine.  

\note To accelerate forwards eANALOG_INPUT_ACCEL must be greater than zero so that torque is applied to drive the 
engine, while eANALOG_INPUT_THRUST_LEFT and eANALOG_INPUT_THRUST_RIGHT must also be greater than zero
to divert the available drive torque to the left and wheels. If eANALOG_INPUT_THRUST_LEFT &gt; eANALOG_INPUT_THRUST_RIGHT
the tank will turn to the right.  If eANALOG_INPUT_THRUST_RIGHT &gt; eANALOG_INPUT_THRUST_LEFT
the tank will turn to the left.

@see PxVehicleDriveDynData::setAnalogInput, PxVehicleDriveDynData::getAnalogInput

</member>
<member name="T:physx.PxVehicleDriveTankControlModel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="102">
\brief Two driving models are supported.

\note If eSTANDARD is chosen the left and right wheels are always driven in the same direction.  If the tank is in 
a forward gear the left and right wheels will all be driven forwards, while in reverse gear the left and right wheels
will all be driven backwards. With eSTANDARD the legal range of left and right thrust is (0,1).

\note If eSPECIAL is chosen it is possible to drive the left and right wheels in different directions. 
With eSPECIAL the legal range of left and right thrust is (-1,1).  In forward(reverse) gear negative thrust values drive the wheels 
backwards(forwards), while positive thrust values drives the wheels forwards(backwards).  

\note A sharp left turn can be achieved in eSTANDARD mode by braking with the left wheels and thrusting forward with the 
right wheels. A smaller turning circle can theoretically be achieved in eSPECIAL mode by applying negative thrust to the left wheels and positive
thrust to the right wheels.

\note In both modes the legal ranges of acceleration and left/right brake are all (0,1).

@see PxVehicleDriveTank::setDriveModel

</member>
<member name="T:physx.PxVehicleDriveTank" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="131">
\brief Data structure with instanced dynamics data and configuration data of a tank.

</member>
<member name="M:physx.PxVehicleDriveTank.allocate(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="147">
	\brief Allocate a PxVehicleTankDrive instance for a tank with nbWheels

	\param[in] nbWheels is the number of wheels on the vehicle.

	\note It is assumed that all wheels are driven wheels.

	\return The instantiated vehicle.

	@see free, setup

</member>
<member name="M:physx.PxVehicleDriveTank.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="160">
\brief Deallocate a PxVehicleDriveTank instance.
@see allocate

</member>
<member name="M:physx.PxVehicleDriveTank.setup(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="166">
\brief Set up a tank using simulation data for the wheels and drive model.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the vehicle.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the tank in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the tank. The tank instance takes a copy of this data.
\param[in] driveData describes the properties of the tank's drive model (gears/engine/clutch/autobox).  The tank instance takes a copy of this data.
\param[in] nbDrivenWheels is the number of wheels on the tank.
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheelsSimData::setWheelShapeMapping.
@see allocate, free, setToRestState, PxVehicleWheelsSimData::setWheelShapeMapping
\note nbDrivenWheels must be an even number
\note The wheels must be arranged according to PxVehicleDriveTankWheelOrder; that is, 
the even wheels are on the left side of the tank and the odd wheels are on the right side of the tank. 

</member>
<member name="M:physx.PxVehicleDriveTank.create(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="184">
\brief Allocate and set up a tank using simulation data for the wheels and drive model.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the tank.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the tank in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the tank. The tank instance takes a copy of this data.
\param[in] driveData describes the properties of the tank's drive model (gears/engine/clutch/differential/autobox).  The tank instance takes a copy of this data.
\param[in] nbDrivenWheels is the number of wheels on the tank.
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheelsSimData::setWheelShapeMapping.
\return The instantiated vehicle.
@see allocate, free, setToRestState, PxVehicleWheelsSimData::setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleDriveTank.setDriveModel(physx.PxVehicleDriveTankControlModel.Enum!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="200">
\brief Set the control model used by the tank.
\note eDRIVE_MODEL_STANDARD: turning achieved by braking on one side, accelerating on the other side.
\note eDRIVE_MODEL_SPECIAL: turning achieved by accelerating forwards on one side, accelerating backwards on the other side.
\note The default value is eDRIVE_MODEL_STANDARD

</member>
<member name="M:physx.PxVehicleDriveTank.getDriveModel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="211">
\brief Return the control model used by the tank.

</member>
<member name="M:physx.PxVehicleDriveTank.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="216">
\brief Set a vehicle to its rest state.  Aside from the rigid body transform, this will set the vehicle and rigid body 
to the state they were in immediately after setup or create.
\note Calling setToRestState invalidates the cached raycast hit planes under each wheel meaning that suspension line
raycasts need to be performed at least once with PxVehicleSuspensionRaycasts before calling PxVehicleUpdates. 
@see setup, create, PxVehicleSuspensionRaycasts, PxVehicleUpdates

</member>
<member name="F:physx.PxVehicleDriveTank.mDriveSimData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="225">
\brief Simulation data that models vehicle components
@see setup, create

</member>
<member name="M:physx.PxVehicleDriveTank.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="232">
\brief Test if the instanced dynamics and configuration data has legal values.

</member>
<member name="F:physx.PxVehicleDriveTank.mDriveModel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivetank.h" line="237">
\brief Drive model
@see setDriveModel, getDriveModel, PxVehicleDriveTankControlModel

</member>
<member name="T:physx.PxVehicleDrivableSurfaceType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="28">
\brief Driving surface type. Each PxMaterial is associated with a corresponding PxVehicleDrivableSurfaceType.
@see PxMaterial, PxVehicleDrivableSurfaceToTireFrictionPairs

</member>
<member name="T:physx.PxVehicleDrivableSurfaceToTireFrictionPairs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="41">
\brief Friction for each combination of driving surface type and tire type.
@see PxVehicleDrivableSurfaceType, PxVehicleTireData::mType

</member>
<member name="M:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.allocate(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="56">
	\brief Allocate the memory for a PxVehicleDrivableSurfaceToTireFrictionPairs instance
	that can hold data for combinations of tire type and surface type with up to maxNbTireTypes types of tire and maxNbSurfaceTypes types of surface.
	
	\param[in] maxNbTireTypes is the maximum number of allowed tire types.
	\param[in] maxNbSurfaceTypes is the maximum number of allowed surface types.  Must be less than or equal to eMAX_NB_SURFACE_TYPES
	
	\return a PxVehicleDrivableSurfaceToTireFrictionPairs instance that can be reused later with new type and friction data.

	@see setup

</member>
<member name="M:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.setup(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxMaterial!System.Runtime.CompilerServices.IsConst**,physx.PxVehicleDrivableSurfaceType!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="70">
\brief Set up a PxVehicleDrivableSurfaceToTireFrictionPairs instance for combinations of nbTireTypes tire types and nbSurfaceTypes surface types.

\param[in] nbTireTypes is the number of different types of tire.  This value must be less than or equal to maxNbTireTypes specified in allocate().
\param[in] nbSurfaceTypes is the number of different types of surface. This value must be less than or equal to maxNbSurfaceTypes specified in allocate().
\param[in] drivableSurfaceMaterials is an array of PxMaterial pointers of length nbSurfaceTypes.
\param[in] drivableSurfaceTypes is an array of PxVehicleDrivableSurfaceType instances of length nbSurfaceTypes.

\note If the pointer to the PxMaterial that touches the tire is found in drivableSurfaceMaterials[x] then the surface type is drivableSurfaceTypes[x].mType 
and the friction is the value that is set with setTypePairFriction(drivableSurfaceTypes[x].mType, PxVehicleTireData::mType, frictionValue).

\note A friction value of 1.0 will be assigned as default to each combination of tire and surface type.  To override this use setTypePairFriction.
@see release, setTypePairFriction, getTypePairFriction, PxVehicleTireData.mType

</member>
<member name="M:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.release" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="88">
\brief Deallocate a PxVehicleDrivableSurfaceToTireFrictionPairs instance

</member>
<member name="M:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.setTypePairFriction(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="93">
	\brief Set the friction for a specified pair of tire type and drivable surface type.

	\param[in] surfaceType describes the surface type
	\param[in] tireType describes the tire type.
	\param[in] value describes the friction coefficient for the combination of surface type and tire type.

</member>
<member name="M:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.getTypePairFriction(System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="102">
\brief Return the friction for a specified combination of surface type and tire type.
\return The friction for a specified combination of surface type and tire type.
\note The final friction value used by the tire model is the value returned by getTypePairFriction
multiplied by the value computed from PxVehicleTireData::mFrictionVsSlipGraph
@see PxVehicleTireData::mFrictionVsSlipGraph

</member>
<member name="M:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.getMaxNbSurfaceTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="111">
\brief Return the maximum number of surface types
\return The maximum number of surface types
@see allocate

</member>
<member name="M:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.getMaxNbTireTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="118">
\brief Return the maximum number of tire types
\return The maximum number of tire types
@see allocate

</member>
<member name="F:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.mPairs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="127">
\brief Ptr to base address of a 2d PxReal array with dimensions [mNbSurfaceTypes][mNbTireTypes]

\note Each element of the array describes the maximum friction provided by a surface type-tire type combination.
eg the friction corresponding to a combination of surface type x and tire type y is  mPairs[x][y]

</member>
<member name="F:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.mDrivableSurfaceMaterials" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="135">
\brief Ptr to 1d array of material ptrs that is of length mNbSurfaceTypes.

\note If the PxMaterial that touches the tire corresponds to mDrivableSurfaceMaterials[x] then the drivable surface
type is mDrivableSurfaceTypes[x].mType and the friction for that contact is mPairs[mDrivableSurfaceTypes[x].mType][y], 
assuming a tire type y.

\note If the PxMaterial that touches the tire is not found in mDrivableSurfaceMaterials then the friction is 
mPairs[0][y], assuming a tire type y.

</member>
<member name="F:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.mDrivableSurfaceTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="147">
	\brief Ptr to 1d array of PxVehicleDrivableSurfaceType that is of length mNbSurfaceTypes.
	
	\note If the PxMaterial that touches the tire is found in mDrivableSurfaceMaterials[x] then the drivable surface
	type is mDrivableSurfaceTypes[x].mType and the friction for that contact is mPairs[mDrivableSurfaceTypes[x].mType][y], 
	assuming a tire type y.

	\note If the PxMaterial that touches the tire is not found in mDrivableSurfaceMaterials then the friction is 
	mPairs[0][y], assuming a tire type y.

</member>
<member name="F:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.mNbSurfaceTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="159">
\brief Number of different driving surface types.

\note mDrivableSurfaceMaterials and mDrivableSurfaceTypes are both 1d arrays of length mMaxNbSurfaceTypes.

\note mNbSurfaceTypes must be less than or equal to mMaxNbSurfaceTypes.

</member>
<member name="F:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.mMaxNbSurfaceTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="168">
\brief Maximum number of different driving surface types.

\note mMaxNbSurfaceTypes must be less than or equal to eMAX_NB_SURFACE_TYPES.

</member>
<member name="F:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.mNbTireTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="175">
\brief Number of different tire types.

\note Tire types stored in PxVehicleTireData.mType

</member>
<member name="F:physx.PxVehicleDrivableSurfaceToTireFrictionPairs.mMaxNbTireTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicletirefriction.h" line="182">
\brief Maximum number of different tire types.

\note Tire types stored in PxVehicleTireData.mType

</member>
<member name="T:physx.PxWheelQueryResult" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="36">
\brief Structure containing data describing the non-persistent state of each suspension/wheel/tire unit.
This structure is filled out in PxVehicleUpdates and PxVehicleUpdateSingleVehicleAndStoreTelemetryData
@see PxVehicleUpdates, PxVehicleUpdateSingleVehicleAndStoreTelemetryData

</member>
<member name="F:physx.PxWheelQueryResult.suspLineStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="51">
\brief Start point of suspension line raycast used in raycast completed immediately before PxVehicleUpdates.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then (0,0,0) is stored.
@see PxVehicle4WSuspensionRaycasts

</member>
<member name="F:physx.PxWheelQueryResult.suspLineDir" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="58">
\brief Directions of suspension line raycast used in raycast completed immediately before PxVehicleUpdates.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then (0,0,0) is stored.
@see PxVehicle4WSuspensionRaycasts

</member>
<member name="F:physx.PxWheelQueryResult.suspLineLength" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="65">
\brief Lengths of suspension line raycast used in raycast completed immediately before PxVehicleUpdates.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then 0 is stored.
@see PxVehicle4WSuspensionRaycasts

</member>
<member name="F:physx.PxWheelQueryResult.isInAir" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="72">
\brief If suspension travel limits forbid the wheel from touching the drivable surface then isInAir is true.
\note If the wheel can be placed on the contact plane of the most recent suspension line raycast then isInAir is false.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then isInAir
is computed using the contact plane that was hit by the most recent suspension line raycast.

</member>
<member name="F:physx.PxWheelQueryResult.tireContactActor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="80">
\brief PxActor instance of the driving surface under the corresponding vehicle wheel.
\note If suspension travel limits forbid the wheel from touching the drivable surface then tireContactActor is NULL.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then NULL is stored.

</member>
<member name="F:physx.PxWheelQueryResult.tireContactShape" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="87">
\brief PxShape instance of the driving surface under the corresponding vehicle wheel.
\note If suspension travel limits forbid the wheel from touching the drivable surface then tireContactShape is NULL.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then NULL is stored.

</member>
<member name="F:physx.PxWheelQueryResult.tireSurfaceMaterial" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="94">
\brief PxMaterial instance of the driving surface under the corresponding vehicle wheel.
\note If suspension travel limits forbid the wheel from touching the drivable surface then tireSurfaceMaterial is NULL.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then NULL is stored.

</member>
<member name="F:physx.PxWheelQueryResult.tireSurfaceType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="101">
\brief Surface type integer that corresponds to the mapping between tireSurfaceMaterial and integer as
described in PxVehicleDrivableSurfaceToTireFrictionPairs.
\note If suspension travel limits forbid the wheel from touching the drivable surface then tireSurfaceType is 
PxVehicleDrivableSurfaceType::eSURFACE_TYPE_UNKNOWN.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then 
PxVehicleDrivableSurfaceType::eSURFACE_TYPE_UNKNOWN is stored.
@see PxVehicleDrivableSurfaceToTireFrictionPairs

</member>
<member name="F:physx.PxWheelQueryResult.tireContactPoint" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="112">
\brief Point on the drivable surface hit by the most recent suspension raycast.
\note If suspension travel limits forbid the wheel from touching the drivable surface then the contact point is (0,0,0).
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then (0,0,0) is stored.

</member>
<member name="F:physx.PxWheelQueryResult.tireContactNormal" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="119">
\brief Normal on the drivable surface at the hit point of the most recent suspension raycast.
\note If suspension travel limits forbid the wheel from touching the drivable surface then the contact normal is (0,0,0).
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then (0,0,0) is stored.

</member>
<member name="F:physx.PxWheelQueryResult.tireFriction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="126">
\brief Friction experienced by the tire for the combination of tire type and surface type after accounting 
for the friction vs slip graph.
\note If suspension travel limits forbid the wheel from touching the drivable surface then the tire friction is 0.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then the 
stored tire friction is the value computed in PxVehicleUpdates that immediately followed the last raycast.
@see PxVehicleDrivableSurfaceToTireFrictionPairs, PxVehicleTireData

</member>
<member name="F:physx.PxWheelQueryResult.suspJounce" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="136">
\brief Compression of the suspension spring.
\note If suspension travel limits forbid the wheel from touching the drivable surface then the jounce is -PxVehicleSuspensionData.mMaxDroop
The jounce can never exceed PxVehicleSuspensionData.mMaxCompression. Positive values result when the suspension is compressed from 
the rest position, while negative values mean the suspension is elongated from the rest position.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then the 
suspension compression is computed using the contact plane that was hit by the most recent suspension line raycast.

</member>
<member name="F:physx.PxWheelQueryResult.suspSpringForce" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="146">
\brief Magnitude of force applied by the suspension spring along the direction of suspension travel.
\note If suspension travel limits forbid the wheel from touching the drivable surface then the force is 0
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then the 
suspension spring force is computed using the contact plane that was hit by the most recent suspension line raycast.
@see PxVehicleWheelsSimData::getSuspTravelDirection

</member>
<member name="F:physx.PxWheelQueryResult.tireLongitudinalDir" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="155">
\brief Forward direction of the wheel/tire accounting for steer/toe/camber angle projected on to the contact plane of the drivable surface.
\note If suspension travel limits forbid the wheel from touching the drivable surface then tireLongitudinalDir is (0,0,0)
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then the 
tire longitudinal direction is computed using the contact plane that was hit by the most recent suspension line raycast.

</member>
<member name="F:physx.PxWheelQueryResult.tireLateralDir" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="163">
\brief Lateral direction of the wheel/tire accounting for steer/toe/camber angle projected on to the contact plan of the drivable surface.
\note If suspension travel limits forbid the wheel from touching the drivable surface then tireLateralDir is (0,0,0)
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then the 
tire lateral direction is computed using the contact plane that was hit by the most recent suspension line raycast.

</member>
<member name="F:physx.PxWheelQueryResult.longitudinalSlip" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="171">
\brief Longitudinal slip of the tire.
\note If suspension travel limits forbid the wheel from touching the drivable surface then longitudinalSlip is 0.0
\note The longitudinal slip is approximately (w*r - vz) / PxAbs(vz) where w is the angular speed of the wheel, r is the radius of the wheel, and 
vz component of rigid body velocity computed at the wheel base along the longitudinal direction of the tire.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then the 
tire longitudinal slip is computed using the contact plane that was hit by the most recent suspension line raycast.

</member>
<member name="F:physx.PxWheelQueryResult.lateralSlip" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="181">
\brief Lateral slip of the tire.
\note If suspension travel limits forbid the wheel from touching the drivable surface then lateralSlip is 0.0
\note The lateral slip angle is approximately PxAtan(vx / PxAbs(vz)) where vx and vz are the components of rigid body velocity at the wheel base 
along the wheel's lateral and longitudinal directions, respectively.
\note If no raycast for the corresponding suspension was performed immediately prior to PxVehicleUpdates then the 
tire lateral slip is computed using the contact plane that was hit by the most recent suspension line raycast.

</member>
<member name="F:physx.PxWheelQueryResult.steerAngle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="191">
\brief Steer angle of the wheel about the "up" vector accounting for input steer and toe and, if applicable, Ackermann steer correction.
@see PxVehicleWheelData::mToeAngle

</member>
<member name="F:physx.PxWheelQueryResult.localPose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="197">
\brief Local pose of the wheel.

</member>
<member name="F:physx.PxVehicleWheelQueryResult.wheelQueryResults" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="205">
\brief Pointer to an PxWheelQueryResult buffer of length nbWheelQueryResults
The wheelQueryResults buffer must persist until the end of PxVehicleUpdates
A NULL pointer is permitted.
The wheelQueryResults buffer is left unmodified in PxVehicleUpdates for vehicles with sleeping rigid bodies 
whose control inputs indicate they should remain inert.
@see PxVehicleUpdates

</member>
<member name="F:physx.PxVehicleWheelQueryResult.nbWheelQueryResults" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="215">
\brief The length of the wheelQueryResults buffer.  This value corresponds to the 
number of wheels in the associated vehicle in PxVehicleUpdates.

</member>
<member name="T:physx.PxVehicleWheelConcurrentUpdateData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="222">
	\brief Structure containing data that is computed for a wheel during concurrent calls to PxVehicleUpdates
	but which cannot be safely concurrently applied. 

	@see PxVehicleUpdates, PxVehiclePostUpdates, PxVehicleConcurrentUpdate

</member>
<member name="T:physx.PxVehicleConcurrentUpdateData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="248">
	\brief Structure containing data that is computed for a vehicle and its wheels during concurrent calls to PxVehicleUpdates
	but which cannot be safely concurrently applied. 

	@see PxVehicleUpdates, PxVehiclePostUpdates, PxVehicleWheelConcurrentUpdateData

</member>
<member name="F:physx.PxVehicleConcurrentUpdateData.concurrentWheelUpdates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="269">
\brief Pointer to an PxVehicleWheelConcurrentUpdate buffer of length nbConcurrentWheelUpdates
The concurrentWheelUpdates buffer must persist until the end of PxVehiclePostUpdates
A NULL pointer is not permitted.
@see PxVehicleUpdates, PxVehiclePostUpdates

</member>
<member name="F:physx.PxVehicleConcurrentUpdateData.nbConcurrentWheelUpdates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="277">
\brief The length of the concurrentWheelUpdates buffer.  This value corresponds to the 
number of wheels in the associated vehicle passed to PxVehicleUpdates.

</member>
<member name="M:physx.PxVehicleSuspensionRaycasts(physx.PxBatchQuery*,System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleWheels**,System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxBatchQueryResult&lt;physx.PxRaycastHit&gt;*,System.Boolean!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="291">
	\brief Perform raycasts for all suspension lines for all vehicles.

	\param[in] batchQuery is a PxBatchQuery instance used to specify shader data and functions for the raycast scene queries.

	\param[in] nbVehicles is the number of vehicles in the vehicles array.

	\param[in] vehicles is an array of all vehicles that are to have a raycast issued from each wheel. 

	\param[in] nbSceneQueryResults must be greater than or equal to the total number of wheels of all the vehicles in the vehicles array; that is,
	sceneQueryResults must have dimensions large enough for one raycast hit result per wheel for all the vehicles in the vehicles array.

	\param[in] sceneQueryResults must persist without being overwritten until the end of the next PxVehicleUpdates call. 

	\param[in] vehiclesToRaycast is an array of bools of length nbVehicles that is used to decide if raycasts will be performed for the corresponding vehicle
	in the vehicles array. If vehiclesToRaycast[i] is true then suspension line raycasts will be performed for  vehicles[i].  If vehiclesToRaycast[i] is 
	false then suspension line raycasts will not be performed for vehicles[i].  

	\note If vehiclesToRaycast is NULL then raycasts are performed for all vehicles in the vehicles array.

	\note If vehiclesToRaycast[i] is false then the vehicle stored in vehicles[i] will automatically use the raycast hit planes recorded by the most recent
	suspension line raycasts for that vehicle.  For vehicles far from the camera or not visible on the screen it can be 
	optimal to only perform suspension line raycasts every Nth update rather than every single update.  The accuracy of the cached contact plane
	naturally diminishes as N increase, meaning that wheels might start to hover or intersect the ground for large values of N or even with values close to 1 in
	conjunction with large vehicle speeds and/or geometry that has low spatial coherence.

	\note Calling setToRestState invalidates any cached hit planes. Prior to calling PxVehicleUpdates each vehicle needs to perform suspension line raycasts 
	at least once after instantiation and at least once after calling setToRestState.

	\note Each raycast casts along the suspension travel direction from the position of the top of the wheel at maximum suspension compression
	to the position of the base of the wheel at maximum droop.  Raycasts that start inside a PxShape are subsequently ignored by the
	corresponding vehicle.

	@see PxVehicleDrive4W::setToRestState, PxVehicleDriveNW::setToRestState, PxVehicleDriveTank::setToRestState, PxVehicleNoDrive::setToRestState

</member>
<member name="M:physx.PxVehicleUpdates(System.Single!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDrivableSurfaceToTireFrictionPairs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleWheels**,physx.PxVehicleWheelQueryResult*,physx.PxVehicleConcurrentUpdateData*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="330">
	\brief Update an array of vehicles by either applying an acceleration to the rigid body actor associated with 
	each vehicle or by an immediate update of the velocity of the actor.
	
	\note The update mode (acceleration or velocity change) can be selected with PxVehicleSetUpdateMode.

	\param[in] timestep is the timestep of the update

	\param[in] gravity is the value of gravitational acceleration

	\param[in] vehicleDrivableSurfaceToTireFrictionPairs describes the mapping between each PxMaterial ptr and an integer representing a 
	surface type. It also stores the friction value for each combination of surface and tire type.

	\param[in] nbVehicles is the number of vehicles pointers in the vehicles array

	\param[in, out] vehicles is an array of length nbVehicles containing all vehicles to be updated by the specified timestep

	\param[out] vehicleWheelQueryResults is an array of length nbVehicles storing the wheel query results of each corresponding vehicle and wheel in the 
	vehicles array.  A NULL pointer is permitted.  

	\param[out] vehicleConcurrentUpdates is an array of length nbVehicles.  It is only necessary to specify vehicleConcurrentUpdates if PxVehicleUpdates is 
	called concurrently.  The element vehicleWheelQueryResults[i] of the array stores data that is computed for vehicle[i] during PxVehicleUpdates but which 
	cannot be safely written when concurrently called.  The data computed and stored in vehicleConcurrentUpdates must be passed to PxVehiclePostUpdates, where 
	it is applied to all relevant actors in sequence.  A NULL pointer is permitted.  
	
	\note The vehicleWheelQueryResults buffer must persist until the end of PxVehicleUpdates.
	
	\note The vehicleWheelQueryResults buffer is left unmodified for vehicles with sleeping rigid bodies whose control inputs indicate they should remain inert.

	\note If PxVehicleUpdates is called concurrently then vehicleConcurrentUpdates must be specified.  Do not specify vehicleConcurrentUpdates is PxVehicleUpdates
	is not called concurrently.

	\note The vehicleConcurrentUpdates buffer must persist until the end of PxVehiclePostUpdate.

	\note If any vehicle has one or more disabled wheels (PxVehicleWheelsSimData::disableWheel) then the disabled wheels must not be associated 
	with a PxShape (PxVehicleWheelsSimData::setWheelShapeMapping); the differential of the vehicle must be configured so that no drive torque 
	is delivered to a disabled wheel; and the wheel must have zero rotation speed (PxVehicleWheelsDynData::setWheelRotationSpeed)

	\note PxVehicleUpdates may be called concurrently provided all concurrent calls to PxVehicleUpdates involve only vehicles in the scene specified by PxVehicleUpdateSetScene.  
	PxVehicleUpdates must never run concurrently with PxVehicleUpdateSingleVehicleAndStoreTelemetryData.

	@see PxVehicleSetUpdateMode, PxVehicleWheelsSimData::disableWheel, PxVehicleWheelsSimData::setWheelShapeMapping, PxVehicleWheelsDynData::setWheelRotationSpeed,
	PxVehiclePostUpdates

</member>
<member name="M:physx.PxVehiclePostUpdates(physx.PxVehicleConcurrentUpdateData!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleWheels**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="380">
	\brief Apply actor changes that were computed in concurrent calls to PxVehicleUpdates but which could not be safely applied due to the concurrency.

	\param[in] vehicleConcurrentUpdates is an array of length nbVehicles where vehicleConcurrentUpdates[i] contains data describing actor changes that 
	were computed for vehicles[i] during concurrent calls to PxVehicleUpdates.

	\param[in] nbVehicles is the number of vehicles pointers in the vehicles array

	\param[in, out] vehicles is an array of length nbVehicles containing all vehicles that were partially updated in concurrent calls to PxVehicleUpdates.

	@see PxVehicleUpdates

</member>
<member name="M:physx.PxVehicleShiftOrigin(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleWheels**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="396">
	\brief Shift the origin of vehicles by the specified vector.

	Call this method to adjust the internal data structures of vehicles to reflect the shifted origin location
	(the shift vector will get subtracted from all world space spatial data).

	\note It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysXVehicle accordingly.

	\note This call will not automatically shift the PhysX scene and its objects. You need to call PxScene::shiftOrigin() seperately to keep the systems in sync.

	\param[in] shift is the translation vector to shift the origin by.

	\param[in] nbVehicles is the number of vehicles in the vehicles array.

	\param[in, out] vehicles is an array of all vehicles that should be updated to map to the new scene origin.

</member>
<member name="M:physx.PxVehicleUpdateSingleVehicleAndStoreTelemetryData(System.Single!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDrivableSurfaceToTireFrictionPairs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleWheels*,physx.PxVehicleWheelQueryResult*,physx.PxVehicleTelemetryData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleupdate.h" line="415">
	\brief Update an single vehicle by either applying an acceleration to the rigid body actor associated with 
	each vehicle or by an immediate update of the velocity of the actor. Also record telemetry data from the 
	vehicle so that it may be visualized or queried.
	
	\note The update mode (acceleration or velocity change) can be selected with PxVehicleSetUpdateMode.

	\param[in] timestep is the timestep of the update

	\param[in] gravity is the value of gravitational acceleration

	\param[in] vehicleDrivableSurfaceToTireFrictionPairs describes the mapping between each PxMaterial ptr and an integer representing a 
	surface type. It also stores the friction value for each combination of surface and tire type.

	\param[in, out] focusVehicle is the vehicle to be updated and have its telemetry data recorded

	\param[out] vehicleWheelQueryResults is an array of length 1 storing the wheel query results of each wheel of the vehicle/ 
	A NULL pointer is permitted.  

	\param[out] telemetryData is the data structure used to record telemetry data during the update for later query or visualization

	\note The vehicleWheelQueryResults buffer must persist until the end of PxVehicleUpdates

	\note The vehicleWheelQueryResults buffer is left unmodified for vehicles with sleeping rigid bodies whose control inputs indicate they should remain inert.

	\note PxVehicleUpdateSingleVehicleAndStoreTelemetryData is not thread-safe.  As a consequence, it must run sequentially and never concurrently with PxVehicleUpdates

	@see PxVehicleSetUpdateMode, PxVehicleTelemetryData

</member>
<member name="T:physx.PxVehicleDriveSimDataNW" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="37">
\brief Data structure describing configuration data of a vehicle with up to PX_MAX_NB_WHEELS driven equally through the differential. The vehicle has an
engine, clutch, gears, autobox, differential.
@see PxVehicleDriveSimData

</member>
<member name="M:physx.PxVehicleDriveSimDataNW.getDiffData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="59">
\brief Return the data describing the differential of a vehicle with up to PX_MAX_NB_WHEELS driven wheels.

</member>
<member name="M:physx.PxVehicleDriveSimDataNW.setDiffData(physx.PxVehicleDifferentialNWData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="67">
\brief Set the data describing the differential of a vehicle with up to PX_MAX_NB_WHEELS driven wheels.
The differential data describes the set of wheels that are driven by the differential.

</member>
<member name="F:physx.PxVehicleDriveSimDataNW.mDiff" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="75">
\brief Differential simulation data
@see setDiffData, getDiffData

</member>
<member name="M:physx.PxVehicleDriveSimDataNW.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="81">
\brief Test if the NW-drive simulation data has been setup with legal data.
Call only after setting all components.
@see setEngineData, setClutchData, setGearsData, setAutoboxData, setDiffData, setAckermannGeometryData 

</member>
<member name="T:physx.PxVehicleDriveNWControl" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="97">
\brief The control inputs for a PxVehicleDriveNW.

@see PxVehicleDriveDynData::setAnalogInput, PxVehicleDriveDynData::getAnalogInput

</member>
<member name="T:physx.PxVehicleDriveNW" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="115">
\brief Data structure with instanced dynamics data and configuration data of a vehicle with up to PX_MAX_NB_WHEELS driven wheels.

</member>
<member name="M:physx.PxVehicleDriveNW.allocate(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="130">
	\brief Allocate a PxVehicleDriveNW instance for a NWDrive vehicle with nbWheels 

	\param[in] nbWheels is the number of wheels on the vehicle.

	\return The instantiated vehicle.

	@see free, setup

</member>
<member name="M:physx.PxVehicleDriveNW.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="141">
\brief Deallocate a PxVehicleDriveNW instance.
@see allocate

</member>
<member name="M:physx.PxVehicleDriveNW.setup(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimDataNW!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="147">
\brief Set up a vehicle using simulation data for the wheels and drive model.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the vehicle.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the vehicle in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the vehicle. The vehicle instance takes a copy of this data.
\param[in] driveData describes the properties of the vehicle's drive model (gears/engine/clutch/differential/autobox).  The vehicle instance takes a copy of this data.
\param[in] nbWheels is the number of wheels on the vehicle.
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheelsSimData::setWheelShapeMapping.
@see allocate, free, setToRestState, PxVehicleWheelsSimData::setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleDriveNW.create(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimDataNW!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="162">
\brief Allocate and set up a vehicle using simulation data for the wheels and drive model.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the vehicle.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the vehicle in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the vehicle. The vehicle instance takes a copy of this data.
\param[in] driveData describes the properties of the vehicle's drive model (gears/engine/clutch/differential/autobox).  The vehicle instance takes a copy of this data.
\param[in] nbWheels is the number of wheels on the vehicle.
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheelsSimData::setWheelShapeMapping.
\return The instantiated vehicle.
@see allocate, free, setToRestState, PxVehicleWheelsSimData::setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleDriveNW.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="178">
\brief Set a vehicle to its rest state.  Aside from the rigid body transform, this will set the vehicle and rigid body 
to the state they were in immediately after setup or create.
\note Calling setToRestState invalidates the cached raycast hit planes under each wheel meaning that suspension line
raycasts need to be performed at least once with PxVehicleSuspensionRaycasts before calling PxVehicleUpdates. 
@see setup, create, PxVehicleSuspensionRaycasts, PxVehicleUpdates

</member>
<member name="F:physx.PxVehicleDriveNW.mDriveSimData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="187">
\brief Simulation data that describes the configuration of the vehicle's drive model.
@see setup, create

</member>
<member name="M:physx.PxVehicleDriveNW.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicledrivenw.h" line="195">
\brief Test if the instanced dynamics and configuration data has legal values.

</member>
<member name="T:physx.PxVehicleKeySmoothingData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="33">
\brief Used to produce smooth vehicle driving control values from key inputs.
@see PxVehicle4WSmoothDigitalRawInputsAndSetAnalogInputs, PxVehicle4WSmoothAnalogRawInputsAndSetAnalogInputs

</member>
<member name="F:physx.PxVehicleKeySmoothingData.mRiseRates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="41">
\brief Rise rate of each analog value if digital value is 1

</member>
<member name="F:physx.PxVehicleKeySmoothingData.mFallRates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="46">
\brief Fall rate of each analog value if digital value is 0

</member>
<member name="T:physx.PxVehiclePadSmoothingData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="53">
\brief Used to produce smooth analog vehicle control values from analog inputs.
@see PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs, PxVehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs

</member>
<member name="F:physx.PxVehiclePadSmoothingData.mRiseRates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="61">
\brief Rise rate of each analog value from previous value towards target if target&gt;previous

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehiclePadSmoothingData.mFallRates'. -->
<member name="T:physx.PxVehicleDrive4WRawInputData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="73">
\brief Used to produce smooth vehicle driving control values from analog and digital inputs.
@see PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs, PxVehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setDigitalAccel(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="97">
\brief Record if the accel button has been pressed on keyboard.
\param[in] accelKeyPressed is true if the accelerator key has been pressed and false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setDigitalBrake(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="103">
\brief Record if the brake button has been pressed on keyboard.
\param[in] brakeKeyPressed is true if the brake key has been pressed and false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setDigitalHandbrake(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="109">
\brief Record if the handbrake button has been pressed on keyboard.
\param[in] handbrakeKeyPressed is true if the handbrake key has been pressed and false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setDigitalSteerLeft(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="115">
\brief Record if the left steer button has been pressed on keyboard.
\param[in] steerLeftKeyPressed is true if the steer-left key has been pressed and false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setDigitalSteerRight(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="121">
\brief Record if the right steer button has been pressed on keyboard.
\param[in] steerRightKeyPressed is true if the steer-right key has been pressed and false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getDigitalAccel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="128">
\brief Return if the accel button has been pressed on keyboard.
\return True if the accel button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getDigitalBrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="134">
\brief Return if the brake button has been pressed on keyboard.
\return True if the brake button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getDigitalHandbrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="140">
\brief Return if the handbrake button has been pressed on keyboard.
\return True if the handbrake button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getDigitalSteerLeft" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="146">
\brief Return if the left steer button has been pressed on keyboard.
\return True if the steer-left button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getDigitalSteerRight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="152">
\brief Return if the right steer button has been pressed on keyboard.
\return True if the steer-right button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setAnalogAccel(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="159">
\brief Set the analog accel value from the gamepad
\param[in] accel is the analog accelerator pedal value in range(0,1) where 1 represents the pedal fully pressed and 0 represents the pedal in its rest state.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setAnalogBrake(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="171">
\brief Set the analog brake value from the gamepad
\param[in] brake is the analog brake pedal value in range(0,1) where 1 represents the pedal fully pressed and 0 represents the pedal in its rest state.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setAnalogHandbrake(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="183">
\brief Set the analog handbrake value from the gamepad
\param[in] handbrake is the analog handbrake value in range(0,1) where 1 represents the handbrake fully engaged and 0 represents the handbrake in its rest state.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setAnalogSteer(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="195">
\brief Set the analog steer value from the gamepad
\param[in] steer is the analog steer value in range(-1,1) where -1 represents the steering wheel at left lock and +1 represents the steering wheel at right lock.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getAnalogAccel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="207">
\brief Return the analog accel value from the gamepad
\return The analog accel value.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getAnalogBrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="213">
\brief Return the analog brake value from the gamepad
\return The analog brake value.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getAnalogHandbrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="219">
\brief Return the analog handbrake value from the gamepad
\return The analog handbrake value.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getAnalogSteer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="225">
\brief Return the analog steer value from the gamepad

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setGearUp(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="230">
\brief Record if the gearup button has been pressed on keyboard or gamepad
\param[in] gearUpKeyPressed is true if the gear-up button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.setGearDown(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="236">
\brief Record if the geardown button has been pressed on keyboard or gamepad
\param[in] gearDownKeyPressed is true if the gear-down button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getGearUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="242">
\brief Return if the gearup button has been pressed on keyboard or gamepad
\return The value of the gear-up button.

</member>
<member name="M:physx.PxVehicleDrive4WRawInputData.getGearDown" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="248">
\brief Record if the geardown button has been pressed on keyboard or gamepad
\return The value of the gear-down button.

</member>
<member name="M:physx.PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs(physx.PxVehicleKeySmoothingData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFixedSizeLookupTable&lt;0x8&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDrive4WRawInputData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,physx.PxVehicleDrive4W*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="263">
\brief Used to smooth and set analog vehicle control values (accel,brake,handbrake,steer) from digital inputs (keyboard).
 Also used to set boolean gearup, geardown values.
 \param[in] keySmoothing describes the rise and fall rates of the corresponding analog values when keys are pressed on and off.
 \param[in] steerVsForwardSpeedTable is a table of maximum allowed steer versus forward vehicle speed.
 \param[in] rawInputData is the state of all digital inputs that control the vehicle.
 \param[in] timestep is the time that has passed since the last call to PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs
 \param[in] isVehicleInAir describes if the vehicle is in the air or on the ground and is used to decide whether or not to apply steerVsForwardSpeedTable.
 \param[in] focusVehicle is the vehicle that will be given analog and gearup/geardown control values arising from the digital inputs.

</member>
<member name="M:physx.PxVehicleDrive4WSmoothAnalogRawInputsAndSetAnalogInputs(physx.PxVehiclePadSmoothingData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFixedSizeLookupTable&lt;0x8&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDrive4WRawInputData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,physx.PxVehicleDrive4W*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="280">
\brief Used to smooth and set analog vehicle control values from analog inputs (gamepad).
Also used to set boolean gearup, geardown values.
\param[in] padSmoothing describes how quickly the control values applied to the vehicle blend from the current vehicle values towards the raw analog values from the gamepad.
\param[in] steerVsForwardSpeedTable is a table of maximum allowed steer versus forward vehicle speed.
\param[in] rawInputData is the state of all gamepad analog inputs that will be used control the vehicle.
\param[in] timestep is the time that has passed since the last call to PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs
\param[in] isVehicleInAir describes if the vehicle is in the air or on the ground and is used to decide whether or not to apply steerVsForwardSpeedTable.
\param[in] focusVehicle is the vehicle that will be given analog control values arising from the gamepad inputs.

</member>
<member name="T:physx.PxVehicleDriveNWRawInputData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="298">
\brief Used to produce smooth vehicle driving control values from analog and digital inputs.
@see PxVehicleDriveNWSmoothDigitalRawInputsAndSetAnalogInputs, PxVehicleDriveNWSmoothAnalogRawInputsAndSetAnalogInputs

</member>
<member name="M:physx.PxVehicleDriveNWSmoothDigitalRawInputsAndSetAnalogInputs(physx.PxVehicleKeySmoothingData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFixedSizeLookupTable&lt;0x8&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveNWRawInputData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,physx.PxVehicleDriveNW*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="310">
\brief Used to smooth and set analog vehicle control values (accel,brake,handbrake,steer) from digital inputs (keyboard).
 Also used to set boolean gearup, geardown values.
 \param[in] keySmoothing describes the rise and fall rates of the corresponding analog values when keys are pressed on and off.
 \param[in] steerVsForwardSpeedTable is a table of maximum allowed steer versus forward vehicle speed.
 \param[in] rawInputData is the state of all digital inputs that control the vehicle.
 \param[in] timestep is the time that has passed since the last call to PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs
 \param[in] isVehicleInAir describes if the vehicle is in the air or on the ground and is used to decide whether or not to apply steerVsForwardSpeedTable.
 \param[in] focusVehicle is the vehicle that will be given analog and gearup/geardown control values arising from the digital inputs.

</member>
<member name="M:physx.PxVehicleDriveNWSmoothAnalogRawInputsAndSetAnalogInputs(physx.PxVehiclePadSmoothingData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxFixedSizeLookupTable&lt;0x8&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveNWRawInputData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.Boolean!System.Runtime.CompilerServices.IsConst,physx.PxVehicleDriveNW*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="327">
\brief Used to smooth and set analog vehicle control values from analog inputs (gamepad).
Also used to set boolean gearup, geardown values.
\param[in] padSmoothing describes how quickly the control values applied to the vehicle blend from the current vehicle values towards the raw analog values from the gamepad.
\param[in] steerVsForwardSpeedTable is a table of maximum allowed steer versus forward vehicle speed.
\param[in] rawInputData is the state of all gamepad analog inputs that will be used control the vehicle.
\param[in] timestep is the time that has passed since the last call to PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs
\param[in] isVehicleInAir describes if the vehicle is in the air or on the ground and is used to decide whether or not to apply steerVsForwardSpeedTable.
\param[in] focusVehicle is the vehicle that will be given analog control values arising from the gamepad inputs.

</member>
<member name="T:physx.PxVehicleDriveTankRawInputData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="345">
\brief Used to produce smooth analog tank control values from analog and digital inputs.
@see PxVehicleDriveTankSmoothDigitalRawInputsAndSetAnalogInputs, PxVehicleDriveTankSmoothAnalogRawInputsAndSetAnalogInputs

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getDriveModel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="370">
\brief Return the drive model (eDRIVE_MODEL_SPECIAL or eDRIVE_MODEL_STANDARD)
\return The chosen tank drive model.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setDigitalAccel(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="379">
\brief Set if the accel button has been pressed on the keyboard
\param[in] b is true if the digital accel button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setDigitalLeftThrust(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="385">
\brief Set if the left thrust button has been pressed on the keyboard
\param[in] b is true if the digital left thrust button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setDigitalRightThrust(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="391">
\brief Set if the right thrust button has been pressed on the keyboard
\param[in] b is true if the digital right thrust button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setDigitalLeftBrake(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="397">
\brief Set if the left brake button has been pressed on the keyboard
\param[in] b is true if the digital left brake button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setDigitalRightBrake(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="403">
\brief Set if the right brake button has been pressed on the keyboard
\param[in] b is true if the digital right brake button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getDigitalAccel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="409">
\brief Return if the accel button has been pressed on the keyboard
\return True if the accel button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getDigitalLeftThrust" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="415">
\brief Return if the left thrust button has been pressed on the keyboard
\return True if the left thrust button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getDigitalRightThrust" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="421">
\brief Return if the right thrust button has been pressed on the keyboard
\return True if the right thrust button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getDigitalLeftBrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="427">
\brief Return if the left brake button has been pressed on the keyboard
\return True if the left brake button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getDigitalRightBrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="433">
\brief Return if the right brake button has been pressed on the keyboard
\return True if the right brake button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setAnalogAccel(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="440">
\brief Set the analog accel value from the gamepad	
\param[in] accel is a value in range (0,1) where 1 represents the accelerator pedal fully pressed and 0 represents the pedal in its rest state.
In range (0,1).

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setAnalogLeftThrust(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="453">
\brief Set the analog left thrust value from the gamepad
\param[in] leftThrust represents the state of the left stick.
\note In range (0,1) for standard mode (eSTANDARD), in range (-1,1) for special mode (eSPECIAL)

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setAnalogRightThrust(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="473">
\brief Set the analog right thrust value from the gamepad
\param[in] rightThrust represents the state of the right stick.	
\note In range (0,1) for standard mode (eSTANDARD), in range (-1,1) for special mode (eSPECIAL)

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setAnalogLeftBrake(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="493">
\brief Set the analog left brake value from the gamepad	
\param[in] leftBrake is a value in range (0,1) where 1 represents the left brake pedal fully pressed and 0 represents the left brake pedal in its rest state.
\note In range (0,1).

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setAnalogRightBrake(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="506">
\brief Set the analog right brake value from the gamepad	
\param[in] rightBrake is a value in range (0,1) where 1 represents the right brake pedal fully pressed and 0 represents the right brake pedal in its rest state.
\note In range (0,1).

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getAnalogAccel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="519">
\brief Return the analog accel value from the gamepad
\return The analog accel value.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getAnalogLeftThrust" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="528">
\brief Return the analog left thrust value from the gamepad
\return The analog left thrust value.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getAnalogRightThrust" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="537">
\brief Return the analog right thrust value from the gamepad
\return The analog right thrust value.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getAnalogLeftBrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="546">
\brief Return the analog left brake value from the gamepad
\return The analog left brake value.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getAnalogRightBrake" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="555">
\brief Return the analog right brake value from the gamepad
\return The analog right brake value.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setGearUp(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="564">
\brief Record if the gear-up button has been pressed on keyboard or gamepad
\param[in] gearUp is true if the gear-up button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.setGearDown(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="570">
\brief Record if the gear-down button has been pressed on keyboard or gamepad
\param[in] gearDown is true if the gear-down button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getGearUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="576">
\brief Return if the gear-up button has been pressed on keyboard or gamepad
\return True if the gear-up button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankRawInputData.getGearDown" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="582">
\brief Return if the gear-down button has been pressed on keyboard or gamepad
\return True if the gear-down button has been pressed, false otherwise.

</member>
<member name="M:physx.PxVehicleDriveTankSmoothDigitalRawInputsAndSetAnalogInputs(physx.PxVehicleKeySmoothingData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveTankRawInputData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxVehicleDriveTank*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="599">
\brief Used to smooth and set analog tank control values from digital inputs (keyboard).
Also used to set boolean gearup, geardown values.
\param[in] keySmoothing describes the rise and fall rates of the corresponding analog values when keys are pressed on and off.
\param[in] rawInputData is the state of all digital inputs that control the vehicle.
\param[in] timestep is the time that has passed since the last call to PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs
\param[in] focusVehicle is the vehicle that will be given analog and gearup/geardown control values arising from the digital inputs.

</member>
<member name="M:physx.PxVehicleDriveTankSmoothAnalogRawInputsAndSetAnalogInputs(physx.PxVehiclePadSmoothingData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveTankRawInputData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,physx.PxVehicleDriveTank*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilcontrol.h" line="614">
\brief Used to smooth and set analog tank control values from analog inputs (gamepad).
Also used to set boolean gearup, geardown values.
\param[in] padSmoothing describes how quickly the control values applied to the vehicle blend from the current vehicle values towards the raw analog values from the gamepad.
\param[in] rawInputData is the state of all gamepad analog inputs that will be used control the vehicle.
\param[in] timestep is the time that has passed since the last call to PxVehicleDrive4WSmoothDigitalRawInputsAndSetAnalogInputs
\param[in] focusVehicle is the vehicle that will be given analog control values arising from the gamepad inputs.

</member>
<member name="M:physx.PxVehicle4WEnable3WTadpoleMode(physx.PxVehicleWheelsSimData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleWheelsDynData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimData4W*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilsetup.h" line="32">
\brief Reconfigure a PxVehicle4W instance as a three-wheeled car with tadpole config (2 front wheels, 1 rear wheel)

\note The rear-left wheel is removed and the rear-right wheel is positioned at the centre of the rear axle.
The suspension of the rear-right wheel is modified to support the entire mass of the front car while preserving its natural frequency and damping ratio.

\param[in, out] wheelsSimData is the data describing the wheels/suspensions/tires of the vehicle.
\param[in, out] wheelsDynData is the data describing the dynamic state of the wheels of the vehicle.
\param[in, out] driveSimData is the data describing the drive model of the vehicle.

</member>
<member name="M:physx.PxVehicle4WEnable3WDeltaMode(physx.PxVehicleWheelsSimData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleWheelsDynData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleDriveSimData4W*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilsetup.h" line="44">
\brief Reconfigure a PxVehicle4W instance as a three-wheeled car with delta config (1 front wheel, 2 rear wheels)

\note The front-left wheel is removed and the front-right wheel is positioned at the centre of the front axle.
The suspension of the front-right wheel is modified to support the entire mass of the front car while preserving its natural frequency and damping ratio.

\param[in, out] wheelsSimData is the data describing the wheels/suspensions/tires of the vehicle.
\param[in, out] wheelsDynData is the data describing the dynamic state of the wheels of the vehicle.
\param[in, out] driveSimData is the data describing the drive model of the vehicle.

</member>
<member name="M:physx.PxVehicleComputeSprungMasses(System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilsetup.h" line="56">
\brief Compute the sprung masses of the suspension springs given given (i) the number of sprung masses, 
(ii) coordinates of the sprung masses, (iii) the center of mass offset of the rigid body, (iv) the 
total mass of the rigid body, and (v) the direction of gravity (0 for x-axis, 1 for y-axis, 2 for z-axis).

\param[in] nbSprungMasses is the number of sprung masses of the vehicle.  This value corresponds to the number of wheels on the vehicle.
\param[in] sprungMassCoordinates are the coordinates of the sprung masses relative to the actor. The array sprungMassCoordinates must be of 
length nbSprungMasses or greater.
\param[in] centreOfMass is the coordinate of the center of mass of the rigid body relative to the actor.  This value corresponds to 
the value set by PxRigidBody::setCMassLocalPose.
\param[in] totalMass is the total mass of all the sprung masses.  This value corresponds to the value set by PxRigidBody::setMass.
\param[in] gravityDirection is an integer describing the direction of gravitational acceleration. A value of 0 corresponds to (-1,0,0), 
a value of 1 corresponds to (0,-1,0) and a value of 2 corresponds to (0,0,-1).
\param[out] sprungMasses are the masses to set in the associated suspension data with PxVehicleSuspensionData::mSprungMass.  The sprungMasses array must be of length 
nbSprungMasses or greater. Each element in the sprungMasses array corresponds to the suspension located at the same array element in sprungMassCoordinates.
The center of mass of the masses in sprungMasses with the coordinates in sprungMassCoordinates satisfy the specified centerOfMass.

</member>
<member name="M:physx.PxVehicleUpdateCMassLocalPose(physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxTransform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,physx.PxVehicleWheels*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilsetup.h" line="76">
\brief Reconfigure the vehicle to reflect a new center of mass local pose that has been applied to the actor.  The function requires
(i) the center of mass local pose that was last used to configure the vehicle and the vehicle's actor, (ii) the new center of mass local pose that 
has been applied to the vehicle's actor and will now be applied to the vehicle, and (iii) the direction of gravity (0 for x-axis, 1 for y-axis, 2 for z-axis)

\param[in] oldCMassLocalPose is the center of mass local pose that was last used to configure the vehicle.
\param[in] newCMassLocalPose is the center of mass local pose that will be used to configure the vehicle so that it matches the vehicle's actor.
\param[in] gravityDirection is an integer describing the direction of gravitational acceleration. A value of 0 corresponds to (0,0,-1), 
a value of 1 corresponds to (0,-1,0) and a value of 2 corresponds to (0,0,-1).
\param[in,out] vehicle is the vehicle to be updated with a new center of mass local pose.

\note This function does not update the center of mass of the vehicle actor.  That needs to updated separately with PxRigidBody::setCMassLocalPose

\note The suspension sprung masses are updated so that the natural frequency and damping ratio of the springs are preserved.  This involves altering the
stiffness and damping rate of the suspension springs.

</member>
<member name="T:physx.PxVehicleCopyDynamicsMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilsetup.h" line="94">
\brief Used by PxVehicleCopyDynamicsData
@see PxVehicleCopyDynamicsData

</member>
<member name="M:physx.PxVehicleCopyDynamicsData(physx.PxVehicleCopyDynamicsMap!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleWheels!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleWheels*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutilsetup.h" line="115">
\brief Copy dynamics data from src to trg, including wheel rotation speed, wheel rotation angle, engine rotation speed etc.

\param[in] wheelMap -  describes the mapping between the wheels in src and the wheels in trg.  

\param[in] src - according to the wheel mapping stored in wheelMap, the dynamics data in src wheels are copied to the corresponding wheels in trg.

\param[out] trg - according to wheel mapping stored in wheelMap, the wheels in trg are given the dynamics data of the corresponding wheels in src.

\note wheelMap must specify a unique mapping between the wheels in src and the wheels in trg.

\note In the event that src has fewer wheels than trg, wheelMap must specify a unique mapping between each src wheel to a trg wheel.

\note In the event that src has more wheels than trg, wheelMap must specify a unique mapping to each trg wheel from a src wheel.

\note In the event that src has fewer wheels than trg, the trg wheels that are not mapped to a src wheel are given the average wheel rotation 
speed of all enabled src wheels.

\note src and trg must be the same vehicle type.

</member>
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGraphDesc.mPosX'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGraphDesc.mPosY'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGraphDesc.mSizeX'. -->
<!-- Discarding badly formed XML document comment for member 'F:physx.PxVehicleGraphDesc.mSizeY'. -->
<member name="F:physx.PxVehicleGraphDesc.mBackgroundColor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="61">
\brief Background color of graph.

</member>
<member name="F:physx.PxVehicleGraphDesc.mAlpha" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="66">
\brief Alpha value of background color.

</member>
<member name="F:physx.PxVehicleGraphChannelDesc.mMinY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="84">
\brief Data values less than mMinY will be clamped at mMinY.

</member>
<member name="F:physx.PxVehicleGraphChannelDesc.mMaxY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="89">
\brief Data values greater than mMaxY will be clamped at mMaxY.

</member>
<member name="F:physx.PxVehicleGraphChannelDesc.mMidY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="94">
\brief Data values greater than mMidY will be drawn with color mColorHigh.
Data values less than mMidY will be drawn with color mColorLow.

</member>
<member name="F:physx.PxVehicleGraphChannelDesc.mColorLow" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="100">
\brief Color used to render data values lower than mMidY.

</member>
<member name="F:physx.PxVehicleGraphChannelDesc.mColorHigh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="105">
\brief Color used to render data values greater than mMidY.

</member>
<member name="F:physx.PxVehicleGraphChannelDesc.mTitle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="110">
\brief String to describe data channel.

</member>
<member name="M:physx.PxVehicleGraph.setup(physx.PxVehicleGraphDesc!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVehicleGraphType.Enum!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="188">
\brief Setup a graph from a descriptor.

</member>
<member name="M:physx.PxVehicleGraph.clearRecordedChannelData" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="193">
\brief Clear all data recorded in a graph.

</member>
<member name="M:physx.PxVehicleGraph.getBackgroundColor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="198">
\brief Get the color of the graph background.  Used for rendering a graph.

</member>
<member name="M:physx.PxVehicleGraph.getBackgroundAlpha" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="203">
\brief Get the alpha transparency of the color of the graph background.  Used for rendering a graph.

</member>
<member name="M:physx.PxVehicleGraph.getBackgroundCoords(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="208">
	\brief Get the coordinates of the graph background.  Used for rendering a graph

	\param[out] xMin is the x-coord of the lower-left corner
	\param[out] yMin is the y-coord of the lower-left corner
	\param[out] xMax is the x-coord of the upper-right corner
	\param[out] yMax is the y-coord of the upper-right corner

</member>
<member name="M:physx.PxVehicleGraph.computeGraphChannel(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single*,physx.PxVec3*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="218">
	\brief Compute the coordinates of the graph data of a specific graph channel.

	\param[out] xy is an array of graph sample coordinates stored in order x0,y0,x1,y1,x2,y2...xn,yn.
	\param[out] colors stores the color of each point on the graph.
	\param[out] title is the title of the graph.

</member>
<member name="M:physx.PxVehicleGraph.getLatestValue(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="227">
\brief Return the latest value stored in the specified graph channel

</member>
<member name="M:physx.PxVehicleTelemetryData.allocate(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="292">
\brief Allocate a PxVehicleNWTelemetryData instance for a vehicle with nbWheels
@see PxVehicleNWTelemetryDataFree

</member>
<member name="M:physx.PxVehicleTelemetryData.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="298">
\brief Free a PxVehicleNWTelemetryData instance for a vehicle.
@see PxVehicleNWTelemetryDataAllocate

</member>
<member name="M:physx.PxVehicleTelemetryData.setup(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="304">
\brief Set up all the graphs so that they are ready to record data.

</member>
<member name="M:physx.PxVehicleTelemetryData.clear" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="313">
\brief Clear the graphs of recorded data.

</member>
<member name="M:physx.PxVehicleTelemetryData.getEngineGraph" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="318">
\brief Get the graph data for the engine

</member>
<member name="M:physx.PxVehicleTelemetryData.getNbWheelGraphs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="323">
\brief Get the number of wheel graphs

</member>
<member name="M:physx.PxVehicleTelemetryData.getWheelGraph(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="328">
\brief Get the graph data for the kth wheel

</member>
<member name="M:physx.PxVehicleTelemetryData.getTireforceAppPoints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="333">
\brief Get the array of tire force application points so they can be rendered

</member>
<member name="M:physx.PxVehicleTelemetryData.getSuspforceAppPoints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="338">
\brief Get the array of susp force application points so they can be rendered

</member>
<member name="F:physx.PxVehicleTelemetryData.mEngineGraph" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="345">
\brief Graph data for engine.
\brief Used for storing single timeslices of debug data for engine graph.
@see PxVehicleGraph

</member>
<member name="F:physx.PxVehicleTelemetryData.mWheelGraphs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="352">
\brief Graph data for each wheel.
\brief Used for storing single timeslices of debug data for wheel graphs.
@see PxVehicleGraph

</member>
<member name="F:physx.PxVehicleTelemetryData.mTireforceAppPoints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="359">
\brief Application point of tire forces.

</member>
<member name="F:physx.PxVehicleTelemetryData.mSuspforceAppPoints" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="364">
\brief Application point of susp forces.

</member>
<member name="F:physx.PxVehicleTelemetryData.mNbActiveWheels" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehicleutiltelemetry.h" line="369">
\brief Total number of active wheels 

</member>
<member name="T:physx.PxVehicleNoDrive" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="37">
\brief Data structure with instanced dynamics data and configuration data of a vehicle with no drive model.

</member>
<member name="M:physx.PxVehicleNoDrive.allocate(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="52">
	\brief Allocate a PxVehicleNoDrive instance for a vehicle without drive model and with nbWheels

	\param[in] nbWheels is the number of wheels on the vehicle.

	\return The instantiated vehicle.

	@see free, setup

</member>
<member name="M:physx.PxVehicleNoDrive.free" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="63">
\brief Deallocate a PxVehicleNoDrive instance.
@see allocate

</member>
<member name="M:physx.PxVehicleNoDrive.setup(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="69">
\brief Set up a vehicle using simulation data for the wheels.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the vehicle.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the vehicle in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the vehicle. The vehicle instance takes a copy of this data.
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheels::setWheelShapeMapping.
@see allocate, free, setToRestState, PxVehicleWheels::setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleNoDrive.create(physx.PxPhysics*,physx.PxRigidDynamic*,physx.PxVehicleWheelsSimData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="80">
\brief Allocate and set up a vehicle using simulation data for the wheels.
\param[in] physics is a PxPhysics instance that is needed to create special vehicle constraints that are maintained by the vehicle.
\param[in] vehActor is a PxRigidDynamic instance that is used to represent the vehicle in the PhysX SDK.
\param[in] wheelsData describes the configuration of all suspension/tires/wheels of the vehicle. The vehicle instance takes a copy of this data.
\note It is assumed that the first shapes of the actor are the wheel shapes, followed by the chassis shapes.  To break this assumption use PxVehicleWheels::setWheelShapeMapping.
\return The instantiated vehicle.
@see allocate, free, setToRestState, PxVehicleWheels::setWheelShapeMapping

</member>
<member name="M:physx.PxVehicleNoDrive.setToRestState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="92">
\brief Set a vehicle to its rest state.  Aside from the rigid body transform, this will set the vehicle and rigid body 
to the state they were in immediately after setup or create.
\note Calling setToRestState invalidates the cached raycast hit planes under each wheel meaning that suspension line
raycasts need to be performed at least once with PxVehicleSuspensionRaycasts before calling PxVehicleUpdates. 
@see setup, create, PxVehicleSuspensionRaycasts, PxVehicleUpdates

</member>
<member name="M:physx.PxVehicleNoDrive.setBrakeTorque(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="101">
	\brief Set the brake torque to be applied to a specific wheel
	
	\note The applied brakeTorque persists until the next call to setBrakeTorque
	
	\note The brake torque is specified in Newton metres.

	\param[in] id is the wheel being given the brake torque
	\param[in] brakeTorque is the value of the brake torque

</member>
<member name="M:physx.PxVehicleNoDrive.setDriveTorque(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="113">
	\brief Set the drive torque to be applied to a specific wheel

	\note The applied driveTorque persists until the next call to setDriveTorque

	\note The brake torque is specified in Newton metres.

	\param[in] id is the wheel being given the brake torque
	\param[in] driveTorque is the value of the brake torque

</member>
<member name="M:physx.PxVehicleNoDrive.setSteerAngle(System.UInt32!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="125">
	\brief Set the steer angle to be applied to a specific wheel
	
	\note The applied steerAngle persists until the next call to setSteerAngle
	
	\note The steer angle is specified in radians.

	\param[in] id is the wheel being given the steer angle
	\param[in] steerAngle is the value of the steer angle in radians.

</member>
<member name="M:physx.PxVehicleNoDrive.getBrakeTorque(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="137">
\brief Get the brake torque that has been applied to a specific wheel
\param[in] id is the wheel being queried for its brake torque
\return The brake torque applied to the queried wheel.

</member>
<member name="M:physx.PxVehicleNoDrive.getDriveTorque(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="144">
\brief Get the drive torque that has been applied to a specific wheel
\param[in] id is the wheel being queried for its drive torque 
\return The drive torque applied to the queried wheel.

</member>
<member name="M:physx.PxVehicleNoDrive.getSteerAngle(System.UInt32!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="151">
\brief Get the steer angle that has been applied to a specific wheel
\param[in] id is the wheel being queried for its steer angle
\return The steer angle (in radians) applied to the queried wheel.

</member>
<member name="M:physx.PxVehicleNoDrive.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\physx\vehicle\pxvehiclenodrive.h" line="170">
\brief Test if the instanced dynamics and configuration data has legal values.

</member>
<member name="M:Time.getTime" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\time.h" line="19">
<summary>
Gets the time in milliseconds.
</summary>
<returns>The time in milliseconds.</returns>
</member>
<member name="M:Utility.sleep(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="35">
<summary>
Sleeps the specified milliseconds.
</summary>
<param name="milliseconds">The milliseconds.</param>
</member>
<member name="M:Utility.split(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="41">
<summary>
Splits the specified string by a delimiter..
</summary>
<param name="s">The string.</param>
<param name="delim">The delimiter.</param>
<returns>The sperated string in a vector.</returns>
</member>
<member name="M:Utility.rotateQuatByVec(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="49">
<summary>
Rotates the quaternion by vector.
</summary>
<param name="quat">The quaternion.</param>
<param name="v">The vector.</param>
<returns>The rotated vector.</returns>
</member>
<member name="M:Utility.maxVec3(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="57">
<summary>
Gets the maximum value in a 3D vector.
</summary>
<param name="vec">The 3D vector.</param>
<returns>The highest value in the 3D vector.</returns>
</member>
<member name="M:Utility.maxVec4(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="64">
<summary>
Gets the maximum value in a 4D vector.
</summary>
<param name="vec">The 4D vector.</param>
<returns>The highest value in the 4D vector.</returns>
</member>
<member name="M:Utility.getForward(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="71">
<summary>
Gets the forward facing vector based on the quaternion rotation.
</summary>
<param name="quat">The quaternion.</param>
<returns>The vector facing in the forward direction.</returns>
</member>
<member name="M:Utility.getBack(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="78">
<summary>
Gets the backward facing vector based on the quaternion rotation.
</summary>
<param name="quat">The quaternion.</param>
<returns>The vector facing in the backward direction.</returns>
</member>
<member name="M:Utility.getUp(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="85">
<summary>
Gets the upward facing vector based on the quaternion rotation.
</summary>
<param name="quat">The quaternion.</param>
<returns>The vector facing in the upward direction.</returns>
</member>
<member name="M:Utility.getDown(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="92">
<summary>
Gets the downward facing vector based on the quaternion rotation.
</summary>
<param name="quat">The quaternion.</param>
<returns>The vector facing in the downward direction.</returns>
</member>
<member name="M:Utility.getRight(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="99">
<summary>
Gets the right facing vector based on the quaternion rotation.
</summary>
<param name="quat">The quaternion.</param>
<returns>The vector facing in the right direction.</returns>
</member>
<member name="M:Utility.getLeft(physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="106">
<summary>
Gets the left facing vector based on the quaternion rotation.
</summary>
<param name="quat">The quaternion.</param>
<returns>The vector facing in the left direction.</returns>
</member>
<!-- Discarding badly formed XML document comment for member 'M:Utility.getDistance(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:Utility.initTranslation(physx.PxVec3)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="121">
<summary>
Get a initialized matrix with translation properties.
</summary>
<param name="translation">The translation.</param>
<returns>The translation matrix.</returns>
</member>
<member name="M:Utility.initScale(physx.PxVec3)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="128">
<summary>
Get a initialized matrix with the scale properties.
</summary>
<param name="translation">The translation.</param>
<returns>The scaled matrix.</returns>
</member>
<member name="M:Utility.initRotationFromDirection(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="135">
<summary>
Gets the rotation matrix based on a target position and up vector.
</summary>
<param name="target">The target position.</param>
<param name="up">The upward facing vector.</param>
<returns>The result rotation matrix.</returns>
</member>
<member name="M:Utility.initPerspective(System.Single,System.Single,System.Single,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="143">
<summary>
Creates a perspective matrix.
</summary>
<param name="fov">The field of view of the camera.</param>
<param name="aspect">The aspect ratio of the texture or window.</param>
<param name="zNear">The near plane distance to the camera.</param>
<param name="zFar">The far plane distance to the camera.</param>
<returns>The result perspective matrix.</returns>
</member>
<member name="M:Utility.initOrthographic(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\utility.h" line="153">
<summary>
Creates a orthographic matrix.
</summary>
<param name="left">The distance to the plane on the left.</param>
<param name="right">The distance to the plane on the right.</param>
<param name="bottom">The distance to the plane on the bottom.</param>
<param name="top">The distance to the plane on the top.</param>
<param name="near">The distance to the nearest plane.</param>
<param name="far">The distance to the furthest plane.</param>
<returns>The result perspective matrix.</returns>
</member>
<member name="M:SDL_GetPlatform" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="22">
  \file SDL_stdinc.h

  This is a general header that includes C language support.

  \file SDL_platform.h

  Try to get a standard set of platform defines.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

\brief Gets the name of the platform.

</member>
<member name="D:int8_t" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

</member>
<member name="D:Sint8" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="132">
\brief A signed 8-bit integer type.

</member>
<member name="D:Uint8" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="136">
\brief An unsigned 8-bit integer type.

</member>
<member name="D:Sint16" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="140">
\brief A signed 16-bit integer type.

</member>
<member name="D:Uint16" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="144">
\brief An unsigned 16-bit integer type.

</member>
<member name="D:Sint32" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="148">
\brief A signed 32-bit integer type.

</member>
<member name="D:Uint32" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="152">
\brief An unsigned 32-bit integer type.

</member>
<member name="D:Sint64" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="157">
\brief A signed 64-bit integer type.

</member>
<member name="D:Uint64" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="161">
\brief An unsigned 64-bit integer type.

</member>
<member name="D:SDL_dummy_uint8" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="171">
\cond 
</member>
<member name="M:SDL_malloc(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="202">
\endcond 
  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="M:SDL_iconv_string(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_stdinc.h" line="385">
This function converts a string between encodings in one pass, returning a
string that must be freed with SDL_free() or NULL on error.

</member>
<member name="M:SDL_main(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_main.h

  Redefine main() on some platforms so that it is called by SDL.

  \file SDL_main.h

  The application's main() function must be called with C linkage,
  and should be declared like this:
  \code
  #ifdef __cplusplus
  extern "C"
  #endif
  int main(int argc, char *argv[])
  {
  }
  \endcode

The prototype for the application's main() function

</member>
<member name="M:SDL_SetMainReady" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\begin_code.h" line="22">
  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

  This is called by the real SDL main function to let the rest of the
  library know that initialization was done properly.

  Calling this yourself without knowing what you're doing can cause
  crashes and hard to diagnose problems with your application.

</member>
<member name="M:SDL_RegisterApp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_main.h" line="120">
This can be called to set the application class at startup

</member>
<member name="F:__debugbreak" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="M:SDL_SetAssertionHandler(=FUNC:SDL_assert_state(SDL_assert_data!System.Runtime.CompilerServices.IsConst*,System.Void*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_assert.h" line="190">
  \brief Set an application-defined assertion handler.

  This allows an app to show its own assertion UI and/or force the
  response to an assertion failure. If the app doesn't provide this, SDL
  will try to do the right thing, popping up a system-specific GUI dialog,
  and probably minimizing any fullscreen windows.

  This callback may fire from any thread, but it runs wrapped in a mutex, so
  it will only fire from one thread at a time.

  Setting the callback to NULL restores SDL's original internal handler.

  This callback is NOT reset to SDL's internal handler upon SDL_Quit()!

  \return SDL_assert_state value of how to handle the assertion failure.

  \param handler Callback function, called when an assertion fails.
  \param userdata A pointer passed to the callback as-is.

</member>
<member name="M:SDL_GetDefaultAssertionHandler" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_assert.h" line="214">
  \brief Get the default assertion handler.

  This returns the function pointer that is called by default when an
   assertion is triggered. This is an internal function provided by SDL,
   that is used for assertions when SDL_SetAssertionHandler() hasn't been
   used to provide a different function.

  \return The default SDL_AssertionHandler that is called when an assert triggers.

</member>
<member name="M:SDL_GetAssertionHandler(System.Void**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_assert.h" line="226">
  \brief Get the current assertion handler.

  This returns the function pointer that is called when an assertion is
   triggered. This is either the value last passed to
   SDL_SetAssertionHandler(), or if no application-specified function is
   set, is equivalent to calling SDL_GetDefaultAssertionHandler().

   \param puserdata Pointer to a void*, which will store the "userdata"
                    pointer that was passed to SDL_SetAssertionHandler().
                    This value will always be NULL for the default handler.
                    If you don't care about this data, it is safe to pass
                    a NULL pointer to this function to ignore it.
  \return The SDL_AssertionHandler that is called when an assert triggers.

</member>
<member name="M:SDL_GetAssertionReport" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_assert.h" line="243">
  \brief Get a list of all assertion failures.

  Get all assertions triggered since last call to SDL_ResetAssertionReport(),
  or the start of the program.

  The proper way to examine this data looks something like this:

  <code>
  const SDL_assert_data *item = SDL_GetAssertionReport();
  while (item) {
      printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\n",
             item-&gt;condition, item-&gt;function, item-&gt;filename,
             item-&gt;linenum, item-&gt;trigger_count,
             item-&gt;always_ignore ? "yes" : "no");
      item = item-&gt;next;
  }
  </code>

  \return List of all assertions.
  \sa SDL_ResetAssertionReport

</member>
<member name="M:SDL_ResetAssertionReport" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_assert.h" line="267">
  \brief Reset the list of all assertion failures.

  Reset list of all assertions triggered.

  \sa SDL_GetAssertionReport

</member>
<member name="D:SDL_SpinLock" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

 \file SDL_atomic.h

 Atomic operations.

 IMPORTANT:
 If you are not an expert in concurrent lockless programming, you should
 only be using the atomic lock and reference counting functions in this
 file.  In all other cases you should be protecting your data structures
 with full mutexes.

 The list of "safe" functions to use are:
  SDL_AtomicLock()
  SDL_AtomicUnlock()
  SDL_AtomicIncRef()
  SDL_AtomicDecRef()

 Seriously, here be dragons!
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^

 You can find out a little more about lockless programming and the
 subtle issues that can arise here:
 http://msdn.microsoft.com/en-us/library/ee418650%28v=vs.85%29.aspx

 There's also lots of good information here:
 http://www.1024cores.net/home/lock-free-algorithms
 http://preshing.com/

 These operations may or may not actually be implemented using
 processor specific atomic operations. When possible they are
 implemented as true processor specific atomic operations. When that
 is not possible the are implemented using locks that *do* use the
 available atomic operations.

 All of the atomic operations that modify memory are full memory barriers.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

 \name SDL AtomicLock

 The atomic locks are efficient spinlocks using CPU instructions,
 but are vulnerable to starvation and can spin forever if a thread
 holding a lock has been terminated.  For this reason you should
 minimize the code executed inside an atomic lock and never do
 expensive things like API or system calls while holding them.

 The atomic locks are not safe to lock recursively.

 Porting Note:
 The spin lock functions and type are required and can not be
 emulated because they are used in the atomic emulation code.

</member>
<member name="M:SDL_AtomicTryLock(System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="91">
 \brief Try to lock a spin lock by setting it to a non-zero value.

 \param lock Points to the lock.

 \return SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already held.

</member>
<member name="M:SDL_AtomicLock(System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="100">
 \brief Lock a spin lock by setting it to a non-zero value.

 \param lock Points to the lock.

</member>
<member name="M:SDL_AtomicUnlock(System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="107">
 \brief Unlock a spin lock by setting it to 0. Always returns immediately

 \param lock Points to the lock.

</member>
<member name="F:_ReadWriteBarrier" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="117">
The compiler barrier prevents the compiler from reordering
reads and writes to globally visible variables across the call.

</member>
<member name="M:SDL_AtomicCAS(SDL_atomic_t*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="183">
 \brief Set an atomic variable to a new value if it is currently an old value.

 \return SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.

 \note If you don't know what this function is for, you shouldn't use it!

</member>
<member name="M:SDL_AtomicSet(SDL_atomic_t*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="192">
 \brief Set an atomic variable to a value.

 \return The previous value of the atomic variable.

</member>
<member name="M:SDL_AtomicGet(SDL_atomic_t*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="199">
\brief Get the value of an atomic variable

</member>
<member name="M:SDL_AtomicAdd(SDL_atomic_t*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="204">
 \brief Add to an atomic variable.

 \return The previous value of the atomic variable.

 \note This same style can be used for any number operation

</member>
<member name="M:SDL_AtomicCASPtr(System.Void**,System.Void*,System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="213">
\brief Increment an atomic variable used as a reference count.

 \brief Decrement an atomic variable used as a reference count.

 \return SDL_TRUE if the variable reached zero after decrementing,
         SDL_FALSE otherwise

 \brief Set a pointer to a new value if it is currently an old value.

 \return SDL_TRUE if the pointer was set, SDL_FALSE otherwise.

 \note If you don't know what this function is for, you shouldn't use it!

</member>
<member name="M:SDL_AtomicSetPtr(System.Void**,System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="239">
 \brief Set a pointer to a value atomically.

 \return The previous value of the pointer.

</member>
<member name="M:SDL_AtomicGetPtr(System.Void**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_atomic.h" line="246">
\brief Get the value of a pointer atomically.

</member>
<member name="M:SDL_SetError(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_audio.h

  Access to the raw audio mixing buffer for the SDL library.

  \file SDL_error.h

  Simple error message routines for SDL.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="M:SDL_Swap16(System.UInt16)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_endian.h

  Functions for reading and writing endian-specific values

\name The two types of endianness

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

\file SDL_endian.h

</member>
<member name="T:SDL_mutex" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_mutex.h

  Functions to provide thread synchronization primitives.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

Synchronization functions which can time out return this value
if they time out.

This is the timeout value which corresponds to never time out.

\name Mutex functions

</member>
<member name="M:SDL_CreateMutex" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="61">
Create a mutex, initialized unlocked.

</member>
<member name="M:SDL_LockMutex(SDL_mutex*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="66">
  Lock the mutex.

  \return 0, or -1 on error.

</member>
<member name="M:SDL_TryLockMutex(SDL_mutex*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="74">
  Try to lock the mutex

  \return 0, SDL_MUTEX_TIMEDOUT, or -1 on error

</member>
<member name="M:SDL_UnlockMutex(SDL_mutex*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="81">
  Unlock the mutex.

  \return 0, or -1 on error.

  \warning It is an error to unlock a mutex that has not been locked by
           the current thread, and doing so results in undefined behavior.

</member>
<member name="M:SDL_DestroyMutex(SDL_mutex*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="92">
Destroy a mutex.

</member>
<member name="T:SDL_semaphore" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="100">
\name Semaphore functions

</member>
<member name="M:SDL_CreateSemaphore(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="109">
Create a semaphore, initialized with value, returns NULL on failure.

</member>
<member name="M:SDL_DestroySemaphore(SDL_semaphore*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="114">
Destroy a semaphore.

</member>
<member name="M:SDL_SemWait(SDL_semaphore*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="119">
This function suspends the calling thread until the semaphore pointed
to by \c sem has a positive count. It then atomically decreases the
semaphore count.

</member>
<member name="M:SDL_SemTryWait(SDL_semaphore*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="126">
  Non-blocking variant of SDL_SemWait().

  \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait would
          block, and -1 on error.

</member>
<member name="M:SDL_SemWaitTimeout(SDL_semaphore*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="134">
  Variant of SDL_SemWait() with a timeout in milliseconds.

  \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait does not
          succeed in the allotted time, and -1 on error.

  \warning On some platforms this function is implemented by looping with a
           delay of 1 ms, and so should be avoided if possible.

</member>
<member name="M:SDL_SemPost(SDL_semaphore*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="145">
  Atomically increases the semaphore's count (not blocking).

  \return 0, or -1 on error.

</member>
<member name="M:SDL_SemValue(SDL_semaphore*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="152">
Returns the current count of the semaphore.

</member>
<member name="T:SDL_cond" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="160">
\name Condition variable functions

</member>
<member name="M:SDL_CreateCond" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="169">
  Create a condition variable.

  Typical use of condition variables:

  Thread A:
    SDL_LockMutex(lock);
    while ( ! condition ) {
        SDL_CondWait(cond, lock);
    }
    SDL_UnlockMutex(lock);

  Thread B:
    SDL_LockMutex(lock);
    ...
    condition = true;
    ...
    SDL_CondSignal(cond);
    SDL_UnlockMutex(lock);

  There is some discussion whether to signal the condition variable
  with the mutex locked or not.  There is some potential performance
  benefit to unlocking first on some platforms, but there are some
  potential race conditions depending on how your code is structured.

  In general it's safer to signal the condition variable while the
  mutex is locked.

</member>
<member name="M:SDL_DestroyCond(SDL_cond*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="199">
Destroy a condition variable.

</member>
<member name="M:SDL_CondSignal(SDL_cond*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="204">
  Restart one of the threads that are waiting on the condition variable.

  \return 0 or -1 on error.

</member>
<member name="M:SDL_CondBroadcast(SDL_cond*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="211">
  Restart all threads that are waiting on the condition variable.

  \return 0 or -1 on error.

</member>
<member name="M:SDL_CondWait(SDL_cond*,SDL_mutex*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="218">
  Wait on the condition variable, unlocking the provided mutex.

  \warning The mutex must be locked before entering this function!

  The mutex is re-locked once the condition variable is signaled.

  \return 0 when it is signaled, or -1 on error.

</member>
<member name="M:SDL_CondWaitTimeout(SDL_cond*,SDL_mutex*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mutex.h" line="229">
  Waits for at most \c ms milliseconds, and returns 0 if the condition
  variable is signaled, ::SDL_MUTEX_TIMEDOUT if the condition is not
  signaled in the allotted time, and -1 on error.

  \warning On some platforms this function is implemented by looping with a
           delay of 1 ms, and so should be avoided if possible.

</member>
<member name="T:SDL_Thread" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_thread.h

  Header for the SDL thread management routines.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="D:SDL_ThreadFunction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="65">
The function passed to SDL_CreateThread().
It is passed a void* user context parameter and returns an int.

</member>
<member name="M:_beginthread(=FUNC:System.Void(System.Void*),System.UInt32,System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="72">
  \file SDL_thread.h

  We compile SDL into a DLL. This means, that it's the DLL which
  creates a new thread for the calling process with the SDL_CreateThread()
  API. There is a problem with this, that only the RTL of the SDL.DLL will
  be initialized for those threads, and not the RTL of the calling
  application!

  To solve this, we make a little hack here.

  We'll always use the caller's _beginthread() and _endthread() APIs to
  start a new thread. This way, if it's the SDL.DLL which uses this API,
  then the RTL of SDL.DLL will be used to create the new thread, and if it's
  the application, then the RTL of the application will be used.

  So, in short:
  Always use the _beginthread() and _endthread() of the calling runtime
  library!

</member>
<member name="M:SDL_CreateThread(=FUNC:System.Int32(System.Void*),System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,=FUNC:System.UInt32(System.Void*,System.UInt32,=FUNC:System.UInt32(System.Void*),System.Void*,System.UInt32,System.UInt32*),=FUNC:System.Void(System.UInt32))" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="103">
Create a thread.

</member>
<member name="M:SDL_GetThreadName(SDL_Thread*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="111">
Create a thread.

Get the thread name, as it was specified in SDL_CreateThread().
 This function returns a pointer to a UTF-8 string that names the
 specified thread, or NULL if it doesn't have a name. This is internal
 memory, not to be free()'d by the caller, and remains valid until the
 specified thread is cleaned up by SDL_WaitThread().

</member>
<member name="M:SDL_ThreadID" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="155">
Get the thread identifier for the current thread.

</member>
<member name="M:SDL_GetThreadID(SDL_Thread*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="160">
  Get the thread identifier for the specified thread.

  Equivalent to SDL_ThreadID() if the specified thread is NULL.

</member>
<member name="M:SDL_SetThreadPriority(SDL_ThreadPriority)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="167">
Set the priority for the current thread

</member>
<member name="M:SDL_WaitThread(SDL_Thread*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="172">
  Wait for a thread to finish. Threads that haven't been detached will
  remain (as a "zombie") until this function cleans them up. Not doing so
  is a resource leak.

  Once a thread has been cleaned up through this function, the SDL_Thread
  that references it becomes invalid and should not be referenced again.
  As such, only one thread may call SDL_WaitThread() on another.

  The return code for the thread function is placed in the area
  pointed to by \c status, if \c status is not NULL.

  You may not wait on a thread that has been used in a call to
  SDL_DetachThread(). Use either that function or this one, but not
  both, or behavior is undefined.

  It is safe to pass NULL to this function; it is a no-op.

</member>
<member name="M:SDL_DetachThread(SDL_Thread*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="192">
  A thread may be "detached" to signify that it should not remain until
  another thread has called SDL_WaitThread() on it. Detaching a thread
  is useful for long-running threads that nothing needs to synchronize
  with or further manage. When a detached thread is done, it simply
  goes away.

  There is no way to recover the return code of a detached thread. If you
  need this, don't detach the thread and instead use SDL_WaitThread().

  Once a thread is detached, you should usually assume the SDL_Thread isn't
  safe to reference again, as it will become invalid immediately upon
  the detached thread's exit, instead of remaining until someone has called
  SDL_WaitThread() to finally clean it up. As such, don't detach the same
  thread more than once.

  If a thread has already exited when passed to SDL_DetachThread(), it will
  stop waiting for a call to SDL_WaitThread() and clean up immediately.
  It is not safe to detach a thread that might be used with SDL_WaitThread().

  You may not call SDL_WaitThread() on a thread that has been detached.
  Use either that function or this one, but not both, or behavior is
  undefined.

  It is safe to pass NULL to this function; it is a no-op.

</member>
<!-- Discarding badly formed XML document comment for member 'M:SDL_TLSCreate'. -->
<member name="M:SDL_TLSGet(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="252">
  \brief Get the value associated with a thread local storage ID for the current thread.

  \param id The thread local storage ID

  \return The value associated with the ID for the current thread, or NULL if no value has been set.

  \sa SDL_TLSCreate()
  \sa SDL_TLSSet()

</member>
<member name="M:SDL_TLSSet(System.UInt32,System.Void!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(System.Void*))" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_thread.h" line="264">
  \brief Set the value associated with a thread local storage ID for the current thread.

  \param id The thread local storage ID
  \param value The value to associate with the ID for the current thread
  \param destructor A function called when the thread exits, to free the value.

  \return 0 on success, -1 on error

  \sa SDL_TLSCreate()
  \sa SDL_TLSGet()

</member>
<member name="T:SDL_RWops" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_rwops.h

  This file provides a general interface for SDL to read and write
  data streams.  It can easily be extended to files, memory, etc.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

This is the read/write operation structure -- very basic.

</member>
<member name="F:SDL_RWops.size" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="54">
Return the size of the file in this rwops, or -1 if unknown

</member>
<member name="F:SDL_RWops.seek" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="59">
  Seek to \c offset relative to \c whence, one of stdio's whence values:
  RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END

  \return the final offset in the data stream, or -1 on error.

</member>
<member name="F:SDL_RWops.read" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="68">
  Read up to \c maxnum objects each of size \c size from the data
  stream to the area pointed at by \c ptr.

  \return the number of objects read, or 0 at error or end of file.

</member>
<member name="F:SDL_RWops.write" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="77">
  Write exactly \c num objects each of size \c size from the area
  pointed at by \c ptr to data stream.

  \return the number of objects written, or 0 at error or end of file.

</member>
<member name="F:SDL_RWops.close" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="86">
  Close and free an allocated SDL_RWops structure.

  \return 0 if successful or -1 on write error when flushing data.

</member>
<member name="M:SDL_RWFromFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="146">
  \name RWFrom functions

  Functions to create SDL_RWops structures from various data streams.

</member>
<member name="M:SDL_ReadU8(SDL_RWops*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="178">
  \name Read/write macros

  Macros to easily read and write from an SDL_RWops structure.

  \name Read endian functions

  Read an item of the specified endianness and return in native format.

</member>
<member name="M:SDL_WriteU8(SDL_RWops*,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rwops.h" line="208">
  \name Write endian functions

  Write an item of native format to the specified endianness.

</member>
<member name="D:SDL_AudioFormat" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

 *  \brief Audio format flags.
 *
 *  These are what the 16 bits in SDL_AudioFormat currently mean...
 *  (Unspecified bits are always zero).
 *
 *  \verbatim
    ++-----------------------sample is signed if set
    ||
    ||       ++-----------sample is bigendian if set
    ||       ||
    ||       ||          ++---sample is float if set
    ||       ||          ||
    ||       ||          || +---sample bit size---+
    ||       ||          || |                     |
    15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
    \endverbatim
 *
 *  There are macros in SDL 2.0 and later to query these bits.

</member>
<member name="D:SDL_AudioCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="66">
\name Audio flags

  \name Audio format flags

  Defaults to LSB byte order.

\name int32 support

\name float32 support

\name Native audio byte ordering

  \name Allow change flags

  Which audio format changes are allowed when opening a device.

  This function is called when the audio device needs more data.

  \param userdata An application-specific parameter saved in
                  the SDL_AudioSpec structure
  \param stream A pointer to the audio data buffer.
  \param len    The length of that buffer in bytes.

  Once the callback returns, the buffer will no longer be valid.
  Stereo samples are stored in a LRLRLR ordering.

</member>
<member name="T:SDL_AudioSpec" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="162">
The calculated values in this structure are calculated by SDL_OpenAudio().

</member>
<member name="T:SDL_AudioCVT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="183">
A structure to hold a set of audio conversion filters and buffers.

</member>
<member name="M:SDL_GetNumAudioDrivers" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="215">
  \name Driver discovery functions

  These functions return the list of built in audio drivers, in the
  order that they are normally initialized by default.

</member>
<member name="M:SDL_AudioInit(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="226">
  \name Initialization and cleanup

  \internal These functions are used internally, and should not be used unless
            you have a specific need to specify the audio driver you want to
            use.  You should normally use SDL_Init() or SDL_InitSubSystem().

</member>
<member name="M:SDL_GetCurrentAudioDriver" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="238">
This function returns the name of the current audio driver, or NULL
if no driver has been initialized.

</member>
<member name="M:SDL_OpenAudio(SDL_AudioSpec*,SDL_AudioSpec*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="244">
  This function opens the audio device with the desired parameters, and
  returns 0 if successful, placing the actual hardware parameters in the
  structure pointed to by \c obtained.  If \c obtained is NULL, the audio
  data passed to the callback function will be guaranteed to be in the
  requested format, and will be automatically converted to the hardware
  audio format if necessary.  This function returns -1 if it failed
  to open the audio device, or couldn't set up the audio thread.

  When filling in the desired audio spec structure,
    - \c desired-&gt;freq should be the desired audio frequency in samples-per-
      second.
    - \c desired-&gt;format should be the desired audio format.
    - \c desired-&gt;samples is the desired size of the audio buffer, in
      samples.  This number should be a power of two, and may be adjusted by
      the audio driver to a value more suitable for the hardware.  Good values
      seem to range between 512 and 8096 inclusive, depending on the
      application and CPU speed.  Smaller values yield faster response time,
      but can lead to underflow if the application is doing heavy processing
      and cannot fill the audio buffer in time.  A stereo sample consists of
      both right and left channels in LR ordering.
      Note that the number of samples is directly related to time by the
      following formula:  \code ms = (samples*1000)/freq \endcode
    - \c desired-&gt;size is the size in bytes of the audio buffer, and is
      calculated by SDL_OpenAudio().
    - \c desired-&gt;silence is the value used to set the buffer to silence,
      and is calculated by SDL_OpenAudio().
    - \c desired-&gt;callback should be set to a function that will be called
      when the audio device is ready for more data.  It is passed a pointer
      to the audio buffer, and the length in bytes of the audio buffer.
      This function usually runs in a separate thread, and so you should
      protect data structures that it accesses by calling SDL_LockAudio()
      and SDL_UnlockAudio() in your code.
    - \c desired-&gt;userdata is passed as the first parameter to your callback
      function.

  The audio device starts out playing silence when it's opened, and should
  be enabled for playing by calling \c SDL_PauseAudio(0) when you are ready
  for your audio callback function to be called.  Since the audio driver
  may modify the requested size of the audio buffer, you should allocate
  any local mixing buffers after you open the audio device.

</member>
<member name="D:SDL_AudioDeviceID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="289">
  SDL Audio Device IDs.

  A successful call to SDL_OpenAudio() is always device id 1, and legacy
  SDL audio APIs assume you want this device ID. SDL_OpenAudioDevice() calls
  always returns devices &gt;= 2 on success. The legacy calls are good both
  for backwards compatibility and when you don't care about multiple,
  specific, or capture devices.

</member>
<!-- Discarding badly formed XML document comment for member 'M:SDL_GetNumAudioDevices(System.Int32)'. -->
<member name="M:SDL_GetAudioDeviceName(System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="314">
  Get the human-readable name of a specific audio device.
  Must be a value between 0 and (number of audio devices-1).
  Only valid after a successfully initializing the audio subsystem.
  The values returned by this function reflect the latest call to
  SDL_GetNumAudioDevices(); recall that function to redetect available
  hardware.

  The string returned by this function is UTF-8 encoded, read-only, and
  managed internally. You are not to free it. If you need to keep the
  string for any length of time, you should make your own copy of it, as it
  will be invalid next time any of several other SDL functions is called.

</member>
<member name="M:SDL_OpenAudioDevice(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,SDL_AudioSpec!System.Runtime.CompilerServices.IsConst*,SDL_AudioSpec*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="331">
  Open a specific audio device. Passing in a device name of NULL requests
  the most reasonable default (and is equivalent to calling SDL_OpenAudio()).

  The device name is a UTF-8 string reported by SDL_GetAudioDeviceName(), but
  some drivers allow arbitrary and driver-specific strings, such as a
  hostname/IP address for a remote audio server, or a filename in the
  diskaudio driver.

  \return 0 on error, a valid device ID that is &gt;= 2 on success.

  SDL_OpenAudio(), unlike this function, always acts on device ID 1.

</member>
<member name="M:SDL_PauseAudio(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="375">
  \name Pause audio functions

  These functions pause and unpause the audio callback processing.
  They should be called with a parameter of 0 after opening the audio
  device to start playing sound.  This is so you can safely initialize
  data for your callback function after opening the audio device.
  Silence will be written to the audio device during the pause.

</member>
<member name="M:SDL_LoadWAV_RW(SDL_RWops*,System.Int32,SDL_AudioSpec*,System.Byte**,System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="390">
  This function loads a WAVE from the data source, automatically freeing
  that source if \c freesrc is non-zero.  For example, to load a WAVE file,
  you could do:
  \code
      SDL_LoadWAV_RW(SDL_RWFromFile("sample.wav", "rb"), 1, ...);
  \endcode

  If this function succeeds, it returns the given SDL_AudioSpec,
  filled with the audio data format of the wave data, and sets
  \c *audio_buf to a malloc()'d buffer containing the audio data,
  and sets \c *audio_len to the length of that audio buffer, in bytes.
  You need to free the audio buffer with SDL_FreeWAV() when you are
  done with it.

  This function returns NULL and sets the SDL error message if the
  wave file cannot be opened, uses an unknown data format, or is
  corrupt.  Currently raw and MS-ADPCM WAVE files are supported.

</member>
<member name="M:SDL_FreeWAV(System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="415">
Loads a WAV from a file.
Compatibility convenience function.

This function frees data previously allocated with SDL_LoadWAV_RW()

</member>
<member name="M:SDL_BuildAudioCVT(SDL_AudioCVT*,System.UInt16,System.Byte,System.Int32,System.UInt16,System.Byte,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="427">
  This function takes a source format and rate and a destination format
  and rate, and initializes the \c cvt structure with information needed
  by SDL_ConvertAudio() to convert a buffer of audio data from one format
  to the other.

  \return -1 if the format conversion is not supported, 0 if there's
  no conversion needed, or 1 if the audio filter is set up.

</member>
<member name="M:SDL_ConvertAudio(SDL_AudioCVT*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="444">
  Once you have initialized the \c cvt structure using SDL_BuildAudioCVT(),
  created an audio buffer \c cvt-&gt;buf, and filled it with \c cvt-&gt;len bytes of
  audio data in the source format, this function will convert it in-place
  to the desired format.

  The data conversion may expand the size of the audio data, so the buffer
  \c cvt-&gt;buf should be allocated after the \c cvt structure is initialized by
  SDL_BuildAudioCVT(), and should be \c cvt-&gt;len*cvt-&gt;len_mult bytes long.

</member>
<member name="M:SDL_MixAudio(System.Byte*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="457">
This takes two audio buffers of the playing audio format and mixes
them, performing addition, volume adjustment, and overflow clipping.
The volume ranges from 0 - 128, and should be set to ::SDL_MIX_MAXVOLUME
for full audio volume.  Note this does not change hardware volume.
This is provided for convenience -- you can mix your own audio data.

</member>
<member name="M:SDL_MixAudioFormat(System.Byte*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.UInt16,System.UInt32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="467">
This works like SDL_MixAudio(), but you specify the audio format instead of
using the format of audio device 1. Thus it can be used when no audio
device is open at all.

</member>
<member name="M:SDL_LockAudio" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="477">
  \name Audio lock functions

  The lock manipulated by these functions protects the callback function.
  During a SDL_LockAudio()/SDL_UnlockAudio() pair, you can be guaranteed that
  the callback function is not running.  Do not call these from the callback
  function or you will cause deadlock.

</member>
<member name="M:SDL_CloseAudio" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_audio.h" line="492">
This function shuts down audio processing and closes the audio device.

</member>
<member name="M:SDL_SetClipboardText(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

 \file SDL_clipboard.h

 Include file for SDL clipboard handling

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

 \brief Put UTF-8 text into the clipboard

 \sa SDL_GetClipboardText()

</member>
<member name="M:SDL_GetClipboardText" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_clipboard.h" line="48">
 \brief Get UTF-8 text from the clipboard, which must be freed with SDL_free()

 \sa SDL_SetClipboardText()

</member>
<member name="M:SDL_HasClipboardText" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_clipboard.h" line="55">
 \brief Returns a flag indicating whether the clipboard exists and contains a text string that is non-empty

 \sa SDL_GetClipboardText()

</member>
<member name="M:SDL_GetCPUCount" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_cpuinfo.h

  CPU feature detection for SDL.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

This function returns the number of CPU cores available.

</member>
<member name="M:SDL_GetCPUCacheLineSize" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="84">
  This function returns the L1 cache line size of the CPU

  This is useful for determining multi-threaded structure padding
  or SIMD prefetch sizes.

</member>
<member name="M:SDL_HasRDTSC" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="92">
This function returns true if the CPU has the RDTSC instruction.

</member>
<member name="M:SDL_HasAltiVec" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="97">
This function returns true if the CPU has AltiVec features.

</member>
<member name="M:SDL_HasMMX" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="102">
This function returns true if the CPU has MMX features.

</member>
<member name="M:SDL_Has3DNow" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="107">
This function returns true if the CPU has 3DNow! features.

</member>
<member name="M:SDL_HasSSE" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="112">
This function returns true if the CPU has SSE features.

</member>
<member name="M:SDL_HasSSE2" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="117">
This function returns true if the CPU has SSE2 features.

</member>
<member name="M:SDL_HasSSE3" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="122">
This function returns true if the CPU has SSE3 features.

</member>
<member name="M:SDL_HasSSE41" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="127">
This function returns true if the CPU has SSE4.1 features.

</member>
<member name="M:SDL_HasSSE42" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="132">
This function returns true if the CPU has SSE4.2 features.

</member>
<member name="M:SDL_HasAVX" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="137">
This function returns true if the CPU has AVX features.

</member>
<member name="M:SDL_GetSystemRAM" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_cpuinfo.h" line="142">
This function returns the amount of RAM configured in the system, in MB.

</member>
<member name="T:SDL_PixelFormat" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="271">
\note Everything in the pixel format structure is read-only.

</member>
<member name="M:SDL_GetPixelFormatName(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="297">
\brief Get the human readable name of a pixel format

</member>
<member name="M:SDL_PixelFormatEnumToMasks(System.UInt32,System.Int32*,System.UInt32*,System.UInt32*,System.UInt32*,System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="302">
  \brief Convert one of the enumerated pixel formats to a bpp and RGBA masks.

  \return SDL_TRUE, or SDL_FALSE if the conversion wasn't possible.

  \sa SDL_MasksToPixelFormatEnum()

</member>
<member name="M:SDL_MasksToPixelFormatEnum(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="316">
  \brief Convert a bpp and RGBA masks to an enumerated pixel format.

  \return The pixel format, or ::SDL_PIXELFORMAT_UNKNOWN if the conversion
          wasn't possible.

  \sa SDL_PixelFormatEnumToMasks()

</member>
<member name="M:SDL_AllocFormat(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="330">
\brief Create an SDL_PixelFormat structure from a pixel format enum.

</member>
<member name="M:SDL_FreeFormat(SDL_PixelFormat*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="335">
\brief Free an SDL_PixelFormat structure.

</member>
<member name="M:SDL_AllocPalette(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="340">
  \brief Create a palette structure with the specified number of color
         entries.

  \return A new palette, or NULL if there wasn't enough memory.

  \note The palette entries are initialized to white.

  \sa SDL_FreePalette()

</member>
<member name="M:SDL_SetPixelFormatPalette(SDL_PixelFormat*,SDL_Palette*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="352">
\brief Set the palette for a pixel format structure.

</member>
<member name="M:SDL_SetPaletteColors(SDL_Palette*,SDL_Color!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="358">
  \brief Set a range of colors in a palette.

  \param palette    The palette to modify.
  \param colors     An array of colors to copy into the palette.
  \param firstcolor The index of the first palette entry to modify.
  \param ncolors    The number of entries to modify.

  \return 0 on success, or -1 if not all of the colors could be set.

</member>
<member name="M:SDL_FreePalette(SDL_Palette*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="372">
  \brief Free a palette created with SDL_AllocPalette().

  \sa SDL_AllocPalette()

</member>
<member name="M:SDL_MapRGB(SDL_PixelFormat!System.Runtime.CompilerServices.IsConst*,System.Byte,System.Byte,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="379">
  \brief Maps an RGB triple to an opaque pixel value for a given pixel format.

  \sa SDL_MapRGBA

</member>
<member name="M:SDL_MapRGBA(SDL_PixelFormat!System.Runtime.CompilerServices.IsConst*,System.Byte,System.Byte,System.Byte,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="387">
  \brief Maps an RGBA quadruple to a pixel value for a given pixel format.

  \sa SDL_MapRGB

</member>
<member name="M:SDL_GetRGB(System.UInt32,SDL_PixelFormat!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.Byte*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="396">
  \brief Get the RGB components from a pixel of the specified format.

  \sa SDL_GetRGBA

</member>
<member name="M:SDL_GetRGBA(System.UInt32,SDL_PixelFormat!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.Byte*,System.Byte*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="405">
  \brief Get the RGBA components from a pixel of the specified format.

  \sa SDL_GetRGB

</member>
<member name="M:SDL_CalculateGammaRamp(System.Single,System.UInt16*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_pixels.h" line="415">
\brief Calculate a 256 entry gamma ramp for a gamma value.

</member>
<member name="T:SDL_Point" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_rect.h

  Header file for SDL_rect definition and management functions.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

  \brief  The structure that defines a point

  \sa SDL_EnclosePoints

</member>
<member name="T:SDL_Rect" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="53">
  \brief A rectangle, with the origin at the upper left.

  \sa SDL_RectEmpty
  \sa SDL_RectEquals
  \sa SDL_HasIntersection
  \sa SDL_IntersectRect
  \sa SDL_UnionRect
  \sa SDL_EnclosePoints

</member>
<member name="M:SDL_RectEmpty(SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="69">
\brief Returns true if the rectangle has no area.

</member>
<member name="M:SDL_RectEquals(SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="77">
\brief Returns true if the two rectangles are equal.

</member>
<member name="M:SDL_HasIntersection(SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="86">
  \brief Determine whether two rectangles intersect.

  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.

</member>
<member name="M:SDL_IntersectRect(SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="94">
  \brief Calculate the intersection of two rectangles.

  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.

</member>
<member name="M:SDL_UnionRect(SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="103">
\brief Calculate the union of two rectangles.

</member>
<member name="M:SDL_EnclosePoints(SDL_Point!System.Runtime.CompilerServices.IsConst*,System.Int32,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="110">
  \brief Calculate a minimal rectangle enclosing a set of points

  \return SDL_TRUE if any points were within the clipping rect

</member>
<member name="M:SDL_IntersectRectAndLine(SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Int32*,System.Int32*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_rect.h" line="120">
  \brief Calculate the intersection of a rectangle and line segment.

  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.

</member>
<member name="T:SDL_Surface" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

  \name Surface flags

  These are the currently supported flags for the ::SDL_Surface.

  \internal
  Used internally (read-only).

Evaluates to true if the surface needs to be locked before access.

 \brief A collection of pixels used in software blitting.

 \note  This structure should be treated as read-only, except for \c pixels,
        which, if not NULL, contains the raw pixel data for the surface.

</member>
<member name="F:SDL_Surface.userdata" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="77">
Application data associated with the surface 
</member>
<member name="F:SDL_Surface.locked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="80">
information needed for surfaces requiring locks 
</member>
<member name="F:SDL_Surface.clip_rect" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="84">
clipping information 
</member>
<member name="T:SDL_BlitMap" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="87">
info for fast blit mapping to other surfaces 
</member>
<member name="F:SDL_Surface.refcount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="90">
Reference count -- used when freeing surface 
</member>
<member name="D:SDL_blit" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="94">
\brief The type of function used for surface blitting functions.

</member>
<member name="M:SDL_CreateRGBSurface(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="100">
  Allocate and free an RGB surface.

  If the depth is 4 or 8 bits, an empty palette is allocated for the surface.
  If the depth is greater than 8 bits, the pixel format is set using the
  flags '[RGB]mask'.

  If the function runs out of memory, it will return NULL.

  \param flags The \c flags are obsolete and should be set to 0.
  \param width The width in pixels of the surface to create.
  \param height The height in pixels of the surface to create.
  \param depth The depth in bits of the surface to create.
  \param Rmask The red mask of the surface to create.
  \param Gmask The green mask of the surface to create.
  \param Bmask The blue mask of the surface to create.
  \param Amask The alpha mask of the surface to create.

</member>
<member name="M:SDL_SetSurfacePalette(SDL_Surface*,SDL_Palette*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="132">
  \brief Set the palette used by a surface.

  \return 0, or -1 if the surface format doesn't use a palette.

  \note A single palette can be shared with many surfaces.

</member>
<member name="M:SDL_LockSurface(SDL_Surface*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="142">
  \brief Sets up a surface for directly accessing the pixels.

  Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write
  to and read from \c surface-&gt;pixels, using the pixel format stored in
  \c surface-&gt;format.  Once you are done accessing the surface, you should
  use SDL_UnlockSurface() to release it.

  Not all surfaces require locking.  If SDL_MUSTLOCK(surface) evaluates
  to 0, then you can read and write to the surface at any time, and the
  pixel format of the surface will not change.

  No operating system or library calls should be made between lock/unlock
  pairs, as critical system locks may be held during this time.

  SDL_LockSurface() returns 0, or -1 if the surface couldn't be locked.

  \sa SDL_UnlockSurface()

</member>
<member name="M:SDL_UnlockSurface(SDL_Surface*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="162">
\sa SDL_LockSurface() 
</member>
<member name="M:SDL_LoadBMP_RW(SDL_RWops*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="165">
  Load a surface from a seekable SDL data stream (memory or file).

  If \c freesrc is non-zero, the stream will be closed after being read.

  The new surface should be freed with SDL_FreeSurface().

  \return the new surface, or NULL if there was an error.

</member>
<member name="M:SDL_SaveBMP_RW(SDL_Surface*,SDL_RWops*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="177">
  Load a surface from a file.

  Convenience macro.

  Save a surface to a seekable SDL data stream (memory or file).

  If \c freedst is non-zero, the stream will be closed after being written.

  \return 0 if successful or -1 if there was an error.

</member>
<member name="M:SDL_SetSurfaceRLE(SDL_Surface*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="194">
  Save a surface to a file.

  Convenience macro.

  \brief Sets the RLE acceleration hint for a surface.

  \return 0 on success, or -1 if the surface is not valid

  \note If RLE is enabled, colorkey and alpha blending blits are much faster,
        but the surface must be locked before directly accessing the pixels.

</member>
<member name="M:SDL_SetColorKey(SDL_Surface*,System.Int32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="213">
  \brief Sets the color key (transparent pixel) in a blittable surface.

  \param surface The surface to update
  \param flag Non-zero to enable colorkey and 0 to disable colorkey
  \param key The transparent pixel in the native surface format

  \return 0 on success, or -1 if the surface is not valid

  You can pass SDL_RLEACCEL to enable RLE accelerated blits.

</member>
<member name="M:SDL_GetColorKey(SDL_Surface*,System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="227">
  \brief Gets the color key (transparent pixel) in a blittable surface.

  \param surface The surface to update
  \param key A pointer filled in with the transparent pixel in the native
             surface format

  \return 0 on success, or -1 if the surface is not valid or colorkey is not
          enabled.

</member>
<member name="M:SDL_SetSurfaceColorMod(SDL_Surface*,System.Byte,System.Byte,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="240">
  \brief Set an additional color value used in blit operations.

  \param surface The surface to update.
  \param r The red color value multiplied into blit operations.
  \param g The green color value multiplied into blit operations.
  \param b The blue color value multiplied into blit operations.

  \return 0 on success, or -1 if the surface is not valid.

  \sa SDL_GetSurfaceColorMod()

</member>
<member name="M:SDL_GetSurfaceColorMod(SDL_Surface*,System.Byte*,System.Byte*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="256">
  \brief Get the additional color value used in blit operations.

  \param surface The surface to query.
  \param r A pointer filled in with the current red color value.
  \param g A pointer filled in with the current green color value.
  \param b A pointer filled in with the current blue color value.

  \return 0 on success, or -1 if the surface is not valid.

  \sa SDL_SetSurfaceColorMod()

</member>
<member name="M:SDL_SetSurfaceAlphaMod(SDL_Surface*,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="272">
  \brief Set an additional alpha value used in blit operations.

  \param surface The surface to update.
  \param alpha The alpha value multiplied into blit operations.

  \return 0 on success, or -1 if the surface is not valid.

  \sa SDL_GetSurfaceAlphaMod()

</member>
<member name="M:SDL_GetSurfaceAlphaMod(SDL_Surface*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="285">
  \brief Get the additional alpha value used in blit operations.

  \param surface The surface to query.
  \param alpha A pointer filled in with the current alpha value.

  \return 0 on success, or -1 if the surface is not valid.

  \sa SDL_SetSurfaceAlphaMod()

</member>
<member name="M:SDL_SetSurfaceBlendMode(SDL_Surface*,SDL_BlendMode)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="298">
  \brief Set the blend mode used for blit operations.

  \param surface The surface to update.
  \param blendMode ::SDL_BlendMode to use for blit blending.

  \return 0 on success, or -1 if the parameters are not valid.

  \sa SDL_GetSurfaceBlendMode()

</member>
<member name="M:SDL_GetSurfaceBlendMode(SDL_Surface*,SDL_BlendMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="311">
  \brief Get the blend mode used for blit operations.

  \param surface   The surface to query.
  \param blendMode A pointer filled in with the current blend mode.

  \return 0 on success, or -1 if the surface is not valid.

  \sa SDL_SetSurfaceBlendMode()

</member>
<member name="M:SDL_SetClipRect(SDL_Surface*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="324">
  Sets the clipping rectangle for the destination surface in a blit.

  If the clip rectangle is NULL, clipping will be disabled.

  If the clip rectangle doesn't intersect the surface, the function will
  return SDL_FALSE and blits will be completely clipped.  Otherwise the
  function returns SDL_TRUE and blits to the surface will be clipped to
  the intersection of the surface area and the clipping rectangle.

  Note that blits are automatically clipped to the edges of the source
  and destination surfaces.

</member>
<member name="M:SDL_GetClipRect(SDL_Surface*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="340">
  Gets the clipping rectangle for the destination surface in a blit.

  \c rect must be a pointer to a valid rectangle which will be filled
  with the correct values.

</member>
<member name="M:SDL_ConvertSurface(SDL_Surface*,SDL_PixelFormat!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="349">
  Creates a new surface of the specified format, and then copies and maps
  the given surface to it so the blit of the converted surface will be as
  fast as possible.  If this function fails, it returns NULL.

  The \c flags parameter is passed to SDL_CreateRGBSurface() and has those
  semantics.  You can also pass ::SDL_RLEACCEL in the flags parameter and
  SDL will try to RLE accelerate colorkey and alpha blits in the resulting
  surface.

</member>
<member name="M:SDL_ConvertPixels(System.Int32,System.Int32,System.UInt32,System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32,System.Void*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="364">
 \brief Copy a block of pixels of one format to another format

  \return 0 on success, or -1 if there was an error

</member>
<member name="M:SDL_FillRect(SDL_Surface*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="375">
  Performs a fast fill of the given rectangle with \c color.

  If \c rect is NULL, the whole surface will be filled with \c color.

  The color should be a pixel of the format used by the surface, and
  can be generated by the SDL_MapRGB() function.

  \return 0 on success, or -1 on error.

</member>
<member name="M:SDL_UpperBlit(SDL_Surface*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Surface*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="390">
 *  Performs a fast blit from the source surface to the destination surface.
 *
 *  This assumes that the source and destination rectangles are
 *  the same size.  If either \c srcrect or \c dstrect are NULL, the entire
 *  surface (\c src or \c dst) is copied.  The final blit rectangles are saved
 *  in \c srcrect and \c dstrect after all clipping is performed.
 *
 *  \return If the blit is successful, it returns 0, otherwise it returns -1.
 *
 *  The blit function should not be called on a locked surface.
 *
 *  The blit semantics for surfaces with and without blending and colorkey
 *  are defined as follows:
 *  \verbatim
    RGBA-&gt;RGB:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source alpha-channel and per-surface alpha)
        SDL_SRCCOLORKEY ignored.
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy RGB.
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        RGB values of the source color key, ignoring alpha in the
        comparison.

    RGB-&gt;RGBA:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source per-surface alpha)
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy RGB, set destination alpha to source per-surface alpha value.
      both:
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        source color key.

    RGBA-&gt;RGBA:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source alpha-channel and per-surface alpha)
        SDL_SRCCOLORKEY ignored.
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy all of RGBA to the destination.
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        RGB values of the source color key, ignoring alpha in the
        comparison.

    RGB-&gt;RGB:
      Source surface blend mode set to SDL_BLENDMODE_BLEND:
        alpha-blend (using the source per-surface alpha)
      Source surface blend mode set to SDL_BLENDMODE_NONE:
        copy RGB.
      both:
        if SDL_SRCCOLORKEY set, only copy the pixels matching the
        source color key.
    \endverbatim
 *
 *  You should call SDL_BlitSurface() unless you know exactly how SDL
 *  blitting works internally and how to use the other blit functions.

This is the public blit function, SDL_BlitSurface(), and it performs
rectangle validation and clipping before passing it to SDL_LowerBlit()

</member>
<member name="M:SDL_LowerBlit(SDL_Surface*,SDL_Rect*,SDL_Surface*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="457">
This is a semi-private blit function and it performs low-level surface
blitting only.

</member>
<member name="M:SDL_SoftStretch(SDL_Surface*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Surface*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="465">
  \brief Perform a fast, low quality, stretch blit between two surfaces of the
         same pixel format.

  \note This function uses a static buffer, and is not thread-safe.

</member>
<member name="M:SDL_UpperBlitScaled(SDL_Surface*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Surface*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="478">
This is the public scaled blit function, SDL_BlitScaled(), and it performs
rectangle validation and clipping before passing it to SDL_LowerBlitScaled()

</member>
<member name="M:SDL_LowerBlitScaled(SDL_Surface*,SDL_Rect*,SDL_Surface*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_surface.h" line="486">
This is a semi-private blit function and it performs low-level surface
scaled blitting only.

</member>
<member name="T:SDL_Window" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="62">
  \brief The type used to identify a window

  \sa SDL_CreateWindow()
  \sa SDL_CreateWindowFrom()
  \sa SDL_DestroyWindow()
  \sa SDL_GetWindowData()
  \sa SDL_GetWindowFlags()
  \sa SDL_GetWindowGrab()
  \sa SDL_GetWindowPosition()
  \sa SDL_GetWindowSize()
  \sa SDL_GetWindowTitle()
  \sa SDL_HideWindow()
  \sa SDL_MaximizeWindow()
  \sa SDL_MinimizeWindow()
  \sa SDL_RaiseWindow()
  \sa SDL_RestoreWindow()
  \sa SDL_SetWindowData()
  \sa SDL_SetWindowFullscreen()
  \sa SDL_SetWindowGrab()
  \sa SDL_SetWindowIcon()
  \sa SDL_SetWindowPosition()
  \sa SDL_SetWindowSize()
  \sa SDL_SetWindowBordered()
  \sa SDL_SetWindowTitle()
  \sa SDL_ShowWindow()

</member>
<member name="D:SDL_GLContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="158">
\brief An opaque handle to an OpenGL context.

</member>
<member name="M:SDL_GetNumVideoDrivers" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="212">
  \brief Get the number of video drivers compiled into SDL

  \sa SDL_GetVideoDriver()

</member>
<member name="M:SDL_GetVideoDriver(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="219">
  \brief Get the name of a built in video driver.

  \note The video drivers are presented in the order in which they are
        normally checked during initialization.

  \sa SDL_GetNumVideoDrivers()

</member>
<member name="M:SDL_VideoInit(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="229">
  \brief Initialize the video subsystem, optionally specifying a video driver.

  \param driver_name Initialize a specific driver by name, or NULL for the
                     default video driver.

  \return 0 on success, -1 on error

  This function initializes the video subsystem; setting up a connection
  to the window manager, etc, and determines the available display modes
  and pixel formats, but does not initialize a window or graphics mode.

  \sa SDL_VideoQuit()

</member>
<member name="M:SDL_VideoQuit" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="245">
  \brief Shuts down the video subsystem.

  This function closes all windows, and restores the original video mode.

  \sa SDL_VideoInit()

</member>
<member name="M:SDL_GetCurrentVideoDriver" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="254">
  \brief Returns the name of the currently initialized video driver.

  \return The name of the current video driver or NULL if no driver
          has been initialized

  \sa SDL_GetNumVideoDrivers()
  \sa SDL_GetVideoDriver()

</member>
<member name="M:SDL_GetNumVideoDisplays" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="265">
  \brief Returns the number of available video displays.

  \sa SDL_GetDisplayBounds()

</member>
<member name="M:SDL_GetDisplayName(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="272">
  \brief Get the name of a display in UTF-8 encoding

  \return The name of a display, or NULL for an invalid display index.

  \sa SDL_GetNumVideoDisplays()

</member>
<member name="M:SDL_GetDisplayBounds(System.Int32,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="281">
  \brief Get the desktop area represented by a display, with the primary
         display located at 0,0

  \return 0 on success, or -1 if the index is out of range.

  \sa SDL_GetNumVideoDisplays()

</member>
<member name="M:SDL_GetNumDisplayModes(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="291">
  \brief Returns the number of available display modes.

  \sa SDL_GetDisplayMode()

</member>
<member name="M:SDL_GetDisplayMode(System.Int32,System.Int32,SDL_DisplayMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="298">
  \brief Fill in information about a specific display mode.

  \note The display modes are sorted in this priority:
        \li bits per pixel -&gt; more colors to fewer colors
        \li width -&gt; largest to smallest
        \li height -&gt; largest to smallest
        \li refresh rate -&gt; highest to lowest

  \sa SDL_GetNumDisplayModes()

</member>
<member name="M:SDL_GetDesktopDisplayMode(System.Int32,SDL_DisplayMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="312">
\brief Fill in information about the desktop display mode.

</member>
<member name="M:SDL_GetCurrentDisplayMode(System.Int32,SDL_DisplayMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="317">
\brief Fill in information about the current display mode.

</member>
<member name="M:SDL_GetClosestDisplayMode(System.Int32,SDL_DisplayMode!System.Runtime.CompilerServices.IsConst*,SDL_DisplayMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="323">
  \brief Get the closest match to the requested display mode.

  \param displayIndex The index of display from which mode should be queried.
  \param mode The desired display mode
  \param closest A pointer to a display mode to be filled in with the closest
                 match of the available display modes.

  \return The passed in value \c closest, or NULL if no matching video mode
          was available.

  The available display modes are scanned, and \c closest is filled in with the
  closest mode matching the requested mode and returned.  The mode format and
  refresh_rate default to the desktop mode if they are 0.  The modes are
  scanned with size being first priority, format being second priority, and
  finally checking the refresh_rate.  If all the available modes are too
  small, then NULL is returned.

  \sa SDL_GetNumDisplayModes()
  \sa SDL_GetDisplayMode()

</member>
<member name="M:SDL_GetWindowDisplayIndex(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="346">
  \brief Get the display index associated with a window.

  \return the display index of the display containing the center of the
          window, or -1 on error.

</member>
<member name="M:SDL_SetWindowDisplayMode(SDL_Window*,SDL_DisplayMode!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="354">
  \brief Set the display mode used when a fullscreen window is visible.

  By default the window's dimensions and the desktop format and refresh rate
  are used.

  \param window The window for which the display mode should be set.
  \param mode The mode to use, or NULL for the default mode.

  \return 0 on success, or -1 if setting the display mode failed.

  \sa SDL_GetWindowDisplayMode()
  \sa SDL_SetWindowFullscreen()

</member>
<member name="M:SDL_GetWindowDisplayMode(SDL_Window*,SDL_DisplayMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="372">
  \brief Fill in information about the display mode used when a fullscreen
         window is visible.

  \sa SDL_SetWindowDisplayMode()
  \sa SDL_SetWindowFullscreen()

</member>
<member name="M:SDL_GetWindowPixelFormat(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="382">
\brief Get the pixel format associated with the window.

</member>
<member name="M:SDL_CreateWindow(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="387">
  \brief Create a window with the specified position, dimensions, and flags.

  \param title The title of the window, in UTF-8 encoding.
  \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
               ::SDL_WINDOWPOS_UNDEFINED.
  \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
               ::SDL_WINDOWPOS_UNDEFINED.
  \param w     The width of the window.
  \param h     The height of the window.
  \param flags The flags for the window, a mask of any of the following:
               ::SDL_WINDOW_FULLSCREEN,    ::SDL_WINDOW_OPENGL,
               ::SDL_WINDOW_HIDDEN,        ::SDL_WINDOW_BORDERLESS,
               ::SDL_WINDOW_RESIZABLE,     ::SDL_WINDOW_MAXIMIZED,
               ::SDL_WINDOW_MINIMIZED,     ::SDL_WINDOW_INPUT_GRABBED,
               ::SDL_WINDOW_ALLOW_HIGHDPI.

  \return The id of the window created, or zero if window creation failed.

  \sa SDL_DestroyWindow()

</member>
<member name="M:SDL_CreateWindowFrom(System.Void!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="412">
  \brief Create an SDL window from an existing native window.

  \param data A pointer to driver-dependent window creation data

  \return The id of the window created, or zero if window creation failed.

  \sa SDL_DestroyWindow()

</member>
<member name="M:SDL_GetWindowID(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="423">
\brief Get the numeric ID of a window, for logging purposes.

</member>
<member name="M:SDL_GetWindowFromID(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="428">
\brief Get a window from a stored ID, or NULL if it doesn't exist.

</member>
<member name="M:SDL_GetWindowFlags(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="433">
\brief Get the window flags.

</member>
<member name="M:SDL_SetWindowTitle(SDL_Window*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="438">
  \brief Set the title of a window, in UTF-8 format.

  \sa SDL_GetWindowTitle()

</member>
<member name="M:SDL_GetWindowTitle(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="446">
  \brief Get the title of a window, in UTF-8 format.

  \sa SDL_SetWindowTitle()

</member>
<member name="M:SDL_SetWindowIcon(SDL_Window*,SDL_Surface*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="453">
  \brief Set the icon for a window.

  \param window The window for which the icon should be set.
  \param icon The icon for the window.

</member>
<member name="M:SDL_SetWindowData(SDL_Window*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="462">
  \brief Associate an arbitrary named pointer with a window.

  \param window   The window to associate with the pointer.
  \param name     The name of the pointer.
  \param userdata The associated pointer.

  \return The previous value associated with 'name'

  \note The name is case-sensitive.

  \sa SDL_GetWindowData()

</member>
<member name="M:SDL_GetWindowData(SDL_Window*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="479">
  \brief Retrieve the data pointer associated with a window.

  \param window   The window to query.
  \param name     The name of the pointer.

  \return The value associated with 'name'

  \sa SDL_SetWindowData()

</member>
<member name="M:SDL_SetWindowPosition(SDL_Window*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="492">
 *  \brief Set the position of a window.
 *
 *  \param window   The window to reposition.
 *  \param x        The x coordinate of the window, ::SDL_WINDOWPOS_CENTERED, or
                    ::SDL_WINDOWPOS_UNDEFINED.
 *  \param y        The y coordinate of the window, ::SDL_WINDOWPOS_CENTERED, or
                    ::SDL_WINDOWPOS_UNDEFINED.
 *
 *  \note The window coordinate origin is the upper left of the display.
 *
 *  \sa SDL_GetWindowPosition()

</member>
<member name="M:SDL_GetWindowPosition(SDL_Window*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="508">
  \brief Get the position of a window.

  \param window   The window to query.
  \param x        Pointer to variable for storing the x position, may be NULL
  \param y        Pointer to variable for storing the y position, may be NULL

  \sa SDL_SetWindowPosition()

</member>
<member name="M:SDL_SetWindowSize(SDL_Window*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="520">
  \brief Set the size of a window's client area.

  \param window   The window to resize.
  \param w        The width of the window, must be &gt;0
  \param h        The height of the window, must be &gt;0

  \note You can't change the size of a fullscreen window, it automatically
        matches the size of the display mode.

  \sa SDL_GetWindowSize()

</member>
<member name="M:SDL_GetWindowSize(SDL_Window*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="535">
  \brief Get the size of a window's client area.

  \param window   The window to query.
  \param w        Pointer to variable for storing the width, may be NULL
  \param h        Pointer to variable for storing the height, may be NULL

  \sa SDL_SetWindowSize()

</member>
<member name="M:SDL_SetWindowMinimumSize(SDL_Window*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="547">
  \brief Set the minimum size of a window's client area.

  \param window    The window to set a new minimum size.
  \param min_w     The minimum width of the window, must be &gt;0
  \param min_h     The minimum height of the window, must be &gt;0

  \note You can't change the minimum size of a fullscreen window, it
        automatically matches the size of the display mode.

  \sa SDL_GetWindowMinimumSize()
  \sa SDL_SetWindowMaximumSize()

</member>
<member name="M:SDL_GetWindowMinimumSize(SDL_Window*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="563">
  \brief Get the minimum size of a window's client area.

  \param window   The window to query.
  \param w        Pointer to variable for storing the minimum width, may be NULL
  \param h        Pointer to variable for storing the minimum height, may be NULL

  \sa SDL_GetWindowMaximumSize()
  \sa SDL_SetWindowMinimumSize()

</member>
<member name="M:SDL_SetWindowMaximumSize(SDL_Window*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="576">
  \brief Set the maximum size of a window's client area.

  \param window    The window to set a new maximum size.
  \param max_w     The maximum width of the window, must be &gt;0
  \param max_h     The maximum height of the window, must be &gt;0

  \note You can't change the maximum size of a fullscreen window, it
        automatically matches the size of the display mode.

  \sa SDL_GetWindowMaximumSize()
  \sa SDL_SetWindowMinimumSize()

</member>
<member name="M:SDL_GetWindowMaximumSize(SDL_Window*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="592">
  \brief Get the maximum size of a window's client area.

  \param window   The window to query.
  \param w        Pointer to variable for storing the maximum width, may be NULL
  \param h        Pointer to variable for storing the maximum height, may be NULL

  \sa SDL_GetWindowMinimumSize()
  \sa SDL_SetWindowMaximumSize()

</member>
<member name="M:SDL_SetWindowBordered(SDL_Window*,SDL_bool)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="605">
  \brief Set the border state of a window.

  This will add or remove the window's SDL_WINDOW_BORDERLESS flag and
  add or remove the border from the actual window. This is a no-op if the
  window's border already matches the requested state.

  \param window The window of which to change the border state.
  \param bordered SDL_FALSE to remove border, SDL_TRUE to add border.

  \note You can't change the border state of a fullscreen window.

  \sa SDL_GetWindowFlags()

</member>
<member name="M:SDL_ShowWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="622">
  \brief Show a window.

  \sa SDL_HideWindow()

</member>
<member name="M:SDL_HideWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="629">
  \brief Hide a window.

  \sa SDL_ShowWindow()

</member>
<member name="M:SDL_RaiseWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="636">
\brief Raise a window above other windows and set the input focus.

</member>
<member name="M:SDL_MaximizeWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="641">
  \brief Make a window as large as possible.

  \sa SDL_RestoreWindow()

</member>
<member name="M:SDL_MinimizeWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="648">
  \brief Minimize a window to an iconic representation.

  \sa SDL_RestoreWindow()

</member>
<member name="M:SDL_RestoreWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="655">
  \brief Restore the size and position of a minimized or maximized window.

  \sa SDL_MaximizeWindow()
  \sa SDL_MinimizeWindow()

</member>
<member name="M:SDL_SetWindowFullscreen(SDL_Window*,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="663">
  \brief Set a window's fullscreen state.

  \return 0 on success, or -1 if setting the display mode failed.

  \sa SDL_SetWindowDisplayMode()
  \sa SDL_GetWindowDisplayMode()

</member>
<member name="M:SDL_GetWindowSurface(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="674">
  \brief Get the SDL surface associated with the window.

  \return The window's framebuffer surface, or NULL on error.

  A new surface will be created with the optimal format for the window,
  if necessary. This surface will be freed when the window is destroyed.

  \note You may not combine this with 3D or the rendering API on this window.

  \sa SDL_UpdateWindowSurface()
  \sa SDL_UpdateWindowSurfaceRects()

</member>
<member name="M:SDL_UpdateWindowSurface(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="689">
  \brief Copy the window surface to the screen.

  \return 0 on success, or -1 on error.

  \sa SDL_GetWindowSurface()
  \sa SDL_UpdateWindowSurfaceRects()

</member>
<member name="M:SDL_UpdateWindowSurfaceRects(SDL_Window*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="699">
  \brief Copy a number of rectangles on the window surface to the screen.

  \return 0 on success, or -1 on error.

  \sa SDL_GetWindowSurface()
  \sa SDL_UpdateWindowSurfaceRect()

</member>
<member name="M:SDL_SetWindowGrab(SDL_Window*,SDL_bool)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="711">
  \brief Set a window's input grab mode.

  \param window The window for which the input grab mode should be set.
  \param grabbed This is SDL_TRUE to grab input, and SDL_FALSE to release input.

  \sa SDL_GetWindowGrab()

</member>
<member name="M:SDL_GetWindowGrab(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="722">
  \brief Get a window's input grab mode.

  \return This returns SDL_TRUE if input is grabbed, and SDL_FALSE otherwise.

  \sa SDL_SetWindowGrab()

</member>
<member name="M:SDL_SetWindowBrightness(SDL_Window*,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="731">
  \brief Set the brightness (gamma correction) for a window.

  \return 0 on success, or -1 if setting the brightness isn't supported.

  \sa SDL_GetWindowBrightness()
  \sa SDL_SetWindowGammaRamp()

</member>
<member name="M:SDL_GetWindowBrightness(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="741">
  \brief Get the brightness (gamma correction) for a window.

  \return The last brightness value passed to SDL_SetWindowBrightness()

  \sa SDL_SetWindowBrightness()

</member>
<member name="M:SDL_SetWindowGammaRamp(SDL_Window*,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="750">
  \brief Set the gamma ramp for a window.

  \param window The window for which the gamma ramp should be set.
  \param red The translation table for the red channel, or NULL.
  \param green The translation table for the green channel, or NULL.
  \param blue The translation table for the blue channel, or NULL.

  \return 0 on success, or -1 if gamma ramps are unsupported.

  Set the gamma translation table for the red, green, and blue channels
  of the video hardware.  Each table is an array of 256 16-bit quantities,
  representing a mapping between the input and output for that channel.
  The input is the index into the array, and the output is the 16-bit
  gamma value at that index, scaled to the output color precision.

  \sa SDL_GetWindowGammaRamp()

</member>
<member name="M:SDL_GetWindowGammaRamp(SDL_Window*,System.UInt16*,System.UInt16*,System.UInt16*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="773">
  \brief Get the gamma ramp for a window.

  \param window The window from which the gamma ramp should be queried.
  \param red   A pointer to a 256 element array of 16-bit quantities to hold
               the translation table for the red channel, or NULL.
  \param green A pointer to a 256 element array of 16-bit quantities to hold
               the translation table for the green channel, or NULL.
  \param blue  A pointer to a 256 element array of 16-bit quantities to hold
               the translation table for the blue channel, or NULL.

  \return 0 on success, or -1 if gamma ramps are unsupported.

  \sa SDL_SetWindowGammaRamp()

</member>
<member name="M:SDL_DestroyWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="793">
\brief Destroy a window.

</member>
<member name="M:SDL_IsScreenSaverEnabled" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="799">
  \brief Returns whether the screensaver is currently enabled (default on).

  \sa SDL_EnableScreenSaver()
  \sa SDL_DisableScreenSaver()

</member>
<member name="M:SDL_EnableScreenSaver" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="807">
  \brief Allow the screen to be blanked by a screensaver

  \sa SDL_IsScreenSaverEnabled()
  \sa SDL_DisableScreenSaver()

</member>
<member name="M:SDL_DisableScreenSaver" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="815">
  \brief Prevent the screen from being blanked by a screensaver

  \sa SDL_IsScreenSaverEnabled()
  \sa SDL_EnableScreenSaver()

</member>
<member name="M:SDL_GL_LoadLibrary(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="824">
\name OpenGL support functions

  \brief Dynamically load an OpenGL library.

  \param path The platform dependent OpenGL library name, or NULL to open the
              default OpenGL library.

  \return 0 on success, or -1 if the library couldn't be loaded.

  This should be done after initializing the video driver, but before
  creating any OpenGL windows.  If no OpenGL library is loaded, the default
  library will be loaded upon creation of the first OpenGL window.

  \note If you do this, you need to retrieve all of the GL functions used in
        your program from the dynamic library using SDL_GL_GetProcAddress().

  \sa SDL_GL_GetProcAddress()
  \sa SDL_GL_UnloadLibrary()

</member>
<member name="M:SDL_GL_GetProcAddress(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="849">
\brief Get the address of an OpenGL function.

</member>
<member name="M:SDL_GL_UnloadLibrary" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="854">
  \brief Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().

  \sa SDL_GL_LoadLibrary()

</member>
<member name="M:SDL_GL_ExtensionSupported(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="861">
\brief Return true if an OpenGL extension is supported for the current
       context.

</member>
<member name="M:SDL_GL_ResetAttributes" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="868">
\brief Reset all previously set OpenGL context attributes to their default values

</member>
<member name="M:SDL_GL_SetAttribute(SDL_GLattr,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="873">
\brief Set an OpenGL window attribute before window creation.

</member>
<member name="M:SDL_GL_GetAttribute(SDL_GLattr,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="878">
\brief Get the actual value for an attribute from the current context.

</member>
<member name="M:SDL_GL_CreateContext(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="883">
  \brief Create an OpenGL context for use with an OpenGL window, and make it
         current.

  \sa SDL_GL_DeleteContext()

</member>
<member name="M:SDL_GL_MakeCurrent(SDL_Window*,System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="892">
  \brief Set up an OpenGL context for rendering into an OpenGL window.

  \note The context must have been created with a compatible window.

</member>
<member name="M:SDL_GL_GetCurrentWindow" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="900">
\brief Get the currently active OpenGL window.

</member>
<member name="M:SDL_GL_GetCurrentContext" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="905">
\brief Get the currently active OpenGL context.

</member>
<member name="M:SDL_GL_GetDrawableSize(SDL_Window*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="910">
  \brief Get the size of a window's underlying drawable (for use with glViewport).

  \param window   Window from which the drawable size should be queried
  \param w        Pointer to variable for storing the width, may be NULL
  \param h        Pointer to variable for storing the height, may be NULL

 This may differ from SDL_GetWindowSize if we're rendering to a high-DPI
 drawable, i.e. the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a
 platform with high-DPI support (Apple calls this "Retina"), and not disabled
 by the SDL_HINT_VIDEO_HIGHDPI_DISABLED hint.

  \sa SDL_GetWindowSize()
  \sa SDL_CreateWindow()

</member>
<member name="M:SDL_GL_SetSwapInterval(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="928">
  \brief Set the swap interval for the current OpenGL context.

  \param interval 0 for immediate updates, 1 for updates synchronized with the
                  vertical retrace. If the system supports it, you may
                  specify -1 to allow late swaps to happen immediately
                  instead of waiting for the next retrace.

  \return 0 on success, or -1 if setting the swap interval is not supported.

  \sa SDL_GL_GetSwapInterval()

</member>
<member name="M:SDL_GL_GetSwapInterval" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="942">
  \brief Get the swap interval for the current OpenGL context.

  \return 0 if there is no vertical retrace synchronization, 1 if the buffer
          swap is synchronized with the vertical retrace, and -1 if late
          swaps happen immediately instead of waiting for the next retrace.
          If the system can't determine the swap interval, or there isn't a
          valid current context, this will return 0 as a safe default.

  \sa SDL_GL_SetSwapInterval()

</member>
<member name="M:SDL_GL_SwapWindow(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="955">
\brief Swap the OpenGL buffers for a window, if double-buffering is
       supported.

</member>
<member name="M:SDL_GL_DeleteContext(System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_video.h" line="961">
  \brief Delete an OpenGL context.

  \sa SDL_GL_CreateContext()

</member>
<member name="F:SDL_SCANCODE_A" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_scancode.h" line="47">
  \name Usage page 0x07

  These values are from usage page 0x07 (USB keyboard page).

</member>
<member name="F:SDL_SCANCODE_AUDIONEXT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_scancode.h" line="344">
  \name Usage page 0x0C

  These values are mapped from usage page 0x0C (USB consumer page).

</member>
<member name="F:SDL_SCANCODE_BRIGHTNESSDOWN" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_scancode.h" line="371">
  \name Walther keys

  These are values that Christian Walther added (for mac keyboard?).

</member>
<member name="D:SDL_Keycode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keycode.h" line="34">
  \brief The SDL virtual key representation.

  Values of this type are used to represent keyboard keys using the current
  layout of the keyboard.  These values include Unicode values representing
  the unmodified character that would be generated by pressing the key, or
  an SDLK_* constant for those keys that do not generate characters.

</member>
<member name="T:SDL_Keysym" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\begin_code.h" line="22">
  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

  \brief The SDL keysym structure, used in key events.

  \note  If you are looking for translated character input, see the ::SDL_TEXTINPUT event.

</member>
<member name="M:SDL_GetKeyboardFocus" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="57">
\brief Get the window which currently has keyboard focus.

</member>
<!-- Discarding badly formed XML document comment for member 'M:SDL_GetKeyboardState(System.Int32*)'. -->
<member name="M:SDL_GetModState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="79">
\brief Get the current key modifier state for the keyboard.

</member>
<member name="M:SDL_SetModState(SDL_Keymod)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="84">
  \brief Set the current key modifier state for the keyboard.

  \note This does not change the keyboard state, only the key modifier flags.

</member>
<member name="M:SDL_GetKeyFromScancode(SDL_Scancode)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="91">
  \brief Get the key code corresponding to the given scancode according
         to the current keyboard layout.

  See ::SDL_Keycode for details.

  \sa SDL_GetKeyName()

</member>
<member name="M:SDL_GetScancodeFromKey(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="101">
  \brief Get the scancode corresponding to the given key code according to the
         current keyboard layout.

  See ::SDL_Scancode for details.

  \sa SDL_GetScancodeName()

</member>
<member name="M:SDL_GetScancodeName(SDL_Scancode)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="111">
  \brief Get a human-readable name for a scancode.

  \return A pointer to the name for the scancode.
          If the scancode doesn't have a name, this function returns
          an empty string ("").

  \sa SDL_Scancode

</member>
<member name="M:SDL_GetScancodeFromName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="122">
  \brief Get a scancode from a human-readable name

  \return scancode, or SDL_SCANCODE_UNKNOWN if the name wasn't recognized

  \sa SDL_Scancode

</member>
<member name="M:SDL_GetKeyName(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="131">
  \brief Get a human-readable name for a key.

  \return A pointer to a UTF-8 string that stays valid at least until the next
          call to this function. If you need it around any longer, you must
          copy it.  If the key doesn't have a name, this function returns an
          empty string ("").

  \sa SDL_Key

</member>
<member name="M:SDL_GetKeyFromName(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="143">
  \brief Get a key code from a human-readable name

  \return key code, or SDLK_UNKNOWN if the name wasn't recognized

  \sa SDL_Keycode

</member>
<member name="M:SDL_StartTextInput" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="152">
  \brief Start accepting Unicode text input events.
         This function will show the on-screen keyboard if supported.

  \sa SDL_StopTextInput()
  \sa SDL_SetTextInputRect()
  \sa SDL_HasScreenKeyboardSupport()

</member>
<member name="M:SDL_IsTextInputActive" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="162">
  \brief Return whether or not Unicode text input events are enabled.

  \sa SDL_StartTextInput()
  \sa SDL_StopTextInput()

</member>
<member name="M:SDL_StopTextInput" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="170">
  \brief Stop receiving any text input events.
         This function will hide the on-screen keyboard if supported.

  \sa SDL_StartTextInput()
  \sa SDL_HasScreenKeyboardSupport()

</member>
<member name="M:SDL_SetTextInputRect(SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="179">
  \brief Set the rectangle used to type Unicode text inputs.
         This is used as a hint for IME and on-screen keyboard placement.

  \sa SDL_StartTextInput()

</member>
<member name="M:SDL_HasScreenKeyboardSupport" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="187">
  \brief Returns whether the platform has some screen keyboard support.

  \return SDL_TRUE if some keyboard support is available else SDL_FALSE.

  \note Not all screen keyboard functions are supported on all platforms.

  \sa SDL_IsScreenKeyboardShown()

</member>
<member name="M:SDL_IsScreenKeyboardShown(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_keyboard.h" line="198">
  \brief Returns whether the screen keyboard is shown for given window.

  \param window The window for which screen keyboard should be queried.

  \return SDL_TRUE if screen keyboard is shown else SDL_FALSE.

  \sa SDL_HasScreenKeyboardSupport()

</member>
<member name="T:SDL_Cursor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_mouse.h

  Include file for SDL mouse event handling.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="M:SDL_GetMouseFocus" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="65">
\brief Get the window which currently has mouse focus.

</member>
<member name="M:SDL_GetMouseState(System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="70">
  \brief Retrieve the current state of the mouse.

  The current button state is returned as a button bitmask, which can
  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
  mouse cursor position relative to the focus window for the currently
  selected mouse.  You can pass NULL for either x or y.

</member>
<member name="M:SDL_GetRelativeMouseState(System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="80">
  \brief Retrieve the relative state of the mouse.

  The current button state is returned as a button bitmask, which can
  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
  mouse deltas since the last call to SDL_GetRelativeMouseState().

</member>
<member name="M:SDL_WarpMouseInWindow(SDL_Window*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="89">
  \brief Moves the mouse to the given position within the window.

  \param window The window to move the mouse into, or NULL for the current mouse focus
  \param x The x coordinate within the window
  \param y The y coordinate within the window

  \note This function generates a mouse motion event

</member>
<member name="M:SDL_SetRelativeMouseMode(SDL_bool)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="101">
  \brief Set relative mouse mode.

  \param enabled Whether or not to enable relative mode

  \return 0 on success, or -1 if relative mode is not supported.

  While the mouse is in relative mode, the cursor is hidden, and the
  driver will try to report continuous motion in the current window.
  Only relative motion events will be delivered, the mouse position
  will not change.

  \note This function will flush any pending mouse motion.

  \sa SDL_GetRelativeMouseMode()

</member>
<member name="M:SDL_GetRelativeMouseMode" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="119">
  \brief Query whether relative mouse mode is enabled.

  \sa SDL_SetRelativeMouseMode()

</member>
<member name="M:SDL_CreateCursor(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="126">
  \brief Create a cursor, using the specified bitmap data and
         mask (in MSB format).

  The cursor width must be a multiple of 8 bits.

  The cursor is created in black and white according to the following:
  <table>
  <tr><td> data </td><td> mask </td><td> resulting pixel on screen </td></tr>
  <tr><td>  0   </td><td>  1   </td><td> White </td></tr>
  <tr><td>  1   </td><td>  1   </td><td> Black </td></tr>
  <tr><td>  0   </td><td>  0   </td><td> Transparent </td></tr>
  <tr><td>  1   </td><td>  0   </td><td> Inverted color if possible, black
                                         if not. </td></tr>
  </table>

  \sa SDL_FreeCursor()

</member>
<member name="M:SDL_CreateColorCursor(SDL_Surface*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="149">
  \brief Create a color cursor.

  \sa SDL_FreeCursor()

</member>
<member name="M:SDL_CreateSystemCursor(SDL_SystemCursor)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="158">
  \brief Create a system cursor.

  \sa SDL_FreeCursor()

</member>
<member name="M:SDL_SetCursor(SDL_Cursor*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="165">
\brief Set the active cursor.

</member>
<member name="M:SDL_GetCursor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="170">
\brief Return the active cursor.

</member>
<member name="M:SDL_GetDefaultCursor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="175">
\brief Return the default cursor.

</member>
<member name="M:SDL_FreeCursor(SDL_Cursor*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="180">
  \brief Frees a cursor created with SDL_CreateCursor().

  \sa SDL_CreateCursor()

</member>
<member name="M:SDL_ShowCursor(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_mouse.h" line="187">
  \brief Toggle whether or not the cursor is shown.

  \param toggle 1 to show the cursor, 0 to hide it, -1 to query the current
                state.

  \return 1 if the cursor is shown, or 0 if the cursor is hidden.

</member>
<member name="T:_SDL_Joystick" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_joystick.h

  Include file for SDL joystick event handling

 The term "device_index" identifies currently plugged in joystick devices between 0 and SDL_NumJoysticks, with the exact joystick
   behind a device_index changing as joysticks are plugged and unplugged.

 The term "instance_id" is the current instantiation of a joystick device in the system, if the joystick is removed and then re-inserted
   then it will get a new instance_id, instance_id's are monotonically increasing identifiers of a joystick plugged in.

 The term JoystickGUID is a stable 128-bit identifier for a joystick device that does not change over time, it identifies class of
   the device (a X360 wired controller for example). This identifier is platform dependent.



  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

  \file SDL_joystick.h

  In order to use these functions, SDL_Init() must have been called
  with the ::SDL_INIT_JOYSTICK flag.  This causes SDL to scan the system
  for joysticks, and load appropriate drivers.

  If you would like to receive joystick updates while the application
  is in the background, you should set the following hint before calling
  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS

</member>
<member name="M:SDL_NumJoysticks" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="76">
Count the number of joysticks attached to the system right now

</member>
<member name="M:SDL_JoystickNameForIndex(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="81">
Get the implementation dependent name of a joystick.
This can be called before any joysticks are opened.
If no name can be found, this function returns NULL.

</member>
<member name="M:SDL_JoystickOpen(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="88">
  Open a joystick for use.
  The index passed as an argument refers tothe N'th joystick on the system.
  This index is the value which will identify this joystick in future joystick
  events.

  \return A joystick identifier, or NULL if an error occurred.

</member>
<member name="M:SDL_JoystickName(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="98">
Return the name for this currently opened joystick.
If no name can be found, this function returns NULL.

</member>
<member name="M:SDL_JoystickGetDeviceGUID(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="104">
Return the GUID for the joystick at this index

</member>
<member name="M:SDL_JoystickGetGUID(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="109">
Return the GUID for this opened joystick

</member>
<member name="M:SDL_JoystickGetGUIDString(SDL_JoystickGUID,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="114">
Return a string representation for this guid. pszGUID must point to at least 33 bytes
(32 for the string plus a NULL terminator).

</member>
<member name="M:SDL_JoystickGetGUIDFromString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="120">
convert a string into a joystick formatted guid

</member>
<member name="M:SDL_JoystickGetAttached(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="125">
Returns SDL_TRUE if the joystick has been opened and currently connected, or SDL_FALSE if it has not.

</member>
<member name="M:SDL_JoystickInstanceID(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="130">
Get the instance ID of an opened joystick or -1 if the joystick is invalid.

</member>
<member name="M:SDL_JoystickNumAxes(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="135">
Get the number of general axis controls on a joystick.

</member>
<member name="M:SDL_JoystickNumBalls(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="140">
  Get the number of trackballs on a joystick.

  Joystick trackballs have only relative motion events associated
  with them and their state cannot be polled.

</member>
<member name="M:SDL_JoystickNumHats(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="148">
Get the number of POV hats on a joystick.

</member>
<member name="M:SDL_JoystickNumButtons(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="153">
Get the number of buttons on a joystick.

</member>
<member name="M:SDL_JoystickUpdate" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="158">
  Update the current state of the open joysticks.

  This is called automatically by the event loop if any joystick
  events are enabled.

</member>
<member name="M:SDL_JoystickEventState(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="166">
  Enable/disable joystick event polling.

  If joystick events are disabled, you must call SDL_JoystickUpdate()
  yourself and check the state of the joystick when you want joystick
  information.

  The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.

</member>
<member name="M:SDL_JoystickGetAxis(_SDL_Joystick*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="177">
  Get the current state of an axis control on a joystick.

  The state is a value ranging from -32768 to 32767.

  The axis indices start at index 0.

</member>
<member name="M:SDL_JoystickGetHat(_SDL_Joystick*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="187">
\name Hat positions

  Get the current state of a POV hat on a joystick.

  The hat indices start at index 0.

  \return The return value is one of the following positions:
           - ::SDL_HAT_CENTERED
           - ::SDL_HAT_UP
           - ::SDL_HAT_RIGHT
           - ::SDL_HAT_DOWN
           - ::SDL_HAT_LEFT
           - ::SDL_HAT_RIGHTUP
           - ::SDL_HAT_RIGHTDOWN
           - ::SDL_HAT_LEFTUP
           - ::SDL_HAT_LEFTDOWN

</member>
<member name="M:SDL_JoystickGetBall(_SDL_Joystick*,System.Int32,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="221">
  Get the ball axis change since the last poll.

  \return 0, or -1 if you passed it invalid parameters.

  The ball indices start at index 0.

</member>
<member name="M:SDL_JoystickGetButton(_SDL_Joystick*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="231">
  Get the current state of a button on a joystick.

  The button indices start at index 0.

</member>
<member name="M:SDL_JoystickClose(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_joystick.h" line="239">
Close a joystick previously opened with SDL_JoystickOpen().

</member>
<member name="T:_SDL_GameController" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_gamecontroller.h

  Include file for SDL game controller event handling

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

  \file SDL_gamecontroller.h

  In order to use these functions, SDL_Init() must have been called
  with the ::SDL_INIT_JOYSTICK flag.  This causes SDL to scan the system
  for game controllers, and load appropriate drivers.

  If you would like to receive controller updates while the application
  is in the background, you should set the following hint before calling
  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS

</member>
<member name="T:SDL_GameControllerButtonBind" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="67">
Get the SDL joystick layer binding for this controller button/axis mapping

</member>
<!-- Discarding badly formed XML document comment for member 'M:SDL_GameControllerAddMappingsFromRW(SDL_RWops*,System.Int32)'. -->
<member name="M:SDL_GameControllerAddMapping(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="122">
  Load a set of mappings from a file, filtered by the current SDL_GetPlatform()

  Convenience macro.

  Add or update an existing mapping configuration

 \return 1 if mapping is added, 0 if updated, -1 on error

</member>
<member name="M:SDL_GameControllerMappingForGUID(SDL_JoystickGUID)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="136">
  Get a mapping string for a GUID

  \return the mapping string.  Must be freed with SDL_free.  Returns NULL if no mapping is available

</member>
<member name="M:SDL_GameControllerMapping(_SDL_GameController*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="143">
  Get a mapping string for an open GameController

  \return the mapping string.  Must be freed with SDL_free.  Returns NULL if no mapping is available

</member>
<member name="M:SDL_IsGameController(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="150">
Is the joystick on this index supported by the game controller interface?

</member>
<member name="M:SDL_GameControllerNameForIndex(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="156">
Get the implementation dependent name of a game controller.
This can be called before any controllers are opened.
If no name can be found, this function returns NULL.

</member>
<member name="M:SDL_GameControllerOpen(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="163">
  Open a game controller for use.
  The index passed as an argument refers to the N'th game controller on the system.
  This index is the value which will identify this controller in future controller
  events.

  \return A controller identifier, or NULL if an error occurred.

</member>
<member name="M:SDL_GameControllerName(_SDL_GameController*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="173">
Return the name for this currently opened controller

</member>
<member name="M:SDL_GameControllerGetAttached(_SDL_GameController*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="178">
Returns SDL_TRUE if the controller has been opened and currently connected,
or SDL_FALSE if it has not.

</member>
<member name="M:SDL_GameControllerGetJoystick(_SDL_GameController*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="184">
Get the underlying joystick object used by a controller

</member>
<member name="M:SDL_GameControllerEventState(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="189">
  Enable/disable controller event polling.

  If controller events are disabled, you must call SDL_GameControllerUpdate()
  yourself and check the state of the controller when you want controller
  information.

  The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.

</member>
<member name="M:SDL_GameControllerUpdate" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="200">
  Update the current state of the open game controllers.

  This is called automatically by the event loop if any game controller
  events are enabled.

</member>
<member name="M:SDL_GameControllerGetAxisFromString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="224">
turn this string into a axis mapping

</member>
<member name="M:SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="229">
turn this axis enum into a string mapping

</member>
<member name="M:SDL_GameControllerGetBindForAxis(_SDL_GameController*,SDL_GameControllerAxis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="234">
Get the SDL joystick layer binding for this controller button mapping

</member>
<member name="M:SDL_GameControllerGetAxis(_SDL_GameController*,SDL_GameControllerAxis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="241">
  Get the current state of an axis control on a game controller.

  The state is a value ranging from -32768 to 32767.

  The axis indices start at index 0.

</member>
<member name="M:SDL_GameControllerGetButtonFromString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="276">
turn this string into a button mapping

</member>
<member name="M:SDL_GameControllerGetStringForButton(SDL_GameControllerButton)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="281">
turn this button enum into a string mapping

</member>
<member name="M:SDL_GameControllerGetBindForButton(_SDL_GameController*,SDL_GameControllerButton)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="286">
Get the SDL joystick layer binding for this controller button mapping

</member>
<member name="M:SDL_GameControllerGetButton(_SDL_GameController*,SDL_GameControllerButton)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="294">
  Get the current state of a button on a game controller.

  The button indices start at index 0.

</member>
<member name="M:SDL_GameControllerClose(_SDL_GameController*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gamecontroller.h" line="302">
Close a controller previously opened with SDL_GameControllerOpen().

</member>
<member name="D:SDL_TouchID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_quit.h

  Include file for SDL quit event handling.

  \file SDL_quit.h

  An ::SDL_QUIT event is generated when the user tries to close the application
  window.  If it is ignored or filtered out, the window will remain open.
  If it is not ignored or filtered, it is queued normally and the window
  is allowed to close.  When the window is closed, screen updates will
  complete, but have no effect.

  SDL_Init() installs signal handlers for SIGINT (keyboard interrupt)
  and SIGTERM (system termination request), if handlers do not already
  exist, that generate ::SDL_QUIT events as well.  There is no way
  to determine the cause of an ::SDL_QUIT event, but setting a signal
  handler in your application will override the default generation of
  quit events for that signal.

  \sa SDL_Quit()

  \file SDL_gesture.h

  Include file for SDL gesture event handling.

  \file SDL_touch.h

  Include file for SDL touch event handling.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="M:SDL_GetNumTouchDevices" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_touch.h" line="58">
\brief Get the number of registered touch devices.

</member>
<member name="M:SDL_GetTouchDevice(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_touch.h" line="63">
\brief Get the touch ID with the given index, or 0 if the index is invalid.

</member>
<member name="M:SDL_GetNumTouchFingers(System.Int64)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_touch.h" line="68">
\brief Get the number of active fingers for a given touch device.

</member>
<member name="M:SDL_GetTouchFinger(System.Int64,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_touch.h" line="73">
\brief Get the finger object of the given touch, with the given index.

</member>
<member name="D:SDL_GestureID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="M:SDL_RecordGesture(System.Int64)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gesture.h" line="48">
  \brief Begin Recording a gesture on the specified touch, or all touches (-1)



</member>
<member name="M:SDL_SaveAllDollarTemplates(SDL_RWops*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gesture.h" line="56">
  \brief Save all currently loaded Dollar Gesture templates



</member>
<member name="M:SDL_SaveDollarTemplate(System.Int64,SDL_RWops*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gesture.h" line="63">
  \brief Save a currently loaded Dollar Gesture template



</member>
<member name="M:SDL_LoadDollarTemplates(System.Int64,SDL_RWops*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_gesture.h" line="71">
  \brief Load Dollar Gesture templates from a file



</member>
<member name="F:SDL_USEREVENT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="140">
Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
     *  and should be allocated with SDL_RegisterEvents()

</member>
<member name="F:SDL_LASTEVENT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="145">
This last event is only for bounding internal arrays

</member>
<member name="T:SDL_CommonEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="151">
\brief Fields shared by every event

</member>
<member name="T:SDL_WindowEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="160">
\brief Window state change event data (event.window.*)

</member>
<member name="T:SDL_KeyboardEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="176">
\brief Keyboard button event structure (event.key.*)

</member>
<member name="T:SDL_TextEditingEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="192">
\brief Keyboard text editing event structure (event.edit.*)

</member>
<member name="T:SDL_TextInputEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="207">
\brief Keyboard text input event structure (event.text.*)

</member>
<member name="T:SDL_MouseMotionEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="218">
\brief Mouse motion event structure (event.motion.*)

</member>
<member name="T:SDL_MouseButtonEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="234">
\brief Mouse button event structure (event.button.*)

</member>
<member name="T:SDL_MouseWheelEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="251">
\brief Mouse wheel event structure (event.wheel.*)

</member>
<member name="T:SDL_JoyAxisEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="264">
\brief Joystick axis motion event structure (event.jaxis.*)

</member>
<member name="T:SDL_JoyBallEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="280">
\brief Joystick trackball motion event structure (event.jball.*)

</member>
<member name="T:SDL_JoyHatEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="296">
\brief Joystick hat position change event structure (event.jhat.*)

</member>
<member name="T:SDL_JoyButtonEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="316">
\brief Joystick button event structure (event.jbutton.*)

</member>
<member name="T:SDL_JoyDeviceEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="330">
\brief Joystick device event structure (event.jdevice.*)

</member>
<member name="T:SDL_ControllerAxisEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="341">
\brief Game controller axis motion event structure (event.caxis.*)

</member>
<member name="T:SDL_ControllerButtonEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="358">
\brief Game controller button event structure (event.cbutton.*)

</member>
<member name="T:SDL_ControllerDeviceEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="373">
\brief Controller device event structure (event.cdevice.*)

</member>
<member name="T:SDL_TouchFingerEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="384">
\brief Touch finger event structure (event.tfinger.*)

</member>
<member name="T:SDL_MultiGestureEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="401">
\brief Multiple Finger Gesture Event (event.mgesture.*)

</member>
<member name="T:SDL_DollarGestureEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="418">
\brief Dollar Gesture Event (event.dgesture.*)

</member>
<member name="T:SDL_DropEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="434">
\brief An event used to request a file open by the system (event.drop.*)
       This event is disabled by default, you can enable it with SDL_EventState()
\note If you enable this event, you must free the filename in the event.

</member>
<member name="T:SDL_QuitEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="447">
\brief The "quit requested" event

</member>
<member name="T:SDL_OSEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="456">
\brief OS Specific event

</member>
<member name="T:SDL_UserEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="465">
\brief A user-defined event type (event.user.*)

</member>
<member name="T:SDL_SysWMEvent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="482">
  \brief A video driver dependent system event (event.syswm.*)
         This event is disabled by default, you can enable it with SDL_EventState()

  \note If you want to use this event, you should include SDL_syswm.h.

</member>
<member name="T:SDL_Event" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="495">
\brief General event structure

</member>
<member name="M:SDL_PumpEvents" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="538">
  Pumps the event loop, gathering events from the input devices.

  This function updates the event queue and internal input device state.

  This should only be run in the thread that sets the video mode.

</member>
<member name="M:SDL_PeepEvents(SDL_Event*,System.Int32,SDL_eventaction,System.UInt32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="555">
  Checks the event queue for messages and optionally returns them.

  If \c action is ::SDL_ADDEVENT, up to \c numevents events will be added to
  the back of the event queue.

  If \c action is ::SDL_PEEKEVENT, up to \c numevents events at the front
  of the event queue, within the specified minimum and maximum type,
  will be returned and will not be removed from the queue.

  If \c action is ::SDL_GETEVENT, up to \c numevents events at the front
  of the event queue, within the specified minimum and maximum type,
  will be returned and will be removed from the queue.

  \return The number of events actually stored, or -1 if there was an error.

  This function is thread-safe.

</member>
<member name="M:SDL_HasEvent(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="578">
Checks to see if certain event types are in the event queue.

</member>
<member name="M:SDL_FlushEvent(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="584">
This function clears events from the event queue

</member>
<member name="M:SDL_PollEvent(SDL_Event*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="590">
  \brief Polls for currently pending events.

  \return 1 if there are any pending events, or 0 if there are none available.

  \param event If not NULL, the next event is removed from the queue and
               stored in that area.

</member>
<member name="M:SDL_WaitEvent(SDL_Event*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="600">
  \brief Waits indefinitely for the next available event.

  \return 1, or 0 if there was an error while waiting for events.

  \param event If not NULL, the next event is removed from the queue and
               stored in that area.

</member>
<member name="M:SDL_WaitEventTimeout(SDL_Event*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="610">
  \brief Waits until the specified timeout (in milliseconds) for the next
         available event.

  \return 1, or 0 if there was an error while waiting for events.

  \param event If not NULL, the next event is removed from the queue and
               stored in that area.
  \param timeout The timeout (in milliseconds) to wait for next event.

</member>
<member name="M:SDL_PushEvent(SDL_Event*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="623">
  \brief Add an event to the event queue.

  \return 1 on success, 0 if the event was filtered, or -1 if the event queue
          was full or there was some other error.

</member>
<member name="M:SDL_SetEventFilter(=FUNC:System.Int32(System.Void*,SDL_Event*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="633">
  Sets up a filter to process all events before they change internal state and
  are posted to the internal event queue.

  The filter is prototyped as:
  \code
      int SDL_EventFilter(void *userdata, SDL_Event * event);
  \endcode

  If the filter returns 1, then the event will be added to the internal queue.
  If it returns 0, then the event will be dropped from the queue, but the
  internal state will still be updated.  This allows selective filtering of
  dynamically arriving events.

  \warning  Be very careful of what you do in the event filter function, as
            it may run in a different thread!

  There is one caveat when dealing with the ::SDL_QuitEvent event type.  The
  event filter is only called when the window manager desires to close the
  application window.  If the event filter returns 1, then the window will
  be closed, otherwise the window will remain open if possible.

  If the quit event is generated by an interrupt signal, it will bypass the
  internal queue and be delivered to the application at the next event poll.

</member>
<member name="M:SDL_GetEventFilter(=FUNC:System.Int32(System.Void*,SDL_Event*)*,System.Void**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="661">
Return the current event filter - can be used to "chain" filters.
If there is no event filter set, this function returns SDL_FALSE.

</member>
<member name="M:SDL_AddEventWatch(=FUNC:System.Int32(System.Void*,SDL_Event*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="668">
Add a function which is called when an event is added to the queue.

</member>
<member name="M:SDL_DelEventWatch(=FUNC:System.Int32(System.Void*,SDL_Event*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="674">
Remove an event watch function added with SDL_AddEventWatch()

</member>
<member name="M:SDL_FilterEvents(=FUNC:System.Int32(System.Void*,SDL_Event*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="680">
Run the filter function on the current event queue, removing any
events for which the filter returns 0.

</member>
<member name="M:SDL_EventState(System.UInt32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="693">
This function allows you to set the state of processing certain events.
 - If \c state is set to ::SDL_IGNORE, that event will be automatically
   dropped from the event queue and will not event be filtered.
 - If \c state is set to ::SDL_ENABLE, that event will be processed
   normally.
 - If \c state is set to ::SDL_QUERY, SDL_EventState() will return the
   current processing state of the specified event.

</member>
<member name="M:SDL_RegisterEvents(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_events.h" line="706">
  This function allocates a set of user-defined events, and returns
  the beginning event number for that set of events.

  If there aren't enough user-defined events left, this function
  returns (Uint32)-1

</member>
<member name="M:SDL_GetBasePath" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_filesystem.h

  \brief Include file for filesystem SDL API functions

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

 \brief Get the path where the application resides.

 Get the "base path". This is the directory where the application was run
  from, which is probably the installation directory, and may or may not
  be the process's current working directory.

 This returns an absolute path in UTF-8 encoding, and is guaranteed to
  end with a path separator ('\\' on Windows, '/' most other places).

 The pointer returned by this function is owned by you. Please call
  SDL_free() on the pointer when you are done with it, or it will be a
  memory leak. This is not necessarily a fast call, though, so you should
  call this once near startup and save the string if you need it.

 Some platforms can't determine the application's path, and on other
  platforms, this might be meaningless. In such cases, this function will
  return NULL.

  \return String of base dir in UTF-8 encoding, or NULL on error.

 \sa SDL_GetPrefPath

</member>
<member name="M:SDL_GetPrefPath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_filesystem.h" line="65">
 \brief Get the user-and-app-specific path where files can be written.

 Get the "pref dir". This is meant to be where users can write personal
  files (preferences and save games, etc) that are specific to your
  application. This directory is unique per user, per application.

 This function will decide the appropriate location in the native filesystem,
  create the directory if necessary, and return a string of the absolute
  path to the directory in UTF-8 encoding.

 On Windows, the string might look like:
  "C:\\Users\\bob\\AppData\\Roaming\\My Company\\My Program Name\\"

 On Linux, the string might look like:
  "/home/bob/.local/share/My Program Name/"

 On Mac OS X, the string might look like:
  "/Users/bob/Library/Application Support/My Program Name/"

 (etc.)

 You specify the name of your organization (if it's not a real organization,
  your name or an Internet domain you own might do) and the name of your
  application. These should be untranslated proper names.

 Both the org and app strings may become part of a directory name, so
  please follow these rules:

    - Try to use the same org string (including case-sensitivity) for
      all your applications that use this function.
    - Always use a unique app string for each one, and make sure it never
      changes for an app once you've decided on it.
    - Unicode characters are legal, as long as it's UTF-8 encoded, but...
    - ...only use letters, numbers, and spaces. Avoid punctuation like
      "Game Name 2: Bad Guy's Revenge!" ... "Game Name 2" is sufficient.

 This returns an absolute path in UTF-8 encoding, and is guaranteed to
  end with a path separator ('\\' on Windows, '/' most other places).

 The pointer returned by this function is owned by you. Please call
  SDL_free() on the pointer when you are done with it, or it will be a
  memory leak. This is not necessarily a fast call, though, so you should
  call this once near startup and save the string if you need it.

 You should assume the path returned by this function is the only safe
  place to write files (and that SDL_GetBasePath(), while it might be
  writable, or even the parent of the returned path, aren't where you
  should be writing things).

 Some platforms can't determine the pref path, and on other
  platforms, this might be meaningless. In such cases, this function will
  return NULL.

   \param org The name of your organization.
   \param app The name of your application.
  \return UTF-8 string of user dir in platform-dependent notation. NULL
          if there's a problem (creating directory failed, etc).

 \sa SDL_GetBasePath

</member>
<!-- Discarding badly formed XML document comment for member 'T:_SDL_Haptic'. -->
<!-- Discarding badly formed XML document comment for member 'T:SDL_HapticDirection'. -->
<member name="T:SDL_HapticConstant" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="446">
  \brief A structure containing a template for a Constant effect.

  The struct is exclusive to the ::SDL_HAPTIC_CONSTANT effect.

  A constant effect applies a constant force in the specified direction
  to the joystick.

  \sa SDL_HAPTIC_CONSTANT
  \sa SDL_HapticEffect

</member>
<member name="T:SDL_HapticPeriodic" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="481">
 *  \brief A structure containing a template for a Periodic effect.
 *
 *  The struct handles the following effects:
 *   - ::SDL_HAPTIC_SINE
 *   - ::SDL_HAPTIC_LEFTRIGHT
 *   - ::SDL_HAPTIC_TRIANGLE
 *   - ::SDL_HAPTIC_SAWTOOTHUP
 *   - ::SDL_HAPTIC_SAWTOOTHDOWN
 *
 *  A periodic effect consists in a wave-shaped effect that repeats itself
 *  over time.  The type determines the shape of the wave and the parameters
 *  determine the dimensions of the wave.
 *
 *  Phase is given by hundredth of a cycle meaning that giving the phase a value
 *  of 9000 will displace it 25% of its period.  Here are sample values:
 *   -     0: No phase displacement.
 *   -  9000: Displaced 25% of its period.
 *   - 18000: Displaced 50% of its period.
 *   - 27000: Displaced 75% of its period.
 *   - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.
 *
 *  Examples:
 *  \verbatim
    SDL_HAPTIC_SINE
      __      __      __      __
     /  \    /  \    /  \    /
    /    \__/    \__/    \__/

    SDL_HAPTIC_SQUARE
     __    __    __    __    __
    |  |  |  |  |  |  |  |  |  |
    |  |__|  |__|  |__|  |__|  |

    SDL_HAPTIC_TRIANGLE
      /\    /\    /\    /\    /
     /  \  /  \  /  \  /  \  /
    /    \/    \/    \/    \/

    SDL_HAPTIC_SAWTOOTHUP
      /|  /|  /|  /|  /|  /|  /|
     / | / | / | / | / | / | / |
    /  |/  |/  |/  |/  |/  |/  |

    SDL_HAPTIC_SAWTOOTHDOWN
    \  |\  |\  |\  |\  |\  |\  |
     \ | \ | \ | \ | \ | \ | \ |
      \|  \|  \|  \|  \|  \|  \|
    \endverbatim
 *
 *  \sa SDL_HAPTIC_SINE
 *  \sa SDL_HAPTIC_LEFTRIGHT
 *  \sa SDL_HAPTIC_TRIANGLE
 *  \sa SDL_HAPTIC_SAWTOOTHUP
 *  \sa SDL_HAPTIC_SAWTOOTHDOWN
 *  \sa SDL_HapticEffect

</member>
<member name="T:SDL_HapticCondition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="567">
  \brief A structure containing a template for a Condition effect.

  The struct handles the following effects:
   - ::SDL_HAPTIC_SPRING: Effect based on axes position.
   - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.
   - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.
   - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.

  Direction is handled by condition internals instead of a direction member.
  The condition effect specific members have three parameters.  The first
  refers to the X axis, the second refers to the Y axis and the third
  refers to the Z axis.  The right terms refer to the positive side of the
  axis and the left terms refer to the negative side of the axis.  Please
  refer to the ::SDL_HapticDirection diagram for which side is positive and
  which is negative.

  \sa SDL_HapticDirection
  \sa SDL_HAPTIC_SPRING
  \sa SDL_HAPTIC_DAMPER
  \sa SDL_HAPTIC_INERTIA
  \sa SDL_HAPTIC_FRICTION
  \sa SDL_HapticEffect

</member>
<member name="T:SDL_HapticRamp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="615">
  \brief A structure containing a template for a Ramp effect.

  This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.

  The ramp effect starts at start strength and ends at end strength.
  It augments in linear fashion.  If you use attack and fade with a ramp
  the effects get added to the ramp effect making the effect become
  quadratic instead of linear.

  \sa SDL_HAPTIC_RAMP
  \sa SDL_HapticEffect

</member>
<member name="T:SDL_HapticLeftRight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="653">
 \brief A structure containing a template for a Left/Right effect.

 This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.

 The Left/Right effect is used to explicitly control the large and small
 motors, commonly found in modern game controllers. One motor is high
 frequency, the other is low frequency.

 \sa SDL_HAPTIC_LEFTRIGHT
 \sa SDL_HapticEffect

</member>
<member name="T:SDL_HapticCustom" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="678">
  \brief A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.

  A custom force feedback effect is much like a periodic effect, where the
  application can define its exact shape.  You will have to allocate the
  data yourself.  Data should consist of channels * samples Uint16 samples.

  If channels is one, the effect is rotated using the defined direction.
  Otherwise it uses the samples in data for the different axes.

  \sa SDL_HAPTIC_CUSTOM
  \sa SDL_HapticEffect

</member>
<!-- Discarding badly formed XML document comment for member 'T:SDL_HapticEffect'. -->
<member name="M:SDL_NumHaptics" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="801">
  \brief Count the number of haptic devices attached to the system.

  \return Number of haptic devices detected on the system.

</member>
<member name="M:SDL_HapticName(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="808">
  \brief Get the implementation dependent name of a Haptic device.

  This can be called before any joysticks are opened.
  If no name can be found, this function returns NULL.

  \param device_index Index of the device to get its name.
  \return Name of the device or NULL on error.

  \sa SDL_NumHaptics

</member>
<member name="M:SDL_HapticOpen(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="821">
  \brief Opens a Haptic device for usage.

  The index passed as an argument refers to the N'th Haptic device on this
  system.

  When opening a haptic device, its gain will be set to maximum and
  autocenter will be disabled.  To modify these values use
  SDL_HapticSetGain() and SDL_HapticSetAutocenter().

  \param device_index Index of the device to open.
  \return Device identifier or NULL on error.

  \sa SDL_HapticIndex
  \sa SDL_HapticOpenFromMouse
  \sa SDL_HapticOpenFromJoystick
  \sa SDL_HapticClose
  \sa SDL_HapticSetGain
  \sa SDL_HapticSetAutocenter
  \sa SDL_HapticPause
  \sa SDL_HapticStopAll

</member>
<member name="M:SDL_HapticOpened(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="845">
  \brief Checks if the haptic device at index has been opened.

  \param device_index Index to check to see if it has been opened.
  \return 1 if it has been opened or 0 if it hasn't.

  \sa SDL_HapticOpen
  \sa SDL_HapticIndex

</member>
<member name="M:SDL_HapticIndex(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="856">
  \brief Gets the index of a haptic device.

  \param haptic Haptic device to get the index of.
  \return The index of the haptic device or -1 on error.

  \sa SDL_HapticOpen
  \sa SDL_HapticOpened

</member>
<member name="M:SDL_MouseIsHaptic" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="867">
  \brief Gets whether or not the current mouse has haptic capabilities.

  \return SDL_TRUE if the mouse is haptic, SDL_FALSE if it isn't.

  \sa SDL_HapticOpenFromMouse

</member>
<member name="M:SDL_HapticOpenFromMouse" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="876">
  \brief Tries to open a haptic device from the current mouse.

  \return The haptic device identifier or NULL on error.

  \sa SDL_MouseIsHaptic
  \sa SDL_HapticOpen

</member>
<member name="M:SDL_JoystickIsHaptic(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="886">
  \brief Checks to see if a joystick has haptic features.

  \param joystick Joystick to test for haptic capabilities.
  \return 1 if the joystick is haptic, 0 if it isn't
          or -1 if an error ocurred.

  \sa SDL_HapticOpenFromJoystick

</member>
<member name="M:SDL_HapticOpenFromJoystick(_SDL_Joystick*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="897">
  \brief Opens a Haptic device for usage from a Joystick device.

  You must still close the haptic device seperately.  It will not be closed
  with the joystick.

  When opening from a joystick you should first close the haptic device before
  closing the joystick device.  If not, on some implementations the haptic
  device will also get unallocated and you'll be unable to use force feedback
  on that device.

  \param joystick Joystick to create a haptic device from.
  \return A valid haptic device identifier on success or NULL on error.

  \sa SDL_HapticOpen
  \sa SDL_HapticClose

</member>
<member name="M:SDL_HapticClose(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="917">
  \brief Closes a Haptic device previously opened with SDL_HapticOpen().

  \param haptic Haptic device to close.

</member>
<member name="M:SDL_HapticNumEffects(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="924">
  \brief Returns the number of effects a haptic device can store.

  On some platforms this isn't fully supported, and therefore is an
  approximation.  Always check to see if your created effect was actually
  created and do not rely solely on SDL_HapticNumEffects().

  \param haptic The haptic device to query effect max.
  \return The number of effects the haptic device can store or
          -1 on error.

  \sa SDL_HapticNumEffectsPlaying
  \sa SDL_HapticQuery

</member>
<member name="M:SDL_HapticNumEffectsPlaying(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="940">
  \brief Returns the number of effects a haptic device can play at the same
         time.

  This is not supported on all platforms, but will always return a value.
  Added here for the sake of completeness.

  \param haptic The haptic device to query maximum playing effects.
  \return The number of effects the haptic device can play at the same time
          or -1 on error.

  \sa SDL_HapticNumEffects
  \sa SDL_HapticQuery

</member>
<!-- Discarding badly formed XML document comment for member 'M:SDL_HapticQuery(_SDL_Haptic*)'. -->
<member name="M:SDL_HapticNumAxes(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="975">
  \brief Gets the number of haptic axes the device has.

  \sa SDL_HapticDirection

</member>
<member name="M:SDL_HapticEffectSupported(_SDL_Haptic*,SDL_HapticEffect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="982">
  \brief Checks to see if effect is supported by haptic.

  \param haptic Haptic device to check on.
  \param effect Effect to check to see if it is supported.
  \return SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error.

  \sa SDL_HapticQuery
  \sa SDL_HapticNewEffect

</member>
<member name="M:SDL_HapticNewEffect(_SDL_Haptic*,SDL_HapticEffect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="996">
  \brief Creates a new haptic effect on the device.

  \param haptic Haptic device to create the effect on.
  \param effect Properties of the effect to create.
  \return The id of the effect on success or -1 on error.

  \sa SDL_HapticUpdateEffect
  \sa SDL_HapticRunEffect
  \sa SDL_HapticDestroyEffect

</member>
<member name="M:SDL_HapticUpdateEffect(_SDL_Haptic*,System.Int32,SDL_HapticEffect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1010">
  \brief Updates the properties of an effect.

  Can be used dynamically, although behaviour when dynamically changing
  direction may be strange.  Specifically the effect may reupload itself
  and start playing from the start.  You cannot change the type either when
  running SDL_HapticUpdateEffect().

  \param haptic Haptic device that has the effect.
  \param effect Effect to update.
  \param data New effect properties to use.
  \return 0 on success or -1 on error.

  \sa SDL_HapticNewEffect
  \sa SDL_HapticRunEffect
  \sa SDL_HapticDestroyEffect

</member>
<member name="M:SDL_HapticRunEffect(_SDL_Haptic*,System.Int32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1031">
  \brief Runs the haptic effect on its associated haptic device.

  If iterations are ::SDL_HAPTIC_INFINITY, it'll run the effect over and over
  repeating the envelope (attack and fade) every time.  If you only want the
  effect to last forever, set ::SDL_HAPTIC_INFINITY in the effect's length
  parameter.

  \param haptic Haptic device to run the effect on.
  \param effect Identifier of the haptic effect to run.
  \param iterations Number of iterations to run the effect. Use
         ::SDL_HAPTIC_INFINITY for infinity.
  \return 0 on success or -1 on error.

  \sa SDL_HapticStopEffect
  \sa SDL_HapticDestroyEffect
  \sa SDL_HapticGetEffectStatus

</member>
<member name="M:SDL_HapticStopEffect(_SDL_Haptic*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1053">
  \brief Stops the haptic effect on its associated haptic device.

  \param haptic Haptic device to stop the effect on.
  \param effect Identifier of the effect to stop.
  \return 0 on success or -1 on error.

  \sa SDL_HapticRunEffect
  \sa SDL_HapticDestroyEffect

</member>
<member name="M:SDL_HapticDestroyEffect(_SDL_Haptic*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1066">
  \brief Destroys a haptic effect on the device.

  This will stop the effect if it's running.  Effects are automatically
  destroyed when the device is closed.

  \param haptic Device to destroy the effect on.
  \param effect Identifier of the effect to destroy.

  \sa SDL_HapticNewEffect

</member>
<member name="M:SDL_HapticGetEffectStatus(_SDL_Haptic*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1080">
  \brief Gets the status of the current effect on the haptic device.

  Device must support the ::SDL_HAPTIC_STATUS feature.

  \param haptic Haptic device to query the effect status on.
  \param effect Identifier of the effect to query its status.
  \return 0 if it isn't playing, 1 if it is playing or -1 on error.

  \sa SDL_HapticRunEffect
  \sa SDL_HapticStopEffect

</member>
<member name="M:SDL_HapticSetGain(_SDL_Haptic*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1095">
  \brief Sets the global gain of the device.

  Device must support the ::SDL_HAPTIC_GAIN feature.

  The user may specify the maximum gain by setting the environment variable
  SDL_HAPTIC_GAIN_MAX which should be between 0 and 100.  All calls to
  SDL_HapticSetGain() will scale linearly using SDL_HAPTIC_GAIN_MAX as the
  maximum.

  \param haptic Haptic device to set the gain on.
  \param gain Value to set the gain to, should be between 0 and 100.
  \return 0 on success or -1 on error.

  \sa SDL_HapticQuery

</member>
<member name="M:SDL_HapticSetAutocenter(_SDL_Haptic*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1113">
  \brief Sets the global autocenter of the device.

  Autocenter should be between 0 and 100.  Setting it to 0 will disable
  autocentering.

  Device must support the ::SDL_HAPTIC_AUTOCENTER feature.

  \param haptic Haptic device to set autocentering on.
  \param autocenter Value to set autocenter to, 0 disables autocentering.
  \return 0 on success or -1 on error.

  \sa SDL_HapticQuery

</member>
<member name="M:SDL_HapticPause(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1130">
  \brief Pauses a haptic device.

  Device must support the ::SDL_HAPTIC_PAUSE feature.  Call
  SDL_HapticUnpause() to resume playback.

  Do not modify the effects nor add new ones while the device is paused.
  That can cause all sorts of weird errors.

  \param haptic Haptic device to pause.
  \return 0 on success or -1 on error.

  \sa SDL_HapticUnpause

</member>
<member name="M:SDL_HapticUnpause(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1146">
  \brief Unpauses a haptic device.

  Call to unpause after SDL_HapticPause().

  \param haptic Haptic device to pause.
  \return 0 on success or -1 on error.

  \sa SDL_HapticPause

</member>
<member name="M:SDL_HapticStopAll(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1158">
  \brief Stops all the currently playing effects on a haptic device.

  \param haptic Haptic device to stop.
  \return 0 on success or -1 on error.

</member>
<member name="M:SDL_HapticRumbleSupported(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1166">
  \brief Checks to see if rumble is supported on a haptic device.

  \param haptic Haptic device to check to see if it supports rumble.
  \return SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error.

  \sa SDL_HapticRumbleInit
  \sa SDL_HapticRumblePlay
  \sa SDL_HapticRumbleStop

</member>
<member name="M:SDL_HapticRumbleInit(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1178">
  \brief Initializes the haptic device for simple rumble playback.

  \param haptic Haptic device to initialize for simple rumble playback.
  \return 0 on success or -1 on error.

  \sa SDL_HapticOpen
  \sa SDL_HapticRumbleSupported
  \sa SDL_HapticRumblePlay
  \sa SDL_HapticRumbleStop

</member>
<member name="M:SDL_HapticRumblePlay(_SDL_Haptic*,System.Single,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1191">
  \brief Runs simple rumble on a haptic device

  \param haptic Haptic device to play rumble effect on.
  \param strength Strength of the rumble to play as a 0-1 float value.
  \param length Length of the rumble to play in milliseconds.
  \return 0 on success or -1 on error.

  \sa SDL_HapticRumbleSupported
  \sa SDL_HapticRumbleInit
  \sa SDL_HapticRumbleStop

</member>
<member name="M:SDL_HapticRumbleStop(_SDL_Haptic*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_haptic.h" line="1205">
  \brief Stops the simple rumble on a haptic device.

  \param haptic Haptic to stop the rumble on.
  \return 0 on success or -1 on error.

  \sa SDL_HapticRumbleSupported
  \sa SDL_HapticRumbleInit
  \sa SDL_HapticRumblePlay

</member>
<member name="M:SDL_SetHintWithPriority(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,SDL_HintPriority)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_hints.h" line="450">
  \brief Set a hint with a specific priority

  The priority controls the behavior when setting a hint that already
  has a value.  Hints will replace existing hints of their priority and
  lower.  Environment variables are considered to have override priority.

  \return SDL_TRUE if the hint was set, SDL_FALSE otherwise

</member>
<member name="M:SDL_SetHint(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_hints.h" line="463">
  \brief Set a hint with normal priority

  \return SDL_TRUE if the hint was set, SDL_FALSE otherwise

</member>
<member name="M:SDL_GetHint(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_hints.h" line="471">
  \brief Get a hint

  \return The string value of a hint variable.

</member>
<member name="D:SDL_HintCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_hints.h" line="478">
  \brief Add a function to watch a particular hint

  \param name The hint to watch
  \param callback The function to call when the hint value changes
  \param userdata A pointer to pass to the callback function

</member>
<member name="M:SDL_DelHintCallback(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Void(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_hints.h" line="490">
  \brief Remove a function watching a particular hint

  \param name The hint being watched
  \param callback The function being called when the hint value changes
  \param userdata A pointer being passed to the callback function

</member>
<member name="M:SDL_ClearHints" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_hints.h" line="501">
  \brief  Clear all hints

  This function is called during SDL_Quit() to free stored hints.

</member>
<member name="M:SDL_LoadObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_loadso.h

  System dependent library loading routines

  Some things to keep in mind:
  \li These functions only work on C function names.  Other languages may
      have name mangling and intrinsic language support that varies from
      compiler to compiler.
  \li Make sure you declare your function pointers with the same calling
      convention as the actual library function.  Your code will crash
      mysteriously if you do not do this.
  \li Avoid namespace collisions.  If you load a symbol from the library,
      it is not defined whether or not it goes into the global symbol
      namespace for the application.  If it does and it conflicts with
      symbols in your code or other shared libraries, you will not get
      the results you expect. :)

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

This function dynamically loads a shared object and returns a pointer
to the object handle (or NULL if there was an error).
The 'sofile' parameter is a system dependent name of the object file.

</member>
<member name="M:SDL_LoadFunction(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_loadso.h" line="60">
Given an object handle, this function looks up the address of the
named function in the shared object and returns it.  This address
is no longer valid after calling SDL_UnloadObject().

</member>
<member name="M:SDL_UnloadObject(System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_loadso.h" line="68">
Unload a shared object from memory.

</member>
<member name="M:SDL_LogSetAllPriority(SDL_LogPriority)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="114">
\brief Set the priority of all log categories

</member>
<member name="M:SDL_LogSetPriority(System.Int32,SDL_LogPriority)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="119">
\brief Set the priority of a particular log category

</member>
<member name="M:SDL_LogGetPriority(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="125">
\brief Get the priority of a particular log category

</member>
<member name="M:SDL_LogResetPriorities" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="130">
  \brief Reset all priorities to default.

  \note This is called in SDL_Quit().

</member>
<member name="M:SDL_Log(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="137">
\brief Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO

</member>
<member name="M:SDL_LogVerbose(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="142">
\brief Log a message with SDL_LOG_PRIORITY_VERBOSE

</member>
<member name="M:SDL_LogDebug(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="147">
\brief Log a message with SDL_LOG_PRIORITY_DEBUG

</member>
<member name="M:SDL_LogInfo(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="152">
\brief Log a message with SDL_LOG_PRIORITY_INFO

</member>
<member name="M:SDL_LogWarn(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="157">
\brief Log a message with SDL_LOG_PRIORITY_WARN

</member>
<member name="M:SDL_LogError(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="162">
\brief Log a message with SDL_LOG_PRIORITY_ERROR

</member>
<member name="M:SDL_LogCritical(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="167">
\brief Log a message with SDL_LOG_PRIORITY_CRITICAL

</member>
<member name="M:SDL_LogMessage(System.Int32,SDL_LogPriority,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="172">
\brief Log a message with the specified category and priority.

</member>
<member name="M:SDL_LogMessageV(System.Int32,SDL_LogPriority,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="179">
\brief Log a message with the specified category and priority.

</member>
<member name="D:SDL_LogOutputFunction" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="186">
\brief The prototype for the log output function

</member>
<member name="M:SDL_LogGetOutputFunction(=FUNC:System.Void(System.Void*,System.Int32,SDL_LogPriority,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)*,System.Void**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="191">
\brief Get the current log output function.

</member>
<member name="M:SDL_LogSetOutputFunction(=FUNC:System.Void(System.Void*,System.Int32,SDL_LogPriority,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_log.h" line="196">
\brief This function allows you to replace the default log output
       function with one of your own.

</member>
<member name="M:SDL_ShowMessageBox(SDL_MessageBoxData!System.Runtime.CompilerServices.IsConst*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_messagebox.h" line="105">
  \brief Create a modal message box.

  \param messageboxdata The SDL_MessageBoxData structure with title, text, etc.
  \param buttonid The pointer to which user id of hit button should be copied.

  \return -1 on error, otherwise 0 and buttonid contains user id of button
          hit or -1 if dialog was closed.

  \note This function should be called on the thread that created the parent
        window, or on the main thread if the messagebox has no parent.  It will
        block execution of that thread until the user clicks a button or
        closes the messagebox.

</member>
<member name="M:SDL_ShowSimpleMessageBox(System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_messagebox.h" line="121">
  \brief Create a simple modal message box

  \param flags    ::SDL_MessageBoxFlags
  \param title    UTF-8 title text
  \param message  UTF-8 message text
  \param window   The parent window, or NULL for no parent

  \return 0 on success, -1 on error

  \sa SDL_ShowMessageBox

</member>
<member name="M:SDL_GetPowerInfo(System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_power.h" line="52">
  \brief Get the current power supply details.

  \param secs Seconds of battery life left. You can pass a NULL here if
              you don't care. Will return -1 if we can't determine a
              value, or we're not running on a battery.

  \param pct Percentage of battery life left, between 0 and 100. You can
             pass a NULL here if you don't care. Will return -1 if we
             can't determine a value, or we're not running on a battery.

  \return The state of the battery (if any).

</member>
<member name="T:SDL_RendererInfo" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="75">
\brief Information on the capabilities of a render driver or context.

</member>
<member name="T:SDL_Renderer" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="118">
\brief A structure representing rendering state

</member>
<member name="T:SDL_Texture" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="124">
\brief An efficient driver-specific representation of pixel data

</member>
<member name="M:SDL_GetNumRenderDrivers" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="133">
  \brief Get the number of 2D rendering drivers available for the current
         display.

  A render driver is a set of code that handles rendering and texture
  management on a particular display.  Normally there is only one, but
  some drivers may have several available with different capabilities.

  \sa SDL_GetRenderDriverInfo()
  \sa SDL_CreateRenderer()

</member>
<member name="M:SDL_GetRenderDriverInfo(System.Int32,SDL_RendererInfo*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="146">
  \brief Get information about a specific 2D rendering driver for the current
         display.

  \param index The index of the driver to query information about.
  \param info  A pointer to an SDL_RendererInfo struct to be filled with
               information on the rendering driver.

  \return 0 on success, -1 if the index was out of range.

  \sa SDL_CreateRenderer()

</member>
<member name="M:SDL_CreateWindowAndRenderer(System.Int32,System.Int32,System.UInt32,SDL_Window**,SDL_Renderer**)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="161">
  \brief Create a window and default renderer

  \param width    The width of the window
  \param height   The height of the window
  \param window_flags The flags used to create the window
  \param window   A pointer filled with the window, or NULL on error
  \param renderer A pointer filled with the renderer, or NULL on error

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_CreateRenderer(SDL_Window*,System.Int32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="177">
  \brief Create a 2D rendering context for a window.

  \param window The window where rendering is displayed.
  \param index    The index of the rendering driver to initialize, or -1 to
                  initialize the first one supporting the requested flags.
  \param flags    ::SDL_RendererFlags.

  \return A valid rendering context or NULL if there was an error.

  \sa SDL_CreateSoftwareRenderer()
  \sa SDL_GetRendererInfo()
  \sa SDL_DestroyRenderer()

</member>
<member name="M:SDL_CreateSoftwareRenderer(SDL_Surface*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="194">
  \brief Create a 2D software rendering context for a surface.

  \param surface The surface where rendering is done.

  \return A valid rendering context or NULL if there was an error.

  \sa SDL_CreateRenderer()
  \sa SDL_DestroyRenderer()

</member>
<member name="M:SDL_GetRenderer(SDL_Window*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="206">
\brief Get the renderer associated with a window.

</member>
<member name="M:SDL_GetRendererInfo(SDL_Renderer*,SDL_RendererInfo*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="211">
\brief Get information about a rendering context.

</member>
<member name="M:SDL_GetRendererOutputSize(SDL_Renderer*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="217">
\brief Get the output size of a rendering context.

</member>
<member name="M:SDL_CreateTexture(SDL_Renderer*,System.UInt32,System.Int32,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="223">
  \brief Create a texture for a rendering context.

  \param renderer The renderer.
  \param format The format of the texture.
  \param access One of the enumerated values in ::SDL_TextureAccess.
  \param w      The width of the texture in pixels.
  \param h      The height of the texture in pixels.

  \return The created texture is returned, or 0 if no rendering context was
          active,  the format was unsupported, or the width or height were out
          of range.

  \sa SDL_QueryTexture()
  \sa SDL_UpdateTexture()
  \sa SDL_DestroyTexture()

</member>
<member name="M:SDL_CreateTextureFromSurface(SDL_Renderer*,SDL_Surface*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="245">
  \brief Create a texture from an existing surface.

  \param renderer The renderer.
  \param surface The surface containing pixel data used to fill the texture.

  \return The created texture is returned, or 0 on error.

  \note The surface is not modified or freed by this function.

  \sa SDL_QueryTexture()
  \sa SDL_DestroyTexture()

</member>
<member name="M:SDL_QueryTexture(SDL_Texture*,System.UInt32*,System.Int32*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="260">
  \brief Query the attributes of a texture

  \param texture A texture to be queried.
  \param format  A pointer filled in with the raw format of the texture.  The
                 actual format may differ, but pixel transfers will use this
                 format.
  \param access  A pointer filled in with the actual access to the texture.
  \param w       A pointer filled in with the width of the texture in pixels.
  \param h       A pointer filled in with the height of the texture in pixels.

  \return 0 on success, or -1 if the texture is not valid.

</member>
<member name="M:SDL_SetTextureColorMod(SDL_Texture*,System.Byte,System.Byte,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="277">
  \brief Set an additional color value used in render copy operations.

  \param texture The texture to update.
  \param r       The red color value multiplied into copy operations.
  \param g       The green color value multiplied into copy operations.
  \param b       The blue color value multiplied into copy operations.

  \return 0 on success, or -1 if the texture is not valid or color modulation
          is not supported.

  \sa SDL_GetTextureColorMod()

</member>
<member name="M:SDL_GetTextureColorMod(SDL_Texture*,System.Byte*,System.Byte*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="294">
  \brief Get the additional color value used in render copy operations.

  \param texture The texture to query.
  \param r         A pointer filled in with the current red color value.
  \param g         A pointer filled in with the current green color value.
  \param b         A pointer filled in with the current blue color value.

  \return 0 on success, or -1 if the texture is not valid.

  \sa SDL_SetTextureColorMod()

</member>
<member name="M:SDL_SetTextureAlphaMod(SDL_Texture*,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="310">
  \brief Set an additional alpha value used in render copy operations.

  \param texture The texture to update.
  \param alpha     The alpha value multiplied into copy operations.

  \return 0 on success, or -1 if the texture is not valid or alpha modulation
          is not supported.

  \sa SDL_GetTextureAlphaMod()

</member>
<member name="M:SDL_GetTextureAlphaMod(SDL_Texture*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="324">
  \brief Get the additional alpha value used in render copy operations.

  \param texture The texture to query.
  \param alpha     A pointer filled in with the current alpha value.

  \return 0 on success, or -1 if the texture is not valid.

  \sa SDL_SetTextureAlphaMod()

</member>
<member name="M:SDL_SetTextureBlendMode(SDL_Texture*,SDL_BlendMode)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="337">
  \brief Set the blend mode used for texture copy operations.

  \param texture The texture to update.
  \param blendMode ::SDL_BlendMode to use for texture blending.

  \return 0 on success, or -1 if the texture is not valid or the blend mode is
          not supported.

  \note If the blend mode is not supported, the closest supported mode is
        chosen.

  \sa SDL_GetTextureBlendMode()

</member>
<member name="M:SDL_GetTextureBlendMode(SDL_Texture*,SDL_BlendMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="354">
  \brief Get the blend mode used for texture copy operations.

  \param texture   The texture to query.
  \param blendMode A pointer filled in with the current blend mode.

  \return 0 on success, or -1 if the texture is not valid.

  \sa SDL_SetTextureBlendMode()

</member>
<member name="M:SDL_UpdateTexture(SDL_Texture*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="367">
  \brief Update the given texture rectangle with new pixel data.

  \param texture   The texture to update
  \param rect      A pointer to the rectangle of pixels to update, or NULL to
                   update the entire texture.
  \param pixels    The raw pixel data.
  \param pitch     The number of bytes between rows of pixel data.

  \return 0 on success, or -1 if the texture is not valid.

  \note This is a fairly slow function.

</member>
<member name="M:SDL_UpdateYUVTexture(SDL_Texture*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="384">
  \brief Update a rectangle within a planar YV12 or IYUV texture with new pixel data.

  \param texture   The texture to update
  \param rect      A pointer to the rectangle of pixels to update, or NULL to
                   update the entire texture.
  \param Yplane    The raw pixel data for the Y plane.
  \param Ypitch    The number of bytes between rows of pixel data for the Y plane.
  \param Uplane    The raw pixel data for the U plane.
  \param Upitch    The number of bytes between rows of pixel data for the U plane.
  \param Vplane    The raw pixel data for the V plane.
  \param Vpitch    The number of bytes between rows of pixel data for the V plane.

  \return 0 on success, or -1 if the texture is not valid.

  \note You can use SDL_UpdateTexture() as long as your pixel data is
        a contiguous block of Y and U/V planes in the proper order, but
        this function is available if your pixel data is not contiguous.

</member>
<member name="M:SDL_LockTexture(SDL_Texture*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Void**,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="409">
  \brief Lock a portion of the texture for write-only pixel access.

  \param texture   The texture to lock for access, which was created with
                   ::SDL_TEXTUREACCESS_STREAMING.
  \param rect      A pointer to the rectangle to lock for access. If the rect
                   is NULL, the entire texture will be locked.
  \param pixels    This is filled in with a pointer to the locked pixels,
                   appropriately offset by the locked area.
  \param pitch     This is filled in with the pitch of the locked pixels.

  \return 0 on success, or -1 if the texture is not valid or was not created with ::SDL_TEXTUREACCESS_STREAMING.

  \sa SDL_UnlockTexture()

</member>
<member name="M:SDL_UnlockTexture(SDL_Texture*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="428">
  \brief Unlock a texture, uploading the changes to video memory, if needed.

  \sa SDL_LockTexture()

</member>
<member name="M:SDL_RenderTargetSupported(SDL_Renderer*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="435">
 \brief Determines whether a window supports the use of render targets

 \param renderer The renderer that will be checked

 \return SDL_TRUE if supported, SDL_FALSE if not.

</member>
<member name="M:SDL_SetRenderTarget(SDL_Renderer*,SDL_Texture*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="444">
 \brief Set a texture as the current rendering target.

 \param renderer The renderer.
 \param texture The targeted texture, which must be created with the SDL_TEXTUREACCESS_TARGET flag, or NULL for the default render target

 \return 0 on success, or -1 on error

  \sa SDL_GetRenderTarget()

</member>
<member name="M:SDL_GetRenderTarget(SDL_Renderer*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="457">
 \brief Get the current render target or NULL for the default render target.

 \return The current render target

  \sa SDL_SetRenderTarget()

</member>
<member name="M:SDL_RenderSetLogicalSize(SDL_Renderer*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="466">
  \brief Set device independent resolution for rendering

  \param renderer The renderer for which resolution should be set.
  \param w      The width of the logical resolution
  \param h      The height of the logical resolution

  This function uses the viewport and scaling functionality to allow a fixed logical
  resolution for rendering, regardless of the actual output resolution.  If the actual
  output resolution doesn't have the same aspect ratio the output rendering will be
  centered within the output display.

  If the output display is a window, mouse events in the window will be filtered
  and scaled so they seem to arrive within the logical resolution.

  \note If this function results in scaling or subpixel drawing by the
        rendering backend, it will be handled using the appropriate
        quality hints.

  \sa SDL_RenderGetLogicalSize()
  \sa SDL_RenderSetScale()
  \sa SDL_RenderSetViewport()

</member>
<member name="M:SDL_RenderGetLogicalSize(SDL_Renderer*,System.Int32*,System.Int32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="491">
  \brief Get device independent resolution for rendering

  \param renderer The renderer from which resolution should be queried.
  \param w      A pointer filled with the width of the logical resolution
  \param h      A pointer filled with the height of the logical resolution

  \sa SDL_RenderSetLogicalSize()

</member>
<member name="M:SDL_RenderSetViewport(SDL_Renderer*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="502">
  \brief Set the drawing area for rendering on the current target.

  \param renderer The renderer for which the drawing area should be set.
  \param rect The rectangle representing the drawing area, or NULL to set the viewport to the entire target.

  The x,y of the viewport rect represents the origin for rendering.

  \return 0 on success, or -1 on error

  \note If the window associated with the renderer is resized, the viewport is automatically reset.

  \sa SDL_RenderGetViewport()
  \sa SDL_RenderSetLogicalSize()

</member>
<member name="M:SDL_RenderGetViewport(SDL_Renderer*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="520">
  \brief Get the drawing area for the current target.

  \sa SDL_RenderSetViewport()

</member>
<member name="M:SDL_RenderSetClipRect(SDL_Renderer*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="528">
  \brief Set the clip rectangle for the current target.

  \param renderer The renderer for which clip rectangle should be set.
  \param rect   A pointer to the rectangle to set as the clip rectangle, or
                NULL to disable clipping.

  \return 0 on success, or -1 on error

  \sa SDL_RenderGetClipRect()

</member>
<member name="M:SDL_RenderGetClipRect(SDL_Renderer*,SDL_Rect*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="542">
  \brief Get the clip rectangle for the current target.

  \param renderer The renderer from which clip rectangle should be queried.
  \param rect   A pointer filled in with the current clip rectangle, or
                an empty rectangle if clipping is disabled.

  \sa SDL_RenderSetClipRect()

</member>
<member name="M:SDL_RenderSetScale(SDL_Renderer*,System.Single,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="554">
  \brief Set the drawing scale for rendering on the current target.

  \param renderer The renderer for which the drawing scale should be set.
  \param scaleX The horizontal scaling factor
  \param scaleY The vertical scaling factor

  The drawing coordinates are scaled by the x/y scaling factors
  before they are used by the renderer.  This allows resolution
  independent drawing with a single coordinate system.

  \note If this results in scaling or subpixel drawing by the
        rendering backend, it will be handled using the appropriate
        quality hints.  For best results use integer scaling factors.

  \sa SDL_RenderGetScale()
  \sa SDL_RenderSetLogicalSize()

</member>
<member name="M:SDL_RenderGetScale(SDL_Renderer*,System.Single*,System.Single*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="575">
  \brief Get the drawing scale for the current target.

  \param renderer The renderer from which drawing scale should be queried.
  \param scaleX A pointer filled in with the horizontal scaling factor
  \param scaleY A pointer filled in with the vertical scaling factor

  \sa SDL_RenderSetScale()

</member>
<member name="M:SDL_SetRenderDrawColor(SDL_Renderer*,System.Byte,System.Byte,System.Byte,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="587">
  \brief Set the color used for drawing operations (Rect, Line and Clear).

  \param renderer The renderer for which drawing color should be set.
  \param r The red value used to draw on the rendering target.
  \param g The green value used to draw on the rendering target.
  \param b The blue value used to draw on the rendering target.
  \param a The alpha value used to draw on the rendering target, usually
           ::SDL_ALPHA_OPAQUE (255).

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_GetRenderDrawColor(SDL_Renderer*,System.Byte*,System.Byte*,System.Byte*,System.Byte*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="603">
  \brief Get the color used for drawing operations (Rect, Line and Clear).

  \param renderer The renderer from which drawing color should be queried.
  \param r A pointer to the red value used to draw on the rendering target.
  \param g A pointer to the green value used to draw on the rendering target.
  \param b A pointer to the blue value used to draw on the rendering target.
  \param a A pointer to the alpha value used to draw on the rendering target,
           usually ::SDL_ALPHA_OPAQUE (255).

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_SetRenderDrawBlendMode(SDL_Renderer*,SDL_BlendMode)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="619">
  \brief Set the blend mode used for drawing operations (Fill and Line).

  \param renderer The renderer for which blend mode should be set.
  \param blendMode ::SDL_BlendMode to use for blending.

  \return 0 on success, or -1 on error

  \note If the blend mode is not supported, the closest supported mode is
        chosen.

  \sa SDL_GetRenderDrawBlendMode()

</member>
<member name="M:SDL_GetRenderDrawBlendMode(SDL_Renderer*,SDL_BlendMode*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="635">
  \brief Get the blend mode used for drawing operations.

  \param renderer The renderer from which blend mode should be queried.
  \param blendMode A pointer filled in with the current blend mode.

  \return 0 on success, or -1 on error

  \sa SDL_SetRenderDrawBlendMode()

</member>
<member name="M:SDL_RenderClear(SDL_Renderer*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="648">
  \brief Clear the current rendering target with the drawing color

  This function clears the entire rendering target, ignoring the viewport.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderDrawPoint(SDL_Renderer*,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="657">
  \brief Draw a point on the current rendering target.

  \param renderer The renderer which should draw a point.
  \param x The x coordinate of the point.
  \param y The y coordinate of the point.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderDrawPoints(SDL_Renderer*,SDL_Point!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="669">
  \brief Draw multiple points on the current rendering target.

  \param renderer The renderer which should draw multiple points.
  \param points The points to draw
  \param count The number of points to draw

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderDrawLine(SDL_Renderer*,System.Int32,System.Int32,System.Int32,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="682">
  \brief Draw a line on the current rendering target.

  \param renderer The renderer which should draw a line.
  \param x1 The x coordinate of the start point.
  \param y1 The y coordinate of the start point.
  \param x2 The x coordinate of the end point.
  \param y2 The y coordinate of the end point.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderDrawLines(SDL_Renderer*,SDL_Point!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="696">
  \brief Draw a series of connected lines on the current rendering target.

  \param renderer The renderer which should draw multiple lines.
  \param points The points along the lines
  \param count The number of points, drawing count-1 lines

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderDrawRect(SDL_Renderer*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="709">
  \brief Draw a rectangle on the current rendering target.

  \param renderer The renderer which should draw a rectangle.
  \param rect A pointer to the destination rectangle, or NULL to outline the entire rendering target.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderDrawRects(SDL_Renderer*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="720">
  \brief Draw some number of rectangles on the current rendering target.

  \param renderer The renderer which should draw multiple rectangles.
  \param rects A pointer to an array of destination rectangles.
  \param count The number of rectangles.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderFillRect(SDL_Renderer*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="733">
  \brief Fill a rectangle on the current rendering target with the drawing color.

  \param renderer The renderer which should fill a rectangle.
  \param rect A pointer to the destination rectangle, or NULL for the entire
              rendering target.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderFillRects(SDL_Renderer*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="745">
  \brief Fill some number of rectangles on the current rendering target with the drawing color.

  \param renderer The renderer which should fill multiple rectangles.
  \param rects A pointer to an array of destination rectangles.
  \param count The number of rectangles.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderCopy(SDL_Renderer*,SDL_Texture*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect!System.Runtime.CompilerServices.IsConst*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="758">
  \brief Copy a portion of the texture to the current rendering target.

  \param renderer The renderer which should copy parts of a texture.
  \param texture The source texture.
  \param srcrect   A pointer to the source rectangle, or NULL for the entire
                   texture.
  \param dstrect   A pointer to the destination rectangle, or NULL for the
                   entire rendering target.

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderCopyEx(SDL_Renderer*,SDL_Texture*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.Double!System.Runtime.CompilerServices.IsConst,SDL_Point!System.Runtime.CompilerServices.IsConst*,SDL_RendererFlip!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="775">
  \brief Copy a portion of the source texture to the current rendering target, rotating it by angle around the given center

  \param renderer The renderer which should copy parts of a texture.
  \param texture The source texture.
  \param srcrect   A pointer to the source rectangle, or NULL for the entire
                   texture.
  \param dstrect   A pointer to the destination rectangle, or NULL for the
                   entire rendering target.
  \param angle    An angle in degrees that indicates the rotation that will be applied to dstrect
  \param center   A pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done aroud dstrect.w/2, dstrect.h/2)
  \param flip     An SDL_RendererFlip value stating which flipping actions should be performed on the texture

  \return 0 on success, or -1 on error

</member>
<member name="M:SDL_RenderReadPixels(SDL_Renderer*,SDL_Rect!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.Void*,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="798">
  \brief Read pixels from the current rendering target.

  \param renderer The renderer from which pixels should be read.
  \param rect   A pointer to the rectangle to read, or NULL for the entire
                render target.
  \param format The desired format of the pixel data, or 0 to use the format
                of the rendering target
  \param pixels A pointer to be filled in with the pixel data
  \param pitch  The pitch of the pixels parameter.

  \return 0 on success, or -1 if pixel reading is not supported.

  \warning This is a very slow operation, and should not be used frequently.

</member>
<member name="M:SDL_RenderPresent(SDL_Renderer*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="818">
\brief Update the screen with rendering performed.

</member>
<member name="M:SDL_DestroyTexture(SDL_Texture*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="823">
  \brief Destroy the specified texture.

  \sa SDL_CreateTexture()
  \sa SDL_CreateTextureFromSurface()

</member>
<member name="M:SDL_DestroyRenderer(SDL_Renderer*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="831">
  \brief Destroy the rendering context for a window and free associated
         textures.

  \sa SDL_CreateRenderer()

</member>
<member name="M:SDL_GL_BindTexture(SDL_Texture*,System.Single*,System.Single*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="840">
  \brief Bind the texture to the current OpenGL/ES/ES2 context for use with
         OpenGL instructions.

  \param texture  The SDL texture to bind
  \param texw     A pointer to a float that will be filled with the texture width
  \param texh     A pointer to a float that will be filled with the texture height

  \return 0 on success, or -1 if the operation is not supported

</member>
<member name="M:SDL_GL_UnbindTexture(SDL_Texture*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_render.h" line="852">
  \brief Unbind a texture from the current OpenGL/ES/ES2 context.

  \param texture  The SDL texture to unbind

  \return 0 on success, or -1 if the operation is not supported

</member>
<member name="M:SDL_Direct3D9GetAdapterIndex(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_system.h

  Include file for platform specific SDL API functions

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="M:SDL_GetTicks" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_timer.h

  Header for the SDL time management routines.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

 \brief Get the number of milliseconds since the SDL library initialization.

 \note This value wraps if the program runs for more than ~49 days.

</member>
<member name="M:SDL_GetPerformanceCounter" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_timer.h" line="47">
 \brief Compare SDL ticks values, and return true if A has passed B

 e.g. if you want to wait 100 ms, you could do this:
  Uint32 timeout = SDL_GetTicks() + 100;
  while (!SDL_TICKS_PASSED(SDL_GetTicks(), timeout)) {
      ... do work until timeout has elapsed
  }

\brief Get the current value of the high resolution counter

</member>
<member name="M:SDL_GetPerformanceFrequency" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_timer.h" line="63">
\brief Get the count per second of the high resolution counter

</member>
<member name="M:SDL_Delay(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_timer.h" line="68">
\brief Wait a specified number of milliseconds before returning.

</member>
<member name="D:SDL_TimerCallback" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_timer.h" line="73">
  Function prototype for the timer callback function.

  The callback function is passed the current timer interval and returns
  the next timer interval.  If the returned value is the same as the one
  passed in, the periodic alarm continues, otherwise a new alarm is
  scheduled.  If the callback returns 0, the periodic alarm is cancelled.

</member>
<member name="D:SDL_TimerID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_timer.h" line="83">
Definition of the timer ID type.

</member>
<member name="M:SDL_AddTimer(System.UInt32,=FUNC:System.UInt32(System.UInt32,System.Void*),System.Void*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_timer.h" line="88">
 \brief Add a new timer to the pool of timers already running.

 \return A timer ID, or NULL when an error occurs.

</member>
<member name="M:SDL_RemoveTimer(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_timer.h" line="97">
 \brief Remove a timer knowing its ID.

 \return A boolean value indicating success or failure.

 \warning It is not safe to remove a timer multiple times.

</member>
<member name="T:SDL_version" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file SDL_version.h

  This header defines the current SDL version.

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

  \brief Information the version of SDL in use.

  Represents the library's version as three levels: major revision
  (increments with massive changes, additions, and enhancements),
  minor revision (increments with backwards-compatible changes to the
  major revision), and patchlevel (increments with fixes to the minor
  revision).

  \sa SDL_VERSION
  \sa SDL_GetVersion

</member>
<!-- Discarding badly formed XML document comment for member 'M:SDL_GetVersion(SDL_version*)'. -->
<member name="M:SDL_GetRevision" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_version.h" line="135">
  \brief Get the code revision of SDL that is linked against your program.

  Returns an arbitrary string (a hash value) uniquely identifying the
  exact revision of the SDL library in use, and is only useful in comparing
  against other revisions. It is NOT an incrementing number.

</member>
<member name="M:SDL_GetRevisionNumber" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\sdl_version.h" line="144">
  \brief Get the revision number of SDL that is linked against your program.

  Returns a number uniquely identifying the exact revision of the SDL
  library in use. It is an incrementing number based on commits to
  hg.libsdl.org.

</member>
<member name="M:SDL_Init(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\sdl2\close_code.h" line="22">
  \file close_code.h

  This file reverses the effects of begin_code.h and should be included
  after you finish any function and structure declarations in your headers

  \file begin_code.h

  This file sets things up for C dynamic library function definitions,
  static inlined functions, and structures aligned at 4-byte alignment.
  If you don't like ugly C preprocessor code, don't look at this file. :)

</member>
<member name="T:InputManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="20">
<summary>
Stores all inputs into a manager for ease of access.
</summary>
</member>
<member name="M:InputManager.#ctor(Viewport*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="26">
<summary>
Creates an InputManager and sets the gamepad controller.
</summary>
<param name="window">The viewport window pointer</param>
</member>
<member name="M:InputManager.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="31">
<summary>
Closes the controller, destroys it.
</summary>
</member>
<!-- Discarding badly formed XML document comment for member 'M:InputManager.Update(SDL_Event*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:InputManager.getKeyDownState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="40">
<summary>
If the key is down this frame.
</summary>
<returns>True if the key is down this frame.</returns>
</member>
<member name="M:InputManager.getKeyUpState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="45">
<summary>
If the key is up this frame.
</summary>
<returns>True if the key is up this frame.</returns>
</member>
<member name="M:InputManager.getKeyCode" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="50">
<summary>
Gets the key code.
</summary>
<returns>The SDL keycode that was pressed this frame.</returns>
</member>
<!-- Discarding badly formed XML document comment for member 'M:InputManager.KeyDown(System.Byte)'. -->
<member name="M:InputManager.KeyUp(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="61">
<summary>
Checks if the key is up.
</summary>
<param name="_key">A keyboard key.</param>
<returns>If that key was up.</returns>
</member>
<member name="M:InputManager.KeyPress(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="67">
<summary>
Checks if the key was pressed.
</summary>
<param name="_key">A keyboard key.</param>
<returns>If that key was pressed.</returns>
</member>
<member name="M:InputManager.getMouseUpState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="74">
<summary>
If the mouse button is up this frame.
</summary>
<returns>True if the mouse button is up this frame.</returns>
</member>
<member name="M:InputManager.getMouseDownState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="79">
<summary>
If the mouse button is down this frame.
</summary>
<returns>True if the mouse button is down this frame.</returns>
</member>
<member name="M:InputManager.getMouseButton" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="84">
<summary>
Gets the mouse button up or down this frame..
</summary>
<returns>The mouse button up or down this frame.</returns>
</member>
<member name="M:InputManager.MouseButtonDown(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="89">
<summary>
Checks if the mouse was held down.
</summary>
<param name="_button">A mouse button.</param>
<returns>If that mouse button was down.</returns>
</member>
<member name="M:InputManager.MouseButtonUp(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="95">
<summary>
Checks if the mouse was held up.
</summary>
<param name="button">A mouse button.</param>
<returns>If that mouse button was up.</returns>
</member>
<member name="M:InputManager.MouseButtonPress(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="101">
<summary>
Checks if the mouse was pressed.
</summary>
<param name="_button">A mouse button.</param>
<returns>If that mouse button was pressed.</returns>
</member>
<member name="M:InputManager.MouseMoved" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="107">
<summary>
Checks if the mouse has moved.
</summary>
<returns>If the moved mouse.</returns>
</member>
<member name="M:InputManager.GetMousePosition" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="112">
<summary>
Gets the mouse position on screen.
</summary>
<returns>The mouse position.</returns>
</member>
<member name="M:InputManager.SetMousePosition(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="117">
<summary>
Sets the mouse position manually.
</summary>
<param name="pos">The position where the mouse cursor should be.</param>
</member>
<member name="M:InputManager.SetCursor(System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="122">
<summary>
Sets the mouse cursor to be visible.
</summary>
<param name="visible">If the mouse cursor is visible or not.</param>
</member>
<member name="M:InputManager.PadButtonDown(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="128">
<summary>
Checks if the gamepad button was held down.
</summary>
<param name="_button">A game pad button.</param>
<returns>If the button was held down.</returns>
</member>
<member name="M:InputManager.PadButtonUp(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="134">
<summary>
Checks if the gamepad button was up.
</summary>
<param name="_button">A game pad button.</param>
<returns>If the button was up.</returns>
</member>
<member name="M:InputManager.PadButtonPress(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="140">
<summary>
Checks if the gamepad button was pressed.
</summary>
<param name="_button">A game pad button.</param>
<returns>If the button was pressed.</returns>
</member>
<member name="M:InputManager.ThumbLMoved" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="146">
<summary>
Checks if the left gamepad thumbstick moved.
</summary>
<returns>If the left gamepad thumbstick moved.</returns>
</member>
<member name="M:InputManager.GetThumbLPosition" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="151">
<summary>
Gets the left thumbstick position.
</summary>
<returns>The left thumbstick position.</returns>
</member>
<member name="M:InputManager.ThumbRMoved" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="156">
<summary>
Checks if the right gamepad thumbstick moved.
</summary>
<returns>If the right gamepad thumbstick moved.</returns>
</member>
<member name="M:InputManager.GetThumbRPosition" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="161">
<summary>
Gets the right thumbstick position.
</summary>
<returns>The right thumbstick position.</returns>
</member>
<member name="M:InputManager.GetLeftTrigger" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="166">
<summary>
Gets the left trigger depth.
</summary>
<returns>The left trigger value.</returns>
</member>
<member name="M:InputManager.GetRightTrigger" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="171">
<summary>
Gets the right trigger depth.
</summary>
<returns>he right trigger depth.</returns>
</member>
<member name="M:InputManager.getTextInputState" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="178">
<summary>
Determines whether there is text input.
</summary>
<returns>If there is text input.</returns>
</member>
<member name="F:InputManager.keyDownState" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="185">
<summary>
If a key is down this frame.
</summary>
</member>
<member name="F:InputManager.keyUpState" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="189">
<summary>
If a key is up this frame.
</summary>
</member>
<member name="F:InputManager.keyCode" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="193">
<summary>
The key that is up or down this frame.
</summary>
</member>
<member name="F:InputManager.prevKeyStates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="197">
<summary>
Map of the previous key states.
</summary>
</member>
<member name="F:InputManager.currKeyStates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="201">
<summary>
Map of the current key states.
</summary>
</member>
<member name="F:InputManager.mouseUpState" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="206">
<summary>
If the mouse button is up this frame.
</summary>
</member>
<member name="F:InputManager.mouseDownState" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="210">
<summary>
If the mouse button is down this frame.
</summary>
</member>
<member name="F:InputManager.mouseButton" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="214">
<summary>
The mouse button up or down this frame.
</summary>
</member>
<member name="F:InputManager.prevMouseButtonStates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="218">
<summary>
The previous mouse button states.
</summary>
</member>
<member name="F:InputManager.currMouseButtonStates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="222">
<summary>
The current mouse button states.
</summary>
</member>
<member name="F:InputManager.mousePos" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="226">
<summary>
The mouse position.
</summary>
</member>
<member name="F:InputManager.mouseMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="230">
<summary>
Returns true if the mouse has moved.
</summary>
</member>
<member name="F:InputManager.controller" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="235">
<summary>
The controller.
</summary>
</member>
<member name="F:InputManager.prevPadButtonStates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="239">
<summary>
Map of the previous gamepad button states.
</summary>
</member>
<member name="F:InputManager.currPadButtonStates" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="243">
<summary>
Map of the current gamepad button states.
</summary>
</member>
<member name="F:InputManager.thumbLMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="247">
<summary>
Returns true if the left thumbstick was moved.
</summary>
</member>
<member name="F:InputManager.thumbLPos" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="251">
<summary>
Stores the left thumbstick position.
</summary>
</member>
<member name="F:InputManager.thumbRMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="255">
<summary>
Returns true if the right thumbstick has moved.
</summary>
</member>
<member name="F:InputManager.thumbRPos" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="259">
<summary>
Stores the right thumbstick position.
</summary>
</member>
<member name="F:InputManager.leftTrigger" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="263">
<summary>
Gets the left trigger.
</summary>
</member>
<member name="F:InputManager.rightTrigger" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="267">
<summary>
Gets the right trigger.
</summary>
</member>
<member name="F:InputManager.text" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="272">
<summary>
The text inputted this frame.
</summary>
</member>
<member name="F:InputManager.textInputState" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="276">
<summary>
Is there text input this frame?
</summary>
</member>
<member name="F:InputManager.m_window" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\inputmanager.h" line="281">
<summary>
The pointer to a viewport window object.
</summary>
</member>
<member name="T:GameObject" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="29">
<summary>
The entity object placed in the scene.
Also stores the game components like Mesh Renderer and Cameras.
</summary>
</member>
<member name="M:GameObject.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="37">
<summary>
Constructs the GameObject and its position, rotation and scale.
</summary>
<param name="name">The name.</param>
<param name="pos">The position of the GameObject.</param>
<param name="rot">The rotation of the GameObject.</param>
<param name="scale">The scale of the GameObject.</param>
</member>
<member name="M:GameObject.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="55">
<summary>
Finalizes an instance of the <see cref="T:GameObject"/> class.
</summary>
</member>
<member name="M:GameObject.updateAll(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="60">
<summary>
Updates all children GameObjects, Game Components and GUI Components.
</summary>
<param name="delta">The delta time between frames.</param>
</member>
<member name="M:GameObject.renderAll(Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="65">
<summary>
Renders all children GameObjects, Game Components and GUI Components.
</summary>
<param name="shader">The shader program.</param>
<param name="guiEngine">The GUI Engine object.</param>
<param name="renderingEngine">The Rendering Engine object.</param>
<param name="camera">The main active camera.</param>
</member>
<member name="M:GameObject.processAll(InputManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="73">
<summary>
Processes all inputs for the children GameObjects, Game Components and GUI Components.
</summary>
<param name="input">The manager to get inputs from the viewport.</param>
<param name="delta">The delta time between frames.</param>
</member>
<member name="M:GameObject.activate" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="80">
<summary>
Activates this game object (used for GUI Components)
</summary>
</member>
<member name="M:GameObject.deactivate" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="85">
<summary>
Deactivates this game object (used for GUI Components)
</summary>
</member>
<member name="M:GameObject.addChild(GameObject*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="90">
<summary>
Adds a child GameObject then returns the child GameObject.
</summary>
<param name="child">The child GameObject to add.</param>
<returns>Returns the GameObject added.</returns>
</member>
<member name="M:GameObject.addGameComponent(GameComponent*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="96">
<summary>
Attaches a Game Component to the GameObject.
</summary>
<param name="component">The Game Component to attach.</param>
<param name="callOnStart">Wheather or no the onStart method is called. 
DO NOT set to true if adding in the scene init function.</param>
<returns>Returns the GameObject the component is attached too.</returns>
</member>
<member name="M:GameObject.addGUIComponent(GUIComponent*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="104">
<summary>
Attaches a GUI Component to the GameObject.
</summary>
<param name="component">The GUI Component to attach.</param>
<returns>Returns the GameObject the component is attached too.</returns>
</member>
<member name="M:GameObject.removeChild(GameObject*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="111">
<summary>
Removes the specified GameObject
</summary>
<param name="child">The GameObject to remove.</param>
<returns>If the GameObject was remvoed successfully.</returns>
</member>
<member name="M:GameObject.removeGameComponent(GameComponent*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="117">
<summary>
Removes the specified Game Components.
</summary>
<param name="component">The Game Component to remove.</param>
<returns>If the Game Component was removed successfully.</returns>
</member>
<member name="M:GameObject.removeGUIComponent(GUIComponent*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="123">
<summary>
Removes the specified GUI Components.
</summary>
<param name="component">The GUI Component to remove.</param>
<returns>If the GUI Component was removed successfully.</returns>
</member>
<member name="M:GameObject.getAllAttached" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="171">
<summary>
Gets all sub-children GameOBjects and stores them into a vector.
</summary>
<returns>All sub-children GameObject pointers stored in a vector.</returns>
</member>
<member name="M:GameObject.getAllChildren" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="176">
<summary>
Gets all immediate children and stores them into a vector.
</summary>
<returns>All immediate children stored in a vector.</returns>
</member>
<member name="M:GameObject.getCoreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="184">
<summary>
Gets the core engine.
</summary>
<returns>CoreEngine *.</returns>
</member>
<member name="M:GameObject.getTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="190">
<summary>
Gets the Transform object of this GameObject.
</summary>
<returns>A pointer to the Transform object.</returns>
</member>
<member name="M:GameObject.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="196">
<summary>
Gets the name of the GameObject.
</summary>
<returns>The string value of the GameObject name.</returns>
</member>
<member name="M:GameObject.isEnabled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="202">
<summary>
Checks if the gameobject is enabled.
</summary>
<returns>Whether the gameobject is enabled.</returns>
</member>
<member name="M:GameObject.setEngine(CoreEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="208">
<summary>
Sets the Core Engine so the GameObject can access the different systems.
</summary>
<param name="engine">The pointer to the Core Engine object.</param>
</member>
<member name="M:GameObject.setName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="214">
<summary>
Sets the name of this game object.
</summary>
<param name="name">The name.</param>
</member>
<member name="M:GameObject.setEnabled(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="220">
<summary>
Sets the gameobject to be enabled or not.
</summary>
<param name="enabled">If the gameobject and its children is enabled.</param>
</member>
<member name="M:GameObject.updateGameComponents(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="227">
<summary>
Updates all the Game Components.
</summary>
<param name="delta">The delta time between frames.</param>
</member>
<member name="M:GameObject.renderGameComponents(Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="232">
<summary>
Renders all the Game Components.
</summary>
<param name="shader">The shader program.</param>
<param name="renderingEngine">The Rendering Engine object.</param>
<param name="camera">The main active camera.</param>
</member>
<member name="M:GameObject.processInputGameComponents(InputManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="239">
<summary>
Processes all inputs for the Game Components.
</summary>
<param name="input">The manager to get inputs from the viewport.</param>
<param name="delta">The delta time between frames.</param>
</member>
<member name="M:GameObject.updateGUIComponents(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="246">
<summary>
Updates all the GUI Components.
</summary>
<param name="delta">The delta time between frames.</param>
</member>
<member name="M:GameObject.processInputGUIComponents(InputManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="251">
<summary>
Processes all inputs for the GUI Components.
</summary>
<param name="input">The manager to get inputs from the viewport.</param>
<param name="delta">The delta time between frames.</param>
</member>
<member name="F:GameObject.m_name" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="258">
<summary>
The name of the GameObject.
</summary>
</member>
<member name="F:GameObject.m_enabled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="262">
<summary>
If the game object, it's components and children are accepting input, updating and rendering.
</summary>
</member>
<member name="F:GameObject.m_children" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="266">
<summary>
The vector of child GameObjects.
</summary>
</member>
<member name="F:GameObject.m_gameComponents" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="270">
<summary>
The vector of attached Game Components.
</summary>
</member>
<member name="F:GameObject.m_guiComponents" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="274">
<summary>
The vector of attached GUI Components.
</summary>
</member>
<member name="F:GameObject.m_transform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="278">
<summary>
The Transform object for the GameObject.
</summary>
</member>
<member name="F:GameObject.m_coreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\gameobject.h" line="282">
<summary>
A pointer to the Core Engine object.
</summary>
</member>
<member name="T:CoreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="23">
<summary>
The class that links all the different engines together. It also starts and ends the game loop
</summary>
</member>
<member name="M:CoreEngine.#ctor(System.Double,Viewport*,RenderingEngine*,PhysicsEngine*,AudioEngine*,GUIEngine*,SceneManager*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="29">
<summary>
Contructs CoreEngine and initilaizes the starting scene.
</summary>
<param name="frameRate">The frame rate cap.</param>
<param name="viewport">The screen viewport object.</param>
<param name="renderingEngine">The rendering engine object.</param>
<param name="physicsEngine">The physics engine object.</param>
<param name="audioEngine">The audio engine object.</param>
<param name="guiEngine">The GUI engine object.</param>
<param name="sceneManager">The scene manager object.</param>
</member>
<member name="M:CoreEngine.start" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="44">
<summary>
Starts the game loop.
</summary>
</member>
<member name="M:CoreEngine.stop" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="48">
<summary>
Stops the game loop.
</summary>
</member>
<member name="M:CoreEngine.getSceneManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="53">
<summary>
Gets the scene manager object from the core engine.
</summary>
<returns>A pointer to the scene manager.</returns>
</member>
<member name="M:CoreEngine.getRenderingEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="58">
<summary>
Gets the rendering engine from the core engine.
</summary>
<returns>A ponter to the rendering engine.</returns>
</member>
<member name="M:CoreEngine.getPhysicsEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="63">
<summary>
Gets the physics engine from the core engine.
</summary>
<returns>A pointer to the physics engine.</returns>
</member>
<member name="M:CoreEngine.getAudioEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="68">
<summary>
Gets the audio engine from the core engine.
</summary>
<returns>A pointer to the physics engine.</returns>
</member>
<member name="M:CoreEngine.getGUIEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="73">
<summary>
Gets the GUI engine from the core engine.
</summary>
<returns>A pointer to the GUI engine</returns>
</member>
<member name="M:CoreEngine.getViewport" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="78">
<summary>
Gets the viewport screen from the core engine.
</summary>
<returns>A pointer to the viewport screen.</returns>
</member>
<member name="M:CoreEngine.getGame" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="83">
<summary>
Gets the global game object from the core engine.
</summary>
<returns>A pointer to the the global game object.</returns>
</member>
<member name="F:CoreEngine.m_running" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="90">
<summary>
If the engine is running.
</summary>
</member>
<member name="F:CoreEngine.m_frameTime" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="94">
<summary>
Holds the frame rate cap.
</summary>
</member>
<member name="F:CoreEngine.m_viewport" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="99">
<summary>
Points to the viewport object.
</summary>
</member>
<member name="F:CoreEngine.m_sceneManager" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="103">
<summary>
Points to the scene manager object.
</summary>
</member>
<member name="F:CoreEngine.m_renderingEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="107">
<summary>
Points to the rendering engine object.
</summary>
</member>
<member name="F:CoreEngine.m_physicsEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="111">
<summary>
Points to the physics engine object.
</summary>
</member>
<member name="F:CoreEngine.m_audioEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="115">
<summary>
Points to the audio engine object.
</summary>
</member>
<member name="F:CoreEngine.m_guiEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="119">
<summary>
Points to the GUI engine object.
</summary>
</member>
<member name="F:CoreEngine.m_game" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\coreengine.h" line="123">
<summary>
Points to the game object which stores global variables
accesible by anywhere.
</summary>
</member>
<member name="T:WindowFlags" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="23">
<summary>
An enum for the window to be either invisible, fullscreen and/or borderless.
</summary>
</member>
<member name="T:Viewport" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="28">
<summary>
The Viewport class is the window of the game. This is where eveything will be rendered to.
</summary>
</member>
<member name="M:Viewport.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="34">
<summary>
Initializes a new instance of the <see cref="T:Viewport"/> class.
</summary>
<param name="name">The name of the window.</param>
<param name="screenWidth">Width of the screen.</param>
<param name="screenHeight">Height of the screen.</param>
<param name="windowFlags">The window flags using <see cref="T:WindowFlags"/>.</param>
</member>
<member name="M:Viewport.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="42">
<summary>
Finalizes an instance of the <see cref="T:Viewport"/> class.
</summary>
</member>
<member name="M:Viewport.swapBuffers" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="48">
<summary>
Swaps the buffers.
</summary>
</member>
<member name="M:Viewport.update(GUIEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="52">
<summary>
Updates input from the window.
</summary>
<param name="guiEngine">The GUI engine.</param>
</member>
<member name="M:Viewport.isClosed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="58">
<summary>
Determines whether this window is closed.
</summary>
<returns>If the window is closed.</returns>
</member>
<member name="M:Viewport.getScreenWidth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="63">
<summary>
Gets the width of the screen.
</summary>
<returns>THe screen width.</returns>
</member>
<member name="M:Viewport.getScreenHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="68">
<summary>
Gets the height of the screen.
</summary>
<returns>The screen height.</returns>
</member>
<member name="M:Viewport.getAspectRatio" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="73">
<summary>
Gets the aspect ratio of the screen.
</summary>
<returns>The screen's aspect ratio.</returns>
</member>
<member name="M:Viewport.getCenter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="78">
<summary>
Gets the center position of the window.
</summary>
<returns>The center point of the window.</returns>
</member>
<member name="M:Viewport.getScreenName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="83">
<summary>
Gets the name of the screen.
</summary>
<returns>The name of the window.</returns>
</member>
<member name="M:Viewport.getWindow" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="88">
<summary>
Gets the window.
</summary>
<returns>A pointer to the <see cref="T:SDL_Window"/>.</returns>
</member>
<member name="M:Viewport.getInput" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="94">
<summary>
Gets the input manager.
</summary>
<returns>A copy of the Inout Manager object.</returns>
</member>
<member name="M:Viewport.setScreenWidth(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="100">
<summary>
Sets the width of the screen.
</summary>
<param name="screenWidth">Width of the screen.</param>
</member>
<member name="M:Viewport.setScreenHeight(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="105">
<summary>
Sets the height of the screen.
</summary>
<param name="screenHeight">Height of the screen.</param>
</member>
<member name="M:Viewport.bindAsRenderTarget" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="110">
<summary>
Binds the render target to the screen.
</summary>
</member>
<member name="F:Viewport.m_window" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="116">
<summary>
The pointer to the SDL_Window.
</summary>
</member>
<member name="F:Viewport.m_glContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="120">
<summary>
The OpenGL context in the window.
</summary>
</member>
<member name="F:Viewport.m_input" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="124">
<summary>
The input manager.
</summary>
</member>
<member name="F:Viewport.m_isClosed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="128">
<summary>
If the window is closed.
</summary>
</member>
<member name="F:Viewport.m_screenWidth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="132">
<summary>
The screen width.
</summary>
</member>
<member name="F:Viewport.m_screenHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="136">
<summary>
The screen height.
</summary>
</member>
<member name="F:Viewport.m_screenName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\viewport.h" line="140">
<summary>
The window's name.
</summary>
</member>
<member name="T:Scene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="26">
<summary>
An abstract class that holds a root GameObject for the scene graph.
</summary>
</member>
<member name="M:Scene.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="32">
<summary>
Initializes a new instance of the <see cref="T:Scene"/> class.
</summary>
<param name="name">The name.</param>
</member>
<member name="M:Scene.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="37">
<summary>
Finalizes an instance of the <see cref="T:Scene"/> class.
</summary>
</member>
<member name="M:Scene.init(Viewport!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="42">
<summary>
Initializes the scene with GameObjects.
</summary>
<param name="window">The window.</param>
</member>
<member name="M:Scene.update(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="47">
<summary>
Updates the scene calling GameObject's update.
</summary>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:Scene.render(RenderingEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="52">
<summary>
Renders the scene calling GameObject's render.
</summary>
<param name="renderingEngine">The rendering engine.</param>
</member>
<member name="M:Scene.processInput(InputManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="57">
<summary>
Processes the input by calling GameObject's processInput.
</summary>
<param name="input">The input.</param>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:Scene.addToRoot(GameObject*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="64">
<summary>
Adds a GameObject to the root GameObject.
</summary>
<param name="gameobject">The gameobject.</param>
</member>
<member name="M:Scene.removeGameObject(GameObject*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="69">
<summary>
Removes the GameOject from the root.
</summary>
<param name="gameobject">The gameobject.</param>
<returns>If the GameObject was removed.</returns>
</member>
<member name="M:Scene.getAllGameObjects" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="76">
<summary>
Gets all game objects.
</summary>
<returns>All attached Objects to the root.</returns>
</member>
<member name="M:Scene.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="82">
<summary>
Gets the name.
</summary>
<returns>The string value.</returns>
</member>
<member name="M:Scene.getRoot" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="88">
<summary>
Gets the root.
</summary>
<returns></returns>
</member>
<member name="M:Scene.getNameCounter(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="94">
<summary>
Gets the name counter (used to ensure no to game objects are named the same thing)
</summary>
<param name="name">The name.</param>
<returns></returns>
</member>
<member name="M:Scene.instantiate(GameObject*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="101">
<summary>
Creates the specified game object and adds it to the root
</summary>
<param name="gameObject">The game object to create.</param>
</member>
<member name="M:Scene.setEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="107">
<summary>
Sets the Core Engine.
</summary>
<param name="engine">The engine.</param>
</member>
<member name="M:Scene.getCoreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="117">
<summary>
Gets a handle to the core engine.
</summary>
<returns></returns>
</member>
<member name="F:Scene.m_GONameCounter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="125">
<summary>
The map that stores the names of game objects and the number of times
that particular name is used, this map is used to ensure that no two
game objects have an identical name, by numbering the repetitions
</summary>
</member>
<member name="F:Scene.m_name" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="132">
<summary>
The name of the Scene.
</summary>
</member>
<member name="F:Scene.m_root" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="136">
<summary>
The root GameObject.
</summary>
</member>
<member name="F:Scene.m_coreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scene.h" line="140">
<summary>
A pointer to the Core Engine.
</summary>
</member>
<member name="T:Modality" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="25">
<summary>
Enum used to determine what scene it is.
</summary>
</member>
<member name="M:SceneManager.#ctor(Viewport*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="37">
<summary>
Initializes a new instance of the <see cref="T:SceneManager"/> class.
</summary>
<param name="viewport">The viewport.</param>
</member>
<member name="M:SceneManager.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="42">
<summary>
Finalizes an instance of the <see cref="T:SceneManager"/> class.
</summary>
</member>
<member name="M:SceneManager.peek" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="47">
<summary>
Returns the top most scene from the scene manager
</summary>
<returns></returns>
</member>
<member name="M:SceneManager.push(Scene*,Modality)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="53">
<summary>
Pushes the specified scene onto the scene stack.
</summary>
<param name="scene">The scene.</param>
<param name="modality">The modality.</param>
</member>
<member name="M:SceneManager.pop" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="60">
<summary>
Pops the top most scene off the scene stack.
</summary>
</member>
<member name="M:SceneManager.popTo(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="65">
<summary>
Pops the scene stack to the specified index.
</summary>
<param name="scene">The scene index to pop to.</param>
</member>
<member name="M:SceneManager.switchScene(Scene*,Modality)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="71">
<summary>
Removes the top most scene and replaces it with the a new scene
</summary>
<param name="scene">The scene.</param>
<param name="modality">The modality.</param>
<returns></returns>
</member>
<member name="M:SceneManager.update(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="79">
<summary>
Updates the scene stack up to the top most exclusive scene.
</summary>
<param name="delta">The delta.</param>
</member>
<member name="M:SceneManager.render(RenderingEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="85">
<summary>
Renders the scene stack up to the top most exclusive scene.
</summary>
<param name="renderingEngine">The rendering engine.</param>
</member>
<member name="M:SceneManager.processInput(InputManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="91">
<summary>
Process the input for the top most scene
</summary>
<param name="input">The input.</param>
<param name="delta">The delta.</param>
</member>
<member name="M:SceneManager.setEngine(CoreEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="98">
<summary>
Sets the scene for all the scenes in the stack
</summary>
<param name="engine">The engine.</param>
</member>
<member name="M:SceneManager.removeGameObjectByName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="104">
<summary>
Removes a gameobject from the top most scene using its name to find it in the scene graph
</summary>
<param name="name">The name.</param>
<returns>if the GameObject was removed.</returns>
</member>
<member name="M:SceneManager.getGameObjectByName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="111">
<summary>
Gets a gameobject from the top most scene using its name to find it in the scene graph
</summary>
<param name="name">The name.</param>
<returns>A pointer to the GameObject.</returns>
</member>
<member name="M:SceneManager.getGameObjectsByName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="118">
<summary>
Gets a gameobjects from the top most scene using its name to find it in the scene graph
</summary>
<param name="name">The name.</param>
<returns>A vector of the GameObjects.</returns>
</member>
<member name="M:SceneManager.updateExclusiveScene" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="126">
<summary>
Updates the exclusive scene.
</summary>
</member>
<member name="F:SceneManager.m_activeList" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="133">
<summary>
The scene stack
</summary>
</member>
<member name="F:SceneManager.m_exclusiveScene" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="138">
<summary>
The exclusive scene
</summary>
</member>
<member name="F:SceneManager.m_viewport" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="143">
<summary>
The viewport
</summary>
</member>
<member name="F:SceneManager.m_coreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\scenemanager.h" line="148">
<summary>
The core engine
</summary>
</member>
<member name="T:ReferenceCounter" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\referencecounter.h" line="15">
<summary>
Stores a reference counter. May be used to count how many times an object is copied by reference.
</summary>
</member>
<member name="M:ReferenceCounter.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\referencecounter.h" line="21">
<summary>
Contructs ReferenceCounter and sets the reference counter to 1.
</summary>
</member>
<member name="M:ReferenceCounter.getReferenceCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\referencecounter.h" line="27">
<summary>
Gets the counter value.
</summary>
<returns>The reference coutner.</returns>
</member>
<member name="M:ReferenceCounter.addReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\referencecounter.h" line="33">
<summary>
Adds 1 to the reference counter.
</summary>
</member>
<member name="M:ReferenceCounter.removeReference" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\referencecounter.h" line="37">
<summary>
Removes 1 from the reference counter.
</summary>
<returns>If the reference counter is equal to 0.</returns>
</member>
<member name="F:ReferenceCounter.m_refCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\referencecounter.h" line="44">
<summary>
Reference counter.
</summary>
</member>
<member name="T:IndexedModel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="22">
<summary>
Stores the vertices, texture coordinates, face normals and vertice tangents. 
Also stores the indices on how to draw the faces on the model.
</summary>
</member>
<member name="M:IndexedModel.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="29">
<summary>
Initializes a new instance of the <see cref="T:IndexedModel"/> class.
</summary>
</member>
<member name="M:IndexedModel.#ctor(std.vector&lt;System.UInt32,std.allocator&lt;System.UInt32&gt;&gt;!System.Runtime.CompilerServices.IsConst,std.vector&lt;physx.PxVec3,std.allocator&lt;physx.PxVec3&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;physx.PxVec2,std.allocator&lt;physx.PxVec2&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;physx.PxVec3,std.allocator&lt;physx.PxVec3&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;physx.PxVec3,std.allocator&lt;physx.PxVec3&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="33">
<summary>
Initializes a new instance of the <see cref="T:IndexedModel"/> class.
</summary>
<param name="indices">The indices.</param>
<param name="vertices">The vertices.</param>
<param name="texCoords">The texture coordinates.</param>
<param name="normals">The face normals.</param>
<param name="tangents">The vertices tangents.</param>
</member>
<member name="M:IndexedModel.isValid" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="49">
<summary>
Determines whether this instance is valid by checking if the sizes of the arrays are the same.
</summary>
<returns>If the model is valid.</returns>
</member>
<member name="M:IndexedModel.calcNormals" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="54">
<summary>
Calculates the normals.
</summary>
</member>
<member name="M:IndexedModel.calcTangents" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="58">
<summary>
Calculates the tangents.
</summary>
</member>
<member name="M:IndexedModel.finalize" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="63">
<summary>
Validates the model. If the normals and tangents aren't calculated then they are calculated.
</summary>
<returns>The validated model.</returns>
</member>
<!-- Discarding badly formed XML document comment for member 'M:IndexedModel.addVertex(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:IndexedModel.addVertex(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="74">
<summary>
Adds a vertex.
</summary>
<param name="x">The x value.</param>
<param name="y">The y value.</param>
<param name="z">The z value.</param>
</member>
<member name="M:IndexedModel.addTexCoord(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="82">
<summary>
Adds the texture coordinates.
</summary>
<param name="texCoord">The texture coordinates.</param>
</member>
<member name="M:IndexedModel.addTexCoord(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="87">
<summary>
Adds the texture coordinates.
</summary>
<param name="u">The u value.</param>
<param name="v">The v value.</param>
</member>
<member name="M:IndexedModel.addNormal(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="94">
<summary>
Adds a normal vector.
</summary>
<param name="normal">The normal vector.</param>
</member>
<member name="M:IndexedModel.addNormal(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="99">
<summary>
Adds a normal vector.
</summary>
<param name="x">The x value.</param>
<param name="y">The y value.</param>
<param name="z">The z value.</param>
</member>
<member name="M:IndexedModel.addTangent(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="107">
<summary>
Adds a tangent vector.
</summary>
<param name="tangent">The tangent vector.</param>
</member>
<member name="M:IndexedModel.addTangent(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="112">
<summary>
Adds a tangent vector.
</summary>
<param name="x">The x value.</param>
<param name="y">The y value.</param>
<param name="z">The z value.</param>
</member>
<member name="M:IndexedModel.addFace(System.UInt32,System.UInt32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="120">
<summary>
Adds a face tp the mesh.
</summary>
<param name="vertindex0">The first vertex index.</param>
<param name="vertindex1">The second vertex index.</param>
<param name="vertindex2">The third vertex index.</param>
</member>
<member name="M:IndexedModel.getIndices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="128">
<summary>
Gets the indices.
</summary>
<returns>The indices of the model.</returns>
</member>
<member name="M:IndexedModel.getPositions" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="133">
<summary>
Gets the vertices.
</summary>
<returns>The vertices of the model.</returns>
</member>
<member name="M:IndexedModel.getTexCoords" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="138">
<summary>
Gets the texture coordinates.
</summary>
<returns>The texture coordinates of the model.</returns>
</member>
<member name="M:IndexedModel.getNormals" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="143">
<summary>
Gets the normals.
</summary>
<returns>The normals of the model.</returns>
</member>
<member name="M:IndexedModel.getTangents" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="148">
<summary>
Gets the tangents.
</summary>
<returns>The tangents of the model.</returns>
</member>
<member name="F:IndexedModel.m_indices" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="154">
<summary>
The indices.
</summary>
</member>
<member name="F:IndexedModel.m_positions" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="158">
<summary>
The vertices.
</summary>
</member>
<member name="F:IndexedModel.m_texCoords" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="162">
<summary>
The texture coordinates.
</summary>
</member>
<member name="F:IndexedModel.m_normals" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="167">
<summary>
The normals.
</summary>
</member>
<member name="F:IndexedModel.m_tangents" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="172">
<summary>
The tangents.
</summary>
</member>
<member name="T:MeshData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="178">
<summary>
Initializes the indexed model and sends the data to the graphics card.
</summary>
<seealso cref="T:ReferenceCounter"/>
</member>
<member name="M:MeshData.#ctor(IndexedModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="185">
<summary>
Initializes a new instance of the <see cref="T:MeshData"/> class.
</summary>
<param name="indexedModel">The indexed model.</param>
</member>
<member name="M:MeshData.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="190">
<summary>
Finalizes an instance of the <see cref="T:MeshData"/> class.
</summary>
</member>
<member name="M:MeshData.getBoundingRadius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="195">
<summary>
Gets the bounding radius of the mesh.
</summary>
<returns>The bounding radius of the mesh.</returns>
</member>
<member name="M:MeshData.render" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="201">
<summary>
Renders the model.
</summary>
</member>
<member name="F:MeshData.m_vertexArrayObject" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="226">
<summary>
The vertex array object.
</summary>
</member>
<member name="F:MeshData.m_vertexArrayBuffers" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="230">
<summary>
The number of buffers to have to send to the graphics card.
</summary>
</member>
<member name="F:MeshData.m_drawCount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="234">
<summary>
The draw count.
</summary>
</member>
<member name="F:MeshData.m_boundingRadius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="238">
<summary>
The bounding radius.
</summary>
</member>
<member name="T:Mesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="244">
<summary>
The Mesh class holds <see cref="T:MeshData"/> and can be initalized 
by a model file or by a manually made indexed model.
</summary>
</member>
<member name="M:Mesh.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="251">
<summary>
Initializes a new instance of the <see cref="T:Mesh"/> class by passing a model file.
</summary>
<param name="fileName">Name of the file.</param>
<param name="scale">The scale factor.</param>
</member>
<member name="M:Mesh.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IndexedModel!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="257">
<summary>
Initializes a new instance of the <see cref="T:Mesh"/> class by passing a indexed model object.
</summary>
<param name="meshName">Name of the mesh.</param>
<param name="model">The indexed model.</param>
</member>
<member name="M:Mesh.#ctor(Mesh!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="263">
<summary>
Initializes a new instance of the <see cref="T:Mesh"/> class by reference from another Mesh object.
</summary>
<param name="mesh">A reference to a mesh object.</param>
</member>
<member name="M:Mesh.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="268">
<summary>
Finalizes an instance of the <see cref="T:Mesh"/> class.
</summary>
</member>
<member name="M:Mesh.getBoundingRadius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="273">
<summary>
Gets the bounding radius of the mesh.
</summary>
<returns>The bounding radius of the mesh.</returns>
</member>
<member name="M:Mesh.render" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="279">
<summary>
Renders the mesh.
</summary>
</member>
<member name="F:Mesh.s_resourceMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="285">
<summary>
A static map of MeshData pointers that stores all Meshes by their file name or given name.
</summary>
</member>
<member name="F:Mesh.m_fileName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="290">
<summary>
The file name.
</summary>
</member>
<member name="F:Mesh.m_meshData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\mesh.h" line="294">
<summary>
The mesh data.
</summary>
</member>
<member name="T:TextureData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="19">
<summary>
The Texture Data class inherits <see cref="T:ReferenceCounter"/> and holds texture information such as
the image data, image height, image width, texture format, filters and GL attachments.
</summary>
<seealso cref="T:ReferenceCounter"/>
</member>
<member name="M:TextureData.#ctor(System.UInt32,System.Int32,System.Int32,System.Int32,System.Byte**,System.Single*,System.UInt32*,System.UInt32*,System.Boolean,System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="27">
<summary>
Initializes a new instance of the <see cref="T:TextureData"/> class.
</summary>
<param name="textureTarget">The texture target.</param>
<param name="width">The width of the texture.</param>
<param name="height">The height of the texture.</param>
<param name="numTextures">The number textures.</param>
<param name="data">The texture data.</param>
<param name="filters">The filters.</param>
<param name="internalFormat">The internal format.</param>
<param name="format">The format.</param>
<param name="clamp">The clamp.</param>
<param name="attachments">The attachments for the texture.</param>
</member>
<member name="M:TextureData.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="41">
<summary>
Finalizes an instance of the <see cref="T:TextureData"/> class.
</summary>
</member>
<member name="M:TextureData.bind(System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="46">
<summary>
Binds the texture data to be used in the graphics card.
</summary>
<param name="textureNum">The texture number.</param>
</member>
<member name="M:TextureData.bindAsRenderTarget" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="51">
<summary>
Binds to render target to this instance of the texture.
</summary>
</member>
<member name="M:TextureData.getWidth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="56">
<summary>
Gets the texture width.
</summary>
<returns>The texture width.</returns>
</member>
<member name="M:TextureData.getHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="61">
<summary>
Gets the texture height.
</summary>
<returns>The texture height.</returns>
</member>
<member name="M:TextureData.initTextures(System.Byte**,System.Single*,System.UInt32*,System.UInt32*,System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="72">
<summary>
Initializes the texture(s).
</summary>
<param name="data">The texture data.</param>
<param name="filters">The filters.</param>
<param name="internalFormat">The internal format.</param>
<param name="format">The format.</param>
<param name="clamp">The clamp.</param>
</member>
<member name="M:TextureData.initRenderTargets(System.UInt32*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="81">
<summary>
Initializes the render target.
</summary>
<param name="attachments">The attachments.</param>
</member>
<member name="F:TextureData.m_textureID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="87">
<summary>
The texture identifier in the graphics card.
</summary>
</member>
<member name="F:TextureData.m_textureTarget" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="91">
<summary>
The texture target.
</summary>
</member>
<member name="F:TextureData.m_frameBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="95">
<summary>
The frame buffer.
</summary>
</member>
<member name="F:TextureData.m_renderBuffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="99">
<summary>
The render buffer.
</summary>
</member>
<member name="F:TextureData.m_numTextures" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="103">
<summary>
The number of textures.
</summary>
</member>
<member name="F:TextureData.m_width" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="107">
<summary>
The texture width.
</summary>
</member>
<member name="F:TextureData.m_height" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="111">
<summary>
The texture height.
</summary>
</member>
<member name="T:Texture" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="117">
<summary>
The Texture class stores the <see cref="T:TextureData"/> and the image's file name, if used.
Also has a static map that stores all <see cref="T:TextureData"/>.
</summary>
</member>
<member name="M:Texture.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.Single,System.UInt32,System.UInt32,System.Boolean,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="124">
<summary>
Initializes a new instance of the <see cref="T:Texture"/> class with a image file.
</summary>
<param name="fileName">Name of the image file.</param>
<param name="textureTarget">The texture target.</param>
<param name="filter">The filter.</param>
<param name="internalFormat">The internal format.</param>
<param name="format">The format.</param>
<param name="clamp">The clamp.</param>
<param name="attachment">The attachment.</param>
</member>
<member name="M:Texture.#ctor(System.Int32,System.Int32,System.Byte*,System.UInt32,System.Single,System.UInt32,System.UInt32,System.Boolean,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="135">
<summary>
Initializes a new instance of the <see cref="T:Texture"/> class with custom values.
</summary>
<param name="width">The texture width.</param>
<param name="height">The texture height.</param>
<param name="data">The texture data.</param>
<param name="textureTarget">The texture target.</param>
<param name="filter">The filter.</param>
<param name="internalFormat">The internal format.</param>
<param name="format">The format.</param>
<param name="clamp">The clamp.</param>
<param name="attachment">The attachment.</param>
</member>
<member name="M:Texture.#ctor(Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="148">
<summary>
Adds a refernce to the counter.
</summary>
<param name="texture">The texture.</param>
</member>
<member name="M:Texture.op_Assign(Texture)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="153">
<summary>
Equal operator override. Copies the memory over from a texture to this new Texture object.
</summary>
<param name="other">The texture to copy.</param>
</member>
<member name="M:Texture.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="158">
<summary>
Finalizes an instance of the <see cref="T:Texture"/> class.
</summary>
</member>
<member name="M:Texture.bind(System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="163">
<summary>
Binds the texture data to be used in the graphics card.
</summary>
<param name="unit">The texture unit.</param>
</member>
<member name="M:Texture.bindAsRenderTarget" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="168">
<summary>
Binds to render target to this instance of the texture.
</summary>
</member>
<member name="M:Texture.getWidth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="173">
<summary>
Gets the texture width.
</summary>
<returns>The width of the texture.</returns>
</member>
<member name="M:Texture.getHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="178">
<summary>
Gets the texture height.
</summary>
<returns>The height of the texture.</returns>
</member>
<!-- Discarding badly formed XML document comment for member 'M:Texture.op_Equality(Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:Texture.op_Inequality(Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="190">
<summary>
Checks if this instance of a Texture is not equal to another.
</summary>
<param name="texture">The texture.</param>
<returns>If the texture is not the same as the other.</returns>
</member>
<member name="F:Texture.s_resourceMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="198">
<summary>
A static map of <see cref="T:TextureData"/> pointers that stores all Textures by their file name or given name.
</summary>
</member>
<member name="F:Texture.m_textureData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="203">
<summary>
The texture data.
</summary>
</member>
<member name="F:Texture.m_fileName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\texture.h" line="207">
<summary>
The image's file name.
</summary>
</member>
<member name="T:MappedValues" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="22">
<summary>
Stores values in a map for ease of access.
This class is meant to be inherited but you can make an object of it.
</summary>
</member>
<member name="M:MappedValues.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="29">
<summary>
Constructs MappedValues and sets defualt value for texture to "defaultTexture.png" and for vector to 0.0f.
</summary>
</member>
<member name="M:MappedValues.setVec3(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="37">
<summary>
Adds a vector to the map.
</summary>
<param name="name">The name of the float vector.</param>
<param name="value">The value of the vector to store in the map.</param>
</member>
<member name="M:MappedValues.setFloat(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="43">
<summary>
Adds a float to the map.
</summary>
<param name="name">The name of the float value.</param>
<param name="value">The value of the float to store in the map.</param>
</member>
<member name="M:MappedValues.setTexture(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="49">
<summary>
Adds a texture to the map.
</summary>
<param name="name">The name of the texture.</param>
<param name="value">The texture to store in the map.</param>
</member>
<member name="M:MappedValues.getVec3(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="56">
<summary>
Gets a vector by name from the map.
</summary>
<returns>The vector by name from the map.</returns>
</member>
<member name="M:MappedValues.getFloat(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="61">
<summary>
Gets a float by name from the map.
</summary>
<returns>The float value by name from the map.</returns>
</member>
<member name="M:MappedValues.getTexture(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="66">
<summary>
Gets a texture by name from the map.
</summary>
<returns>The texutre by name from the map.</returns>
</member>
<member name="F:MappedValues.m_vector3fMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="73">
<summary>
A map of vectors.
</summary>
</member>
<member name="F:MappedValues.m_floatMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="77">
<summary>
A map of floats.
</summary>
</member>
<member name="F:MappedValues.m_textureMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="81">
<summary>
A map of textures.
</summary>
</member>
<member name="F:MappedValues.m_defaultTexture" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="86">
<summary>
The default texture.
</summary>
</member>
<member name="F:MappedValues.m_defaultVector3f" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\core\mappedvalues.h" line="90">
<summary>
The default 3d vector.
</summary>
</member>
<member name="T:MaterialData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="20">
<summary>
An empty class that holds the data for the material. This class itself doesn't 
have any member variables but inherits from <see cref="T:MappedValues"/> and 
<see cref="!:RefernceCounter"/>.
</summary>
<seealso cref="T:ReferenceCounter"/>
<seealso cref="T:MappedValues"/>
</member>
<member name="T:Material" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="33">
<summary>
Holds a pointer to <see cref="T:MaterialData"/> and maps material information to a map.
</summary>
</member>
<member name="M:Material.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="39">
<summary>
Initializes a new instance of the <see cref="T:Material"/> class.
</summary>
<param name="materialName">Name of the material.</param>
</member>
<member name="M:Material.#ctor(Material!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="44">
<summary>
Initializes a new instance of the <see cref="T:Material"/> class.
</summary>
<param name="other">The other.</param>
</member>
<member name="M:Material.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="49">
<summary>
Finalizes an instance of the <see cref="T:Material"/> class.
</summary>
</member>
<member name="M:Material.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="54">
<summary>
Initializes a new instance of the <see cref="T:Material"/> class.
</summary>
<param name="materialName">Name of the material.</param>
<param name="specularIntensity">The amount of specular intensity.</param>
<param name="specularPower">The specular power.</param>
<param name="diffuse">The diffuse texture. Defaults to "defaultTexture.png".</param>
<param name="normalMap">The normal map texture. Defaults to "default_normal.jpg".</param>
<param name="dispMap">The displacement map texture. Defaults to "default_disp.png"</param>
<param name="dispMapScale">The displacement map scale. Defaults to 0.</param>
<param name="dispMapOffset">The displacement map offset. Defaults to 0.</param>
</member>
<member name="M:Material.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="70">
<summary>
Initializes a new instance of the <see cref="T:Material"/> class.
</summary>
<param name="materialName">Name of the material.</param>
<param name="skyboxTex">The skybox texture.</param>
</member>
<member name="M:Material.setVec3(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="77">
<summary>
Sets the 3D vector with a name to the material data map.
</summary>
<param name="name">The name.</param>
<param name="value">The vector value.</param>
</member>
<member name="M:Material.setFloat(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="83">
<summary>
Sets the float with a name to the material data map.
</summary>
<param name="name">The name.</param>
<param name="value">The float value.</param>
</member>
<member name="M:Material.setTexture(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="89">
<summary>
Sets the texture with a name to the material data map.
</summary>
<param name="name">The name.</param>
<param name="value">The texture value.</param>
</member>
<member name="M:Material.getVec3(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="96">
<summary>
Gets the 3D vector value by name from the material data map.
</summary>
<param name="name">The name.</param>
<returns>A const reference to the 3D vector from the material data map.</returns>
</member>
<member name="M:Material.getFloat(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="102">
<summary>
Gets the float value by name from the material data map.
</summary>
<param name="name">The name.</param>
<returns>A const reference to the float from the material data map.</returns>
</member>
<member name="M:Material.getTexture(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="108">
<summary>
Gets the texture value by name from the material data map.
</summary>
<param name="name">The name.</param>
<returns>A const reference to the texture from the material data map.</returns>
</member>
<member name="F:Material.m_materialData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="117">
<summary>
The material data.
</summary>
</member>
<member name="F:Material.m_materialName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\material.h" line="121">
<summary>
The material's name.
</summary>
</member>
<member name="T:GameComponent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="25">
<summary>
A Game Component class that attaches to GameObjects to have custom funcationality.
</summary>
<example>
<code>
class MeshRenderer : public GameComponet { ... }
</code>
</example>
</member>
<member name="M:GameComponent.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="36">
<summary>
Initializes a new instance of the <see cref="T:GameComponent"/> class.
</summary>
</member>
<member name="M:GameComponent.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="41">
<summary>
Finalizes an instance of the <see cref="T:GameComponent"/> class.
</summary>
</member>
<member name="M:GameComponent.onStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="46">
<summary>
An initialization method for game components that is called
when game components are added to the scene
</summary>
</member>
<member name="M:GameComponent.processInput(InputManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="52">
<summary>
Virtual function for custom input processing.
</summary>
<param name="input">The input manager.</param>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:GameComponent.update(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="58">
<summary>
Virtual function for custom update functionality.
</summary>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:GameComponent.render(Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="63">
<summary>
Virtual function for custom rendering functionality.
</summary>
<param name="shader">The shader.</param>
<param name="renderingEngine">The rendering engine.</param>
<param name="camera">The camera.</param>
</member>
<member name="M:GameComponent.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="71">
<summary>
Adds to Core Engine.
</summary>
<param name="engine">The Core Engine.</param>
</member>
<member name="M:GameComponent.getTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="77">
<summary>
Gets the transform from the attached GameObject.
</summary>
<returns>A pointer to the attached GameObject's Transform object.</returns>
</member>
<member name="M:GameComponent.getTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="82">
<summary>
Gets the transform from the attached GameObject.
</summary>
<returns>A const refernce to the attached GameObject's Transform objet.</returns>
</member>
<member name="M:GameComponent.setParent(GameObject*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="88">
<summary>
Sets the parent GameObject..
</summary>
<param name="parent">The GameObject to be attached to.</param>
</member>
<member name="M:GameComponent.getCoreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="95">
<summary>
Gets the core engine.
</summary>
<returns>The Core Engine.</returns>
</member>
<member name="M:GameComponent.getParent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="100">
<summary>
Gets the parent.
</summary>
<returns>The parent GameObject.</returns>
</member>
<member name="M:GameComponent.getParent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="105">
<summary>
Gets the parent.
</summary>
<returns>The parent GameObject.</returns>
</member>
<member name="M:GameComponent.getGameObjectByName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="111">
<summary>
Gets the game object from the top most scene by name.
</summary>
<param name="gameObjectName">Name of the game object to get.</param>
<returns></returns>
</member>
<member name="M:GameComponent.getGameObjectsByName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="118">
<summary>
Gets the game object from the top most scene by name.
</summary>
<param name="gameObjectName">Name of the game object to get.</param>
<returns></returns>
</member>
<member name="M:GameComponent.removeGameObjectByName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="125">
<summary>
Removes the game object by finding it in the top most scene by name.
</summary>
<param name="gameObjectName">Name of the game object to remove.</param>
<returns></returns>
</member>
<member name="M:GameComponent.destroy(GameObject*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="132">
<summary>
Removes the game object by finding it in the top most scene.
</summary>
<param name="gameObjectName">The game object to remove.</param>
<returns></returns>
</member>
<member name="M:GameComponent.instantiate(GameObject*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="140">
<summary>
Creates the specified game object and adds it to the root
</summary>
<param name="gameObject">The game object to create.</param>
</member>
<member name="F:GameComponent.m_parent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="150">
<summary>
The parent GameObject.
</summary>
</member>
<member name="M:GameComponent.#ctor(GameComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="155">
<summary>
Initializes a new instance of the <see cref="T:GameComponent"/> class.
</summary>
<param name="other">The other.</param>
</member>
<member name="M:GameComponent.op_Assign(GameComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\gamecomponents.h" line="160">
<summary>
Operator=s the specified other.
</summary>
<param name="other">The other.</param>
</member>
<member name="T:Camera3D" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="25">
<summary>
Cameras represent a location, orientation, and projection from
which the scene can be rendered.
</summary>
</member>
<member name="M:Camera3D.#ctor(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Transform*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="32">
<summary>
Transform is passed in so the Camera doesn't need to be attached to a game object.
That's useful for places such as the rendering engine which can use cameras
without creating placeholder game objects.
</summary>
</member>
<member name="M:Camera3D.isInside(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="47">
<summary>
Checks wheather the point with a radius (a sphere) is inside the camera's frustum view.
</summary>
<param name="centre">The centre of the sphere.</param>
<param name="radius">The radius of the sphere.</param>
<returns>Wheather the sphere is inside, overlapping or outside the frustum.</returns>
</member>
<member name="M:Camera3D.getViewProjection" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="55">
<summary>
This is the primary function of the camera. Multiplying a point by the returned matrix
will transform the point into it's location on the screen, where -1 represents the bottom/left
of the screen, and 1 represents the top/right of the screen.
</summary>
<returns>The view projection matrix.</returns>
</member>
<member name="M:Camera3D.getView" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="62">
<summary>
Gets the view with the rotation of the camera.
</summary>
<returns>The view matrix.</returns>
</member>
<member name="M:Camera3D.getTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="67">
<summary>
Gets the transform.
</summary>
<returns>A pointer to the Transform object.</returns>
</member>
<member name="M:Camera3D.getTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="72">
<summary>
Gets the transform.
</summary>
<returns>A const reference to the Transform object.</returns>
</member>
<member name="M:Camera3D.getFrustum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="77">
<summary>
Gets frustum of the camera.
</summary>
<returns>A const reference to the Planes of the frustum.</returns>
</member>
<member name="M:Camera3D.setProjection(physx.PxMat44!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="83">
<summary>
Sets the projection matrix.
</summary>
<param name="projection">The projection matrix.</param>
</member>
<member name="M:Camera3D.setTransform(Transform*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="88">
<summary>
Sets the transform.
</summary>
<param name="transform">The transform.</param>
</member>
<member name="F:Camera3D.m_projection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="98">
<summary>
The projection with which the camera sees the world (i.e. perspective, orthographic, identity, etc.)
</summary>
</member>
<member name="F:Camera3D.m_fov" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="102">
<summary>
The components of the camera.
</summary>
</member>
<member name="F:Camera3D.m_transform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="106">
<summary>
The transform representing the position and orientation of the camera.
</summary>
</member>
<member name="F:Camera3D.m_frustum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="110">
<summary>
The 6 frustum planes.
</summary>
</member>
<member name="M:Camera3D.setFrustum" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="115">
<summary>
Calculates the frustum planes and sets it to the member variable.
</summary>
</member>
<member name="T:CameraComponent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="121">
<summary>
CameraComponents are an easy way to use a camera as a component
on a game object.
</summary>
</member>
<member name="M:CameraComponent.#ctor(System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="128">
<summary>
The camera's transform is initialized to 0 (null) because
at construction, this isn't attached to a game object,
and therefore doesn't have access to a valid transform.
</summary>
</member>
<member name="M:CameraComponent.addToEngine(CoreEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="139">
<summary>
Adds to engine.
</summary>
<param name="engine">The engine.</param>
</member>
<member name="M:CameraComponent.worldToScreenPoint(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="145">
<summary>
Gets the screen point of a point in 3D space.
Screen space is where the top-left is (0, 0) and bottom-right is (width, height).
The z-value is the distance from the camera to the point in 3D space.
</summary>
<param name="position">The position to transform to screen space.</param>
<returns>The screen coordinates of a point in 3D space.</returns>
</member>
<member name="M:CameraComponent.screenToWorldPoint(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="154">
<summary>
Gets the world point from the screen point.
</summary>
<param name="position">The position to transform to world space.</param>
<returns>The world coordinates of a point in 3D space.</returns>
</member>
<member name="M:CameraComponent.getCamera3D" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="161">
<summary>
Gets a reference to the camera object stored in the component.
</summary>
<returns>The reference to the camera object.</returns>
</member>
<member name="M:CameraComponent.getViewProjection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="166">
<summary>
Gets the view projection.
</summary>
<returns>The view projection of of the camera.</returns>
</member>
<member name="M:CameraComponent.getFrustum" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="171">
<summary>
Gets frustum of the camera.
</summary>
<returns>A const reference to the Planes of the frustum.</returns>
</member>
<member name="M:CameraComponent.setProjection(physx.PxMat44!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="177">
<summary>
Sets the projection.
</summary>
<param name="projection">The projection.</param>
</member>
<member name="M:CameraComponent.setParent(GameObject*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="182">
<summary>
Sets the parent.
</summary>
<param name="parent">The parent.</param>
</member>
<member name="F:CameraComponent.m_camera" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\camera3d.h" line="189">
<summary>
The camera that's being used like a componentt.
</summary>
</member>
<member name="T:TypedData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="31">
<summary>
Stores two string values for the name and what type of object it is.
</summary>
<example>
<code>
TypedData uniform("C_MVP", "mat4");
</code>
</example>
</member>
<member name="M:TypedData.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="42">
<summary>
Initializes a new instance of the <see cref="T:TypedData"/> class.
</summary>
<param name="name">The name.</param>
<param name="type">The type.</param>
</member>
<member name="M:TypedData.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="51">
<summary>
Gets the name.
</summary>
<returns>A const refernce to the name.</returns>
</member>
<member name="M:TypedData.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="56">
<summary>
Gets the type.
</summary>
<returns>A const reference to the type.</returns>
</member>
<member name="F:TypedData.m_name" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="62">
<summary>
The uniform's name.
</summary>
</member>
<member name="F:TypedData.m_type" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="66">
<summary>
The unirform's type.
</summary>
</member>
<member name="T:UniformStruct" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="72">
<summary>
The Uniform Struct holds the individual values of a struct from the shader files
so it can go through each variable in the struct and apply values to them then send
them to the graphics card.
</summary>
</member>
<member name="M:UniformStruct.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;TypedData,std.allocator&lt;TypedData&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="80">
<summary>
Initializes a new instance of the <see cref="T:UniformStruct"/> class.
</summary>
<param name="name">The struct's name.</param>
<param name="memberNames">The member names.</param>
</member>
<member name="M:UniformStruct.getName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="89">
<summary>
Gets the struct's name.
</summary>
<returns>A const reference of the struct's name.</returns>
</member>
<member name="M:UniformStruct.getMemberNames" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="95">
<summary>
Gets the member names.
</summary>
<returns>A const refernce of the vector of member names.</returns>
</member>
<member name="F:UniformStruct.m_name" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="101">
<summary>
The struct's name
</summary>
</member>
<member name="F:UniformStruct.m_memberNames" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="105">
<summary>
The member names
</summary>
</member>
<member name="T:ShaderData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="111">
<summary>
The Shader Data class holds the program's ID and the uniforms that are inside its shader files.
It also links the vertex and fragment shaders to the shader program.
</summary>
<seealso cref="T:ReferenceCounter"/>
</member>
<member name="M:ShaderData.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="119">
<summary>
Initializes a new instance of the <see cref="T:ShaderData"/> class with shader file's name.
</summary>
<param name="fileName">Name of the shader file.</param>
</member>
<member name="M:ShaderData.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="124">
<summary>
Finalizes an instance of the <see cref="T:ShaderData"/> class.
</summary>
</member>
<member name="M:ShaderData.getProgram" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="129">
<summary>
Gets the program ID.
</summary>
<returns>The shader program's ID.</returns>
</member>
<member name="M:ShaderData.getShaders" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="134">
<summary>
Gets the shader IDs.
</summary>
<returns>A const reference to the vector of shader IDs.</returns>
</member>
<member name="M:ShaderData.getUniformNames" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="139">
<summary>
Gets the uniform names.
</summary>
<returns>A const reference to the vector of uniform names.</returns>
</member>
<member name="M:ShaderData.getUniformTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="144">
<summary>
Gets the uniform types.
</summary>
<returns>A const reference to the vector of uniform types.</returns>
</member>
<!-- Discarding badly formed XML document comment for member 'M:ShaderData.getUniformMap'. -->
<member name="M:ShaderData.addVertexShader(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="155">
<summary>
Adds the vertex shader.
</summary>
<param name="text">The vertex shader's source text.</param>
</member>
<member name="M:ShaderData.addGeometryShader(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="160">
<summary>
Adds the geometry shader.
</summary>
<param name="text">The geometry shader's source text.</param>
</member>
<member name="M:ShaderData.addFragmentShader(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="165">
<summary>
Adds the fragment shader.
</summary>
<param name="text">The fragment shader's source text.</param>
</member>
<member name="M:ShaderData.addProgram(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="170">
<summary>
Adds a shader to the program.
</summary>
<param name="text">The shader's source text.</param>
<param name="type">The type of shader.</param>
<example>
<code>
addProgram(sourceText, GL_VERTEX_SHADER);
</code>
</example>
</member>
<member name="M:ShaderData.addAllAttributes(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="182">
<summary>
Adds all attributes to the program.
</summary>
<param name="vertexShaderText">The vertex shader's source text.</param>
<param name="attributeKeyword">The attribute keyword.</param>
</member>
<member name="M:ShaderData.addShaderUniforms(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="188">
<summary>
Adds the shader uniforms to this Shader Data from the graphics card.
</summary>
<param name="shaderText">The shader's source text.</param>
</member>
<member name="M:ShaderData.addUniform(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;UniformStruct,std.allocator&lt;UniformStruct&gt;&gt;!" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="193">
<summary>
Finds the uniform name and type from the struct and adds it to the map.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="uniformType">Type of the uniform.</param>
<param name="structs">The struct of uniforms.</param>
</member>
<member name="M:ShaderData.compileShader" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="200">
<summary>
Compiles the shader.
</summary>
</member>
<member name="M:ShaderData.convertVertexShaderToGLSL150(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="204">
<summary>
Converts the vertex shader to GLSL 150.
</summary>
<param name="shaderText">The vertex shader's source text.</param>
</member>
<member name="M:ShaderData.convertFragmentShaderToGLSL150(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="209">
<summary>
Converts the fragment shader to GLSL 150.
</summary>
<param name="shaderText">The fragment shader's source text.</param>
</member>
<member name="F:ShaderData.s_supportedOpenGLLevel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="215">
<summary>
The supported level of OpenGL on the computer
</summary>
</member>
<member name="F:ShaderData.m_program" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="219">
<summary>
The shader program ID
</summary>
</member>
<member name="F:ShaderData.m_shaders" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="223">
<summary>
The shaders in the program.
</summary>
</member>
<member name="F:ShaderData.m_uniformNames" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="227">
<summary>
The uniform names in the program.
</summary>
</member>
<member name="F:ShaderData.m_uniformTypes" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="231">
<summary>
The uniform types in the program.
</summary>
</member>
<member name="F:ShaderData.m_uniformMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="235">
<summary>
The location of the uniforms based on the name.
</summary>
</member>
<member name="T:Shader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="241">
<summary>
The Shader class stores the <see cref="T:ShaderData"/> and keeps refernce of the same shader.
</summary>
</member>
<member name="M:Shader.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="248">
<summary>
Initializes a new instance of the <see cref="T:Shader"/> class from a shader file.
</summary>
<param name="fileName">Name of the shader file.</param>
</member>
<member name="M:Shader.#ctor(Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="253">
<summary>
Initializes a new instance of the <see cref="T:Shader"/> class from a shader object.
</summary>
<param name="other">The other.</param>
</member>
<member name="M:Shader.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="258">
<summary>
Finalizes an instance of the <see cref="T:Shader"/> class.
</summary>
</member>
<member name="M:Shader.bind" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="263">
<summary>
Binds this instance of the shader program to be used.
</summary>
</member>
<member name="M:Shader.updateUniforms(Transform!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Material!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="267">
<summary>
Updates the uniforms. Automatically finds the uniforms of the shader 
and sends the appriorpiate data to the graphics card.
</summary>
<param name="transform">The transform.</param>
<param name="material">The material.</param>
<param name="renderingEngine">The rendering engine.</param>
<param name="camera">The main camera.</param>
</member>
<member name="M:Shader.setUniformi(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="277">
<summary>
Sets the integer uniform.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="value">The value of the uniform.</param>
</member>
<member name="M:Shader.setUniformf(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="283">
<summary>
Sets the float uniform.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="value">The value of the uniform.</param>
</member>
<member name="M:Shader.setUniformPxMat44(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxMat44!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="289">
<summary>
Sets the matrix4x4 uniform.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="value">The value of the uniform.</param>
</member>
<member name="M:Shader.setUniformPxVec3(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="295">
<summary>
Sets the 3D vector uniform.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="value">The value of the uniform.</param>
</member>
<member name="F:Shader.s_resourceMap" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="303">
<summary>
The map of every <see cref="T:ShaderData"/>.
</summary>
</member>
<member name="F:Shader.m_shaderData" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="308">
<summary>
The shader data.
</summary>
</member>
<member name="F:Shader.m_fileName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="312">
<summary>
The shader file name.
</summary>
</member>
<member name="M:Shader.setUniformDirectionalLight(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DirectionalLight!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="317">
<summary>
Sets the directional light uniform.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="value">The directional light to send to the graphics card.</param>
</member>
<member name="M:Shader.setUniformPointLight(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,PointLight!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="323">
<summary>
Sets the point light uniform.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="value">The point light to send to the graphics card.</param>
</member>
<member name="M:Shader.setUniformSpotLight(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,SpotLight!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="329">
<summary>
Sets the spot light uniform.
</summary>
<param name="uniformName">Name of the uniform.</param>
<param name="value">The spot light to send to the graphics card.</param>
</member>
<member name="M:Shader.op_Assign(Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\shader.h" line="336">
<summary>
Operator=s the specified other.
</summary>
<param name="other">The other.</param>
</member>
<member name="T:Skybox" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="26">
<summary>
Creates a skybox in the current scene. There should only be one.
It is attached to the RenderingEngine's Skybox and calls render once everything
else is done rendering in the scene (except the GUI).
The order to input the skybox textures are right, left, top, bottom, back and front.
</summary>
</member>
<member name="M:Skybox.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="35">
<summary>
Initializes a new instance of the <see cref="T:Skybox"/> class.
</summary>
<param name="fileName">Name of the skybox (without the 
numerical number at the end) file.</param>
</member>
<member name="M:Skybox.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="41">
<summary>
Finalizes an instance of the <see cref="T:Skybox"/> class.
</summary>
</member>
<member name="M:Skybox.render(RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="46">
<summary>
Renders the skybox by binding the shader, updating the uniforms and 
rendering the mesh.
</summary>
<param name="renderingEngine">The rendering engine.</param>
<param name="camera">The camera to render the skybox to.</param>
</member>
<member name="F:Skybox.m_cubeShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="55">
<summary>
The skybox shader.
</summary>
</member>
<member name="F:Skybox.m_cubeTexture" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="60">
<summary>
The skybox texture.
</summary>
</member>
<member name="F:Skybox.m_cubeMesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="65">
<summary>
The skybox's cube mesh.
</summary>
</member>
<member name="F:Skybox.m_cubeTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="70">
<summary>
The cube's transform. Which is just the default Transform.
</summary>
</member>
<member name="T:SkyboxRenderer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="77">
<summary>
A <see cref="T:GameComponent"/> that adds a skybox to the Rendering Engine.
</summary>
<seealso cref="T:GameComponent"/>
</member>
<member name="M:SkyboxRenderer.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="84">
<summary>
Initializes a new instance of the <see cref="T:SkyboxRenderer"/> class.
</summary>
<param name="fileName">&gt;Name of the skybox (without the 
numerical number at the end) file.</param>
</member>
<member name="M:SkyboxRenderer.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="91">
<summary>
Finalizes an instance of the <see cref="T:SkyboxRenderer"/> class.
</summary>
</member>
<member name="M:SkyboxRenderer.addToEngine(CoreEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="96">
<summary>
Adds the skybox to the Rendering Engine.
</summary>
<param name="engine">A pointer to the Core Engine.</param>
</member>
<member name="M:SkyboxRenderer.getSkybox" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="102">
<summary>
Gets a reference to the skybox object.
</summary>
<returns>A reference to the skybox object.</returns>
</member>
<member name="F:SkyboxRenderer.m_skybox" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\skybox.h" line="109">
<summary>
The skybox.
</summary>
</member>
<member name="T:ShadowCameraTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="21">
<summary>
The position and rotation of the shadow from the camera's point of view.
</summary>
</member>
<member name="M:ShadowCameraTransform.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="27">
<summary>
Initializes a new instance of the <see cref="T:ShadowCameraTransform"/> class.
</summary>
<param name="pos">The position.</param>
<param name="rot">The rot.</param>
</member>
<member name="M:ShadowCameraTransform.getPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="36">
<summary>
Gets the position.
</summary>
<returns>The position vector.</returns>
</member>
<member name="M:ShadowCameraTransform.GetRotation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="41">
<summary>
Gets the rot.
</summary>
<returns>The rotation.</returns>
</member>
<member name="F:ShadowCameraTransform.m_pos" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="47">
<summary>
The position vector of the shadow from the camera.
</summary>
</member>
<!-- Discarding badly formed XML document comment for member 'F:ShadowCameraTransform.m_rot'. -->
<member name="T:ShadowInfo" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="57">
<summary>
Information about the shadow such as how soft the edges are and how it is projected onto a surface.
</summary>
</member>
<member name="M:ShadowInfo.#ctor(physx.PxMat44!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Int32,System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="63">
<summary>
Initializes a new instance of the <see cref="T:ShadowInfo"/> class.
</summary>
<param name="projection">The projection matrix.</param>
<param name="flipFaces">If to flip the faces of the shadow.</param>
<param name="shadowMapSizeAsPowerOf2">The shadow map size as power of 2.</param>
<param name="shadowSoftness">The shadow softness.</param>
<param name="lightBleedReductionAmount">The light bleed reduction amount.</param>
<param name="minVariance">The minimum variance.</param>
</member>
<member name="M:ShadowInfo.getProjection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="81">
<summary>
Gets the projection.
</summary>
<returns>A const refernce to the projection view matrix of the shadow.</returns>
</member>
<!-- Discarding badly formed XML document comment for member 'M:ShadowInfo.getFlipFaces'. -->
<member name="M:ShadowInfo.getShadowMapSizeAsPowerOf2" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="91">
<summary>
Gets the shadow map size as power of 2.
</summary>
<returns>The size of the map to the power of 2.</returns>
</member>
<member name="M:ShadowInfo.getShadowSoftness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="96">
<summary>
Gets the shadow softness.
</summary>
<returns>How soft the shadows are.</returns>
</member>
<member name="M:ShadowInfo.getMinVariance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="101">
<summary>
Gets the minimum variance.
</summary>
<returns>The minimum variance value.</returns>
</member>
<member name="M:ShadowInfo.getLightBleedReductionAmount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="106">
<summary>
Gets the light bleed reduction amount.
</summary>
<returns>The light bleed amount.</returns>
</member>
<member name="F:ShadowInfo.m_projection" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="113">
<summary>
The projection view matrix of the shadow.
</summary>
</member>
<member name="F:ShadowInfo.m_flipFaces" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="117">
<summary>
Wheather to flip faces.
</summary>
</member>
<member name="F:ShadowInfo.m_shadowMapSizeAsPowerOf2" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="121">
<summary>
The shadow map size as power of 2.
</summary>
</member>
<member name="F:ShadowInfo.m_shadowSoftness" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="125">
<summary>
The shadow softness.
</summary>
</member>
<member name="F:ShadowInfo.m_lightBleedReductionAmount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="129">
<summary>
The light bleed reduction amount.
</summary>
</member>
<member name="F:ShadowInfo.m_minVariance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="133">
<summary>
The minimum variance amount.
</summary>
</member>
<member name="T:BaseLight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="139">
<summary>
The base class for the different types of light. It stores the colour, intensity, shadow info and the current shader.
It also inherits <see cref="T:GameComponent"/> so the lights can be attached to a GameObject and added to a scene.
</summary>
<seealso cref="T:GameComponent"/>
</member>
<member name="M:BaseLight.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="147">
<summary>
Initializes a new instance of the <see cref="T:BaseLight"/> class.
</summary>
<param name="color">The color.</param>
<param name="intensity">The intensity.</param>
<param name="shader">The current shader.</param>
</member>
<member name="M:BaseLight.calcShadowCameraTransform(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="160">
<summary>
A virtual function to be implemented differently based on the type of light.
The default beahviour is to use the attached GameObject's position and rotation for the Shadow's position and rotation.
</summary>
<param name="mainCameraPos">The main camera position.</param>
<param name="mainCameraRot">The main camera rotation.</param>
<returns>The resulting transform of the shadow.</returns>
</member>
<member name="M:BaseLight.addToEngine(CoreEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="168">
<summary>
Adds to Core Engine.
</summary>
<param name="engine">The Core Engine.</param>
</member>
<member name="M:BaseLight.getColor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="174">
<summary>
Gets the color.
</summary>
<returns>A const reference of the colour RBG values.</returns>
</member>
<member name="M:BaseLight.getIntensity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="179">
<summary>
Gets the intensity.
</summary>
<returns>The amount of light intensity.</returns>
</member>
<member name="M:BaseLight.getShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="184">
<summary>
Gets the current shader.
</summary>
<returns>A const reference to the current shader program.</returns>
</member>
<member name="M:BaseLight.getShadowInfo" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="189">
<summary>
Gets the shadow information.
</summary>
<returns>A const reference to the shadow information.</returns>
</member>
<member name="M:BaseLight.setShadowInfo(ShadowInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="195">
<summary>
Sets the shadow information.
</summary>
<param name="shadowInfo">The shadow information of this light.</param>
</member>
<member name="F:BaseLight.m_color" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="201">
<summary>
The color RBG values.
</summary>
</member>
<member name="F:BaseLight.m_intensity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="205">
<summary>
The light intensity.
</summary>
</member>
<member name="F:BaseLight.m_shader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="209">
<summary>
The current shader program for this light.
</summary>
</member>
<member name="F:BaseLight.m_shadowInfo" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="213">
<summary>
The light's shadow information.
</summary>
</member>
<member name="T:DirectionalLight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="220">
<summary>
A traditional Directional light that simulates light from one direction so all 
the shadows are parallel to direction it is facing. 
It inherits <see cref="T:BaseLight"/>.
</summary>
<seealso cref="T:BaseLight"/>
</member>
<member name="M:DirectionalLight.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="229">
<summary>
Initializes a new instance of the <see cref="T:DirectionalLight"/> class.
</summary>
<param name="color">The RBG colour values.</param>
<param name="intensity">The light intensity.</param>
<param name="shadowMapSizeAsPowerOf2">The shadow map size as power of 2.</param>
<param name="shadowArea">The shadow area.</param>
<param name="shadowSoftness">The amount of shadow softness.</param>
<param name="lightBleedReductionAmount">The light bleed reduction amount.</param>
<param name="minVariance">The minimum variance amount.</param>
</member>
<member name="M:DirectionalLight.calcShadowCameraTransform(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxQuat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="242">
<summary>
Virtually overridden function to calculate the Transform of the shadow from the camera's point of view.
Calculates the shadow's position and rotation but limits the shadow area so it doesn't have a large shadow area.
</summary>
<param name="mainCameraPos">The main camera position.</param>
<param name="mainCameraRot">The main camera rotation.</param>
<returns>The transform of the shadow from the Directional Light's point of view.</returns>
</member>
<member name="M:DirectionalLight.getHalfShadowArea" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="251">
<summary>
Gets the half shadow area.
</summary>
<returns>The half of the shadow area.</returns>
</member>
<member name="F:DirectionalLight.m_halfShadowArea" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="257">
<summary>
The area where the directional light will cast shadows in.
</summary>
</member>
<member name="T:Attenuation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="263">
<summary>
The Attenuation of a light. Used for <see cref="T:SpotLight"/> and <see cref="T:PointLight"/>.
</summary>
</member>
<member name="M:Attenuation.#ctor(System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="269">
<summary>
Initializes a new instance of the <see cref="T:Attenuation"/> class.
</summary>
<param name="constant">The constant factor.</param>
<param name="linear">The linear factor.</param>
<param name="exponent">The exponent factor.</param>
</member>
<member name="M:Attenuation.getConstant" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="280">
<summary>
Gets the constant factor.
</summary>
<returns>The constant factor.</returns>
</member>
<member name="M:Attenuation.getLinear" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="285">
<summary>
Gets the linear factor.
</summary>
<returns>The linear factor.</returns>
</member>
<member name="M:Attenuation.getExponent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="290">
<summary>
Gets the exponent factor.
</summary>
<returns>The exponent factor.</returns>
</member>
<member name="F:Attenuation.m_constant" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="296">
<summary>
The constant factor.
</summary>
</member>
<member name="F:Attenuation.m_linear" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="300">
<summary>
The linear factor.
</summary>
</member>
<member name="F:Attenuation.m_exponent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="304">
<summary>
The exponent factor.
</summary>
</member>
<!-- Discarding badly formed XML document comment for member 'T:PointLight'. -->
<member name="M:PointLight.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,Attenuation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="317">
<summary>
Initializes a new instance of the <see cref="T:PointLight"/> class.
</summary>
<param name="color">The RBG color values. Defaults to black.</param>
<param name="intensity">The light intensity. Defaults to 0.</param>
<param name="atten">The attenuation. Defaults to a constant and linear of 0 and exponent of 1.</param>
<param name="shader">The current shader. Defaults to forward-point shader.</param>
</member>
<member name="M:PointLight.getAttenuation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="327">
<summary>
Gets the attenuation information of the point light.
</summary>
<returns>A reference to the attenuation object.</returns>
</member>
<member name="M:PointLight.getRange" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="332">
<summary>
Gets the light range.
</summary>
<returns>The light range.</returns>
</member>
<member name="F:PointLight.m_attenuation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="338">
<summary>
The light's attenuation.
</summary>
</member>
<member name="F:PointLight.m_range" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="342">
<summary>
The light's reach distance.
</summary>
</member>
<member name="T:SpotLight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="348">
<summary>
A traditional Spot Light where light is emitted from a point in space in a cone shape.
</summary>
<seealso cref="T:PointLight"/>
</member>
<member name="M:SpotLight.#ctor(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,Attenuation!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Int32,System.Single,System.Single,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="355">
<summary>
Initializes a new instance of the <see cref="T:SpotLight"/> class.
</summary>
<param name="color">The RBG color values. Defaults to black.</param>
<param name="intensity">The light intensity. Defaults to 0.</param>
<param name="atten">The light's attenuation. Defaults to a constant and linear of 0 and exponent of 1.</param>
<param name="viewAngle">The light's view angle. Defaults to 170 degrees.</param>
<param name="shadowMapSizeAsPowerOf2">The shadow map size as power of 2. Defaults to 0.</param>
<param name="shadowSoftness">The shadow softness. Defualts to 1.</param>
<param name="lightBleedReductionAmount">The light bleed reduction amount. Defaults to 0.2.</param>
<param name="minVariance">The amount of minimum variance. Defaults to 0.00002.</param>
</member>
<member name="M:SpotLight.getCutoff" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="369">
<summary>
Gets the cutoff distnace.
</summary>
<returns>The distance from the light's position where the light cuts off.</returns>
</member>
<member name="F:SpotLight.m_cutoff" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\lighting.h" line="375">
<summary>
The cutoff distance from the light's position in space.
</summary>
</member>
<member name="T:MeshRenderer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\meshrenderer.h" line="21">
<summary>
Renders a Mesh based on a file given or information manually entered.
</summary>
<seealso cref="T:GameComponent"/>
</member>
<member name="M:MeshRenderer.#ctor(Mesh!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Material!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\meshrenderer.h" line="28">
<summary>
Initializes a new instance of the <see cref="T:MeshRenderer"/> class.
</summary>
<param name="mesh">The mesh.</param>
<param name="material">The material.</param>
</member>
<member name="M:MeshRenderer.render(Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\meshrenderer.h" line="35">
<summary>
Renders the mesh with the applied material.
</summary>
<param name="shader">The shader program.</param>
<param name="renderingEngine">The rendering engine.</param>
<param name="camera">The main active camera.</param>
</member>
<member name="F:MeshRenderer.m_mesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\meshrenderer.h" line="53">
<summary>
The mesh.
</summary>
</member>
<member name="F:MeshRenderer.m_material" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\meshrenderer.h" line="57">
<summary>
The material.
</summary>
</member>
<member name="M:BloomObject.render(RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="29">
<summary>
Renders the bloomObject by binding the shader, updating the uniforms and 
rendering the mesh.
</summary>
<param name="renderingEngine">The rendering engine.</param>
<param name="camera">The camera to render the bloomObject to.</param>
</member>
<member name="F:BloomObject.m_objectShader" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="38">
<summary>
The bloomObject's shader.
</summary>
</member>
<member name="F:BloomObject.m_objectTexture" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="43">
<summary>
The bloomObject's texture.
</summary>
</member>
<member name="F:BloomObject.m_objectMesh" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="48">
<summary>
The bloomObject's cube mesh.
</summary>
</member>
<member name="F:BloomObject.m_objectTransform" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="53">
<summary>
The bloomObject's transform. Which is just the default Transform.
</summary>
</member>
<member name="T:BloomObjectRenderer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="59">
<summary>
A <see cref="T:GameComponent"/> that adds a bloomObject to the Rendering Engine.
</summary>
<seealso cref="T:GameComponent"/>
</member>
<member name="M:BloomObjectRenderer.#ctor(Mesh!System.Runtime.CompilerServices.IsConst,Texture!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="66">
<summary>
Initializes a new instance of the <see cref="T:BloomObjectRenderer"/> class.
</summary>
</member>
<member name="M:BloomObjectRenderer.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="71">
<summary>
Finalizes an instance of the <see cref="T:BloomObjectRenderer"/> class.
</summary>
</member>
<member name="M:BloomObjectRenderer.addToEngine(CoreEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="76">
<summary>
Adds the BloomObject to the Rendering Engine.
</summary>
<param name="engine">A pointer to the Core Engine.</param>
</member>
<member name="M:BloomObjectRenderer.getBloomObject" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="82">
<summary>
Gets a reference to the BloomObject object.
</summary>
<returns>A reference to the BloomObject object.</returns>
</member>
<member name="F:BloomObjectRenderer.m_bloomObject" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\rendering\bloomobject.h" line="89">
<summary>
The BloomObject.
</summary>
</member>
<member name="D:CEGUI.encoded_char" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\string.h" line="49">
encoded char signifies that it's a char (8bit) with encoding (in this case utf8)
</member>
<member name="F:P_Discrete" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\keyframe.h" line="64">
left neighbour's value is picked if interpolation position is lower
         * than 1.0, right is only picked when interpolation position is exactly
         * 1.0

</member>
<member name="F:AM_Relative" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\affector.h" line="64">
saves a base value after the animation is started and applies
         * relatively to that

</member>
<member name="F:AM_RelativeMultiply" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\affector.h" line="69">
saves a base value after the animation is started and applies
         * by multiplying this base value with key frame floats

</member>
<member name="M:CEGUI.Affector.#ctor(CEGUI.Animation*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\affector.h" line="75">
internal constructor, please construct Affectors via
     * Animation::createAffector only

</member>
<member name="F:CEGUI.Affector.d_keyFrames" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\affector.h" line="262">
keyframes of this affector (if there are no keyframes, this affector
     * won't do anything!)

</member>
<member name="F:RM_Bounce" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animation.h" line="74">
infinitely plays the animation forward, when it reaches the end, it
         * plays it backwards, etc...

</member>
<member name="M:CEGUI.Animation.#ctor(CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animation.h" line="80">
internal constructor, please only construct animations via
     * AnimationManager::createAnimation method

</member>
<member name="F:CEGUI.Animation.d_autoStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animation.h" line="281">
if true, instantiations of this animation call start on themselves when
     * their target is set

</member>
<member name="F:CEGUI.Animation.d_autoSubscriptions" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animation.h" line="293">
holds pairs of 2 strings, the left string is the Event that we will
     * subscribe to, the right string is the action that will be invoked to the
     * instance if the event is fired on target window

</member>
<member name="M:CEGUI.AnimationInstance.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animationinstance.h" line="97">
internal destructor, please use
     * AnimationManager::destroyAnimationInstance

</member>
<member name="M:CEGUI.AnimationInstance.purgeSavedPropertyValues" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animationinstance.h" line="353">
this purges all saved values forcing this class to gather new ones fresh
     * from the properties

</member>
<member name="M:CEGUI.AnimationInstance.getSavedPropertyValue(CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animationinstance.h" line="358">
retrieves saved value, if it isn't cached already, it retrieves it fresh
     * from the properties

</member>
<member name="F:CEGUI.AnimationInstance.d_eventSender" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animationinstance.h" line="413">
event sender, sends events and can control this animation instance if
     * there are any auto subscriptions

</member>
<member name="F:CEGUI.AnimationInstance.d_position" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animationinstance.h" line="418">
position of this animation instance,
     * should always be higher or equal to 0.0 and lower or equal to duration of
     * animation definition

</member>
<member name="F:CEGUI.AnimationInstance.d_savedPropertyValues" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\animationinstance.h" line="440">
cached saved values, used for relative application method
     *  and keyframe property source, see Affector and KeyFrame classes

</member>
<member name="M:CEGUI.Interpolator.interpolateAbsolute(CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\interpolator.h" line="67">
this is used when Affector is set to apply values in absolute mode
     * (application method == AM_Absolute)

</member>
<member name="M:CEGUI.Interpolator.interpolateRelative(CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\interpolator.h" line="74">
this is used when Affector is set to apply values in relative mode
     * (application method == AM_Relative)

</member>
<member name="M:CEGUI.Interpolator.interpolateRelativeMultiply(CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\interpolator.h" line="82">
this is used when Affector is set to apply values in relative multiply
     * mode (application method == AM_RelativeMultiply)

</member>
<member name="F:CEGUI.Clipboard.d_mimeType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\clipboard.h" line="142">
mime type of the current content
</member>
<member name="F:CEGUI.Clipboard.d_buffer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\clipboard.h" line="146">
raw data buffer containing current clipboard contents
</member>
<member name="F:CEGUI.Clipboard.d_bufferSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\clipboard.h" line="148">
size (in bytes) of the raw buffer
</member>
<member name="F:CEGUI.Clipboard.d_nativeProvider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\clipboard.h" line="151">
native clipboard provider if any
</member>
<member name="M:CEGUI.ResourceProvider.getResourceGroupFileNames(std.vector&lt;CEGUI.String,std.allocator&lt;CEGUI.String&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\resourceprovider.h" line="131">
enumerate the files in \a resource_group that match \a file_pattern and
    append thier names to \a out_vec

</member>
<member name="F:HA_LEFT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="54">
Element's position specifies an offset of it's left edge from the left
edge of it's parent.

</member>
<member name="F:HA_CENTRE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="59">
Element's position specifies an offset of it's horizontal centre from the
horizontal centre of it's parent.

</member>
<member name="F:HA_RIGHT" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="64">
Element's position specifies an offset of it's right edge from the right
edge of it's parent.

</member>
<member name="F:VA_TOP" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="132">
Element's position specifies an offset of it's top edge from the top edge
of it's parent.

</member>
<member name="F:VA_CENTRE" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="137">
Element's position specifies an offset of it's vertical centre from the
vertical centre of it's parent.

</member>
<member name="F:VA_BOTTOM" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="142">
Element's position specifies an offset of it's bottom edge from the
bottom edge of it's parent.

</member>
<member name="F:CEGUI.Element.EventSized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="251">
Event fired when the Element size has changed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the Element whose size was changed.

</member>
<member name="F:CEGUI.Element.EventParentSized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="256">
Event fired when the parent of this Element has been re-sized.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element pointing to the <em>parent element</em> that
     * was resized, not the element whose parent was resized.

</member>
<member name="F:CEGUI.Element.EventMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="262">
Event fired when the Element position has changed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the Element whose position was changed.

</member>
<member name="F:CEGUI.Element.EventHorizontalAlignmentChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="267">
Event fired when the horizontal alignment for the element is changed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the Element whose horizontal alignment
     * setting was changed.

</member>
<member name="F:CEGUI.Element.EventVerticalAlignmentChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="273">
Event fired when the vertical alignment for the element is changed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the Element whose vertical alignment
     * setting was changed.

</member>
<member name="F:CEGUI.Element.EventRotated" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="279">
Event fired when the rotation factor(s) for the element are changed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the Element whose rotation was changed.

</member>
<member name="F:CEGUI.Element.EventChildAdded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="284">
Event fired when a child Element has been added.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the child element that was added.

</member>
<member name="F:CEGUI.Element.EventChildRemoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="289">
Event fired when a child element has been removed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the child element that was removed.

</member>
<member name="F:CEGUI.Element.EventZOrderChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="294">
Event fired when the z-order of the element has changed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the Element whose z order position has
     * changed.

</member>
<member name="F:CEGUI.Element.EventNonClientChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\element.h" line="300">
Event fired when the non-client setting for the Element is changed.
     * Handlers are passed a const ElementEventArgs reference with
     * ElementEventArgs::element set to the Element whose non-client setting was
     * changed.

</member>
<member name="F:CEGUI.Font.EventRenderSizeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\font.h" line="69">
Event fired when the font internal state has changed such that the
     * rendered size of they glyphs is different.
     * Handlers are passed a const FontEventArgs reference with
     * FontEventArgs::font set to the Font whose rendered size has changed.

</member>
<member name="F:CEGUI.System.EventDisplaySizeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\system.h" line="77">
Event fired for display size changes (as notified by client code).
     * Handlers are passed a const DisplayEventArgs reference with
     * DisplayEventArgs::size set to the pixel size that was notifiied to the
     * system.

</member>
<member name="F:CEGUI.System.EventRenderedStringParserChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\system.h" line="83">
Event fired when global custom RenderedStringParser is set.
     * Handlers are passed a const reference to a generic EventArgs struct.

</member>
<member name="F:CEGUI.System.d_imageCodecModule" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\system.h" line="633">
Holds a pointer to the image codec module. If d_imageCodecModule is 0 we
     *  are not owner of the image codec object

</member>
<member name="F:CEGUI.ResourceEventSet.EventResourceCreated" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\namedxmlresourcemanager.h" line="60">
Name of event fired when a resource is created by this manager.
     * Handlers are passed a const ResourceEventArgs reference with
     * ResourceEventArgs::resourceType String set to the type of resource that
     * the event is related to, and ResourceEventArgs::resourceName String set
     * to the name of the resource that the event is related to.

</member>
<member name="F:CEGUI.ResourceEventSet.EventResourceDestroyed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\namedxmlresourcemanager.h" line="67">
Name of event fired when a resource is destroyed by this manager.
     * Handlers are passed a const ResourceEventArgs reference with
     * ResourceEventArgs::resourceType String set to the type of resource that
     * the event is related to, and ResourceEventArgs::resourceName String set
     * to the name of the resource that the event is related to.

</member>
<member name="F:CEGUI.ResourceEventSet.EventResourceReplaced" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\namedxmlresourcemanager.h" line="74">
Name of event fired when a resource is replaced by this manager.
     * Handlers are passed a const ResourceEventArgs reference with
     * ResourceEventArgs::resourceType String set to the type of resource that
     * the event is related to, and ResourceEventArgs::resourceName String set
     * to the name of the resource that the event is related to.

</member>
<member name="F:CEGUI.RenderingSurface.EventRenderQueueStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\renderingsurface.h" line="115">
Event fired when rendering of a RenderQueue begins for the
     * RenderingSurface.
     * Handlers are passed a const RenderQueueEventArgs reference with
     * RenderQueueEventArgs::queueID set to one of the ::RenderQueueID
     * enumerated values indicating the queue that is about to start
     * rendering.

</member>
<member name="F:CEGUI.RenderingSurface.EventRenderQueueEnded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\renderingsurface.h" line="123">
Event fired when rendering of a RenderQueue completes for the
     * RenderingSurface.
     * Handlers are passed a const RenderQueueEventArgs reference with
     * RenderQueueEventArgs::queueID set to one of the ::RenderQueueID
     * enumerated values indicating the queue that has completed rendering.

</member>
<member name="M:CEGUI.RenderingSurface.drawContent" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\renderingsurface.h" line="333">
draw the surface content. Default impl draws the render queues.
     * NB: Called between RenderTarget activate and deactivate calls.

</member>
<member name="F:CEGUI.MouseCursor.EventImageChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\mousecursor.h" line="59">
Name of Event fired when the mouse cursor image is changed.
     * Handlers are passed a const MouseCursorEventArgs reference with
     * MouseCursorEventArgs::mouseCursor set to the MouseCursor that has
     * had it's image changed, and MouseCursorEventArgs::image set to the
     * Image that is now set for the MouseCursor (may be 0).

</member>
<member name="F:CEGUI.MouseCursor.EventDefaultImageChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\mousecursor.h" line="67">
Name of Event fired when the Image to be used as a default mouse cursor
     * image is changed.
     * Handlers are passed a const MouseCursorEventArgs reference with
     * MouseCursorEventArgs::mouseCursor set to the MouseCursor that has
     * had it's default image changed, and MouseCursorEventArgs::image set to
     * the Image that is now set as the default (may be 0).

</member>
<member name="F:CEGUI.GUIContext.EventRootWindowChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\guicontext.h" line="76">
Name of Event fired when the root window is changed to a different
     * Window.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the @e old root window (the new one is
     * obtained by calling GUIContext::getRootWindow).

</member>
<member name="F:CEGUI.GUIContext.EventMouseMoveScalingFactorChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\guicontext.h" line="83">
Name of Event fired when the mouse movement scaling factor is changed.
     * Handlers are passed a const reference to a GUIContextEventArgs struct.

</member>
<member name="F:CEGUI.GUIContext.EventMouseButtonClickTimeoutChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\guicontext.h" line="87">
Name of Event fired when the mouse click timeout is changed.
     * Handlers are passed a const reference to a GUIContextEventArgs struct.

</member>
<member name="F:CEGUI.GUIContext.EventMouseButtonMultiClickTimeoutChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\guicontext.h" line="91">
Name of Event fired when the mouse multi-click timeout is changed.
     * Handlers are passed a const reference to a GUIContextEventArgs struct.

</member>
<member name="F:CEGUI.GUIContext.EventMouseButtonMultiClickToleranceChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\guicontext.h" line="95">
Name of Event fired when the mouse multi-click movement tolerance area
     * size is changed.
     * Handlers are passed a const reference to a GUIContextEventArgs struct.

</member>
<member name="F:CEGUI.GUIContext.EventRenderTargetChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\guicontext.h" line="100">
Name of Event fired when the RenderTarget for the GUIContext is changed.
     * Handlers are passed a const GUIContextRenderTargetEventArgs struct, with
     * the renderTarget member set to the old RenderTarget.

</member>
<member name="F:CEGUI.GUIContext.EventDefaultFontChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\guicontext.h" line="105">
Event fired when the default font changes.
     * Handlers are passed a const reference to a generic EventArgs struct.

</member>
<member name="M:CEGUI.ImageFactory.create(CEGUI.XMLAttributes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\imagefactory.h" line="53">
Create an instance of the Image subclass that this factory creates
     * using the given XMLAttributes object.

</member>
<member name="F:CEGUI.NamedElement.EventNameChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\namedelement.h" line="82">
Event fired when the Element name has changed.
     * Handlers are passed a const NamedElementEventArgs reference with
     * NamedElementEventArgs::element set to the Element whose name was changed.

</member>
<member name="M:CEGUI.NamedElement.getNamePath" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\namedelement.h" line="119">
\brief Return a String object that describes the name path for this Element.

</member>
<member name="F:MS_PARTIAL" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\regexmatcher.h" line="50">
String partially matches. Changes to the string could result in
         * either an MS_VALID or MS_INVALID MatchState.

</member>
<member name="T:CEGUI.RegexMatchStateEventArgs" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\regexmatcher.h" line="66">
WindowEventArgs based class that is used for notifications regarding
 * RegexMatcher::MatchState changes for some component.

</member>
<member name="F:CEGUI.RenderTarget.EventAreaChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\rendertarget.h" line="65">
Event to be fired when the RenderTarget object's area has changed.
     * Handlers are passed a const RenderTargetEventArgs reference with
     * RenderTargetEventArgs::target set to the RenderTarget whose area changed.

</member>
<member name="F:CEGUI.Window.EventUpdated" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="160">
Event fired as part of the time based update of the window.
     * Handlers are passed a const UpdateEventArgs reference.

</member>
<member name="F:CEGUI.Window.EventTextChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="165">
Event fired when the text string for the Window has changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose text was changed.

</member>
<member name="F:CEGUI.Window.EventFontChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="170">
Event fired when the Font object for the Window has been changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose font was changed.

</member>
<member name="F:CEGUI.Window.EventAlphaChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="175">
Event fired when the Alpha blend value for the Window has changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose alpha value was changed.

</member>
<member name="F:CEGUI.Window.EventIDChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="180">
Event fired when the client assigned ID for the Window has changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose ID was changed.

</member>
<member name="F:CEGUI.Window.EventActivated" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="185">
Event fired when the Window has been activated and has input focus.
     * Handlers are passed a const ActivationEventArgs reference with
     * WindowEventArgs::window set to the Window that is gaining activation and
     * ActivationEventArgs::otherWindow set to the Window that is losing
     * activation (may be 0).

</member>
<member name="F:CEGUI.Window.EventDeactivated" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="192">
Event fired when the Window has been deactivated, losing input focus.
     * Handlers are passed a const ActivationEventArgs reference with
     * WindowEventArgs::window set to the Window that is losing activation and
     * ActivationEventArgs::otherWindow set to the Window that is gaining
     * activation (may be 0).

</member>
<member name="F:CEGUI.Window.EventShown" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="199">
Event fired when the Window is shown (made visible).
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that was shown.

</member>
<member name="F:CEGUI.Window.EventHidden" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="204">
Event fired when the Window is made hidden.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that was hidden.

</member>
<member name="F:CEGUI.Window.EventEnabled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="209">
Event fired when the Window is enabled so interaction is possible.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that was enabled.

</member>
<member name="F:CEGUI.Window.EventDisabled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="214">
Event fired when the Window is disabled and interaction is no longer
     * possible.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that was disabled.

</member>
<member name="F:CEGUI.Window.EventClippedByParentChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="220">
Event fired when the Window clipping mode is modified.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose clipping mode was
     * changed.

</member>
<member name="F:CEGUI.Window.EventDestroyedByParentChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="226">
Event fired when the Window destruction mode is modified.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose destruction mode was
     * changed.

</member>
<member name="F:CEGUI.Window.EventInheritsAlphaChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="232">
Event fired when the Window mode controlling inherited alpha is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose alpha inheritence mode
     * was changed.

</member>
<member name="F:CEGUI.Window.EventAlwaysOnTopChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="238">
Event fired when the always on top setting for the Window is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose always on top setting
     * was changed.

</member>
<member name="F:CEGUI.Window.EventInputCaptureGained" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="244">
Event fired when the Window gains capture of mouse inputs.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that has captured mouse inputs.

</member>
<member name="F:CEGUI.Window.EventInputCaptureLost" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="249">
Event fired when the Window loses capture of mouse inputs.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to either:
     * - the Window that has lost capture of mouse inputs if that event was
     *   caused by the window itself releasing the capture.
     * - the Window that is @gaining capture of mouse inputs if that is the
     *   cause of the previous window with capture losing that capture.

</member>
<member name="F:CEGUI.Window.EventInvalidated" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="258">
Event fired when the Window has been invalidated.
     * When a window is invalidated its cached rendering geometry is cleared,
     * the rendering surface that recieves the window's output is invalidated
     * and the window's target GUIContext is marked as dirty; this causes all
     * objects involved in the display of the window to be refreshed the next
     * time that the GUIContext::draw function is called.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that has been invalidated.

</member>
<member name="F:CEGUI.Window.EventRenderingStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="268">
Event fired when rendering of the Window has started.  In this context
     * 'rendering' is the population of the GeometryBuffer with geometry for the
     * window, not the actual rendering of that GeometryBuffer content to the 
     * display.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose rendering has started.

</member>
<member name="F:CEGUI.Window.EventRenderingEnded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="276">
Event fired when rendering of the Window has ended.  In this context
     * 'rendering' is the population of the GeometryBuffer with geometry for the
     * window, not the actual rendering of that GeometryBuffer content to the 
     * display.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose rendering has ended.

</member>
<member name="F:CEGUI.Window.EventDestructionStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="284">
Event fired when destruction of the Window is about to begin.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that is about to be destroyed.

</member>
<member name="F:CEGUI.Window.EventDragDropItemEnters" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="289">
Event fired when a DragContainer is dragged in to the window's area.
     * Handlers are passed a const DragDropEventArgs reference with
     * WindowEventArgs::window set to the window over which a DragContainer has
     * been dragged (the receiving window) and DragDropEventArgs::dragDropItem
     * set to the DragContainer that was dragged in to the receiving window's
     * area.

</member>
<member name="F:CEGUI.Window.EventDragDropItemLeaves" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="297">
Event fired when a DragContainer is dragged out of the window's area.
     * Handlers are passed a const DragDropEventArgs reference with
     * WindowEventArgs::window set to the window over which a DragContainer has
     * been dragged out of (the receiving window) and
     * DragDropEventArgs::dragDropItem set to the DragContainer that was dragged
     * out of the receiving window's area.

</member>
<member name="F:CEGUI.Window.EventDragDropItemDropped" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="305">
Event fired when a DragContainer is dropped within the window's area.
     * Handlers are passed a const DragDropEventArgs reference with
     * WindowEventArgs::window set to the window over which a DragContainer was
     * dropped (the receiving window) and DragDropEventArgs::dragDropItem set to
     * the DragContainer that was dropped within the receiving window's area.

</member>
<member name="F:CEGUI.Window.EventWindowRendererAttached" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="312">
Event fired when a WindowRenderer object is attached to the window.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the window that had the WindowRenderer
     * attached to it.

</member>
<member name="F:CEGUI.Window.EventWindowRendererDetached" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="318">
Event fired when a WindowRenderer object is detached from the window.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the window that had the WindowRenderer
     * detached from it.

</member>
<member name="F:CEGUI.Window.EventTextParsingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="324">
Event fired when the Window's setting controlling parsing of it's text
     * string is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose text parsing setting was
     * changed.

</member>
<member name="F:CEGUI.Window.EventMarginChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="331">
Event fired when the Window's margin has changed (any of the four margins)
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window whose margin was
     * changed.

</member>
<member name="F:CEGUI.Window.EventMouseEntersArea" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="339">
Event fired when the mouse cursor has entered the Window's area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseLeavesArea" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="344">
Event fired when the mouse cursor has left the Window's area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseEntersSurface" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="349">
Event fired when the mouse cursor enters the Window's area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.
     *\note This event is fired if - and only if - the mouse cursor is actually
     * over some part of this Window's surface area, and will not fire for
     * example if the location of the mouse is over some child window (even
     * though the mouse is technically also within the area of this Window).
     * For an alternative version of this event see the
     * Window::EventMouseEntersArea event.

</member>
<member name="F:CEGUI.Window.EventMouseLeavesSurface" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="360">
Event fired when the mouse cursor is no longer over the Window's surface
     * area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.
     *\note This event will fire whenever the mouse is no longer actually over
     * some part of this Window's surface area, for example if the mouse is
     * moved over some child window (even though technically the mouse has not
     * actually 'left' this Window's area).  For an alternative version of this
     * event see the Window::EventMouseLeavesArea event.

</member>
<member name="F:CEGUI.Window.EventMouseMove" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="371">
Event fired when the mouse cursor moves within the area of the Window.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseWheel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="376">
Event fired when the mouse wheel is scrolled when the mouse cursor is
     * within the Window's area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseButtonDown" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="382">
Event fired when a mouse button is pressed down within the Window.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseButtonUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="387">
Event fired when a mouse button is released within the Window.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseClick" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="392">
Event fired when a mouse button is clicked - that is, pressed down and
     * released within a specific time interval - while the mouse cursor is
     * within the Window's area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseDoubleClick" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="399">
Event fired when a mouse button is double-clicked while the mouse cursor
     * is within the Window's area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventMouseTripleClick" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="405">
Event fired when a mouse button is triple-clicked while the mouse cursor
     * is within the Window's area.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.Window.EventKeyDown" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="411">
Event fired when a key on the keyboard was pressed down while the window
     * had input focus.
     * Handlers are passed a const KeyEventArgs reference with
     * WindowEventArgs::window set to the Window receiving the key press,
     * KeyEventArgs::scancode set to the Key::Scan value of the key that was
     * pressed, and KeyEventArgs::sysKeys set to the combination of ::SystemKey
     * values active when the key was pressed.

</member>
<member name="F:CEGUI.Window.EventKeyUp" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="420">
Event fired when a key on the keyboard was released while the window
     * had input focus.
     * Handlers are passed a const KeyEventArgs reference with
     * WindowEventArgs::window set to the Window receiving the key release,
     * KeyEventArgs::scancode set to the Key::Scan value of the key that was
     * released, and KeyEventArgs::sysKeys set to the combination of ::SystemKey
     * values active when the key was released.

</member>
<member name="F:CEGUI.Window.EventCharacterKey" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\window.h" line="429">
Event fired when the Window receives a character key input event.
     * Handlers are passed a const KeyEventArgs reference with
     * WindowEventArgs::window set to the Window receiving the character input,
     * KeyEventArgs::codepoint set to the Unicode UTF32 / UCS-4 value for the
     * input, and KeyEventArgs::sysKeys set to the combination of ::SystemKey
     * values active when the character input was received.

</member>
<member name="F:CEGUI.WindowManager.EventWindowCreated" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\windowmanager.h" line="71">
Event fired when a new Window object is created.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that has just been created.

</member>
<member name="F:CEGUI.WindowManager.EventWindowDestroyed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\windowmanager.h" line="76">
Event fired when a Window object is destroyed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Window that has been destroyed.

</member>
<member name="M:CEGUI.SectionSpecification.shouldBeDrawn(CEGUI.Window!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\falagard\sectionspecification.h" line="363">
return whether the section should be drawn, based upon the
         * render control property and associated items.

</member>
<member name="D:CEGUI.WidgetLookFeel.PropertyList" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\falagard\widgetlookfeel.h" line="372">
Typedefs for property related lists. 
</member>
<member name="M:CEGUI.WidgetLookFeel.getPropertyDefinitions" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\falagard\widgetlookfeel.h" line="380">
Obtains list of properties definitions.
     * @access public
     * @return CEGUI::WidgetLookFeel::PropertyDefinitionList List of properties
     * definitions

</member>
<member name="M:CEGUI.WidgetLookFeel.getPropertyLinkDefinitions" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\falagard\widgetlookfeel.h" line="390">
Obtains list of properties link definitions.
     * @access public
     * @return CEGUI::WidgetLookFeel::PropertyLinkDefinitionList List of
     * properties link definitions

</member>
<member name="M:CEGUI.WidgetLookFeel.getProperties" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\falagard\widgetlookfeel.h" line="400">
Obtains list of properties.
     * @access public
     * @return CEGUI::WidgetLookFeel::PropertyList List of properties

</member>
<member name="D:CEGUI.WidgetLookManager.WidgetLookNameSet" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\falagard\widgetlookmanager.h" line="86">
Typedef for a set of WidgetLookFeel names. 
</member>
<member name="F:CEGUI.Combobox.EventReadOnlyModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="62">
Event fired when the read-only mode for the edit box is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose read only mode
     * has been changed.

</member>
<member name="F:CEGUI.Combobox.EventValidationStringChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="68">
Event fired when the edix box validation string is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose validation
     * string was changed.

</member>
<member name="F:CEGUI.Combobox.EventMaximumTextLengthChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="74">
Event fired when the maximum string length is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose maximum edit box
     * string length has been changed.

</member>
<member name="F:CEGUI.Combobox.EventTextValidityChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="80">
Event fired when the validity of the Combobox text (as determined by a
     * RegexMatcher object) has changed.
     * Handlers are passed a const RegexMatchStateEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose text validity has
     * changed and RegexMatchStateEventArgs::matchState set to the new match
     * validity. Handler return is significant, as follows:
     * - true indicates the new state - and therfore text - is to be accepted.
     * - false indicates the new state is not acceptable, and the previous text
     *   should remain in place. NB: This is only possible when the validity
     *   change is due to a change in the text, if the validity change is due to
     *   a change in the validation regular expression string, then returning
     *   false will have no effect.

</member>
<member name="F:CEGUI.Combobox.EventCaretMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="94">
Event fired when the edit box text insertion position is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose caret position has
     * been changed.

</member>
<member name="F:CEGUI.Combobox.EventTextSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="100">
Event fired when the current edit box text selection is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose edit box text selection
     * has been changed.

</member>
<member name="F:CEGUI.Combobox.EventEditboxFull" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="106">
Event fired when the number of characters in the edit box has reached
     * the currently set maximum.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose edit box has become
     * full.

</member>
<member name="F:CEGUI.Combobox.EventTextAccepted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="113">
Event fired when the user accepts the current edit box text by pressing
     * Return, Enter, or Tab.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose edit box text has been
     * accepted / confirmed by the user.

</member>
<member name="F:CEGUI.Combobox.EventListContentsChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="122">
Event fired when the contents of the list is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose list content has
     * changed.

</member>
<member name="F:CEGUI.Combobox.EventListSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="128">
Event fired when there is a change to the currently selected item in the
     * list.
     * @note This change in selection may be temporary (for example, when
     * hovering over an item in the combobox). See also the event
     * CEGUI::Combobox::EventListSelectionAccepted that is fired for a selection
     * that the user has 'confirmed' in some way.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose currently selected list
     * item has changed.

</member>
<member name="F:CEGUI.Combobox.EventSortModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="139">
Event fired when the sort mode setting of the list is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose list sorting mode has
     * been changed.

</member>
<member name="F:CEGUI.Combobox.EventVertScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="145">
Event fired when the vertical scroll bar 'force' setting for the list is
     * changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose vertical scroll bar
     * setting is changed.

</member>
<member name="F:CEGUI.Combobox.EventHorzScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="152">
Event fired when the horizontal scroll bar 'force' setting for the list
     * is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose horizontal scroll bar
     * setting has been changed.

</member>
<member name="F:CEGUI.Combobox.EventDropListDisplayed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="161">
Event fired when the drop-down list is displayed
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose drop down list has
     * been displayed.

</member>
<member name="F:CEGUI.Combobox.EventDropListRemoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="167">
Event fired when the drop-down list is removed / hidden.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox whose drop down list has
     * been hidden.

</member>
<member name="F:CEGUI.Combobox.EventListSelectionAccepted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combobox.h" line="173">
Event fired when the user accepts a selection from the drop-down list
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Combobox in which the user has
     * confirmed a selection from the drop down list.

</member>
<member name="F:CEGUI.Listbox.EventListContentsChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listbox.h" line="91">
Event fired when the contents of the list is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Listbox whose content is changed.

</member>
<member name="F:CEGUI.Listbox.EventSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listbox.h" line="96">
Event fired when there is a change to the currently selected item(s)
     * within the list.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Litbox that has had a change in the
     * selected items.

</member>
<member name="F:CEGUI.Listbox.EventSortModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listbox.h" line="103">
Event fired when the sort mode setting changes for the Listbox.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Listbox whose sort mode has been
     * changed.

</member>
<member name="F:CEGUI.Listbox.EventMultiselectModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listbox.h" line="109">
Event fired when the multi-select mode setting changes for the Listbox.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Listbox whose multi-select mode has
     * been changed.

</member>
<member name="F:CEGUI.Listbox.EventVertScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listbox.h" line="115">
Event fired when the mode setting that forces the display of the
     * vertical scroll bar for the Listbox is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Listbox whose vertical
     * scrollbar mode has been changed.

</member>
<member name="F:CEGUI.Listbox.EventHorzScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listbox.h" line="122">
Event fired when the mode setting that forces the display of the
     * horizontal scroll bar for the Listbox is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Listbox whose horizontal
     * scrollbar mode has been changed.

</member>
<member name="F:CEGUI.ComboDropList.EventListSelectionAccepted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\combodroplist.h" line="59">
Event fired when the user confirms the selection by clicking the mouse.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ComboDropList whose selection has been
     * confirmed by the user.

</member>
<member name="F:CEGUI.DragContainer.EventDragStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="53">
Event fired when the user begins dragging the DragContainer.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the DragContainer that the user
         * has started to drag.

</member>
<member name="F:CEGUI.DragContainer.EventDragEnded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="59">
Event fired when the user releases the DragContainer.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the DragContainer that the user has
         * released.

</member>
<member name="F:CEGUI.DragContainer.EventDragPositionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="65">
Event fired when the drag position has changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the DragContainer whose position has
         * changed due to the user dragging it.

</member>
<member name="F:CEGUI.DragContainer.EventDragEnabledChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="71">
Event fired when dragging is enabled or disabled.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the DragContainer whose setting has
         * been changed.

</member>
<member name="F:CEGUI.DragContainer.EventDragAlphaChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="77">
Event fired when the alpha value used when dragging is changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the DragContainer whose drag alpha
         * value has been changed.

</member>
<member name="F:CEGUI.DragContainer.EventDragMouseCursorChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="83">
Event fired when the mouse cursor to used when dragging is changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the DragContainer whose dragging
         * mouse cursor image has been changed.

</member>
<member name="F:CEGUI.DragContainer.EventDragThresholdChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="89">
Event fired when the drag pixel threshold is changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the DragContainer whose dragging pixel
         * threshold has been changed.

</member>
<member name="F:CEGUI.DragContainer.EventDragDropTargetChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\dragcontainer.h" line="95">
Event fired when the drop target changes.
         * Handlers are passed a const DragDropEventArgs reference with
         * WindowEventArgs::window set to the Window that is now the target
         * window  and DragDropEventArgs::dragDropItem set to the DragContainer
         * whose target has changed.

</member>
<member name="F:CEGUI.Editbox.EventReadOnlyModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="78">
Event fired when the read-only mode for the edit box is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox whose read only setting
     * has been changed.

</member>
<member name="F:CEGUI.Editbox.EventMaskedRenderingModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="84">
Event fired when the masked rendering mode (password mode) is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox that has been put into or
     * taken out of masked text (password) mode.

</member>
<member name="F:CEGUI.Editbox.EventMaskCodePointChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="90">
Event fired whrn the code point (character) used for masked text is
     * changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox whose text masking codepoint
     * has been changed.

</member>
<member name="F:CEGUI.Editbox.EventValidationStringChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="97">
Event fired when the validation string is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox whose validation string has
     * been changed.

</member>
<member name="F:CEGUI.Editbox.EventMaximumTextLengthChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="103">
Event fired when the maximum allowable string length is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox whose maximum string length
     * has been changed.

</member>
<member name="F:CEGUI.Editbox.EventTextValidityChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="109">
Event fired when the validity of the Exitbox text (as determined by a
     * RegexMatcher object) has changed.
     * Handlers are passed a const RegexMatchStateEventArgs reference with
     * WindowEventArgs::window set to the Editbox whose text validity has
     * changed and RegexMatchStateEventArgs::matchState set to the new match
     * validity. Handler return is significant, as follows:
     * - true indicates the new state - and therfore text - is to be accepted.
     * - false indicates the new state is not acceptable, and the previous text
     *   should remain in place. NB: This is only possible when the validity
     *   change is due to a change in the text, if the validity change is due to
     *   a change in the validation regular expression string, then returning
     *   false will have no effect.

</member>
<member name="F:CEGUI.Editbox.EventCaretMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="123">
Event fired when the text caret position / insertion point is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox whose current insertion point
     * has changed.

</member>
<member name="F:CEGUI.Editbox.EventTextSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="129">
Event fired when the current text selection is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox whose current text selection
     * was changed.

</member>
<member name="F:CEGUI.Editbox.EventEditboxFull" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="135">
Event fired when the number of characters in the edit box reaches the
     * currently set maximum.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox that has become full.

</member>
<member name="F:CEGUI.Editbox.EventTextAccepted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="141">
Event fired when the user accepts the current text by pressing Return,
     * Enter, or Tab.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Editbox in which the user has accepted
     * the current text.

</member>
<member name="M:CEGUI.Editbox.handleValidityChangeForString(CEGUI.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\editbox.h" line="502">
Helper to update validator match state as needed for the given string
     * and event handler return codes.
     *
     * This effectively asks permission from event handlers to proceed with the
     * change, updates d_validatorMatchState and returns an appropriate bool.
     * The return value basically says whether or not to set the input string
     * as the current text for the Editbox.

</member>
<member name="F:CEGUI.FrameWindow.EventRollupToggled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\framewindow.h" line="58">
Event fired when the rollup (shade) state of the window is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the FrameWindow whose rolled up state
     * has been changed.

</member>
<member name="F:CEGUI.FrameWindow.EventCloseClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\framewindow.h" line="64">
Event fired when the close button for the window is clicked.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the FrameWindow whose close button was
     * clicked.

</member>
<member name="F:CEGUI.FrameWindow.EventDragSizingStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\framewindow.h" line="70">
Event fired when drag-sizing of the window starts.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the FrameWindow that has started to be
     * drag sized.

</member>
<member name="F:CEGUI.FrameWindow.EventDragSizingEnded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\framewindow.h" line="76">
Event fired when drag-sizing of the window ends.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the FrameWindow for which drag sizing has
     * ended.

</member>
<member name="M:CEGUI.LayoutContainer.update(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\layoutcontainer.h" line="105">
@copydoc Window::update
</member>
<member name="M:CEGUI.LayoutContainer.getUnclippedInnerRect_impl(System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\layoutcontainer.h" line="113">
@copydoc Window::getUnclippedInnerRect_impl
</member>
<member name="M:CEGUI.LayoutContainer.addChild_impl(CEGUI.Element*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\layoutcontainer.h" line="120">
@copydoc Window::addChild_impl
</member>
<member name="M:CEGUI.LayoutContainer.removeChild_impl(CEGUI.Element*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\layoutcontainer.h" line="122">
@copydoc Window::removeChild_impl
</member>
<member name="T:CEGUI.GridLayoutContainer.AutoPositioning" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="50">
enumerates auto positioning methods for the grid - these allow you to
fill the grid without specifying gridX and gridY positions for each
addChild.

</member>
<member name="F:AP_LeftToRight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="59">
Left to right positioning:
- 1 2 3
- 4 5 6

</member>
<member name="F:AP_TopToBottom" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="65">
Top to bottom positioning
- 1 3 5
- 2 4 6

</member>
<member name="M:CEGUI.GridLayoutContainer.getGridCellOffset(std.vector&lt;CEGUI.UDim,std.allocator&lt;CEGUI.UDim&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;CEGUI.UDim,std.allocator&lt;CEGUI.UDim&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="277">
calculates grid cell offset
     * (relative to position of this layout container)

</member>
<member name="F:CEGUI.GridLayoutContainer.d_nextAutoPositioningIdx" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="297">
stores next auto positioning index (will be used for next
     * added window if d_autoPositioning != AP_Disabled)

</member>
<member name="F:CEGUI.GridLayoutContainer.d_nextGridX" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="302">
stores next used grid X position
     * (only used if d_autoPositioning == AP_Disabled)

</member>
<member name="F:CEGUI.GridLayoutContainer.d_nextGridY" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="306">
stores next used grid Y position
     * (only used if d_autoPositioning == AP_Disabled)

</member>
<member name="F:CEGUI.GridLayoutContainer.d_nextDummyIdx" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="311">
stores next used dummy suffix index
     * (used to generate unique dummy names)

</member>
<member name="M:CEGUI.GridLayoutContainer.addChild_impl(CEGUI.Element*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="321">
@copydoc Window::addChild_impl
</member>
<member name="M:CEGUI.GridLayoutContainer.removeChild_impl(CEGUI.Element*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\gridlayoutcontainer.h" line="323">
@copydoc Window::removeChild_impl
</member>
<member name="M:CEGUI.HorizontalLayoutContainer.layout" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\horizontallayoutcontainer.h" line="66">
@copydoc LayoutContainer::layout
</member>
<member name="F:CEGUI.ItemEntry.EventSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\itementry.h" line="83">
Event fired when the item's selection state changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ItemEntry whose selection state has
     * changed.

</member>
<member name="F:CEGUI.ItemListBase.EventListContentsChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\itemlistbase.h" line="101">
Event fired when the contents of the list is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ItemListBase whose contents
     * has changed.

</member>
<member name="F:CEGUI.ItemListBase.EventSortEnabledChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\itemlistbase.h" line="107">
Event fired when the sort enabled state of the list is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ItemListBase whose sort enabled mode
     * has been changed.

</member>
<member name="F:CEGUI.ItemListBase.EventSortModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\itemlistbase.h" line="113">
Event fired when the sort mode of the list is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ItemListBase whose sorting mode
     * has been changed.

</member>
<member name="F:CEGUI.Scrollbar.EventScrollPositionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollbar.h" line="97">
Event fired when the scroll bar position value changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Scrollbar whose position value had
     * changed.

</member>
<member name="F:CEGUI.Scrollbar.EventThumbTrackStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollbar.h" line="103">
Event fired when the user begins dragging the scrollbar thumb.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Scrollbar whose thumb is being
     * dragged.

</member>
<member name="F:CEGUI.Scrollbar.EventThumbTrackEnded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollbar.h" line="109">
Event fired when the user releases the scrollbar thumb.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Scrollbar whose thumb has been
     * released.

</member>
<member name="F:CEGUI.Scrollbar.EventScrollConfigChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollbar.h" line="115">
Event fired when the scroll bar configuration data is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Scrollbar whose configuration
     * has been changed.

</member>
<member name="M:CEGUI.Scrollbar.setScrollPosition_impl(System.Single!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollbar.h" line="498">
implementation func that updates scroll position value, returns true if
     * value was changed.  NB: Fires no events and does no other updates.

</member>
<member name="F:CEGUI.ScrolledItemListBase.EventVertScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrolleditemlistbase.h" line="57">
Event fired when the vertical scroll bar mode changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrolledItemListBase whose vertical
     * scroll bar mode has been changed.

</member>
<member name="F:CEGUI.ScrolledItemListBase.EventHorzScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrolleditemlistbase.h" line="63">
Event fired when the horizontal scroll bar mode change.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrolledItemListBase whose horizontal
     * scroll bar mode has been changed.

</member>
<member name="F:CEGUI.ItemListbox.EventSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\itemlistbox.h" line="54">
Event fired when the list selection changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ItemListbox whose current selection
     * has been changed.

</member>
<member name="F:CEGUI.ItemListbox.EventMultiSelectModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\itemlistbox.h" line="60">
Event fired when the multiselect mode of the list box is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ItemListbox whose multiselect mode
     * has been changed.

</member>
<member name="M:CEGUI.LayoutCell.getUnclippedInnerRect_impl(System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\layoutcell.h" line="93">
@copydoc Window::getUnclippedInnerRect_impl
</member>
<member name="M:CEGUI.LayoutCell.addChild_impl(CEGUI.Element*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\layoutcell.h" line="98">
@copydoc Window::addChild_impl
</member>
<member name="M:CEGUI.LayoutCell.removeChild_impl(CEGUI.Element*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\layoutcell.h" line="100">
@copydoc Window::removeChild_impl
</member>
<member name="F:CEGUI.ListHeaderSegment.EventSegmentClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="60">
Event fired when the segment is clicked.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment that was clicked.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventSplitterDoubleClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="65">
Event fired when the sizer/splitter is double-clicked.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment whose
     * sizer / splitter area was double-clicked.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventSizingSettingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="71">
Event fired when the user drag-sizable setting is changed.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment whose user sizable
     * setting has been changed.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventSortDirectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="77">
Event fired when the sort direction value is changed.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment whose sort direction
     * has been changed.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventMovableSettingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="83">
Event fired when the user drag-movable setting is changed.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment whose user
     * drag-movable setting has been changed.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventSegmentDragStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="89">
Event fired when the segment has started to be dragged.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment that has started to
     * be dragged.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventSegmentDragStop" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="95">
Event fired when segment dragging has stopped (via mouse release).
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment that is no longer
     * being dragged.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventSegmentDragPositionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="101">
Event fired when the segment drag position has changed.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment whose position has
     * changed due to being dragged.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventSegmentSized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="107">
Event fired when the segment is sized by the user.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment that has been
     * resized by the user dragging.

</member>
<member name="F:CEGUI.ListHeaderSegment.EventClickableSettingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheadersegment.h" line="113">
Event fired when the clickable setting for the segment is changed.
     * Hanlders are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment whose setting that
     * controls whether the segment is clickable has been changed.

</member>
<member name="F:CEGUI.ListHeader.EventSortColumnChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="114">
Event fired when the current sort column of the header is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeader whose sort column has
     * been changed.

</member>
<member name="F:CEGUI.ListHeader.EventSortDirectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="120">
Event fired when the sort direction of the header is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeader whose sort direction had
     * been changed.

</member>
<member name="F:CEGUI.ListHeader.EventSegmentSized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="126">
Event fired when a segment of the header is sized by the user.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment that has been sized.

</member>
<member name="F:CEGUI.ListHeader.EventSegmentClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="131">
Event fired when a segment of the header is clicked by the user.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment that was clicked.

</member>
<member name="F:CEGUI.ListHeader.EventSplitterDoubleClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="136">
Event fired when a segment splitter of the header is double-clicked.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeaderSegment whose splitter area
     * was double-clicked.

</member>
<member name="F:CEGUI.ListHeader.EventSegmentSequenceChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="142">
Event fired when the order of the segments in the header has changed.
     * Handlers are passed a const HeaderSequenceEventArgs reference with
     * WindowEventArgs::window set to the ListHeader whose segments have changed
     * sequence, HeaderSequenceEventArgs::d_oldIdx is the original index of the
     * segment that has moved, and HeaderSequenceEventArgs::d_newIdx is the new
     * index of the segment that has moved.

</member>
<member name="F:CEGUI.ListHeader.EventSegmentAdded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="150">
Event fired when a segment is added to the header.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeader that has had a new segment
     * added.

</member>
<member name="F:CEGUI.ListHeader.EventSegmentRemoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="156">
Event fired when a segment is removed from the header.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeader that has had a segment
     * removed.

</member>
<member name="F:CEGUI.ListHeader.EventSortSettingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="162">
Event fired when setting that controls user modification to sort
     * configuration is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeader whose user sort control
     * setting has been changed.

</member>
<!-- Discarding badly formed XML document comment for member 'F:CEGUI.ListHeader.EventDragMoveSettingChanged'. -->
<member name="F:CEGUI.ListHeader.EventDragSizeSettingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="176">
Event fired when setting that controls user sizing of segments is
     * changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeader whose user sizing setting
     * has changed.

</member>
<member name="F:CEGUI.ListHeader.EventSegmentRenderOffsetChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\listheader.h" line="183">
Event fired when the rendering offset for the segments changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ListHeader whose segment rendering
     * offset has changed.

</member>
<member name="F:CEGUI.MenuBase.EventPopupOpened" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\menubase.h" line="61">
Event fired when a MenuItem attached to this menu opened a PopupMenu.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the PopupMenu that was opened.

</member>
<member name="F:CEGUI.MenuBase.EventPopupClosed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\menubase.h" line="66">
Event fired when a MenuItem attached to this menu closed a PopupMenu.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the PopupMenu that was closed.

</member>
<member name="F:CEGUI.MenuItem.EventClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\menuitem.h" line="59">
Event fired when the menu item is clicked.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MenuItem that was clicked.

</member>
<member name="F:CEGUI.MultiColumnList.EventSelectionModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="106">
Event fired when the selection mode for the list box changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose selection mode
     * has been changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventNominatedSelectColumnChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="112">
Event fired when the nominated select column changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose nominated
     * selection column has been changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventNominatedSelectRowChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="118">
Event fired when the nominated select row changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose nominated
     * selection row has been changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventVertScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="124">
Event fired when the vertical scroll bar 'force' setting changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose vertical scroll
     * bar mode has been changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventHorzScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="130">
Event fired when the horizontal scroll bar 'force' setting changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose horizontal
     * scroll bar mode has been changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="136">
Event fired when the current selection(s) within the list box changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose current
     * selection has changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventListContentsChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="142">
Event fired when the contents of the list box changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose contents has
     * changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventSortColumnChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="148">
Event fired when the sort column changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose sort column has
     * been changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventSortDirectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="154">
Event fired when the sort direction changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList whose sort direction
     * has been changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventListColumnSized" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="160">
Event fired when the width of a column in the list changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList for which a column
     * width has changed.

</member>
<member name="F:CEGUI.MultiColumnList.EventListColumnMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multicolumnlist.h" line="166">
Event fired when the column order changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiColumnList for which the order
     * of columns has been changed.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventReadOnlyModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="89">
Event fired when the read-only mode for the edit box has been changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose read-only mode
     * was changed.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventWordWrapModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="95">
Event fired when the word wrap mode of the edit box has been changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose word wrap
     * mode was changed.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventMaximumTextLengthChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="101">
Event fired when the maximum allowable string length for the edit box
     * has been changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose maximum string
     * length was changed.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventCaretMoved" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="108">
Event fired when the text caret / current insertion position is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose caret position
     * has changed.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventTextSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="114">
Event fired when the current text selection for the edit box is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose text selection
     * was changed.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventEditboxFull" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="120">
Event fired when the number of characters in the edit box reaches the
     * current maximum length.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose text length
     * has reached the set maximum allowable length for the edit box.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventVertScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="127">
Event fired when the mode setting that forces the display of the
     * vertical scroll bar for the edit box is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose vertical
     * scrollbar mode has been changed.

</member>
<member name="F:CEGUI.MultiLineEditbox.EventHorzScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\multilineeditbox.h" line="134">
Event fired when the mode setting that forces the display of the
     * horizontal scroll bar for the edit box is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the MultiLineEditbox whose horizontal
     * scrollbar mode has been changed.

</member>
<member name="F:CEGUI.ProgressBar.EventProgressChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\progressbar.h" line="58">
Event fired whenever the progress value is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ProgressBar whose value has been
     * changed.

</member>
<member name="F:CEGUI.ProgressBar.EventProgressDone" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\progressbar.h" line="64">
Event fired when the progress bar's value reaches 100%.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ProgressBar whose progress value
     * has reached 100%.

</member>
<member name="M:CEGUI.ButtonBase.setPushedState(System.Boolean!System.Runtime.CompilerServices.IsConst)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\buttonbase.h" line="75">
Internal function to set button's pushed state.  Normally you would
     * not call this, except perhaps when building compound widgets.

</member>
<member name="F:CEGUI.PushButton.EventClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\pushbutton.h" line="57">
Event fired when the button is clicked.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the PushButton that was clicked.

</member>
<member name="F:CEGUI.ToggleButton.EventSelectStateChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\togglebutton.h" line="46">
Event fired when then selected state of the ToggleButton changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ToggleButton whose state has changed.

</member>
<member name="F:CEGUI.ScrollablePane.EventContentPaneChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollablepane.h" line="74">
Event fired when an area on the content pane has been updated.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrollablePane whose content pane
     * has been updated.

</member>
<member name="F:CEGUI.ScrollablePane.EventVertScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollablepane.h" line="80">
Event fired when the vertical scroll bar 'force' setting is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrollablePane whose vertical scroll
     * bar mode has been changed.

</member>
<member name="F:CEGUI.ScrollablePane.EventHorzScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollablepane.h" line="86">
Event fired when the horizontal scroll bar 'force' setting is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrollablePane whose horizontal scroll
     * bar mode has been changed.

</member>
<member name="F:CEGUI.ScrollablePane.EventAutoSizeSettingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollablepane.h" line="92">
Event fired when the auto size setting for the pane is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrollablePane whose auto size
     * setting has been changed.

</member>
<member name="F:CEGUI.ScrollablePane.EventContentPaneScrolled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrollablepane.h" line="98">
Event fired when the pane gets scrolled.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrollablePane that has been scrolled.

</member>
<member name="F:CEGUI.ScrolledContainer.EventContentChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrolledcontainer.h" line="54">
Event fired whenever some child changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrolledContainer for which a child
     * window has changed.

</member>
<member name="F:CEGUI.ScrolledContainer.EventAutoSizeSettingChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\scrolledcontainer.h" line="60">
Event fired when the autosize setting changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the ScrolledContainer whose auto size
     * setting has been changed.

</member>
<member name="F:CEGUI.Slider.EventValueChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\slider.h" line="107">
Event fired when the slider value changes.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Slider whose value has changed.

</member>
<member name="F:CEGUI.Slider.EventThumbTrackStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\slider.h" line="112">
Event fired when the user begins dragging the thumb.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Slider whose thumb has started to
     * be dragged.

</member>
<member name="F:CEGUI.Slider.EventThumbTrackEnded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\slider.h" line="118">
Event fired when the user releases the thumb.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Slider whose thumb has been released.

</member>
<member name="F:CEGUI.Spinner.EventValueChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\spinner.h" line="70">
Event fired when the spinner current value changes.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Spinner whose current value has
         * changed.

</member>
<member name="F:CEGUI.Spinner.EventStepChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\spinner.h" line="76">
Event fired when the spinner step value is changed.
         * Handlers area passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Spinner whose step value has
         * changed.

</member>
<member name="F:CEGUI.Spinner.EventMaximumValueChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\spinner.h" line="82">
Event fired when the maximum spinner value is changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Spinner whose maximum value has
         * been changed.

</member>
<member name="F:CEGUI.Spinner.EventMinimumValueChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\spinner.h" line="88">
Event fired when the minimum spinner value is changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::windows set to the Spinner whose minimum value has
         * been changed.

</member>
<!-- Discarding badly formed XML document comment for member 'F:CEGUI.Spinner.EventTextInputModeChanged'. -->
<member name="F:CEGUI.TabButton.EventClicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tabbutton.h" line="54">
Event fired when the button is clicked.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the TabButton that was clicked.

</member>
<member name="F:CEGUI.TabButton.EventDragged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tabbutton.h" line="59">
Event fired when use user attempts to drag the button with middle mouse
     * button.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.TabButton.EventScrolled" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tabbutton.h" line="65">
Event fired when the scroll wheel is used on top of the button.
     * Handlers are passed a const MouseEventArgs reference with all fields
     * valid.

</member>
<member name="F:CEGUI.TabControl.EventSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tabcontrol.h" line="94">
Event fired when a different tab is selected.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the TabControl that has a newly
     * selected tab.

</member>
<member name="F:CEGUI.Thumb.EventThumbPositionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\thumb.h" line="65">
Event fired when the position of the thumb widget has changed (this
     * event is only fired when hot tracking is enabled).
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Thumb whose position has changed.

</member>
<member name="F:CEGUI.Thumb.EventThumbTrackStarted" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\thumb.h" line="71">
Event fired when the user begins dragging the thumb.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Thumb that has started to be dragged
     * by the user.

</member>
<member name="F:CEGUI.Thumb.EventThumbTrackEnded" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\thumb.h" line="77">
Event fired when the user releases the thumb.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Thumb that has been released.

</member>
<member name="F:CEGUI.Tooltip.EventHoverTimeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tooltip.h" line="87">
Event fired when the hover timeout for the tool tip gets changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Tooltip whose hover timeout has
         * been changed.

</member>
<member name="F:CEGUI.Tooltip.EventDisplayTimeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tooltip.h" line="93">
Event fired when the display timeout for the tool tip gets changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Tooltip whose display timeout has
         * been changed.

</member>
<member name="F:CEGUI.Tooltip.EventFadeTimeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tooltip.h" line="99">
Event fired when the fade timeout for the tooltip gets changed.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Tooltip whose fade timeout has
         * been changed.

</member>
<member name="F:CEGUI.Tooltip.EventTooltipActive" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tooltip.h" line="105">
Event fired when the tooltip is about to get activated.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Tooltip that is about to become
         * active.

</member>
<member name="F:CEGUI.Tooltip.EventTooltipInactive" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tooltip.h" line="111">
Event fired when the tooltip has been deactivated.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Tooltip that has become inactive.

</member>
<member name="F:CEGUI.Tooltip.EventTooltipTransition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tooltip.h" line="116">
Event fired when the tooltip changes target window but stays active.
         * Handlers are passed a const WindowEventArgs reference with
         * WindowEventArgs::window set to the Tooltip that has transitioned.

</member>
<member name="F:CEGUI.Tree.EventListContentsChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="90">
Event fired when the content of the tree is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Tree whose content has changed.

</member>
<member name="F:CEGUI.Tree.EventSelectionChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="95">
Event fired when there is a change to the currently selected item(s).
     * Handlers are passed a const TreeEventArgs reference with
     * WindowEventArgs::window set to the Tree whose item selection has changed,
     * and TreeEventArgs::treeItem is set to the (last) item to be selected, or
     * 0 if none.

</member>
<member name="F:CEGUI.Tree.EventSortModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="102">
Event fired when the sort mode setting for the Tree is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Tree whose sort mode has been
     * changed.

</member>
<member name="F:CEGUI.Tree.EventMultiselectModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="108">
Event fired when the multi-select mode setting for the Tree changes.
     * Handlers are passed a const TreeEventArgs reference with
     * WindowEventArgs::window set to the Tree whose setting has changed.
     * TreeEventArgs::treeItem is always set to 0.

</member>
<member name="F:CEGUI.Tree.EventVertScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="114">
Event fired when the mode setting that forces the display of the
     * vertical scroll bar for the tree is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Tree whose vertical scrollbar mode has
     * been changed.

</member>
<member name="F:CEGUI.Tree.EventHorzScrollbarModeChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="121">
Event fired when the mode setting that forces the display of the
     * horizontal scroll bar for the tree is changed.
     * Handlers are passed a const WindowEventArgs reference with
     * WindowEventArgs::window set to the Tree whose horizontal scrollbar mode
     * has been changed.

</member>
<member name="F:CEGUI.Tree.EventBranchOpened" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="128">
Event fired when a branch of the tree is opened by the user.
     * Handlers are passed a const TreeEventArgs reference with
     * WindowEventArgs::window set to the Tree containing the branch that has
     * been opened and TreeEventArgs::treeItem set to the TreeItem at the head
     * of the opened branch.

</member>
<member name="F:CEGUI.Tree.EventBranchClosed" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\widgets\tree.h" line="135">
Event fired when a branch of the tree is closed by the user.
     * Handlers are passed a const TreeEventArgs reference with
     * WindowEventArgs::window set to the Tree containing the branch that has
     * been closed and TreeEventArgs::treeItem set to the TreeItem at the head
     * of the closed branch.

</member>
<member name="T:CEGUI.OGLTextureTargetFactory" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\deps\include\cegui\renderermodules\opengl\rendererbase.h" line="280">
This class allows us to implement a factory template for creating and
destroying any type of TextureTarget.  The code that detects
the computer's abilities will generate an appropriate factory for a
TextureTarget based on what the host system can provide - or use the
default 'null' factory if no suitable TextureTargets are available.

</member>
<member name="M:GUIEngine.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="25">
<summary>
Initializes a new instance of the <see cref="T:GUIEngine"/> class.
</summary>
<param name="resDir">The resource dir.</param>
</member>
<member name="M:GUIEngine.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="32">
<summary>
Finalizes an instance of the <see cref="T:GUIEngine"/> class.
</summary>
</member>
<member name="M:GUIEngine.processInput(SDL_Event*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="37">
<summary>
Processes the input.
</summary>
<param name="input">The input.</param>
</member>
<member name="M:GUIEngine.update" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="42">
<summary>
Updates this instance.
</summary>
</member>
<member name="M:GUIEngine.render" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="46">
<summary>
Renders this instance.
</summary>
</member>
<member name="M:GUIEngine.setMouseCursor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="51">
<summary>
Sets the mouse cursor.
</summary>
<param name="imageFile">The image file.</param>
</member>
<member name="M:GUIEngine.showMouseCursor(System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="56">
<summary>
Shows the mouse cursor.
</summary>
<param name="value">if set to <c>true</c> [value].</param>
</member>
<member name="M:GUIEngine.loadScheme(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="62">
<summary>
Loads the scheme.
</summary>
<param name="schemeFile">The scheme file.</param>
</member>
<member name="M:GUIEngine.addFont(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="67">
<summary>
Adds a font to the CEGUI .
</summary>
<param name="fontName">The name of the font.</param>
<param name="size">The size of the font.</param>
</member>
<member name="M:GUIEngine.setFontSize(System.Byte)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="73">
<summary>
Sets the font size.
</summary>
<param name="size">The size of the font.</param>
</member>
<member name="M:GUIEngine.addWidget(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;Sy" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="79">
<summary>
Adds the widget.
</summary>
<param name="type">The type.</param>
<param name="destRectPerc">The dest rect perc.</param>
<param name="destRectPix">The dest rect pix.</param>
<param name="name">The name.</param>
<returns></returns>
</member>
<member name="M:GUIEngine.addWidget(CEGUI.Window*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},st" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="88">
<summary>
Adds the widget.
</summary>
<param name="parent">The parent.</param>
<param name="type">The type.</param>
<param name="destRectPerc">The dest rect perc.</param>
<param name="destRectPix">The dest rect pix.</param>
<param name="name">The name.</param>
<returns></returns>
</member>
<member name="M:GUIEngine.setWidgetDestRect(CEGUI.Window*,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="98">
<summary>
Sets the widget dest rect.
</summary>
<param name="widget">The widget.</param>
<param name="destRectPerc">The dest rect perc.</param>
<param name="destRectPix">The dest rect pix.</param>
</member>
<member name="M:GUIEngine.getRenderer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="106">
<summary>
Gets the renderer.
</summary>
<returns>The CEGUI Renderer.</returns>
</member>
<member name="M:GUIEngine.getContext" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="111">
<summary>
Gets the context.
</summary>
<returns>The CEGUI Context.</returns>
</member>
<member name="M:GUIEngine.getSchemeStyle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="116">
<summary>
Gets the scheme style.
</summary>
<returns>The current scheme style the GUI Engine is using.</returns>
</member>
<member name="M:GUIEngine.getDefaultFontName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="121">
<summary>
Gets the default name used in GUIEngine.
</summary>
<returns>The default font the GUI Engine is using.</returns>
</member>
<member name="F:GUIEngine.m_renderer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="128">
<summary>
The CEGUI renderer.
</summary>
</member>
<member name="F:GUIEngine.m_context" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="132">
<summary>
The CEGUI context.
</summary>
</member>
<member name="F:GUIEngine.m_root" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="136">
<summary>
The root window object, like MegaEngine's scene root gameobject.
</summary>
</member>
<member name="F:GUIEngine.m_schemeStyle" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="140">
<summary>
The scheme style the GUIEngine/CEGUI is using.
</summary>
</member>
<member name="F:GUIEngine.m_defaultFontName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="144">
<summary>
The font name the GUIEngine/CEGUI is currently using.
</summary>
</member>
<member name="F:GUIEngine.m_defaultFontSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="148">
<summary>
The font size the GUIEngine/CEGUI is using.
</summary>
</member>
<member name="F:GUIEngine.m_lastTime" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\gui\guiengine.h" line="152">
<summary>
The m_last time
</summary>
</member>
<member name="T:GUIComponent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="19">
<summary>
A GUI Component class that attaches to GameObjects to have GUI funcationality.
</summary>
<example>
  <code>
class MeshRenderer : public GUIComponent { ... }
</code>
</example>
</member>
<member name="M:GUIComponent.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="30">
<summary>
Initializes a new instance of the <see cref="T:GUIComponent"/> class.
</summary>
<param name="destRectPerc">The size of the widget relative the parent widget.</param>
<param name="destRectPix">The size of the widget in pixels.</param>
</member>
<member name="M:GUIComponent.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="38">
<summary>
Finalizes an instance of the <see cref="T:GUIComponent"/> class.
</summary>
</member>
<member name="M:GUIComponent.processInput(InputManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="46">
<summary>
Virtual function for custom input processing.
</summary>
<param name="input">The input manager.</param>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:GUIComponent.update(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="53">
<summary>
Virtual function for custom update functionality.
</summary>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:GUIComponent.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="59">
<summary>
Adds to Core Engine.
</summary>
<param name="engine">The Core Engine.</param>
</member>
<member name="M:GUIComponent.getParent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="76">
<summary>
Gets the parented gameobject.
</summary>
<returns>A pointer to the parented gameobject.</returns>
</member>
<member name="M:GUIComponent.getPercentPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="82">
<summary>
Gets the relative position to the window.
</summary>
<returns>A vector 2D of the relative position.</returns>
</member>
<member name="M:GUIComponent.getPixelPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="88">
<summary>
Gets the absolute pixel position to the window.
</summary>
<returns>A vector 2D of the absolute pixel position.</returns>
</member>
<member name="M:GUIComponent.getPercentSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="94">
<summary>
Gets the relative size of the window.
</summary>
<returns>A vector 2D of the relative position.</returns>
</member>
<member name="M:GUIComponent.getPixelSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="100">
<summary>
Gets the absolute pixel size of the window.
</summary>
<returns>A vector 2D of the absolute pixel position.</returns>
</member>
<member name="M:GUIComponent.setParent(GameObject*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="106">
<summary>
Sets the parent GameObject.
</summary>
<param name="parent">The GameObject to be attached to.</param>
</member>
<member name="M:GUIComponent.setPercentPosition(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="112">
<summary>
Sets the relative position.
</summary>
<param name="pos">The position in percentage relative to the window.</param>
</member>
<member name="M:GUIComponent.setPixelPosition(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="118">
<summary>
Sets the absolute pixel position.
</summary>
<param name="pos">The position in pixels to the window.</param>
</member>
<member name="M:GUIComponent.setPercentSize(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="124">
<summary>
Sets the relative size to the parent GUI Component.
</summary>
<param name="pos">The size in percentage relative to the window.</param>
</member>
<member name="M:GUIComponent.setPixelSize(physx.PxVec2!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="130">
<summary>
Sets the absolute pixel size.
</summary>
<param name="pos">The size in pixels to the window.</param>
</member>
<member name="M:GUIComponent.activate" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="136">
<summary>
Activates the widget so it accepts input.
</summary>
</member>
<member name="M:GUIComponent.deactivate" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="141">
<summary>
Deactivates the widget so it doesn't accept input.
</summary>
</member>
<member name="M:GUIComponent.enable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="146">
<summary>
Renders the widget.
</summary>
</member>
<member name="M:GUIComponent.disable" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="151">
<summary>
Stops rendering the widget.
</summary>
</member>
<member name="M:GUIComponent.getCoreEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="158">
<summary>
Gets the core engine.
</summary>
<returns>CoreEngine *.</returns>
</member>
<member name="M:GUIComponent.setWidget(CEGUI.Window*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="164">
<summary>
Sets the widget.
</summary>
<param name="widget">The widget.</param>
</member>
<member name="M:GUIComponent.getWidget" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="170">
<summary>
Gets the widget.
</summary>
<returns>CEGUI.Window *.</returns>
</member>
<member name="M:GUIComponent.createWidget(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="176">
<summary>
Creates a widget.
</summary>
<param name="widgetType">Type of the widget.</param>
<returns>CEGUI.Window *.</returns>
</member>
<member name="F:GUIComponent.m_parent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="199">
<summary>
The parent GameObject.
</summary>
</member>
<member name="F:GUIComponent.m_parentWidget" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="204">
<summary>
The parent widget.
</summary>
</member>
<member name="F:GUIComponent.m_widget" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="209">
<summary>
The CEGUI widget.
</summary>
</member>
<member name="F:GUIComponent.m_destRectPerc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="214">
<summary>
The destestion rectangle in percent relative to the parent window.
</summary>
</member>
<member name="F:GUIComponent.m_destRectPix" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="219">
<summary>
The destestion rectangle in pixels.
</summary>
</member>
<!-- Discarding badly formed XML document comment for member 'M:GUIComponent.#ctor(GUIComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
<member name="M:GUIComponent.op_Assign(GUIComponent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicomponent.h" line="229">
<summary>
Operator=s the specified other.
</summary>
<param name="other">The other.</param>
</member>
<member name="M:GUILabel.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="19">
<summary>
Initializes a new instance of the <see cref="T:GUILabel"/> class.
</summary>
<param name="destRectPerc">The dest rect perc.</param>
<param name="destRectPix">The dest rect pix.</param>
<param name="text">The text.</param>
</member>
<member name="M:GUILabel.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="28">
<summary>
Finalizes an instance of the <see cref="T:GUILabel"/> class.
</summary>
</member>
<member name="M:GUILabel.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="33">
<summary>
Adds to engine.
</summary>
<param name="engine">The engine.</param>
</member>
<member name="M:GUILabel.getText" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="46">
<summary>
Gets the widget's text.
</summary>
<returns>The text string of the widget.</returns>
</member>
<member name="M:GUILabel.getTextSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="52">
<summary>
Gets the widget's text size.
</summary>
<returns>The size of the text string in the widget.</returns>
</member>
<member name="M:GUILabel.getAlpha" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="58">
<summary>
Gets the widget's alpha value.
</summary>
<returns>The transperncy value of the text string of the widget.</returns>
</member>
<member name="M:GUILabel.setText(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="64">
<summary>
Sets the widget's text.
</summary>
<param name="text">The text string of the widget.</param>
</member>
<member name="M:GUILabel.setAlpha(System.Single!System.Runtime.CompilerServices.IsConst)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="74">
<summary>
Sets the widget's text alpha.
</summary>
<param name="text">The alpha value of the text string.</param>
</member>
<member name="F:GUILabel.m_text" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="81">
<summary>
The widget's text.
</summary>
</member>
<member name="F:GUILabel.m_textSize" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guilabel.h" line="86">
<summary>
The widget's text size.
</summary>
</member>
<member name="T:GUIButton" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guibutton.h" line="18">
<summary>
The class GUIBUtton is the button widget for click events.
</summary>
<seealso cref="T:GUILabel"/>
</member>
<member name="M:GUIButton.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.function&lt;(GameObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(GameObject!System.Runtime.CompilerServices.IsConst*!System.Runti" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guibutton.h" line="25">
<summary>
Initializes a new instance of the <see cref="T:GUIButton"/> class.
</summary>
<param name="destRectPerc">The size of the widget relative the parent widget.</param>
<param name="destRectPix">The size of the widget in pixels.</param>
<param name="text">The text in the button.</param>
<param name="pfcn">The function to call when the button is clicked.</param>
</member>
<member name="M:GUIButton.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guibutton.h" line="36">
<summary>
Finalizes an instance of the <see cref="T:GUIButton"/> class.
</summary>
</member>
<member name="M:GUIButton.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guibutton.h" line="41">
<summary>
Creates the widget, sets the text and subscribes the event to the button.
</summary>
<param name="engine">The engine.</param>
</member>
<member name="M:GUIButton.setOnClick(std.function&lt;(GameObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(GameObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guibutton.h" line="55">
<summary>
Sets the on click function when the button is clicked.
</summary>
<param name="pfcn">The function to call when the button is clicked.</param>
</member>
<member name="M:GUIButton.pushButton(CEGUI.EventArgs!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guibutton.h" line="71">
<summary>
The onClick function managed by CEGUI. It calls a function pointer so we can abstract CEGUI.
</summary>
<param name="e">The event handler by CEGUI.</param>
<returns>Don't know. It's for CEGUI.</returns>
</member>
<member name="F:GUIButton.f_clicked" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guibutton.h" line="85">
<summary>
The function to call when the button is clicked.
</summary>
</member>
<member name="T:GUIProgressBar" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="16">
<summary>
TThe GUIProgressBar class displays a progress bar on the screen.
</summary>
<seealso cref="T:GUIComponent"/>
</member>
<member name="M:GUIProgressBar.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="23">
<summary>
Initializes a new instance of the <see cref="T:GUIProgressBar"/> class.
</summary>
<param name="destRectPerc">The size of the widget relative the parent widget.</param>
<param name="destRectPix">The size of the widget in pixels.</param>
<param name="startPerc">The start percentage. Defaults to 1.0f (100%).</param>
<param name="stepPerc">The step percentage. Defaults to 0.1f (1%).(</param>
</member>
<member name="M:GUIProgressBar.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="32">
<summary>
Finalizes an instance of the <see cref="T:GUIProgressBar"/> class.
</summary>
</member>
<member name="M:GUIProgressBar.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="37">
<summary>
Adds to the Core Engine.
</summary>
<param name="engine">A pointer to the Core Engine.</param>
</member>
<member name="M:GUIProgressBar.step" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="49">
<summary>
Steps the progress bar by the step amount set.
Default is 0.01f (1%).
</summary>
</member>
<member name="M:GUIProgressBar.getPercent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="55">
<summary>
Gets the current percentage of the bar.
</summary>
<returns>The percentage of the bar according to the step value.</returns>
</member>
<member name="M:GUIProgressBar.getStepPercent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="60">
<summary>
Gets the step percentage.
</summary>
<returns>The step value.</returns>
</member>
<member name="M:GUIProgressBar.setPercent(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="66">
<summary>
Sets the current percentage of the bar.
</summary>
<param name="percent">The percentage of the bar right now.</param>
</member>
<member name="M:GUIProgressBar.setStepPercent(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="71">
<summary>
Sets the step percentage of the bar.
</summary>
<param name="stepPerc">The step percentage of the bar.</param>
</member>
<member name="F:GUIProgressBar.m_progressBar" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="78">
<summary>
The progress bar widget.
</summary>
</member>
<member name="F:GUIProgressBar.m_percent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="83">
<summary>
The percentage of the bar
</summary>
</member>
<member name="F:GUIProgressBar.m_stepPerc" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiprogressbar.h" line="88">
<summary>
The amount to step the progress bar.
</summary>
</member>
<member name="T:GUITextBox" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="17">
<summary>
THe class GUITextBox is a text box on the screen that you can input text into and text from.
</summary>
<seealso cref="T:GUIComponent"/>
</member>
<member name="M:GUITextBox.#ctor(physx.PxVec4*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="24">
<summary>
Initializes a new instance of the <see cref="T:GUITextBox"/> class.
</summary>
<param name="destRectPerc">The size of the widget relative the parent widget.</param>
<param name="destRectPix">The size of the widget in pixels.</param>
<param name="text">The text at the start of the text box.</param>
<param name="maxLength">The maximum text length can input in the text box.</param>
</member>
<member name="M:GUITextBox.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="34">
<summary>
Finalizes an instance of the <see cref="T:GUITextBox"/> class.
</summary>
</member>
<member name="M:GUITextBox.update(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="39">
<summary>
Virtual function for custom update functionality.
</summary>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:GUITextBox.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="56">
<summary>
Adds to Core Engine.
</summary>
<param name="engine">The Core Engine.</param>
</member>
<member name="M:GUITextBox.getText" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="72">
<summary>
Gets the text inputed in the text box.
</summary>
<returns>The text inputted.</returns>
</member>
<member name="M:GUITextBox.getMaxLength" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="77">
<summary>
Gets the maximum text length for the text box.
</summary>
<returns>The maximum character length.</returns>
</member>
<member name="M:GUITextBox.textChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="82">
<summary>
if the text in the text box has changed.
</summary>
<returns>Weather the text in the box has changed.</returns>
</member>
<member name="M:GUITextBox.setText(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="88">
<summary>
Sets the text in the text box.
</summary>
<param name="text">The text in the text box.</param>
</member>
<member name="M:GUITextBox.setMaxLength(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="96">
<summary>
Sets the maximum character length of the text box.
</summary>
<param name="maxLength">The maximum character length.</param>
</member>
<member name="F:GUITextBox.m_editbox" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="113">
<summary>
The CEGUI edit box widget.
</summary>
</member>
<member name="F:GUITextBox.m_text" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="118">
<summary>
The text box's text.
</summary>
</member>
<member name="F:GUITextBox.m_maxLength" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="123">
<summary>
The text box's maximum character length.
</summary>
</member>
<member name="F:GUITextBox.m_textChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guitextbox.h" line="128">
<summary>
If the text has changed.
</summary>
</member>
<member name="T:GUISlider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="16">
<summary>
The GUISlider class is a slider on the GUI that has a max value from 0 that the user can slide between.
</summary>
<seealso cref="T:GUIComponent"/>
</member>
<member name="M:GUISlider.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="23">
<summary>
Initializes a new instance of the <see cref="T:GUISlider"/> class.
</summary>
<param name="destRectPerc">The size of the widget relative the parent widget.</param>
<param name="destRectPix">The size of the widget in pixels.</param>
<param name="position">The slider's thumb position.</param>
<param name="maxValue">The maximum value of the slider.</param>
<param name="stepAmt">The step amount of the slider.</param>
</member>
<member name="M:GUISlider.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="34">
<summary>
Finalizes an instance of the <see cref="T:GUISlider"/> class.
</summary>
</member>
<member name="M:GUISlider.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="39">
<summary>
Adds to Core Engine.
</summary>
<param name="engine">The Core Engine.</param>
</member>
<member name="M:GUISlider.getThumbPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="54">
<summary>
Gets the thumb posiiton.
</summary>
<returns>The slider's thumb position right now.</returns>
</member>
<member name="M:GUISlider.getMaxValue" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="59">
<summary>
Gets the maximum value of the slider.
</summary>
<returns>The maximum value of the sider.</returns>
</member>
<member name="M:GUISlider.getStepAmount" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="64">
<summary>
Gets the step amount of the slider.
</summary>
<returns>The step amount of the slider.</returns>
</member>
<member name="M:GUISlider.valueChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="69">
<summary>
If the value of the thumb changed.
</summary>
<returns>Wheather the thumb value changed.</returns>
</member>
<member name="M:GUISlider.setThumbPosition(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="75">
<summary>
Sets the slider's thumb position.
</summary>
<param name="position">The slider's thumb position.</param>
</member>
<member name="M:GUISlider.setMaxValue(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="84">
<summary>
Sets the maximum value of the slider.
</summary>
<param name="maxValue">The maximum value.</param>
</member>
<member name="M:GUISlider.setStepAmount(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="93">
<summary>
Sets the step amount.
</summary>
<param name="stepAmt">The step amount.</param>
</member>
<member name="F:GUISlider.m_slider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="116">
<summary>
The slider widget.
</summary>
</member>
<member name="F:GUISlider.m_position" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="121">
<summary>
The slider's thumb position.
</summary>
</member>
<member name="F:GUISlider.m_maxValue" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="126">
<summary>
The maximum value the slider can reach.
</summary>
</member>
<member name="F:GUISlider.m_stepAmt" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="131">
<summary>
The amount to step by.
</summary>
</member>
<member name="F:GUISlider.m_valueChanged" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guislider.h" line="136">
<summary>
If slider value changed.
</summary>
</member>
<member name="T:GUIContainer" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicontainer.h" line="16">
<summary>
The GUIContainer class is a GUI widget that has a background to it and
can have children that are only inside this widget.
</summary>
<seealso cref="T:GUIComponent"/>
</member>
<member name="M:GUIContainer.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicontainer.h" line="24">
<summary>
Initializes a new instance of the <see cref="T:GUIContainer"/> class.
</summary>
<param name="destRectPerc">The dest rect perc.</param>
<param name="destRectPix">The dest rect pix.</param>
</member>
<member name="M:GUIContainer.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicontainer.h" line="31">
<summary>
Finalizes an instance of the <see cref="T:GUIContainer"/> class.
</summary>
</member>
<member name="M:GUIContainer.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guicontainer.h" line="36">
<summary>
Adds to the Core Engine.
</summary>
<param name="engine">The Core Engine.</param>
</member>
<member name="T:GUIImage" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="16">
<summary>
TThe GUIProgressBar class displays a progress bar on the screen.
</summary>
<seealso cref="T:GUIComponent"/>
</member>
<member name="M:GUIImage.#ctor(physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec4!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="23">
<summary>
Initializes a new instance of the <see cref="T:GUIProgressBar"/> class.
</summary>
<param name="destRectPerc">The size of the widget relative the parent widget.</param>
<param name="destRectPix">The size of the widget in pixels.</param>
<param name="startPerc">The start percentage. Defaults to 1.0f (100%).</param>
<param name="stepPerc">The step percentage. Defaults to 0.1f (1%).(</param>
</member>
<member name="M:GUIImage.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="40">
<summary>
Finalizes an instance of the <see cref="T:GUIProgressBar"/> class.
</summary>
</member>
<member name="M:GUIImage.addToEngine(CoreEngine*)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="54">
<summary>
Adds to the Core Engine.
</summary>
<param name="engine">A pointer to the Core Engine.</param>
</member>
<member name="F:GUIImage.s_numImages" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="71">
<summary>
The total number of GUIImage objects.
</summary>
</member>
<member name="F:GUIImage.m_image" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="76">
<summary>
The progress bar widget.
</summary>
</member>
<member name="F:GUIImage.m_imageFile" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="81">
<summary>
The image file.
</summary>
</member>
<member name="F:GUIImage.m_numImage" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\guiimage.h" line="86">
<summary>
The image number based on s_numImages;
</summary>
</member>
<member name="T:Collider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="34">
<summary>
Base abstract class that has all the functionality to handle collision.
This class will know what type of collider it is.
It will have basic physics representation in the world such as position.
It has it's own ID number to know if it is not check itself for collision or part of another collider
It also has a bool flag to know if this class collided or not
</summary>
</member>
<member name="M:Collider.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="44">
<summary>
Initializes a new instance of the <see cref="T:Collider"/> class.
</summary>
</member>
<member name="M:Collider.#ctor(Collider*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="48">
<summary>
Initializes a new instance of the <see cref="T:Collider"/> class.
</summary>
<param name="collider">The collider.</param>
</member>
<member name="M:Collider.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="53">
<summary>
Finalizes an instance of the <see cref="T:Collider"/> class.
</summary>
</member>
<member name="M:Collider.init(physx.PxVec3,physx.PxQuat,System.Single,System.Single,physx.PxVec3,physx.PxVec3,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="58">
<summary>
Initialize the member variable value of the Collider.
</summary>
<param name="position">Position of the Collider.</param>
<param name="rotation">Rotation of the Collider .</param>
<param name="scale">Scale of the Collider.</param>
<param name="mass">Mass of the Collider.</param>
<param name="velocity">Starting Velocity of the Collider.</param>
<param name="acceleration">Starting Acceleration of the Collider.</param>
<param name="id">The identifier of the Collider.</param>
</member>
<member name="M:Collider.applyRotation(physx.PxQuat)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="78">
<summary>
Rotate the Collider.
</summary>
<param name="rotation">Quaternion value of how much to rotate the Collider.</param>
</member>
<member name="M:Collider.applyForce(physx.PxVec3)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="84">
<summary>
Update force value of the Collider.
</summary>
<param name="force">A Force value of how much force is being applied to the Collider.</param>
</member>
<member name="M:Collider.applyAcceleration(physx.PxVec3)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="90">
<summary>
Update acceleration value of the Collider.
</summary>
<param name="accel">An acceleation value of how much acceleration is being applied to the Collider.</param>
</member>
<member name="M:Collider.checkCollision(std.vector&lt;Collider**,std.allocator&lt;Collider**&gt;&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="96">
<summary>
Check the collision with this Collider with the vector of Colliders.
</summary>
<param name="collidableObjects">Vectors of Colliders this collider will be checking.</param>
<returns>Vector of Collider this collider collided with.</returns>
</member>
<member name="M:Collider.createUniqueID" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="107">
<summary>
Create an ID value for this collider.
</summary>
</member>
<member name="M:Collider.update(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="112">
<summary>
Update the values of the Collider.
</summary>
<param name="timeStep">Time step from last time update to current update time (displacement of the time).</param>
</member>
<member name="M:Collider.getShapeCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="119">
<summary>
Gets the shape collider.
</summary>
<returns>The shape collider.</returns>
</member>
<member name="M:Collider.getRadiusSphere" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="128">
<summary>
Gets the radius of the sphere.
</summary>
<returns>The radius of the sphere..</returns>
</member>
<member name="M:Collider.getPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="137">
<summary>
Gets the position.
</summary>
<returns>The position vector.</returns>
</member>
<member name="M:Collider.getRotation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="146">
<summary>
Gets the rotation.
</summary>
<returns>The rotation quaternion.</returns>
</member>
<member name="M:Collider.getScale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="155">
<summary>
Gets the scale.
</summary>
<returns>The scale.</returns>
</member>
<member name="M:Collider.getMass" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="164">
<summary>
Gets the mass.
</summary>
<returns>The mass.</returns>
</member>
<member name="M:Collider.getID" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="173">
<summary>
Gets the identifier.
</summary>
<returns>The identifier.</returns>
</member>
<member name="M:Collider.getVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="182">
<summary>
Gets the velocity.
</summary>
<returns>The velocity vector.</returns>
</member>
<member name="M:Collider.getAcceleration" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="191">
<summary>
Gets the acceleration.
</summary>
<returns>The acceleration vector.</returns>
</member>
<member name="M:Collider.getCollided" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="200">
<summary>
Gets the collided.
</summary>
<returns>If it collided.</returns>
</member>
<member name="M:Collider.setRadiusSphere(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="210">
<summary>
Sets the radius of the sphere.
</summary>
<param name="id">The radius sphere.</param>
</member>
<member name="M:Collider.setPosition(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="219">
<summary>
Sets the position.
</summary>
<param name="id">The position.</param>
</member>
<member name="M:Collider.setRotation(physx.PxQuat)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="228">
<summary>
Sets the rotation.
</summary>
<param name="id">The rotation.</param>
</member>
<member name="M:Collider.setScale(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="237">
<summary>
Sets the scale.
</summary>
<param name="id">The scale.</param>
</member>
<member name="M:Collider.setMass(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="246">
<summary>
Sets the mass.
</summary>
<param name="id">The mass.</param>
</member>
<member name="M:Collider.setID(System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="255">
<summary>
Sets the identifier.
</summary>
<param name="id">The identifier.</param>
</member>
<member name="M:Collider.setVelocity(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="264">
<summary>
Sets the velocity.
</summary>
<param name="id">The velocity.</param>
</member>
<member name="M:Collider.setAcceleration(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="273">
<summary>
Sets the acceleration.
</summary>
<param name="id">The acceleration.</param>
</member>
<member name="F:Collider.m_shapeCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="283">
<summary>
The shape collider.
</summary>
</member>
<member name="F:Collider.m_radiusSphere" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="287">
<summary>
The radius sphere.
</summary>
</member>
<member name="F:Collider.m_position" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="291">
<summary>
The position vector.
</summary>
</member>
<member name="F:Collider.m_rotation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="295">
<summary>
The rotation vector.
</summary>
</member>
<member name="F:Collider.m_scale" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="299">
<summary>
The scale.
</summary>
</member>
<member name="F:Collider.m_mass" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="303">
<summary>
The mass.
</summary>
</member>
<member name="F:Collider.m_id" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="307">
<summary>
The identifier.
</summary>
</member>
<member name="F:Collider.m_velocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="311">
<summary>
The velocity vector.
</summary>
</member>
<member name="F:Collider.m_acceleration" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="315">
<summary>
The acceleration vector.
</summary>
</member>
<member name="F:Collider.m_collided" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\collider.h" line="319">
<summary>
if it has collided.
</summary>
</member>
<member name="T:SphereCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="20">
<summary>
A derived class of Collider.
This class will handle sphere to sphere collision only.
</summary>
<seealso cref="T:Collider"/>
</member>
<member name="M:SphereCollider.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="28">
<summary>
Initializes a new instance of the <see cref="T:SphereCollider"/> class.
</summary>
</member>
<member name="M:SphereCollider.#ctor(SphereCollider*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="32">
<summary>
Initializes a new instance of the <see cref="T:SphereCollider"/> class.
</summary>
<param name="collider">The collider.</param>
</member>
<member name="M:SphereCollider.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="37">
<summary>
Finalizes an instance of the <see cref="T:SphereCollider"/> class.
</summary>
</member>
<member name="M:SphereCollider.init(physx.PxVec3,physx.PxQuat,System.Single,System.Single,physx.PxVec3,physx.PxVec3,System.Single,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="42">
<summary>
Initialize the member variable value of the Sphere Collider.
</summary>
<param name="position">Position of the Sphere Collider.</param>
<param name="rotation">Rotation of the Sphere Collider .</param>
<param name="scale">Scale of the Sphere Collider.</param>
<param name="mass">Mass of the Sphere Collider.</param>
<param name="velocity">Starting Velocity of the Sphere Collider.</param>
<param name="acceleration">Starting Acceleration of the Sphere Collider.</param>
<param name="radiusSphere">Radius of the Sphere Collider.</param>
<param name="id">The identifier of the Sphere Collider.</param>
</member>
<member name="M:SphereCollider.checkCollision(std.vector&lt;Collider**,std.allocator&lt;Collider**&gt;&gt;)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="64">
<summary>
Check the collision with this Sphere Collider with the vector of Colliders.
</summary>
<param name="collidableObjects">Vectors of Colliders this Sphere Collider will be checking.</param>
<returns>Vector of Collider this Sphere Collider collided with.</returns>
</member>
<member name="M:SphereCollider.checkCollision(Collider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="71">
<summary>
Check the collision with this Sphere Collider with the Collider
</summary>
<param name="collidableObjects">Collider this Sphere Collider will be checking.</param>
<returns>Return bool flag to determine this Sphere Collider collided with the Collider</returns>
</member>
<member name="M:SphereCollider.checkCollision(physx.PxVec3,physx.PxVec3,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\spherecollider.h" line="78">
<summary>
Check the collision with this Sphere Collider with the ray
</summary>
<param name="rayPosition">Ray Position.</param>
<param name="rayDirection">Ray Direction.</param>
<returns>Return bool flag to determine this Sphere Collider collided with the ray</returns>
</member>
<member name="T:PolygonCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="21">
<summary>
A derived class of SphereCollider.
This class will handle sphere to sphere collision from base class then handle
Separating Axis Theorm collision check.
</summary>
<seealso cref="T:SphereCollider"/>
</member>
<member name="M:PolygonCollider.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="30">
<summary>
Initializes a new instance of the <see cref="T:PolygonCollider"/> class.
</summary>
</member>
<member name="M:PolygonCollider.#ctor(PolygonCollider*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="34">
<summary>
Initializes a new instance of the <see cref="T:PolygonCollider"/> class.
</summary>
<param name="collider">The collider.</param>
</member>
<member name="M:PolygonCollider.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="39">
<summary>
Finalizes an instance of the <see cref="T:PolygonCollider"/> class.
</summary>
</member>
<member name="M:PolygonCollider.init(physx.PxVec3,physx.PxQuat,System.Single,System.Single,physx.PxVec3,physx.PxVec3,System.Single,System.Single,System.Single,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="44">
<summary>
Initialize the member variable value of the Polygon Collider.
</summary>
<param name="position">Position of the Polygon Collider.</param>
<param name="rotation">Rotation of the Polygon Collider.</param>
<param name="scale">Scale of the Polygon Collider.</param>
<param name="mass">Mass of the Polygon Collider.</param>
<param name="velocity">Starting Velocity of the Polygon Collider.</param>
<param name="acceleration">Starting Acceleration of the Polygon Collider.</param>
<param name="halfWidth">Half width of the Polygon Collider.</param>
<param name="halfHeight">Half height of the Polygon Collider.</param>
<param name="halfDepth">Half depth of the Polygon Collider.</param>
<param name="id">The identifier of the Polygon Collider.</param>
</member>
<member name="M:PolygonCollider.checkCollision(std.vector&lt;Collider**,std.allocator&lt;Collider**&gt;&gt;)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="70">
<summary>
Check the collision with this Polygon Collider with the vector of Colliders
</summary>
<param name="collidableObjects">Vectors of Colliders this Polygon Collider will be checking.</param>
<returns>Vector of Collider this Polygon Collider collided with.</returns>
</member>
<member name="M:PolygonCollider.checkCollision(Collider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="77">
<summary>
Check the collision with this Polygon Collider with the Collider
</summary>
<param name="collidableObjects">Collider this Polygon Collider will be checking.</param>
<returns>Return bool flag to determine this Polygon Collider collided with the Collider</returns>
</member>
<member name="M:PolygonCollider.checkCollision(physx.PxVec3,physx.PxVec3,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="84">
<summary>
Check the collision with this Polygon Collider with the ray
</summary>
<param name="rayPosition">Ray Position.</param>
<param name="rayDirection">Ray Direction.</param>
<returns>Return bool flag to determine this Polygon Collider collided with the ray</returns>
</member>
<member name="M:PolygonCollider.checkSATCollision(PolygonCollider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="92">
<summary>
Check the collision with this Polygon Collider with the other Polygon Collider using Separating Axis Theorm.
</summary>
<param name="collidableObject">Collider this collider will be checking.</param>
<returns>Boolean telling if this collider collided with the other collider.</returns>
</member>
<member name="M:PolygonCollider.checkAxisCollision(physx.PxVec3,physx.PxVec3,physx.PxVec3,physx.PxVec3,physx.PxVec3,physx.PxVec3,physx.PxVec3,physx.PxVec3,PolygonCollider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="99">
<summary>
Check the collision with the specific axis and the Polygon Collider.
</summary>
<param name="tPosition">Vector from this Collider Position to the other Collider Position.</param>
<param name="axis">Specific axis to check.</param>
<param name="rightDirection1">Right direction of this Polygon Collider.</param>
<param name="upDirection1">Up direction of this Polygon Collider.</param>
<param name="forwardDirection1">Forward direction of this Polygon Collider.</param>
<param name="rightDirection2">Right Direction of the other Polygon Collider.</param>
<param name="upDirection2">Up Direction of the other Polygon Collider.</param>
<param name="forwardDirection2">Forward Direction of the other Polygon Collider.</param>
<param name="collidableObject">Other Polygon Collider (Collider to check with).</param>
<returns>Boolean telling if this axis collided with the other collider.</returns>
</member>
<member name="M:PolygonCollider.GetRightVector(physx.PxQuat)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="127">
<summary>
Convert the quaternion to a vector format in the x axis rotation.
</summary>
<param name="quat">Quaternion value to convert to vectors.</param>
<returns>Vector of the x axis rotation.</returns>
</member>
<member name="M:PolygonCollider.GetUpVector(physx.PxQuat)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="139">
<summary>
Convert the quaternion to a vector format in the y axis rotation.
</summary>
<param name="quat">Quaternion value to convert to vectors.</param>
<returns>Vector of the y axis rotation.</returns>
</member>
<member name="M:PolygonCollider.GetForwardVector(physx.PxQuat)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="151">
<summary>
Convert the quaternion to a vector format in the z axis rotation.
</summary>
<param name="quat">Quaternion value to convert to vectors.</param>
<returns>Vector of the z axis rotation.</returns>
</member>
<member name="M:PolygonCollider.getHalfWidth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="165">
<summary>
Gets half of the width.
</summary>
<returns>Half of the width.</returns>
</member>
<member name="M:PolygonCollider.getHalfHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="174">
<summary>
Gets half of the height.
</summary>
<returns>Half of the height.</returns>
</member>
<member name="M:PolygonCollider.getHalfDepth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="183">
<summary>
Gets half the depth.
</summary>
<returns>Half the depth.</returns>
</member>
<member name="F:PolygonCollider.m_halfWidth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="193">
<summary>
Half of the width.
</summary>
</member>
<member name="F:PolygonCollider.m_halfHeight" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="197">
<summary>
Half of the height.
</summary>
</member>
<member name="F:PolygonCollider.m_halfDepth" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\polygoncollider.h" line="201">
<summary>
Half of the depth.
</summary>
</member>
<member name="T:MultiCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="21">
<summary>
A derived class of PolygonCollider.
This class will handle sphere to sphere collision as a whole collider object from all the collider it holds
then handles all the collider in the Mulit Collider Object with its own collision check.
</summary>
<seealso cref="T:PolygonCollider"/>
</member>
<member name="M:MultiCollider.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="30">
<summary>
Initializes a new instance of the <see cref="T:MultiCollider"/> class.
</summary>
</member>
<member name="M:MultiCollider.#ctor(MultiCollider*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="34">
<summary>
Initializes a new instance of the <see cref="T:MultiCollider"/> class.
</summary>
<param name="collider">The collider.</param>
</member>
<member name="M:MultiCollider.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="39">
<summary>
Finalizes an instance of the <see cref="T:MultiCollider"/> class.
</summary>
</member>
<member name="M:MultiCollider.init(physx.PxVec3,physx.PxQuat,System.Single,System.Single,physx.PxVec3,physx.PxVec3,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="44">
<summary>
Initialize the member variable value of the Multi Collider.
</summary>
<param name="position">Position of the Multi Collider.</param>
<param name="rotation">Rotation of the Multi Collider.</param>
<param name="scale">Scale of the Multi Collider.</param>
<param name="mass">Mass of the Multi Collider.</param>
<param name="velocity">Starting Velocity of the Multi Collider.</param>
<param name="acceleration">Starting Acceleration of the Multi Collider.</param>
<param name="id">The identifier of the Multi Collider.</param>
</member>
<member name="M:MultiCollider.addColliderToObject(Collider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="64">
<summary>
Add the specific collider to the Multi Collider.
</summary>
<param name="collider">The collider that will be added to the Multi Collider.</param>
</member>
<member name="M:MultiCollider.checkCollision(std.vector&lt;Collider**,std.allocator&lt;Collider**&gt;&gt;)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="70">
<summary>
Check the collision with this Multi Collider with the vector of Colliders.
</summary>
<param name="collidableObjects">Vectors of Colliders this Multi Collider will be checking.</param>
<returns>Vector of Collider this Multi Collider collided with.</returns>
</member>
<member name="M:MultiCollider.checkCollision(Collider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="77">
<summary>
Check the collision with this Multi Collider with the Collider
</summary>
<param name="collidableObjects">Collider this Multi Collider will be checking.</param>
<returns>Return bool flag to determine this Multi Collider collided with the Collider</returns>
</member>
<member name="M:MultiCollider.multiMultiCollisionCheck(Collider*,MultiCollider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="84">
<summary>
Check the collision with the specific Collider in the Multi Collider with the other Multi Collider Object (Different Multi Collider objects).
</summary>
<param name="mulitSpecficCollider">Specific Collider in the Multi Collider.</param>
<param name="multiCollider">Other Multi Collider this Collider is checking.</param>
<returns>Boolean telling if the specific collider in the Multi Collider collided with the other Multi Collider.</returns>
</member>
<member name="M:MultiCollider.applyRotation(physx.PxQuat)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="92">
<summary>
Rotate the Multi Collider and the collider in the Multi Collider.
</summary>
<param name="rotation">Quaternion value of how much to rotate the Colliders.</param>
</member>
<member name="M:MultiCollider.applyForce(physx.PxVec3)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="98">
<summary>
Update force value of the Multi Collider and the collider in the Multi Collider.
</summary>
<param name="force">A Force value of how much force is being applied to the Colliders.</param>
</member>
<member name="M:MultiCollider.applyAcceleration(physx.PxVec3)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="104">
<summary>
Update acceleration value of the Multi Collider and the collider in the Multi Collider.
</summary>
<param name="accel">A Acceleation value of how much acceleration is being applied to the Colliders.</param>
</member>
<member name="M:MultiCollider.update(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="110">
<summary>
Update the values of the Multi Collider and the collider in the Multi Collider.
</summary>
<param name="timeStep">Time step from last time update to current update time (displacement of the time).</param>
</member>
<member name="M:MultiCollider.getMultiCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="117">
<summary>
Gets the multi collider.
</summary>
<returns>The vector colliders.</returns>
</member>
<member name="F:MultiCollider.m_multipleCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="127">
<summary>
The multiple collider.
</summary>
</member>
<member name="F:MultiCollider.m_distanceColliderFromCenterOfGravity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\multicollider.h" line="131">
<summary>
The distance this collider is from the center of gravity
</summary>
</member>
<member name="T:World" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="20">
<summary>
A basic physics world that updates all the Collider collision and physics.
It has a position and radius for culling out any collider to update by using distance check.
</summary>
</member>
<member name="M:World.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="27">
<summary>
Initializes a new instance of the <see cref="T:World"/> class.
</summary>
</member>
<member name="M:World.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="31">
<summary>
Finalizes an instance of the <see cref="T:World"/> class.
</summary>
</member>
<member name="M:World.init(physx.PxVec3,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="36">
<summary>
Initialize the member variable value of the World.
</summary>
<param name="position">Position of the World.</param>
<param name="radius">Radius of the World (Sphere World).</param>
</member>
<member name="M:World.update(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="43">
<summary>
Update all the Colliders in the World.
</summary>
<param name="timeStep">Time step from last time update to current update time (displacement of the time).</param>
</member>
<member name="M:World.checkInsideWorld(Collider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="49">
<summary>
Check to see if the Collider is inside the World space.
</summary>
<param name="collidableObject">Specific Collider to check if its inside the World.</param>
<returns>Boolean telling if the Specific Collider is inside the World.</returns>
</member>
<member name="M:World.addCollidableObject(Collider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="56">
<summary>
Add the specific collider to the World.
</summary>
<param name="collidableObject">The collider that will be added to the World.</param>
</member>
<member name="M:World.removeCollidableObject(Collider*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="62">
<summary>
Remove the specific collider to the World.
</summary>
<param name="collidableObject">The collider that will be added to the World.</param>
</member>
<member name="M:World.calculateCollision(Collider*,Collider*,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="68">
<summary>
Apply a rebound acceleration to the first Collider object from the 2 Colliders colliding.
</summary>
<param name="obj1">The first collider object of the 2 Colliders colliding.</param>
<param name="obj2">The second collider object of the 2 Colliders colliding.</param>
<param name="timeStep">Time step from last time update to current update time (displacement of the time).</param>
</member>
<member name="M:World.getPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="77">
<summary>
Gets the position vector.
</summary>
<returns>The position vector.</returns>
</member>
<member name="M:World.getRadius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="86">
<summary>
Gets the radius.
</summary>
<returns>The radius.</returns>
</member>
<member name="M:World.getColliders" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="95">
<summary>
Gets the colliders.
</summary>
<returns>The colliders.</returns>
</member>
<member name="M:World.setPosition(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="106">
<summary>
Sets the position vector.
</summary>
<param name="newPosition">The new position.</param>
</member>
<member name="M:World.setRadius(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="115">
<summary>
Sets the radius.
</summary>
<param name="newRadius">The new radius.</param>
</member>
<member name="F:World.colliders" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="125">
<summary>
The vector of colliders.
</summary>
</member>
<member name="F:World.m_position" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="130">
<summary>
The position vector.
</summary>
</member>
<member name="F:World.m_radius" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="135">
<summary>
The radius.
</summary>
</member>
<member name="F:World.m_delayCollisionCheck" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\world.h" line="140">
<summary>
The collision delay check.
</summary>
</member>
<member name="T:PhysicsEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="18">
<summary>
The Physics Engine class that updates the physics world.
</summary>
</member>
<member name="M:PhysicsEngine.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="24">
<summary>
Initializes a new instance of the <see cref="T:PhysicsEngine"/> class.
</summary>
</member>
<member name="M:PhysicsEngine.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="28">
<summary>
Finalizes an instance of the <see cref="T:PhysicsEngine"/> class.
</summary>
</member>
<member name="M:PhysicsEngine.updatePhysicsEngine(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="33">
<summary>
Updates the physics engine.
</summary>
<param name="timeStep">The time step.</param>
</member>
<member name="M:PhysicsEngine.getPhysicsWorld" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="39">
<summary>
Gets the physics world.
</summary>
<returns>World *.</returns>
</member>
<member name="M:PhysicsEngine.setMainCamera(Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="48">
<summary>
Sets the main camera in the scene using this physics world.
</summary>
<param name="camera">The camera.</param>
</member>
<member name="F:PhysicsEngine.m_physicsWorld" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="55">
<summary>
The physics world.
</summary>
</member>
<member name="F:PhysicsEngine.m_mainCamera" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\physics\physicsengine.h" line="60">
<summary>
The main camera in this physics world
</summary>
</member>
<member name="M:RigidBody.#ctor(physx.PxVec3,physx.PxQuat,System.Single,System.Single,physx.PxVec3,physx.PxVec3,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="30">
<summary>
Initializes a new instance of the <see cref="T:RigidBody"/> class
This instance specialized for Sphere Colliders
</summary>
<param name="mass">The mass.</param>
<param name="radius">The radius.</param>
<param name="id">The identifier.</param>
</member>
<member name="M:RigidBody.#ctor(physx.PxVec3,physx.PxQuat,System.Single,System.Single,System.Single,System.Single,physx.PxVec3,physx.PxVec3,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="61">
<summary>
Initializes a new instance of the <see cref="T:RigidBody"/> class.
This instance specialized for Polygonal Collider
</summary>
<param name="halfWidth">Width of the half.</param>
<param name="halfHeight">Height of the half.</param>
<param name="halfDepth">The half depth.</param>
<param name="id">The identifier.</param>
</member>
<member name="M:RigidBody.#ctor(physx.PxVec3,physx.PxQuat,System.Single,physx.PxVec3,physx.PxVec3,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="98">
<summary>
Initializes a new instance of the <see cref="T:RigidBody"/> class.
This instance specialized for Multi Colliders
</summary>
<param name="mass">The mass.</param>
<param name="id">The identifier.</param>
</member>
<member name="M:RigidBody.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="127">
<summary>
Finalizes an instance of the <see cref="T:RigidBody"/> class.
</summary>
</member>
<member name="M:RigidBody.init(physx.PxVec3,physx.PxQuat,physx.PxVec3,physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="149">
<summary>
Initializes the rigidbody <see cref="T:RigidBody"/> class
</summary>
<param name="mass">The position.</param>
<param name="radius">The rotation.</param>
<param name="id">The velocity.</param>
<param name="id">The acceleration.</param>
</member>
<member name="M:RigidBody.update(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="185">
<summary>
Updates the collider every frame
- updates the position and the rotation of the collider every frame
</summary>
<param name="deltaTime">The delta time.</param>
</member>
<member name="M:RigidBody.updateVelocity(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="211">
<summary>
Updates the velocity of the collider.
</summary>
<param name="velocity">The velocity.</param>
</member>
<member name="M:RigidBody.updateAcceleration(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="231">
<summary>
Updates the acceleration of the collider.
</summary>
<param name="acceleration">The acceleration.</param>
</member>
<member name="M:RigidBody.updateRotation(physx.PxQuat)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="251">
<summary>
Updates the rotation of the collider.
</summary>
<param name="rotation">The rotation.</param>
</member>
<member name="M:RigidBody.addCollider(Collider*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="271">
<summary>
Adds a collider to the multicollider.
</summary>
<param name="collider">The collider.</param>
<returns></returns>
</member>
<member name="M:RigidBody.render(Shader!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,RenderingEngine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Camera3D!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="293">
<summary>
Renders the specified shader using debug draw mode.
</summary>
<param name="shader">The shader.</param>
<param name="renderingEngine">The rendering engine.</param>
<param name="camera">The camera.</param>
</member>
<member name="M:RigidBody.checkCollision(std.vector&lt;GameObject**,std.allocator&lt;GameObject**&gt;&gt;)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="360">
<summary>
Checks collision with this rigidbody and vectors of gameobjects.
</summary>
<param name="rotation">The vectors of gameobjects to check collision.</param>
</member>
<member name="M:RigidBody.getPosition" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="383">
<summary>
Gets the position of the collider.
</summary>
<returns></returns>
</member>
<member name="M:RigidBody.getVelocity" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="404">
<summary>
Gets the velocity of the collider.
</summary>
<returns></returns>
</member>
<member name="M:RigidBody.getRotation" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="413">
<summary>
Gets the rotation of the collider.
</summary>
<returns></returns>
</member>
<member name="M:RigidBody.getCollided" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="434">
<summary>
Gets the boolean flag of the collider colliding.
</summary>
<returns></returns>
</member>
<member name="M:RigidBody.getCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="455">
<summary>
Gets the collider.
</summary>
<returns></returns>
</member>
<member name="M:RigidBody.setDebugDraw(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="476">
<summary>
Sets the debug draw mode.
</summary>
<param name="debugDraw">if set to <c>true</c> [debug draw].</param>
</member>
<member name="M:RigidBody.setPosition(physx.PxVec3)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="485">
<summary>
Sets the position of the collider.
</summary>
<param name="rotation">The position.</param>
</member>
<member name="M:RigidBody.setRotation(physx.PxQuat)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="505">
<summary>
Sets the rotation of the collider.
</summary>
<param name="rotation">The rotation.</param>
</member>
<member name="F:RigidBody.m_sphereCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="527">
<summary>
The sphere collider
</summary>
</member>
<member name="F:RigidBody.m_polyCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="531">
<summary>
The poly collider
</summary>
</member>
<member name="F:RigidBody.m_multiCollider" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="535">
<summary>
The multi collider
</summary>
</member>
<member name="F:RigidBody.m_zero" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="540">
<summary>
The position of this collider
</summary>
<summary>
The rotation of this collider
</summary>
<summary>
The zero variable
</summary>
</member>
<member name="F:RigidBody.m_debugDraw" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\rigidbody.h" line="554">
<summary>
The debug draw boolean set this to true to draw the colliders
</summary>
</member>
<member name="T:AudioEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="23">
<summary>
The Audio Engine that holds audio settings such as the sound and stream
volume and the FMOD system.
</summary>
</member>
<member name="M:AudioEngine.#ctor" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="30">
<summary>
Initializes a new instance of the <see cref="T:AudioEngine"/> class.
</summary>
</member>
<member name="M:AudioEngine.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="34">
<summary>
Finalizes an instance of the <see cref="T:AudioEngine"/> class.
</summary>
</member>
<member name="M:AudioEngine.update" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="39">
<summary>
Updates the FMOD system. This is used for updating the 3D portions.
</summary>
</member>
<member name="M:AudioEngine.getSoundVolume" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="44">
<summary>
Gets the sound volume.
</summary>
<returns>The sound group volume.</returns>
</member>
<member name="M:AudioEngine.getStreamVolume" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="49">
<summary>
Gets the stream volume.
</summary>
<returns>The sound group volume.</returns>
</member>
<member name="M:AudioEngine.getSoundGroup" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="54">
<summary>
Gets the sound group.
</summary>
<returns>The sound group.</returns>
</member>
<member name="M:AudioEngine.getStreamGroup" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="59">
<summary>
Gets the stream group.
</summary>
<returns>The stream group.</returns>
</member>
<member name="M:AudioEngine.getSystem" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="64">
<summary>
Gets the FMOD system.
</summary>
<returns>The FMOD system</returns>
</member>
<member name="M:AudioEngine.setSoundVolume(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="70">
<summary>
Sets the sound volume.
</summary>
<param name="volume">The volume.</param>
</member>
<member name="M:AudioEngine.setStreamVolume(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="75">
<summary>
Sets the stream volume.
</summary>
<param name="volume">The volume.</param>
</member>
<member name="F:AudioEngine.m_system" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="82">
<summary>
The FMOD system.
</summary>
</member>
<member name="F:AudioEngine.m_sounds" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="87">
<summary>
The sound channel group.
</summary>
</member>
<member name="F:AudioEngine.m_streams" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="92">
<summary>
The stream channel group.
</summary>
</member>
<member name="F:AudioEngine.m_masterGroup" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audioengine.h" line="97">
<summary>
The master channel group. Has all the other channels and sounds.
</summary>
</member>
<member name="T:AudioDimension" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="21">
<summary>
Wheather the audio is 2D or 3D.
</summary>
</member>
<member name="T:Audio" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="26">
<summary>
The audio class that holds the data for the audio such as the sound data itself
and the channel it is playing in. It has a virtual function that is dependent on what
kind of audio it creates, i.e. sound or stream.
</summary>
</member>
<member name="M:Audio.#ctor(AudioEngine*)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="34">
<summary>
Initializes a new instance of the <see cref="T:Audio"/> class.
</summary>
<param name="audioEngine">The audio engine.</param>
</member>
<member name="M:Audio.Dispose" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="39">
<summary>
Finalizes an instance of the <see cref="T:Audio"/> class.
</summary>
</member>
<member name="M:Audio.createAudio(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AudioDimension)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="44">
<summary>
A pure virtual function that creates the audio data based on the file path.
</summary>
<param name="fileName">Name of the file.</param>
<param name="audioDim">The audio dimension (2D or 3D).</param>
</member>
<member name="M:Audio.play" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="51">
<summary>
A virtual function that plays the audio based on what type of audio it is.
</summary>
</member>
<member name="M:Audio.stop" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="55">
<summary>
Stops playing the audio. It goes back to the beginning of the audio stored.
</summary>
</member>
<member name="M:Audio.set3DDistance(System.Single,System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="60">
<summary>
Sets the roll of distance from the listener.
</summary>
<param name="min">The minimum distance where how audible the music is one-to-one to the channel's volume.</param>
<param name="max">The maximum distance where how audible the music is completely muted.</param>
</member>
<member name="M:Audio.setPaused(System.Boolean)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="66">
<summary>
Sets the audio to be paused.
</summary>
<param name="paused">Whether the audio is paused.</param>
</member>
<member name="M:Audio.setPosition(physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,physx.PxVec3!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="71">
<summary>
Sets the position of the audio if the audio is 3D.
</summary>
<param name="pos">The position of the audio.</param>
<param name="vel">The velocity of the audio.</param>
</member>
<member name="M:Audio.setVolume(System.Single)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="77">
<summary>
Sets the volume.
</summary>
<param name="volume">The volume.</param>
</member>
<member name="M:Audio.setLooping(System.Boolean,System.Int32)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="82">
<summary>
Sets if the audio is looping and how many times.
</summary>
<param name="looping">Whether the audio is looping.</param>
<param name="amount">The amount of times to loop. 0 = oneshot, 1 = loop once then stop, -1 = loop forever and default = -1.</param>
</member>
<member name="M:Audio.isPaused" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="89">
<summary>
Determines whether this audio is paused.
</summary>
<returns>Whether the audio is paused.</returns>
</member>
<member name="M:Audio.isPlaying" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="94">
<summary>
Determines whether this audio is playing.
</summary>
<returns>Whether the audio is playing.</returns>
</member>
<member name="M:Audio.getVolume" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="99">
<summary>
Gets the volume.
</summary>
<returns>The volume.</returns>
</member>
<member name="M:Audio.getLooping" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="104">
<summary>
If the audio is looping.
</summary>
<returns>Whether the audio is looping.</returns>
</member>
<member name="F:Audio.m_audioEngine" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="111">
<summary>
The Audio Engine.
</summary>
</member>
<member name="F:Audio.m_sound" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="116">
<summary>
The sound data structure. This is where the audio data is stored.
</summary>
</member>
<member name="F:Audio.m_channel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="121">
<summary>
The channel the audio is playing in. Only filled if it is currently playing.
</summary>
</member>
<member name="T:Sound" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="128">
<summary>
Creates data used for sound. It loads the entire sound file into memory.
Do not use this for long and big sound files.
</summary>
<seealso cref="T:Audio"/>
</member>
<member name="M:Sound.#ctor(AudioEngine*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AudioDimension)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="136">
<summary>
Initializes a new instance of the <see cref="T:Sound"/> class.
</summary>
<param name="audioEngine">The audio engine.</param>
<param name="fileName">Name of the file.</param>
<param name="audioDim">The audio dimemsion (2D or 3D).</param>
</member>
<member name="M:Sound.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="147">
<summary>
Finalizes an instance of the <see cref="T:Sound"/> class.
</summary>
</member>
<member name="M:Sound.createAudio(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AudioDimension)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="152">
<summary>
Creates the audio based on sound.
</summary>
<param name="fileName">Name of the file.</param>
<param name="audioDim">The audio dimension (2D or 3D).</param>
</member>
<member name="M:Sound.play" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="159">
<summary>
Plays the sound and stores it into the Audio Engine's sound group.
</summary>
</member>
<member name="T:Stream" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="165">
<summary>
Creates data based on streams. It loads some of the audio data into memory
and streams the rest of the data while it is playing. This is used for large
audio files.
</summary>
<seealso cref="T:Audio"/>
</member>
<member name="M:Stream.#ctor(AudioEngine*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AudioDimension)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="174">
<summary>
Initializes a new instance of the <see cref="T:Stream"/> class.
</summary>
<param name="audioEngine">The audio engine.</param>
<param name="fileName">Name of the file.</param>
<param name="audioDim">The audio dimension (2D or 3D).</param>
</member>
<member name="M:Stream.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="185">
<summary>
Finalizes an instance of the <see cref="T:Stream"/> class.
</summary>
</member>
<member name="M:Stream.createAudio(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AudioDimension)" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="190">
<summary>
Creates the based on streams.
</summary>
<param name="fileName">Name of the file.</param>
<param name="audioDim">The audio dimension (2D or 3D).</param>
</member>
<member name="M:Stream.play" decl="true" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\audio\audio.h" line="197">
<summary>
Plays the stream and stores the stream in Audio Engine's stream group.
</summary>
</member>
<member name="T:AudioType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="17">
<summary>
Whether the type of audio is a sound or stream.
Can add to this later.
</summary>
</member>
<member name="T:AudioSource" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="23">
<summary>
The source of audio to play. It can be a sound or stream (long/big files).
</summary>
<seealso cref="T:GameComponent"/>
</member>
<member name="M:AudioSource.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AudioType,System.Boolean,AudioDimension)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="30">
<summary>
Initializes a new instance of the <see cref="T:AudioSource"/> class.
</summary>
<param name="fileName">Name of the file.</param>
<param name="audioType">Type of the audio.</param>
<param name="playOnStart">Whether the audio should play on start.</param>
<param name="audioDim">The audio dimension  (2D or 3D).</param>
</member>
<member name="M:AudioSource.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="39">
<summary>
Finalizes an instance of the <see cref="T:AudioSource"/> class.
</summary>
</member>
<member name="M:AudioSource.onStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="46">
<summary>
An initialization method for game components that is called
when game components are added to the scene.
Creates the sound based on what type of audio is and plays it
if play on start is enabled.
</summary>
</member>
<member name="M:AudioSource.update(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="69">
<summary>
Virtual function for custom update functionality.
Updates the position of the audio is the type is 3D.
</summary>
<param name="delta">The frame time delta.</param>
</member>
<member name="M:AudioSource.play" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="82">
<summary>
Plays the audio.
</summary>
</member>
<member name="M:AudioSource.stop" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="86">
<summary>
Stops the audio.
</summary>
</member>
<member name="M:AudioSource.set3DDistance(System.Single,System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="91">
<summary>
Sets the roll of distance from the listener.
</summary>
<param name="min">The minimum distance where how audible the music is one-to-one to the channel's volume.</param>
<param name="max">The maximum distance where how audible the music is completely muted.</param>
</member>
<member name="M:AudioSource.setWasPlaying(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="97">
<summary>
Sets whether the audio was playing when the scene was pushed onto the stack.
</summary>
<param name="paused">Whether the audio was playing.</param>
</member>
<member name="M:AudioSource.setPaused(System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="102">
<summary>
Sets the audio to be paused.
</summary>
<param name="paused">Whether the audio is paused.</param>
</member>
<member name="M:AudioSource.setVolume(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="107">
<summary>
Sets the volume.
</summary>
<param name="volume">The volume.</param>
</member>
<member name="M:AudioSource.setLooping(System.Boolean,System.Int32)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="112">
<summary>
Sets if the audio is looping and how many times.
</summary>
<param name="looping">Whether the audio is looping.</param>
<param name="amount">The amount of times to loop. 0 = oneshot, 1 = loop once then stop, -1 = loop forever and default = -1.</param>
</member>
<member name="M:AudioSource.getType" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="119">
<summary>
Gets the type of audio.
</summary>
<returns>The type of audio (sound or stream).</returns>
</member>
<member name="M:AudioSource.getDimension" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="124">
<summary>
Gets the audio's dimension.
</summary>
<returns>The audio's demnsion (2D or 3D).</returns>
</member>
<member name="M:AudioSource.wasPlaying" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="129">
<summary>
Whether the audio was playing when a scene was pushed onto the stack.
</summary>
<returns>If the audio was playing.</returns>
</member>
<member name="M:AudioSource.isPaused" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="134">
<summary>
Determines whether this audio is paused.
</summary>
<returns>Whether the audio is paused.</returns>
</member>
<member name="M:AudioSource.isPlaying" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="139">
<summary>
Determines whether this audio is playing.
</summary>
<returns>Whether the audio is playing.</returns>
</member>
<member name="M:AudioSource.getVolume" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="144">
<summary>
Gets the volume.
</summary>
<returns>The volume.</returns>
</member>
<member name="M:AudioSource.getLooping" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="149">
<summary>
If the audio is looping.
</summary>
<returns>Whether the audio is looping.</returns>
</member>
<member name="F:AudioSource.m_audio" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="156">
<summary>
The audio data.
</summary>
</member>
<member name="F:AudioSource.m_fileName" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="161">
<summary>
The file name
</summary>
</member>
<member name="F:AudioSource.m_type" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="166">
<summary>
The type of audio (sound or stream).
</summary>
</member>
<member name="F:AudioSource.m_dim" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="171">
<summary>
The dimension (2D or 3D).
</summary>
</member>
<member name="F:AudioSource.m_playOnStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="176">
<summary>
Whether the audio plays on start.
</summary>
</member>
<member name="F:AudioSource.m_wasPlaying" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\megaengine\components\audiosource.h" line="181">
<summary>
Whether the audio was playing when a scene got pushed onto the stack.
</summary>
</member>
<member name="T:Importance" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="15">
<summary>
The importance of a message determines whether or not this message
will be displayed. If this message is critically important to the 
player, it will be displayed instead of something less critical
ie. "Health is dangerously low!! Return to passenger ship for repairs!"
is more important than, "Ship is undergoing repairs..."
</summary>
</member>
<member name="M:DialogueBox.#ctor" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="34">
<summary>
Initializes a new instance of the <see cref="T:DialogueBox"/> class.
</summary>
</member>
<member name="M:DialogueBox.Dispose" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="38">
<summary>
Finalizes an instance of the <see cref="T:DialogueBox"/> class.
</summary>
</member>
<member name="M:DialogueBox.onStart" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="43">
<summary>
Sets variables 
</summary>
</member>
<member name="M:DialogueBox.sendMessage(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Importance,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="52">
<summary>
Sets the Message to display.
</summary>
<param name="newText">The new message.</param>
</member>
<member name="M:DialogueBox.sendLastingMessage(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Importance,System.Boolean)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="84">
<summary>
Sets the Message to display.
</summary>
<param name="newText">The new message.</param>
</member>
<member name="M:DialogueBox.setTextSettings(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="112">
<summary>
Sets the text settings.
<code> [font='DejaVuSans-12'][padding='l:5 t:0 r:5 b:0'][colour='FFFF0000'] </code>
</summary>
<param name="newSettings">The new settings.</param>
</member>
<member name="M:DialogueBox.restoreTextSettings" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="119">
<summary>
Restores the text settings.
</summary>
</member>
<member name="M:DialogueBox.update(System.Single)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="124">
<summary>
Updates the GUI label text
</summary>
<param name="deltaTime">delta time.</param>
</member>
<member name="M:DialogueBox.multiLineTool(System.UInt32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="157">
<summary>
Recursive method that breaks the message 
into lines no longer than 25 characters
</summary>
<param name="index">The index.</param>
<param name="text">the message</param>
<returns></returns>
</member>
<member name="F:DialogueBox.m_textSettings" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="200">
<summary>
The current text settings
</summary>
</member>
<member name="F:DialogueBox.m_originalSettings" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="204">
<summary>
The original text settings
<code> [font='DejaVuSans-12'][padding='l:5 t:0 r:5 b:0'] </code>
</summary>
</member>
<member name="F:DialogueBox.m_message" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="209">
<summary>
The message to display
</summary>
</member>
<member name="F:DialogueBox.m_defaultMessage" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="213">
<summary>
The default message for the dialogue box
</summary>
</member>
<member name="F:DialogueBox.m_guiLabel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="217">
<summary>
The gui label
</summary>
</member>
<member name="F:DialogueBox.m_timeMessageWasSent" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="221">
<summary>
Counter that is used to determine when to erase the last message.
</summary>
</member>
<member name="F:DialogueBox.m_eraseTime" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="225">
<summary>
The amount of time to keep a message alive before restoring the default message
</summary>
</member>
<member name="F:DialogueBox.m_lineLength" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="229">
<summary>
The length the line is allowed to be before a newline is inserted
</summary>
</member>
<member name="F:DialogueBox.m_messageReceived" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="233">
<summary>
The received message
</summary>
</member>
<member name="F:DialogueBox.m_importanceLevel" decl="false" source="c:\users\jesse derochie\documents\github\people-of-earth\peopleofearth-game\dialoguebox.h" line="237">
<summary>
The importance level of the current message
</summary>
</member>
</members>
</doc>